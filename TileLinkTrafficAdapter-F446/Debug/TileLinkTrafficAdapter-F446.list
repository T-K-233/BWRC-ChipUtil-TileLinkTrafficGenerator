
TileLinkTrafficAdapter-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b2c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d10  08005d10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d18  08005d18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000010  08005d2c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  08005d2c  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010276  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002313  00000000  00000000  000302b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00033368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234bf  00000000  00000000  00034030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011509  00000000  00000000  000574ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d23d6  00000000  00000000  000689f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013adce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  0013ae20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005cd8 	.word	0x08005cd8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005cd8 	.word	0x08005cd8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_IC_CaptureCallback>:

TileLinkController tl;

char str[128];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000510:	4b4e      	ldr	r3, [pc, #312]	; (800064c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2200      	movs	r2, #0
 8000516:	625a      	str	r2, [r3, #36]	; 0x24

  if (tl.tx_pending) {
 8000518:	4b4d      	ldr	r3, [pc, #308]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 800051a:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 800051e:	2b00      	cmp	r3, #0
 8000520:	d04b      	beq.n	80005ba <HAL_TIM_IC_CaptureCallback+0xb2>
    tl.tx_bit_offset = 0;
 8000522:	4b4b      	ldr	r3, [pc, #300]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000524:	2200      	movs	r2, #0
 8000526:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl.tx_frame.buffer[tl.tx_bit_offset]);
 800052a:	4b49      	ldr	r3, [pc, #292]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 800052c:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8000530:	461a      	mov	r2, r3
 8000532:	4b47      	ldr	r3, [pc, #284]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000534:	4413      	add	r3, r2
 8000536:	7edb      	ldrb	r3, [r3, #27]
 8000538:	461a      	mov	r2, r3
 800053a:	2101      	movs	r1, #1
 800053c:	4845      	ldr	r0, [pc, #276]	; (8000654 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800053e:	f001 ffdb 	bl	80024f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 8000542:	2201      	movs	r2, #1
 8000544:	2101      	movs	r1, #1
 8000546:	4844      	ldr	r0, [pc, #272]	; (8000658 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000548:	f001 ffd6 	bl	80024f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	2102      	movs	r1, #2
 8000550:	4840      	ldr	r0, [pc, #256]	; (8000654 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000552:	f001 ffd1 	bl	80024f8 <HAL_GPIO_WritePin>

    // transmit all packets
    while (tl.tx_bit_offset < TL_SERDES_TOTAL_SIZE) {
 8000556:	e01d      	b.n	8000594 <HAL_TIM_IC_CaptureCallback+0x8c>
      // wait for next clock
      while (__HAL_TIM_GET_COUNTER(&htim2) < PERIOD_TICKS) {}
 8000558:	bf00      	nop
 800055a:	4b3c      	ldr	r3, [pc, #240]	; (800064c <HAL_TIM_IC_CaptureCallback+0x144>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000560:	2b31      	cmp	r3, #49	; 0x31
 8000562:	d9fa      	bls.n	800055a <HAL_TIM_IC_CaptureCallback+0x52>
      __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000564:	4b39      	ldr	r3, [pc, #228]	; (800064c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2200      	movs	r2, #0
 800056a:	625a      	str	r2, [r3, #36]	; 0x24

      HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl.tx_frame.buffer[tl.tx_bit_offset]);
 800056c:	4b38      	ldr	r3, [pc, #224]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 800056e:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8000572:	461a      	mov	r2, r3
 8000574:	4b36      	ldr	r3, [pc, #216]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000576:	4413      	add	r3, r2
 8000578:	7edb      	ldrb	r3, [r3, #27]
 800057a:	461a      	mov	r2, r3
 800057c:	2101      	movs	r1, #1
 800057e:	4835      	ldr	r0, [pc, #212]	; (8000654 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000580:	f001 ffba 	bl	80024f8 <HAL_GPIO_WritePin>
      tl.tx_bit_offset += 1;
 8000584:	4b32      	ldr	r3, [pc, #200]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000586:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 800058a:	3301      	adds	r3, #1
 800058c:	b29a      	uxth	r2, r3
 800058e:	4b30      	ldr	r3, [pc, #192]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000590:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
    while (tl.tx_bit_offset < TL_SERDES_TOTAL_SIZE) {
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000596:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 800059a:	2b7a      	cmp	r3, #122	; 0x7a
 800059c:	d9dc      	bls.n	8000558 <HAL_TIM_IC_CaptureCallback+0x50>
    }

    HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2102      	movs	r1, #2
 80005a2:	482c      	ldr	r0, [pc, #176]	; (8000654 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80005a4:	f001 ffa8 	bl	80024f8 <HAL_GPIO_WritePin>
    tl.tx_finished = 1;
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    tl.tx_pending = 0;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244

    return;
 80005b8:	e044      	b.n	8000644 <HAL_TIM_IC_CaptureCallback+0x13c>
  }


  if (tl.rx_pending) {
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 80005bc:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d03f      	beq.n	8000644 <HAL_TIM_IC_CaptureCallback+0x13c>
    tl.rx_bit_offset = 0;
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246

    // wait for valid
    while (HAL_GPIO_ReadPin(TL_MISO_Valid_GPIO_Port, TL_MISO_Valid_Pin) != GPIO_PIN_SET) {}
 80005cc:	bf00      	nop
 80005ce:	2102      	movs	r1, #2
 80005d0:	4821      	ldr	r0, [pc, #132]	; (8000658 <HAL_TIM_IC_CaptureCallback+0x150>)
 80005d2:	f001 ff79 	bl	80024c8 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d1f8      	bne.n	80005ce <HAL_TIM_IC_CaptureCallback+0xc6>

    while (tl.rx_bit_offset < TL_SERDES_TOTAL_SIZE) {
 80005dc:	e01f      	b.n	800061e <HAL_TIM_IC_CaptureCallback+0x116>
      // wait for next clock
      while (__HAL_TIM_GET_COUNTER(&htim2) < PERIOD_TICKS) {}
 80005de:	bf00      	nop
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <HAL_TIM_IC_CaptureCallback+0x144>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e6:	2b31      	cmp	r3, #49	; 0x31
 80005e8:	d9fa      	bls.n	80005e0 <HAL_TIM_IC_CaptureCallback+0xd8>
      __HAL_TIM_SET_COUNTER(&htim2, 0);
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <HAL_TIM_IC_CaptureCallback+0x144>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	; 0x24

      tl.rx_frame.buffer[tl.rx_bit_offset] = HAL_GPIO_ReadPin(TL_MISO_Data_GPIO_Port, TL_MISO_Data_Pin);
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 80005f4:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 80005f8:	461c      	mov	r4, r3
 80005fa:	2110      	movs	r1, #16
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <HAL_TIM_IC_CaptureCallback+0x150>)
 80005fe:	f001 ff63 	bl	80024c8 <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000608:	4423      	add	r3, r4
 800060a:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
      tl.rx_bit_offset += 1;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000610:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8000614:	3301      	adds	r3, #1
 8000616:	b29a      	uxth	r2, r3
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 800061a:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
    while (tl.rx_bit_offset < TL_SERDES_TOTAL_SIZE) {
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000620:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8000624:	2b7a      	cmp	r3, #122	; 0x7a
 8000626:	d9da      	bls.n	80005de <HAL_TIM_IC_CaptureCallback+0xd6>
    }

    HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2101      	movs	r1, #1
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <HAL_TIM_IC_CaptureCallback+0x150>)
 800062e:	f001 ff63 	bl	80024f8 <HAL_GPIO_WritePin>
    tl.rx_finished = 1;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000634:	2201      	movs	r2, #1
 8000636:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
    tl.rx_pending = 0;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_TIM_IC_CaptureCallback+0x148>)
 800063c:	2200      	movs	r2, #0
 800063e:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a

    return;
 8000642:	bf00      	nop
  }
}
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	bd90      	pop	{r4, r7, pc}
 800064a:	bf00      	nop
 800064c:	2000034c 	.word	0x2000034c
 8000650:	20000030 	.word	0x20000030
 8000654:	40020800 	.word	0x40020800
 8000658:	40020000 	.word	0x40020000

0800065c <HAL_UARTEx_RxEventCallback>:
uint8_t serial_rx_buffer[SERIAL_BUFFER_SIZE];
uint8_t serial_tx_buffer[SERIAL_BUFFER_SIZE];

uint8_t frame_pending = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	8079      	strh	r1, [r7, #2]
  if (huart == &huart2) {
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	481f      	ldr	r0, [pc, #124]	; (80006e8 <HAL_UARTEx_RxEventCallback+0x8c>)
 800066a:	4281      	cmp	r1, r0
 800066c:	d133      	bne.n	80006d6 <HAL_UARTEx_RxEventCallback+0x7a>

    tl.tx_frame.chanid  = *(serial_rx_buffer);
 800066e:	491f      	ldr	r1, [pc, #124]	; (80006ec <HAL_UARTEx_RxEventCallback+0x90>)
 8000670:	7808      	ldrb	r0, [r1, #0]
 8000672:	491f      	ldr	r1, [pc, #124]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 8000674:	7008      	strb	r0, [r1, #0]
    tl.tx_frame.opcode  = (*(serial_rx_buffer + 1)) & 0b111;
 8000676:	491d      	ldr	r1, [pc, #116]	; (80006ec <HAL_UARTEx_RxEventCallback+0x90>)
 8000678:	7849      	ldrb	r1, [r1, #1]
 800067a:	f001 0107 	and.w	r1, r1, #7
 800067e:	b2c8      	uxtb	r0, r1
 8000680:	491b      	ldr	r1, [pc, #108]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 8000682:	7048      	strb	r0, [r1, #1]
    tl.tx_frame.param   = (*(serial_rx_buffer + 1)) >> 4;
 8000684:	4919      	ldr	r1, [pc, #100]	; (80006ec <HAL_UARTEx_RxEventCallback+0x90>)
 8000686:	7849      	ldrb	r1, [r1, #1]
 8000688:	0909      	lsrs	r1, r1, #4
 800068a:	b2c8      	uxtb	r0, r1
 800068c:	4918      	ldr	r1, [pc, #96]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 800068e:	7088      	strb	r0, [r1, #2]
    tl.tx_frame.size    = *(serial_rx_buffer + 2);
 8000690:	4916      	ldr	r1, [pc, #88]	; (80006ec <HAL_UARTEx_RxEventCallback+0x90>)
 8000692:	7888      	ldrb	r0, [r1, #2]
 8000694:	4916      	ldr	r1, [pc, #88]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 8000696:	70c8      	strb	r0, [r1, #3]
    tl.tx_frame.source  = 0;
 8000698:	4915      	ldr	r1, [pc, #84]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 800069a:	2000      	movs	r0, #0
 800069c:	7108      	strb	r0, [r1, #4]
    tl.tx_frame.address = *(uint32_t *)(serial_rx_buffer + 4);
 800069e:	4913      	ldr	r1, [pc, #76]	; (80006ec <HAL_UARTEx_RxEventCallback+0x90>)
 80006a0:	6849      	ldr	r1, [r1, #4]
 80006a2:	4813      	ldr	r0, [pc, #76]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 80006a4:	6081      	str	r1, [r0, #8]
    tl.tx_frame.data    = *(uint32_t *)(serial_rx_buffer + 8);
 80006a6:	4913      	ldr	r1, [pc, #76]	; (80006f4 <HAL_UARTEx_RxEventCallback+0x98>)
 80006a8:	6809      	ldr	r1, [r1, #0]
 80006aa:	2000      	movs	r0, #0
 80006ac:	460a      	mov	r2, r1
 80006ae:	4603      	mov	r3, r0
 80006b0:	490f      	ldr	r1, [pc, #60]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 80006b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    tl.tx_frame.corrupt = (*(serial_rx_buffer + 1) >> 7) & 0b1;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <HAL_UARTEx_RxEventCallback+0x90>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	09db      	lsrs	r3, r3, #7
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 80006c0:	761a      	strb	r2, [r3, #24]
    tl.tx_frame.mask    = *(serial_rx_buffer + 3);
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_UARTEx_RxEventCallback+0x90>)
 80006c4:	78da      	ldrb	r2, [r3, #3]
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 80006c8:	765a      	strb	r2, [r3, #25]
    tl.tx_frame.last    = 1;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_UARTEx_RxEventCallback+0x94>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	769a      	strb	r2, [r3, #26]

    frame_pending = 1;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_UARTEx_RxEventCallback+0x9c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
  }

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, serial_rx_buffer, 20);
 80006d6:	2214      	movs	r2, #20
 80006d8:	4904      	ldr	r1, [pc, #16]	; (80006ec <HAL_UARTEx_RxEventCallback+0x90>)
 80006da:	4803      	ldr	r0, [pc, #12]	; (80006e8 <HAL_UARTEx_RxEventCallback+0x8c>)
 80006dc:	f004 f97b 	bl	80049d6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200003dc 	.word	0x200003dc
 80006ec:	20000280 	.word	0x20000280
 80006f0:	20000030 	.word	0x20000030
 80006f4:	20000288 	.word	0x20000288
 80006f8:	20000300 	.word	0x20000300

080006fc <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <APP_init+0x28>)
 8000704:	f002 fdd6 	bl	80032b4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <APP_init+0x2c>)
 800070a:	f002 fd11 	bl	8003130 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800070e:	2100      	movs	r1, #0
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <APP_init+0x30>)
 8000712:	f002 fee7 	bl	80034e4 <HAL_TIM_IC_Start_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, serial_rx_buffer, 20);
 8000716:	2214      	movs	r2, #20
 8000718:	4905      	ldr	r1, [pc, #20]	; (8000730 <APP_init+0x34>)
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <APP_init+0x38>)
 800071c:	f004 f95b 	bl	80049d6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000304 	.word	0x20000304
 8000728:	2000034c 	.word	0x2000034c
 800072c:	20000394 	.word	0x20000394
 8000730:	20000280 	.word	0x20000280
 8000734:	200003dc 	.word	0x200003dc

08000738 <APP_main>:


void APP_main() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  if (frame_pending) {
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <APP_main+0x9c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d044      	beq.n	80007ce <APP_main+0x96>
    TL_transmit(&tl);
 8000744:	4824      	ldr	r0, [pc, #144]	; (80007d8 <APP_main+0xa0>)
 8000746:	f000 ff56 	bl	80015f6 <TL_transmit>
    while (!tl.rx_finished) {}
 800074a:	bf00      	nop
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <APP_main+0xa0>)
 800074e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8000752:	2b00      	cmp	r3, #0
 8000754:	d0fa      	beq.n	800074c <APP_main+0x14>
    TL_deserialize(&tl.rx_frame);
 8000756:	4821      	ldr	r0, [pc, #132]	; (80007dc <APP_main+0xa4>)
 8000758:	f000 fe08 	bl	800136c <TL_deserialize>
    frame_pending = 0;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <APP_main+0x9c>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]

    *(serial_tx_buffer) = tl.rx_frame.chanid;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <APP_main+0xa0>)
 8000764:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <APP_main+0xa8>)
 800076a:	701a      	strb	r2, [r3, #0]
    *(serial_tx_buffer + 1) = (tl.rx_frame.corrupt << 7) | (tl.rx_frame.param << 4) | tl.rx_frame.opcode;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <APP_main+0xa0>)
 800076e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8000772:	01db      	lsls	r3, r3, #7
 8000774:	b25a      	sxtb	r2, r3
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <APP_main+0xa0>)
 8000778:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	b25b      	sxtb	r3, r3
 8000780:	4313      	orrs	r3, r2
 8000782:	b25a      	sxtb	r2, r3
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <APP_main+0xa0>)
 8000786:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800078a:	b25b      	sxtb	r3, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	b25b      	sxtb	r3, r3
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <APP_main+0xa8>)
 8000794:	705a      	strb	r2, [r3, #1]
    *(serial_tx_buffer + 2) = tl.rx_frame.size;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <APP_main+0xa0>)
 8000798:	f893 2123 	ldrb.w	r2, [r3, #291]	; 0x123
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <APP_main+0xa8>)
 800079e:	709a      	strb	r2, [r3, #2]
    *(serial_tx_buffer + 3) = tl.rx_frame.mask;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <APP_main+0xa0>)
 80007a2:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <APP_main+0xa8>)
 80007a8:	70da      	strb	r2, [r3, #3]
    *(uint32_t *)(serial_tx_buffer + 4) = tl.rx_frame.address;
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <APP_main+0xac>)
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <APP_main+0xa0>)
 80007ae:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80007b2:	6013      	str	r3, [r2, #0]
    *(uint32_t *)(serial_tx_buffer + 8) = tl.rx_frame.data;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <APP_main+0xa0>)
 80007b6:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80007ba:	490b      	ldr	r1, [pc, #44]	; (80007e8 <APP_main+0xb0>)
 80007bc:	4613      	mov	r3, r2
 80007be:	600b      	str	r3, [r1, #0]

    HAL_UART_Transmit(&huart2, serial_tx_buffer, 12, 1000);
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	220c      	movs	r2, #12
 80007c6:	4906      	ldr	r1, [pc, #24]	; (80007e0 <APP_main+0xa8>)
 80007c8:	4808      	ldr	r0, [pc, #32]	; (80007ec <APP_main+0xb4>)
 80007ca:	f004 f872 	bl	80048b2 <HAL_UART_Transmit>
  }
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000300 	.word	0x20000300
 80007d8:	20000030 	.word	0x20000030
 80007dc:	20000150 	.word	0x20000150
 80007e0:	200002c0 	.word	0x200002c0
 80007e4:	200002c4 	.word	0x200002c4
 80007e8:	200002c8 	.word	0x200002c8
 80007ec:	200003dc 	.word	0x200003dc

080007f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f4:	f000 ff4e 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f8:	f000 f812 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fc:	f000 fa16 	bl	8000c2c <MX_GPIO_Init>
  MX_DMA_Init();
 8000800:	f000 f9ec 	bl	8000bdc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000804:	f000 f9c0 	bl	8000b88 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000808:	f000 f96a 	bl	8000ae0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800080c:	f000 f87a 	bl	8000904 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000810:	f000 f91a 	bl	8000a48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000814:	f7ff ff72 	bl	80006fc <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000818:	f7ff ff8e 	bl	8000738 <APP_main>
 800081c:	e7fc      	b.n	8000818 <main+0x28>
	...

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	; 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2234      	movs	r2, #52	; 0x34
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f005 fa4a 	bl	8005cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <SystemClock_Config+0xdc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	4a2b      	ldr	r2, [pc, #172]	; (80008fc <SystemClock_Config+0xdc>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	; 0x40
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <SystemClock_Config+0xdc>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	4b26      	ldr	r3, [pc, #152]	; (8000900 <SystemClock_Config+0xe0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a25      	ldr	r2, [pc, #148]	; (8000900 <SystemClock_Config+0xe0>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <SystemClock_Config+0xe0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000878:	603b      	str	r3, [r7, #0]
 800087a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000884:	2310      	movs	r3, #16
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000890:	2308      	movs	r3, #8
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000894:	23b4      	movs	r3, #180	; 0xb4
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800089c:	2302      	movs	r3, #2
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4618      	mov	r0, r3
 80008aa:	f002 f953 	bl	8002b54 <HAL_RCC_OscConfig>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008b4:	f000 fa46 	bl	8000d44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b8:	f001 fe38 	bl	800252c <HAL_PWREx_EnableOverDrive>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008c2:	f000 fa3f 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2302      	movs	r3, #2
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2105      	movs	r1, #5
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fe71 	bl	80025cc <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008f0:	f000 fa28 	bl	8000d44 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	; 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b096      	sub	sp, #88	; 0x58
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
 8000932:	615a      	str	r2, [r3, #20]
 8000934:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2220      	movs	r2, #32
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f005 f9c3 	bl	8005cc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <MX_TIM1_Init+0x13c>)
 8000944:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <MX_TIM1_Init+0x140>)
 8000946:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000948:	4b3d      	ldr	r3, [pc, #244]	; (8000a40 <MX_TIM1_Init+0x13c>)
 800094a:	229f      	movs	r2, #159	; 0x9f
 800094c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <MX_TIM1_Init+0x13c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000954:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <MX_TIM1_Init+0x13c>)
 8000956:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <MX_TIM1_Init+0x13c>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000962:	4b37      	ldr	r3, [pc, #220]	; (8000a40 <MX_TIM1_Init+0x13c>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b35      	ldr	r3, [pc, #212]	; (8000a40 <MX_TIM1_Init+0x13c>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800096e:	4834      	ldr	r0, [pc, #208]	; (8000a40 <MX_TIM1_Init+0x13c>)
 8000970:	f002 fb8e 	bl	8003090 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800097a:	f000 f9e3 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000988:	4619      	mov	r1, r3
 800098a:	482d      	ldr	r0, [pc, #180]	; (8000a40 <MX_TIM1_Init+0x13c>)
 800098c:	f003 f938 	bl	8003c00 <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000996:	f000 f9d5 	bl	8000d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800099a:	4829      	ldr	r0, [pc, #164]	; (8000a40 <MX_TIM1_Init+0x13c>)
 800099c:	f002 fc30 	bl	8003200 <HAL_TIM_PWM_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009a6:	f000 f9cd 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b6:	4619      	mov	r1, r3
 80009b8:	4821      	ldr	r0, [pc, #132]	; (8000a40 <MX_TIM1_Init+0x13c>)
 80009ba:	f003 fe4b 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009c4:	f000 f9be 	bl	8000d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009c8:	2370      	movs	r3, #112	; 0x70
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 80009cc:	f240 13f3 	movw	r3, #499	; 0x1f3
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <MX_TIM1_Init+0x13c>)
 80009f0:	f003 f844 	bl	8003a7c <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80009fa:	f000 f9a3 	bl	8000d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_TIM1_Init+0x13c>)
 8000a22:	f003 fe93 	bl	800474c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000a2c:	f000 f98a 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <MX_TIM1_Init+0x13c>)
 8000a32:	f000 fa3b 	bl	8000eac <HAL_TIM_MspPostInit>

}
 8000a36:	bf00      	nop
 8000a38:	3758      	adds	r7, #88	; 0x58
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000304 	.word	0x20000304
 8000a44:	40010000 	.word	0x40010000

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 17;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a6e:	2211      	movs	r2, #17
 8000a70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8c:	4813      	ldr	r0, [pc, #76]	; (8000adc <MX_TIM2_Init+0x94>)
 8000a8e:	f002 faff 	bl	8003090 <HAL_TIM_Base_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a98:	f000 f954 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_TIM2_Init+0x94>)
 8000aaa:	f003 f8a9 	bl	8003c00 <HAL_TIM_ConfigClockSource>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ab4:	f000 f946 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_TIM2_Init+0x94>)
 8000ac6:	f003 fdc5 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 f938 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000034c 	.word	0x2000034c

08000ae0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000afe:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <MX_TIM4_Init+0xa4>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b02:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000b22:	4817      	ldr	r0, [pc, #92]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b24:	f002 fc8e 	bl	8003444 <HAL_TIM_IC_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 f909 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480f      	ldr	r0, [pc, #60]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b42:	f003 fd87 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b4c:	f000 f8fa 	bl	8000d44 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b50:	2300      	movs	r3, #0
 8000b52:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b54:	2301      	movs	r3, #1
 8000b56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b68:	f002 feec 	bl	8003944 <HAL_TIM_IC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000b72:	f000 f8e7 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000394 	.word	0x20000394
 8000b84:	40000800 	.word	0x40000800

08000b88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000b8e:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000b94:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <MX_USART2_UART_Init+0x50>)
 8000b96:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000bac:	220c      	movs	r2, #12
 8000bae:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_USART2_UART_Init+0x48>)
 8000bbe:	f003 fe2b 	bl	8004818 <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8000bc8:	f000 f8bc 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200003dc 	.word	0x200003dc
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	001e8480 	.word	0x001e8480

08000bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_DMA_Init+0x4c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <MX_DMA_Init+0x4c>)
 8000bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_DMA_Init+0x4c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2010      	movs	r0, #16
 8000c04:	f000 fe93 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c08:	2010      	movs	r0, #16
 8000c0a:	f000 feac 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2011      	movs	r0, #17
 8000c14:	f000 fe8b 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c18:	2011      	movs	r0, #17
 8000c1a:	f000 fea4 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b3b      	ldr	r3, [pc, #236]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a3a      	ldr	r2, [pc, #232]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a33      	ldr	r2, [pc, #204]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a2c      	ldr	r2, [pc, #176]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_GPIO_Init+0x108>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2103      	movs	r1, #3
 8000c9a:	4827      	ldr	r0, [pc, #156]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000c9c:	f001 fc2c 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2121      	movs	r1, #33	; 0x21
 8000ca4:	4825      	ldr	r0, [pc, #148]	; (8000d3c <MX_GPIO_Init+0x110>)
 8000ca6:	f001 fc27 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000cc0:	f001 fa6e 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4817      	ldr	r0, [pc, #92]	; (8000d38 <MX_GPIO_Init+0x10c>)
 8000cdc:	f001 fa60 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5;
 8000ce0:	2321      	movs	r3, #33	; 0x21
 8000ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MX_GPIO_Init+0x110>)
 8000cf8:	f001 fa52 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 8000cfc:	2312      	movs	r3, #18
 8000cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480b      	ldr	r0, [pc, #44]	; (8000d3c <MX_GPIO_Init+0x110>)
 8000d10:	f001 fa46 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8000d14:	2301      	movs	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	4806      	ldr	r0, [pc, #24]	; (8000d40 <MX_GPIO_Init+0x114>)
 8000d28:	f001 fa3a 	bl	80021a0 <HAL_GPIO_Init>

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020400 	.word	0x40020400

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40023800 	.word	0x40023800

08000da0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <HAL_TIM_Base_MspInit+0x64>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10e      	bne.n	8000dd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_TIM_Base_MspInit+0x68>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <HAL_TIM_Base_MspInit+0x68>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_TIM_Base_MspInit+0x68>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dce:	e012      	b.n	8000df6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d10d      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_TIM_Base_MspInit+0x68>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_TIM_Base_MspInit+0x68>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_TIM_Base_MspInit+0x68>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40010000 	.word	0x40010000
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1d      	ldr	r2, [pc, #116]	; (8000ea0 <HAL_TIM_IC_MspInit+0x94>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d133      	bne.n	8000e96 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <HAL_TIM_IC_MspInit+0x98>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <HAL_TIM_IC_MspInit+0x98>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <HAL_TIM_IC_MspInit+0x98>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_TIM_IC_MspInit+0x98>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_TIM_IC_MspInit+0x98>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_TIM_IC_MspInit+0x98>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e66:	2340      	movs	r3, #64	; 0x40
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e76:	2302      	movs	r3, #2
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <HAL_TIM_IC_MspInit+0x9c>)
 8000e82:	f001 f98d 	bl	80021a0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	201e      	movs	r0, #30
 8000e8c:	f000 fd4f 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e90:	201e      	movs	r0, #30
 8000e92:	f000 fd68 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e96:	bf00      	nop
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40000800 	.word	0x40000800
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <HAL_TIM_MspPostInit+0x68>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d11e      	bne.n	8000f0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_TIM_MspPostInit+0x6c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <HAL_TIM_MspPostInit+0x6c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_TIM_MspPostInit+0x6c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_TIM_MspPostInit+0x70>)
 8000f08:	f001 f94a 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40010000 	.word	0x40010000
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_UART_MspInit+0x14c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	f040 8090 	bne.w	8001064 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	4b49      	ldr	r3, [pc, #292]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a48      	ldr	r2, [pc, #288]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b46      	ldr	r3, [pc, #280]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	4b42      	ldr	r3, [pc, #264]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a41      	ldr	r2, [pc, #260]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <HAL_UART_MspInit+0x150>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4837      	ldr	r0, [pc, #220]	; (8001074 <HAL_UART_MspInit+0x154>)
 8000f98:	f001 f902 	bl	80021a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000f9e:	4a37      	ldr	r2, [pc, #220]	; (800107c <HAL_UART_MspInit+0x15c>)
 8000fa0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fa8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb0:	4b31      	ldr	r3, [pc, #196]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fbe:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000fca:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000fdc:	4826      	ldr	r0, [pc, #152]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000fde:	f000 fcdd 	bl	800199c <HAL_DMA_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000fe8:	f7ff feac 	bl	8000d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff2:	4a21      	ldr	r2, [pc, #132]	; (8001078 <HAL_UART_MspInit+0x158>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_UART_MspInit+0x160>)
 8000ffa:	4a22      	ldr	r2, [pc, #136]	; (8001084 <HAL_UART_MspInit+0x164>)
 8000ffc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001000:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001004:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001008:	2240      	movs	r2, #64	; 0x40
 800100a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_UART_MspInit+0x160>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001014:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001018:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_UART_MspInit+0x160>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_UART_MspInit+0x160>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001038:	4811      	ldr	r0, [pc, #68]	; (8001080 <HAL_UART_MspInit+0x160>)
 800103a:	f000 fcaf 	bl	800199c <HAL_DMA_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001044:	f7ff fe7e 	bl	8000d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_UART_MspInit+0x160>)
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
 800104e:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_UART_MspInit+0x160>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2104      	movs	r1, #4
 8001058:	2026      	movs	r0, #38	; 0x26
 800105a:	f000 fc68 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800105e:	2026      	movs	r0, #38	; 0x26
 8001060:	f000 fc81 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40004400 	.word	0x40004400
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000
 8001078:	20000420 	.word	0x20000420
 800107c:	40026088 	.word	0x40026088
 8001080:	20000480 	.word	0x20000480
 8001084:	400260a0 	.word	0x400260a0

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d4:	f000 fb30 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}

080010dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <DMA1_Stream5_IRQHandler+0x10>)
 80010e2:	f000 fdf3 	bl	8001ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000420 	.word	0x20000420

080010f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Stream6_IRQHandler+0x10>)
 80010f6:	f000 fde9 	bl	8001ccc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000480 	.word	0x20000480

08001104 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM4_IRQHandler+0x10>)
 800110a:	f002 fb13 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000394 	.word	0x20000394

08001118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART2_IRQHandler+0x10>)
 800111e:	f003 fcbf 	bl	8004aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003dc 	.word	0x200003dc

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <TL_serialize>:
      }
    }
  }
}

void TL_serialize(TileLinkFrame *frame) {
 8001150:	b4f0      	push	{r4, r5, r6, r7}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001158:	2100      	movs	r1, #0
 800115a:	83f9      	strh	r1, [r7, #30]
 800115c:	e011      	b.n	8001182 <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	7e89      	ldrb	r1, [r1, #26]
 8001162:	4608      	mov	r0, r1
 8001164:	8bf9      	ldrh	r1, [r7, #30]
 8001166:	fa40 f101 	asr.w	r1, r0, r1
 800116a:	b2c8      	uxtb	r0, r1
 800116c:	8bf9      	ldrh	r1, [r7, #30]
 800116e:	f000 0001 	and.w	r0, r0, #1
 8001172:	b2c4      	uxtb	r4, r0
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	4401      	add	r1, r0
 8001178:	4620      	mov	r0, r4
 800117a:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 800117c:	8bf9      	ldrh	r1, [r7, #30]
 800117e:	3101      	adds	r1, #1
 8001180:	83f9      	strh	r1, [r7, #30]
 8001182:	8bf9      	ldrh	r1, [r7, #30]
 8001184:	2900      	cmp	r1, #0
 8001186:	d0ea      	beq.n	800115e <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001188:	2100      	movs	r1, #0
 800118a:	83b9      	strh	r1, [r7, #28]
 800118c:	e012      	b.n	80011b4 <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->mask >> i) & 0b1;
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	7e49      	ldrb	r1, [r1, #25]
 8001192:	4608      	mov	r0, r1
 8001194:	8bb9      	ldrh	r1, [r7, #28]
 8001196:	fa40 f101 	asr.w	r1, r0, r1
 800119a:	b2c8      	uxtb	r0, r1
 800119c:	8bb9      	ldrh	r1, [r7, #28]
 800119e:	3101      	adds	r1, #1
 80011a0:	f000 0001 	and.w	r0, r0, #1
 80011a4:	b2c4      	uxtb	r4, r0
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	4401      	add	r1, r0
 80011aa:	4620      	mov	r0, r4
 80011ac:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80011ae:	8bb9      	ldrh	r1, [r7, #28]
 80011b0:	3101      	adds	r1, #1
 80011b2:	83b9      	strh	r1, [r7, #28]
 80011b4:	8bb9      	ldrh	r1, [r7, #28]
 80011b6:	2907      	cmp	r1, #7
 80011b8:	d9e9      	bls.n	800118e <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80011ba:	2100      	movs	r1, #0
 80011bc:	8379      	strh	r1, [r7, #26]
 80011be:	e012      	b.n	80011e6 <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->corrupt >> i) & 0b1;
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	7e09      	ldrb	r1, [r1, #24]
 80011c4:	4608      	mov	r0, r1
 80011c6:	8b79      	ldrh	r1, [r7, #26]
 80011c8:	fa40 f101 	asr.w	r1, r0, r1
 80011cc:	b2c8      	uxtb	r0, r1
 80011ce:	8b79      	ldrh	r1, [r7, #26]
 80011d0:	3109      	adds	r1, #9
 80011d2:	f000 0001 	and.w	r0, r0, #1
 80011d6:	b2c4      	uxtb	r4, r0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	4401      	add	r1, r0
 80011dc:	4620      	mov	r0, r4
 80011de:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80011e0:	8b79      	ldrh	r1, [r7, #26]
 80011e2:	3101      	adds	r1, #1
 80011e4:	8379      	strh	r1, [r7, #26]
 80011e6:	8b79      	ldrh	r1, [r7, #26]
 80011e8:	2900      	cmp	r1, #0
 80011ea:	d0e9      	beq.n	80011c0 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80011ec:	2100      	movs	r1, #0
 80011ee:	8339      	strh	r1, [r7, #24]
 80011f0:	e01e      	b.n	8001230 <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80011f8:	8b3c      	ldrh	r4, [r7, #24]
 80011fa:	f1c4 0620 	rsb	r6, r4, #32
 80011fe:	f1a4 0520 	sub.w	r5, r4, #32
 8001202:	fa20 f204 	lsr.w	r2, r0, r4
 8001206:	fa01 f606 	lsl.w	r6, r1, r6
 800120a:	4332      	orrs	r2, r6
 800120c:	fa21 f505 	lsr.w	r5, r1, r5
 8001210:	432a      	orrs	r2, r5
 8001212:	fa21 f304 	lsr.w	r3, r1, r4
 8001216:	b2d0      	uxtb	r0, r2
 8001218:	8b39      	ldrh	r1, [r7, #24]
 800121a:	310a      	adds	r1, #10
 800121c:	f000 0001 	and.w	r0, r0, #1
 8001220:	b2c4      	uxtb	r4, r0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4401      	add	r1, r0
 8001226:	4620      	mov	r0, r4
 8001228:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800122a:	8b39      	ldrh	r1, [r7, #24]
 800122c:	3101      	adds	r1, #1
 800122e:	8339      	strh	r1, [r7, #24]
 8001230:	8b39      	ldrh	r1, [r7, #24]
 8001232:	293f      	cmp	r1, #63	; 0x3f
 8001234:	d9dd      	bls.n	80011f2 <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001236:	2300      	movs	r3, #0
 8001238:	82fb      	strh	r3, [r7, #22]
 800123a:	e011      	b.n	8001260 <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	8afb      	ldrh	r3, [r7, #22]
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	b2da      	uxtb	r2, r3
 8001248:	8afb      	ldrh	r3, [r7, #22]
 800124a:	334a      	adds	r3, #74	; 0x4a
 800124c:	f002 0201 	and.w	r2, r2, #1
 8001250:	b2d1      	uxtb	r1, r2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	460a      	mov	r2, r1
 8001258:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 800125a:	8afb      	ldrh	r3, [r7, #22]
 800125c:	3301      	adds	r3, #1
 800125e:	82fb      	strh	r3, [r7, #22]
 8001260:	8afb      	ldrh	r3, [r7, #22]
 8001262:	2b1f      	cmp	r3, #31
 8001264:	d9ea      	bls.n	800123c <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001266:	2300      	movs	r3, #0
 8001268:	82bb      	strh	r3, [r7, #20]
 800126a:	e012      	b.n	8001292 <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	791b      	ldrb	r3, [r3, #4]
 8001270:	461a      	mov	r2, r3
 8001272:	8abb      	ldrh	r3, [r7, #20]
 8001274:	fa42 f303 	asr.w	r3, r2, r3
 8001278:	b2da      	uxtb	r2, r3
 800127a:	8abb      	ldrh	r3, [r7, #20]
 800127c:	336a      	adds	r3, #106	; 0x6a
 800127e:	f002 0201 	and.w	r2, r2, #1
 8001282:	b2d1      	uxtb	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	460a      	mov	r2, r1
 800128a:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800128c:	8abb      	ldrh	r3, [r7, #20]
 800128e:	3301      	adds	r3, #1
 8001290:	82bb      	strh	r3, [r7, #20]
 8001292:	8abb      	ldrh	r3, [r7, #20]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d9e9      	bls.n	800126c <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001298:	2300      	movs	r3, #0
 800129a:	827b      	strh	r3, [r7, #18]
 800129c:	e012      	b.n	80012c4 <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	78db      	ldrb	r3, [r3, #3]
 80012a2:	461a      	mov	r2, r3
 80012a4:	8a7b      	ldrh	r3, [r7, #18]
 80012a6:	fa42 f303 	asr.w	r3, r2, r3
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	8a7b      	ldrh	r3, [r7, #18]
 80012ae:	336e      	adds	r3, #110	; 0x6e
 80012b0:	f002 0201 	and.w	r2, r2, #1
 80012b4:	b2d1      	uxtb	r1, r2
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	460a      	mov	r2, r1
 80012bc:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80012be:	8a7b      	ldrh	r3, [r7, #18]
 80012c0:	3301      	adds	r3, #1
 80012c2:	827b      	strh	r3, [r7, #18]
 80012c4:	8a7b      	ldrh	r3, [r7, #18]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d9e9      	bls.n	800129e <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	823b      	strh	r3, [r7, #16]
 80012ce:	e012      	b.n	80012f6 <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	789b      	ldrb	r3, [r3, #2]
 80012d4:	461a      	mov	r2, r3
 80012d6:	8a3b      	ldrh	r3, [r7, #16]
 80012d8:	fa42 f303 	asr.w	r3, r2, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	8a3b      	ldrh	r3, [r7, #16]
 80012e0:	3372      	adds	r3, #114	; 0x72
 80012e2:	f002 0201 	and.w	r2, r2, #1
 80012e6:	b2d1      	uxtb	r1, r2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	460a      	mov	r2, r1
 80012ee:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80012f0:	8a3b      	ldrh	r3, [r7, #16]
 80012f2:	3301      	adds	r3, #1
 80012f4:	823b      	strh	r3, [r7, #16]
 80012f6:	8a3b      	ldrh	r3, [r7, #16]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d9e9      	bls.n	80012d0 <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	81fb      	strh	r3, [r7, #14]
 8001300:	e012      	b.n	8001328 <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	785b      	ldrb	r3, [r3, #1]
 8001306:	461a      	mov	r2, r3
 8001308:	89fb      	ldrh	r3, [r7, #14]
 800130a:	fa42 f303 	asr.w	r3, r2, r3
 800130e:	b2da      	uxtb	r2, r3
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	3375      	adds	r3, #117	; 0x75
 8001314:	f002 0201 	and.w	r2, r2, #1
 8001318:	b2d1      	uxtb	r1, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	460a      	mov	r2, r1
 8001320:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001322:	89fb      	ldrh	r3, [r7, #14]
 8001324:	3301      	adds	r3, #1
 8001326:	81fb      	strh	r3, [r7, #14]
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d9e9      	bls.n	8001302 <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800132e:	2300      	movs	r3, #0
 8001330:	81bb      	strh	r3, [r7, #12]
 8001332:	e012      	b.n	800135a <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	89bb      	ldrh	r3, [r7, #12]
 800133c:	fa42 f303 	asr.w	r3, r2, r3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	89bb      	ldrh	r3, [r7, #12]
 8001344:	3378      	adds	r3, #120	; 0x78
 8001346:	f002 0201 	and.w	r2, r2, #1
 800134a:	b2d1      	uxtb	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	460a      	mov	r2, r1
 8001352:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001354:	89bb      	ldrh	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	81bb      	strh	r3, [r7, #12]
 800135a:	89bb      	ldrh	r3, [r7, #12]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d9e9      	bls.n	8001334 <TL_serialize+0x1e4>
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bcf0      	pop	{r4, r5, r6, r7}
 800136a:	4770      	bx	lr

0800136c <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 800136c:	b4f0      	push	{r4, r5, r6, r7}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  frame->chanid = 0;
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	2000      	movs	r0, #0
 8001378:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	2000      	movs	r0, #0
 800137e:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	2000      	movs	r0, #0
 8001384:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	2000      	movs	r0, #0
 800138a:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	2000      	movs	r0, #0
 8001390:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	2000      	movs	r0, #0
 8001396:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 8001398:	687e      	ldr	r6, [r7, #4]
 800139a:	f04f 0000 	mov.w	r0, #0
 800139e:	f04f 0100 	mov.w	r1, #0
 80013a2:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	2000      	movs	r0, #0
 80013aa:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	2000      	movs	r0, #0
 80013b0:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	2000      	movs	r0, #0
 80013b6:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80013b8:	2100      	movs	r1, #0
 80013ba:	83f9      	strh	r1, [r7, #30]
 80013bc:	e014      	b.n	80013e8 <TL_deserialize+0x7c>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	7e89      	ldrb	r1, [r1, #26]
 80013c2:	b248      	sxtb	r0, r1
 80013c4:	8bf9      	ldrh	r1, [r7, #30]
 80013c6:	687e      	ldr	r6, [r7, #4]
 80013c8:	4431      	add	r1, r6
 80013ca:	7ec9      	ldrb	r1, [r1, #27]
 80013cc:	f001 0601 	and.w	r6, r1, #1
 80013d0:	8bf9      	ldrh	r1, [r7, #30]
 80013d2:	fa06 f101 	lsl.w	r1, r6, r1
 80013d6:	b249      	sxtb	r1, r1
 80013d8:	4301      	orrs	r1, r0
 80013da:	b249      	sxtb	r1, r1
 80013dc:	b2c8      	uxtb	r0, r1
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80013e2:	8bf9      	ldrh	r1, [r7, #30]
 80013e4:	3101      	adds	r1, #1
 80013e6:	83f9      	strh	r1, [r7, #30]
 80013e8:	8bf9      	ldrh	r1, [r7, #30]
 80013ea:	2900      	cmp	r1, #0
 80013ec:	d0e7      	beq.n	80013be <TL_deserialize+0x52>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80013ee:	2100      	movs	r1, #0
 80013f0:	83b9      	strh	r1, [r7, #28]
 80013f2:	e015      	b.n	8001420 <TL_deserialize+0xb4>
    frame->mask |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	7e49      	ldrb	r1, [r1, #25]
 80013f8:	b248      	sxtb	r0, r1
 80013fa:	8bb9      	ldrh	r1, [r7, #28]
 80013fc:	3101      	adds	r1, #1
 80013fe:	687e      	ldr	r6, [r7, #4]
 8001400:	4431      	add	r1, r6
 8001402:	7ec9      	ldrb	r1, [r1, #27]
 8001404:	f001 0601 	and.w	r6, r1, #1
 8001408:	8bb9      	ldrh	r1, [r7, #28]
 800140a:	fa06 f101 	lsl.w	r1, r6, r1
 800140e:	b249      	sxtb	r1, r1
 8001410:	4301      	orrs	r1, r0
 8001412:	b249      	sxtb	r1, r1
 8001414:	b2c8      	uxtb	r0, r1
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	7648      	strb	r0, [r1, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800141a:	8bb9      	ldrh	r1, [r7, #28]
 800141c:	3101      	adds	r1, #1
 800141e:	83b9      	strh	r1, [r7, #28]
 8001420:	8bb9      	ldrh	r1, [r7, #28]
 8001422:	2907      	cmp	r1, #7
 8001424:	d9e6      	bls.n	80013f4 <TL_deserialize+0x88>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001426:	2100      	movs	r1, #0
 8001428:	8379      	strh	r1, [r7, #26]
 800142a:	e015      	b.n	8001458 <TL_deserialize+0xec>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	7e09      	ldrb	r1, [r1, #24]
 8001430:	b248      	sxtb	r0, r1
 8001432:	8b79      	ldrh	r1, [r7, #26]
 8001434:	3109      	adds	r1, #9
 8001436:	687e      	ldr	r6, [r7, #4]
 8001438:	4431      	add	r1, r6
 800143a:	7ec9      	ldrb	r1, [r1, #27]
 800143c:	f001 0601 	and.w	r6, r1, #1
 8001440:	8b79      	ldrh	r1, [r7, #26]
 8001442:	fa06 f101 	lsl.w	r1, r6, r1
 8001446:	b249      	sxtb	r1, r1
 8001448:	4301      	orrs	r1, r0
 800144a:	b249      	sxtb	r1, r1
 800144c:	b2c8      	uxtb	r0, r1
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001452:	8b79      	ldrh	r1, [r7, #26]
 8001454:	3101      	adds	r1, #1
 8001456:	8379      	strh	r1, [r7, #26]
 8001458:	8b79      	ldrh	r1, [r7, #26]
 800145a:	2900      	cmp	r1, #0
 800145c:	d0e6      	beq.n	800142c <TL_deserialize+0xc0>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800145e:	2100      	movs	r1, #0
 8001460:	8339      	strh	r1, [r7, #24]
 8001462:	e01b      	b.n	800149c <TL_deserialize+0x130>
    frame->data |= ((frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800146a:	8b3e      	ldrh	r6, [r7, #24]
 800146c:	f106 0c0a 	add.w	ip, r6, #10
 8001470:	687e      	ldr	r6, [r7, #4]
 8001472:	4466      	add	r6, ip
 8001474:	7ef6      	ldrb	r6, [r6, #27]
 8001476:	f006 0c01 	and.w	ip, r6, #1
 800147a:	8b3e      	ldrh	r6, [r7, #24]
 800147c:	fa0c f606 	lsl.w	r6, ip, r6
 8001480:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 8001484:	4632      	mov	r2, r6
 8001486:	4663      	mov	r3, ip
 8001488:	ea40 0402 	orr.w	r4, r0, r2
 800148c:	ea41 0503 	orr.w	r5, r1, r3
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	e9c1 4504 	strd	r4, r5, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001496:	8b39      	ldrh	r1, [r7, #24]
 8001498:	3101      	adds	r1, #1
 800149a:	8339      	strh	r1, [r7, #24]
 800149c:	8b39      	ldrh	r1, [r7, #24]
 800149e:	293f      	cmp	r1, #63	; 0x3f
 80014a0:	d9e0      	bls.n	8001464 <TL_deserialize+0xf8>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	82fb      	strh	r3, [r7, #22]
 80014a6:	e011      	b.n	80014cc <TL_deserialize+0x160>
    frame->address |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	8afa      	ldrh	r2, [r7, #22]
 80014ae:	324a      	adds	r2, #74	; 0x4a
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	440a      	add	r2, r1
 80014b4:	7ed2      	ldrb	r2, [r2, #27]
 80014b6:	f002 0101 	and.w	r1, r2, #1
 80014ba:	8afa      	ldrh	r2, [r7, #22]
 80014bc:	fa01 f202 	lsl.w	r2, r1, r2
 80014c0:	431a      	orrs	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80014c6:	8afb      	ldrh	r3, [r7, #22]
 80014c8:	3301      	adds	r3, #1
 80014ca:	82fb      	strh	r3, [r7, #22]
 80014cc:	8afb      	ldrh	r3, [r7, #22]
 80014ce:	2b1f      	cmp	r3, #31
 80014d0:	d9ea      	bls.n	80014a8 <TL_deserialize+0x13c>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	82bb      	strh	r3, [r7, #20]
 80014d6:	e015      	b.n	8001504 <TL_deserialize+0x198>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	8abb      	ldrh	r3, [r7, #20]
 80014e0:	336a      	adds	r3, #106	; 0x6a
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	440b      	add	r3, r1
 80014e6:	7edb      	ldrb	r3, [r3, #27]
 80014e8:	f003 0101 	and.w	r1, r3, #1
 80014ec:	8abb      	ldrh	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80014fe:	8abb      	ldrh	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	82bb      	strh	r3, [r7, #20]
 8001504:	8abb      	ldrh	r3, [r7, #20]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d9e6      	bls.n	80014d8 <TL_deserialize+0x16c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800150a:	2300      	movs	r3, #0
 800150c:	827b      	strh	r3, [r7, #18]
 800150e:	e015      	b.n	800153c <TL_deserialize+0x1d0>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	78db      	ldrb	r3, [r3, #3]
 8001514:	b25a      	sxtb	r2, r3
 8001516:	8a7b      	ldrh	r3, [r7, #18]
 8001518:	336e      	adds	r3, #110	; 0x6e
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	440b      	add	r3, r1
 800151e:	7edb      	ldrb	r3, [r3, #27]
 8001520:	f003 0101 	and.w	r1, r3, #1
 8001524:	8a7b      	ldrh	r3, [r7, #18]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	b25b      	sxtb	r3, r3
 800152c:	4313      	orrs	r3, r2
 800152e:	b25b      	sxtb	r3, r3
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001536:	8a7b      	ldrh	r3, [r7, #18]
 8001538:	3301      	adds	r3, #1
 800153a:	827b      	strh	r3, [r7, #18]
 800153c:	8a7b      	ldrh	r3, [r7, #18]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d9e6      	bls.n	8001510 <TL_deserialize+0x1a4>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001542:	2300      	movs	r3, #0
 8001544:	823b      	strh	r3, [r7, #16]
 8001546:	e015      	b.n	8001574 <TL_deserialize+0x208>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	b25a      	sxtb	r2, r3
 800154e:	8a3b      	ldrh	r3, [r7, #16]
 8001550:	3372      	adds	r3, #114	; 0x72
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	440b      	add	r3, r1
 8001556:	7edb      	ldrb	r3, [r3, #27]
 8001558:	f003 0101 	and.w	r1, r3, #1
 800155c:	8a3b      	ldrh	r3, [r7, #16]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	b25b      	sxtb	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b25b      	sxtb	r3, r3
 8001568:	b2da      	uxtb	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800156e:	8a3b      	ldrh	r3, [r7, #16]
 8001570:	3301      	adds	r3, #1
 8001572:	823b      	strh	r3, [r7, #16]
 8001574:	8a3b      	ldrh	r3, [r7, #16]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d9e6      	bls.n	8001548 <TL_deserialize+0x1dc>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800157a:	2300      	movs	r3, #0
 800157c:	81fb      	strh	r3, [r7, #14]
 800157e:	e015      	b.n	80015ac <TL_deserialize+0x240>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	b25a      	sxtb	r2, r3
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	3375      	adds	r3, #117	; 0x75
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	440b      	add	r3, r1
 800158e:	7edb      	ldrb	r3, [r3, #27]
 8001590:	f003 0101 	and.w	r1, r3, #1
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	b25b      	sxtb	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b25b      	sxtb	r3, r3
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	3301      	adds	r3, #1
 80015aa:	81fb      	strh	r3, [r7, #14]
 80015ac:	89fb      	ldrh	r3, [r7, #14]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d9e6      	bls.n	8001580 <TL_deserialize+0x214>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	81bb      	strh	r3, [r7, #12]
 80015b6:	e015      	b.n	80015e4 <TL_deserialize+0x278>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b25a      	sxtb	r2, r3
 80015be:	89bb      	ldrh	r3, [r7, #12]
 80015c0:	3378      	adds	r3, #120	; 0x78
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	440b      	add	r3, r1
 80015c6:	7edb      	ldrb	r3, [r3, #27]
 80015c8:	f003 0101 	and.w	r1, r3, #1
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80015de:	89bb      	ldrh	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	81bb      	strh	r3, [r7, #12]
 80015e4:	89bb      	ldrh	r3, [r7, #12]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d9e6      	bls.n	80015b8 <TL_deserialize+0x24c>
  }
}
 80015ea:	bf00      	nop
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bcf0      	pop	{r4, r5, r6, r7}
 80015f4:	4770      	bx	lr

080015f6 <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fda5 	bl	8001150 <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->rx_bit_offset = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
  tl->tx_finished = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_finished = 0;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  // enable TX RX
  tl->rx_pending = 1;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
  tl->tx_pending = 1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001678 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001646:	490e      	ldr	r1, [pc, #56]	; (8001680 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800165c:	4c0b      	ldr	r4, [pc, #44]	; (800168c <LoopFillZerobss+0x26>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800166a:	f7ff fd5f 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166e:	f004 fb07 	bl	8005c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7ff f8bd 	bl	80007f0 <main>
  bx  lr    
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001684:	08005d20 	.word	0x08005d20
  ldr r2, =_sbss
 8001688:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800168c:	200004e4 	.word	0x200004e4

08001690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <HAL_Init+0x40>)
 800169e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_Init+0x40>)
 80016aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_Init+0x40>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f92b 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff fb42 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f943 	bl	8001982 <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f90b 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	; (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000000 	.word	0x20000000
 8001730:	20000008 	.word	0x20000008
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008
 800175c:	200004e0 	.word	0x200004e0

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200004e0 	.word	0x200004e0

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff feda 	bl	8001760 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e099      	b.n	8001aec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d8:	e00f      	b.n	80019fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019da:	f7ff fec1 	bl	8001760 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d908      	bls.n	80019fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2203      	movs	r2, #3
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e078      	b.n	8001aec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e8      	bne.n	80019da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_DMA_Init+0x158>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d107      	bne.n	8001a64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f023 0307 	bic.w	r3, r3, #7
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d117      	bne.n	8001abe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00e      	beq.n	8001abe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 fb01 	bl	80020a8 <DMA_CheckFifoParam>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d008      	beq.n	8001abe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001aba:	2301      	movs	r3, #1
 8001abc:	e016      	b.n	8001aec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 fab8 	bl	800203c <DMA_CalcBaseAndBitshift>
 8001acc:	4603      	mov	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	223f      	movs	r2, #63	; 0x3f
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	f010803f 	.word	0xf010803f

08001af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_DMA_Start_IT+0x26>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e040      	b.n	8001ba0 <HAL_DMA_Start_IT+0xa8>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d12f      	bne.n	8001b92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2202      	movs	r2, #2
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fa4a 	bl	8001fe0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	223f      	movs	r2, #63	; 0x3f
 8001b52:	409a      	lsls	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0216 	orr.w	r2, r2, #22
 8001b66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0208 	orr.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e005      	b.n	8001b9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bb6:	f7ff fdd3 	bl	8001760 <HAL_GetTick>
 8001bba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d008      	beq.n	8001bda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e052      	b.n	8001c80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0216 	bic.w	r2, r2, #22
 8001be8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d103      	bne.n	8001c0a <HAL_DMA_Abort+0x62>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0208 	bic.w	r2, r2, #8
 8001c18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0201 	bic.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2a:	e013      	b.n	8001c54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2c:	f7ff fd98 	bl	8001760 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b05      	cmp	r3, #5
 8001c38:	d90c      	bls.n	8001c54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e015      	b.n	8001c80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e4      	bne.n	8001c2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	223f      	movs	r2, #63	; 0x3f
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d004      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00c      	b.n	8001cc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2205      	movs	r2, #5
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cd8:	4b8e      	ldr	r3, [pc, #568]	; (8001f14 <HAL_DMA_IRQHandler+0x248>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a8e      	ldr	r2, [pc, #568]	; (8001f18 <HAL_DMA_IRQHandler+0x24c>)
 8001cde:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d01a      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d013      	beq.n	8001d38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2208      	movs	r2, #8
 8001d26:	409a      	lsls	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	f043 0202 	orr.w	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2204      	movs	r2, #4
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d012      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00b      	beq.n	8001da4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	2204      	movs	r2, #4
 8001d92:	409a      	lsls	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9c:	f043 0204 	orr.w	r2, r3, #4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2210      	movs	r2, #16
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d043      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03c      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d018      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d108      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d024      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	4798      	blx	r3
 8001dfa:	e01f      	b.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01b      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
 8001e0c:	e016      	b.n	8001e3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0208 	bic.w	r2, r2, #8
 8001e2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	2220      	movs	r2, #32
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 808f 	beq.w	8001f6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8087 	beq.w	8001f6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2220      	movs	r2, #32
 8001e64:	409a      	lsls	r2, r3
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d136      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0216 	bic.w	r2, r2, #22
 8001e84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <HAL_DMA_IRQHandler+0x1da>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d007      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0208 	bic.w	r2, r2, #8
 8001eb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	223f      	movs	r2, #63	; 0x3f
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d07e      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
        }
        return;
 8001ee2:	e079      	b.n	8001fd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01d      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10d      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d031      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	4798      	blx	r3
 8001f10:	e02c      	b.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
 8001f12:	bf00      	nop
 8001f14:	20000000 	.word	0x20000000
 8001f18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d023      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
 8001f2c:	e01e      	b.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10f      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0210 	bic.w	r2, r2, #16
 8001f4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d032      	beq.n	8001fda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d022      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2205      	movs	r2, #5
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d307      	bcc.n	8001fb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f2      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x2cc>
 8001fb2:	e000      	b.n	8001fb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	4798      	blx	r3
 8001fd6:	e000      	b.n	8001fda <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fd8:	bf00      	nop
    }
  }
}
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ffc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d108      	bne.n	8002020 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800201e:	e007      	b.n	8002030 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3b10      	subs	r3, #16
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <DMA_CalcBaseAndBitshift+0x64>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002056:	4a13      	ldr	r2, [pc, #76]	; (80020a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d909      	bls.n	800207e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	1d1a      	adds	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	659a      	str	r2, [r3, #88]	; 0x58
 800207c:	e007      	b.n	800208e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	aaaaaaab 	.word	0xaaaaaaab
 80020a4:	08005d08 	.word	0x08005d08

080020a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d11f      	bne.n	8002102 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d856      	bhi.n	8002176 <DMA_CheckFifoParam+0xce>
 80020c8:	a201      	add	r2, pc, #4	; (adr r2, 80020d0 <DMA_CheckFifoParam+0x28>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020e1 	.word	0x080020e1
 80020d4:	080020f3 	.word	0x080020f3
 80020d8:	080020e1 	.word	0x080020e1
 80020dc:	08002177 	.word	0x08002177
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d046      	beq.n	800217a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020f0:	e043      	b.n	800217a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020fa:	d140      	bne.n	800217e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002100:	e03d      	b.n	800217e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210a:	d121      	bne.n	8002150 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d837      	bhi.n	8002182 <DMA_CheckFifoParam+0xda>
 8002112:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <DMA_CheckFifoParam+0x70>)
 8002114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002118:	08002129 	.word	0x08002129
 800211c:	0800212f 	.word	0x0800212f
 8002120:	08002129 	.word	0x08002129
 8002124:	08002141 	.word	0x08002141
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      break;
 800212c:	e030      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d025      	beq.n	8002186 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213e:	e022      	b.n	8002186 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002148:	d11f      	bne.n	800218a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800214e:	e01c      	b.n	800218a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d903      	bls.n	800215e <DMA_CheckFifoParam+0xb6>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d003      	beq.n	8002164 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800215c:	e018      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	73fb      	strb	r3, [r7, #15]
      break;
 8002162:	e015      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00e      	beq.n	800218e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      break;
 8002174:	e00b      	b.n	800218e <DMA_CheckFifoParam+0xe6>
      break;
 8002176:	bf00      	nop
 8002178:	e00a      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 800217a:	bf00      	nop
 800217c:	e008      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 800217e:	bf00      	nop
 8002180:	e006      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 8002182:	bf00      	nop
 8002184:	e004      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 8002186:	bf00      	nop
 8002188:	e002      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;   
 800218a:	bf00      	nop
 800218c:	e000      	b.n	8002190 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
    }
  } 
  
  return status; 
 8002190:	7bfb      	ldrb	r3, [r7, #15]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e165      	b.n	8002488 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 8154 	bne.w	8002482 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d005      	beq.n	80021f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d130      	bne.n	8002254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80ae 	beq.w	8002482 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_GPIO_Init+0x300>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a5c      	ldr	r2, [pc, #368]	; (80024a0 <HAL_GPIO_Init+0x300>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b5a      	ldr	r3, [pc, #360]	; (80024a0 <HAL_GPIO_Init+0x300>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a58      	ldr	r2, [pc, #352]	; (80024a4 <HAL_GPIO_Init+0x304>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4f      	ldr	r2, [pc, #316]	; (80024a8 <HAL_GPIO_Init+0x308>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d025      	beq.n	80023ba <HAL_GPIO_Init+0x21a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4e      	ldr	r2, [pc, #312]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d01f      	beq.n	80023b6 <HAL_GPIO_Init+0x216>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_GPIO_Init+0x310>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d019      	beq.n	80023b2 <HAL_GPIO_Init+0x212>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4c      	ldr	r2, [pc, #304]	; (80024b4 <HAL_GPIO_Init+0x314>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4b      	ldr	r2, [pc, #300]	; (80024b8 <HAL_GPIO_Init+0x318>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00d      	beq.n	80023aa <HAL_GPIO_Init+0x20a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4a      	ldr	r2, [pc, #296]	; (80024bc <HAL_GPIO_Init+0x31c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <HAL_GPIO_Init+0x206>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a49      	ldr	r2, [pc, #292]	; (80024c0 <HAL_GPIO_Init+0x320>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_GPIO_Init+0x202>
 800239e:	2306      	movs	r3, #6
 80023a0:	e00c      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023a2:	2307      	movs	r3, #7
 80023a4:	e00a      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x21c>
 80023ba:	2300      	movs	r3, #0
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023cc:	4935      	ldr	r1, [pc, #212]	; (80024a4 <HAL_GPIO_Init+0x304>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023da:	4b3a      	ldr	r3, [pc, #232]	; (80024c4 <HAL_GPIO_Init+0x324>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023fe:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002404:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002428:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <HAL_GPIO_Init+0x324>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800242e:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002452:	4a1c      	ldr	r2, [pc, #112]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_GPIO_Init+0x324>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800247c:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <HAL_GPIO_Init+0x324>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	f67f ae96 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e001      	b.n	80024ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002514:	e003      	b.n	800251e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	041a      	lsls	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_PWREx_EnableOverDrive+0x90>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <HAL_PWREx_EnableOverDrive+0x90>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_PWREx_EnableOverDrive+0x90>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002554:	2201      	movs	r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002558:	f7ff f902 	bl	8001760 <HAL_GetTick>
 800255c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800255e:	e009      	b.n	8002574 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002560:	f7ff f8fe 	bl	8001760 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800256e:	d901      	bls.n	8002574 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e01f      	b.n	80025b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002580:	d1ee      	bne.n	8002560 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002588:	f7ff f8ea 	bl	8001760 <HAL_GetTick>
 800258c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800258e:	e009      	b.n	80025a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002590:	f7ff f8e6 	bl	8001760 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800259e:	d901      	bls.n	80025a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e007      	b.n	80025b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025a4:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025b0:	d1ee      	bne.n	8002590 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	420e0040 	.word	0x420e0040
 80025c4:	40007000 	.word	0x40007000
 80025c8:	420e0044 	.word	0x420e0044

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0cc      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d90c      	bls.n	8002608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b65      	ldr	r3, [pc, #404]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b8      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	494d      	ldr	r1, [pc, #308]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d044      	beq.n	80026ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d119      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	2b03      	cmp	r3, #3
 8002688:	d107      	bne.n	800269a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e06f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e067      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f023 0203 	bic.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4934      	ldr	r1, [pc, #208]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026bc:	f7ff f850 	bl	8001760 <HAL_GetTick>
 80026c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7ff f84c 	bl	8001760 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e04f      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026da:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 020c 	and.w	r2, r3, #12
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d1eb      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d20c      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e032      	b.n	800277a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002752:	f000 f855 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe ffb0 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023c00 	.word	0x40023c00
 8002788:	40023800 	.word	0x40023800
 800278c:	08005cf0 	.word	0x08005cf0
 8002790:	20000000 	.word	0x20000000
 8002794:	20000004 	.word	0x20000004

08002798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_RCC_GetHCLKFreq+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027b4:	f7ff fff0 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0a9b      	lsrs	r3, r3, #10
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08005d00 	.word	0x08005d00

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027dc:	f7ff ffdc 	bl	8002798 <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0b5b      	lsrs	r3, r3, #13
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40023800 	.word	0x40023800
 80027fc:	08005d00 	.word	0x08005d00

08002800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	b0a6      	sub	sp, #152	; 0x98
 8002806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002826:	4bc8      	ldr	r3, [pc, #800]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b0c      	cmp	r3, #12
 8002830:	f200 817e 	bhi.w	8002b30 <HAL_RCC_GetSysClockFreq+0x330>
 8002834:	a201      	add	r2, pc, #4	; (adr r2, 800283c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	08002871 	.word	0x08002871
 8002840:	08002b31 	.word	0x08002b31
 8002844:	08002b31 	.word	0x08002b31
 8002848:	08002b31 	.word	0x08002b31
 800284c:	08002879 	.word	0x08002879
 8002850:	08002b31 	.word	0x08002b31
 8002854:	08002b31 	.word	0x08002b31
 8002858:	08002b31 	.word	0x08002b31
 800285c:	08002881 	.word	0x08002881
 8002860:	08002b31 	.word	0x08002b31
 8002864:	08002b31 	.word	0x08002b31
 8002868:	08002b31 	.word	0x08002b31
 800286c:	080029eb 	.word	0x080029eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4bb6      	ldr	r3, [pc, #728]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002876:	e15f      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002878:	4bb5      	ldr	r3, [pc, #724]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x350>)
 800287a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800287e:	e15b      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002880:	4bb1      	ldr	r3, [pc, #708]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288c:	4bae      	ldr	r3, [pc, #696]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d031      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002898:	4bab      	ldr	r3, [pc, #684]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	2200      	movs	r2, #0
 80028a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80028a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028aa:	663b      	str	r3, [r7, #96]	; 0x60
 80028ac:	2300      	movs	r3, #0
 80028ae:	667b      	str	r3, [r7, #100]	; 0x64
 80028b0:	4ba7      	ldr	r3, [pc, #668]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x350>)
 80028b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80028b6:	462a      	mov	r2, r5
 80028b8:	fb03 f202 	mul.w	r2, r3, r2
 80028bc:	2300      	movs	r3, #0
 80028be:	4621      	mov	r1, r4
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	4aa2      	ldr	r2, [pc, #648]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x350>)
 80028c8:	4621      	mov	r1, r4
 80028ca:	fba1 1202 	umull	r1, r2, r1, r2
 80028ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80028d0:	460a      	mov	r2, r1
 80028d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80028d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80028d6:	4413      	add	r3, r2
 80028d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028de:	2200      	movs	r2, #0
 80028e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80028e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80028e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80028ec:	f7fd fc8a 	bl	8000204 <__aeabi_uldivmod>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4613      	mov	r3, r2
 80028f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80028fa:	e064      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	2200      	movs	r2, #0
 8002904:	653b      	str	r3, [r7, #80]	; 0x50
 8002906:	657a      	str	r2, [r7, #84]	; 0x54
 8002908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002910:	2300      	movs	r3, #0
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002914:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002918:	4622      	mov	r2, r4
 800291a:	462b      	mov	r3, r5
 800291c:	f04f 0000 	mov.w	r0, #0
 8002920:	f04f 0100 	mov.w	r1, #0
 8002924:	0159      	lsls	r1, r3, #5
 8002926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800292a:	0150      	lsls	r0, r2, #5
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4621      	mov	r1, r4
 8002932:	1a51      	subs	r1, r2, r1
 8002934:	6139      	str	r1, [r7, #16]
 8002936:	4629      	mov	r1, r5
 8002938:	eb63 0301 	sbc.w	r3, r3, r1
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800294a:	4659      	mov	r1, fp
 800294c:	018b      	lsls	r3, r1, #6
 800294e:	4651      	mov	r1, sl
 8002950:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002954:	4651      	mov	r1, sl
 8002956:	018a      	lsls	r2, r1, #6
 8002958:	4651      	mov	r1, sl
 800295a:	ebb2 0801 	subs.w	r8, r2, r1
 800295e:	4659      	mov	r1, fp
 8002960:	eb63 0901 	sbc.w	r9, r3, r1
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002978:	4690      	mov	r8, r2
 800297a:	4699      	mov	r9, r3
 800297c:	4623      	mov	r3, r4
 800297e:	eb18 0303 	adds.w	r3, r8, r3
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	462b      	mov	r3, r5
 8002986:	eb49 0303 	adc.w	r3, r9, r3
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002998:	4629      	mov	r1, r5
 800299a:	028b      	lsls	r3, r1, #10
 800299c:	4621      	mov	r1, r4
 800299e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a2:	4621      	mov	r1, r4
 80029a4:	028a      	lsls	r2, r1, #10
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ae:	2200      	movs	r2, #0
 80029b0:	643b      	str	r3, [r7, #64]	; 0x40
 80029b2:	647a      	str	r2, [r7, #68]	; 0x44
 80029b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029b8:	f7fd fc24 	bl	8000204 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c6:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	3301      	adds	r3, #1
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80029d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80029e8:	e0a6      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ea:	4b57      	ldr	r3, [pc, #348]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f6:	4b54      	ldr	r3, [pc, #336]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d02a      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	099b      	lsrs	r3, r3, #6
 8002a08:	2200      	movs	r2, #0
 8002a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a14:	2100      	movs	r1, #0
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a18:	fb03 f201 	mul.w	r2, r3, r1
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	fb00 f303 	mul.w	r3, r0, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	4a4a      	ldr	r2, [pc, #296]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a26:	fba0 1202 	umull	r1, r2, r0, r2
 8002a2a:	677a      	str	r2, [r7, #116]	; 0x74
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	673a      	str	r2, [r7, #112]	; 0x70
 8002a30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a32:	4413      	add	r3, r2
 8002a34:	677b      	str	r3, [r7, #116]	; 0x74
 8002a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a3e:	637a      	str	r2, [r7, #52]	; 0x34
 8002a40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002a48:	f7fd fbdc 	bl	8000204 <__aeabi_uldivmod>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4613      	mov	r3, r2
 8002a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a56:	e05b      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a58:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	2200      	movs	r2, #0
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6a:	623b      	str	r3, [r7, #32]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a74:	4642      	mov	r2, r8
 8002a76:	464b      	mov	r3, r9
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	0159      	lsls	r1, r3, #5
 8002a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a86:	0150      	lsls	r0, r2, #5
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a92:	4649      	mov	r1, r9
 8002a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aac:	ebb2 040a 	subs.w	r4, r2, sl
 8002ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	00eb      	lsls	r3, r5, #3
 8002abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac2:	00e2      	lsls	r2, r4, #3
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	4643      	mov	r3, r8
 8002aca:	18e3      	adds	r3, r4, r3
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	464b      	mov	r3, r9
 8002ad0:	eb45 0303 	adc.w	r3, r5, r3
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	028b      	lsls	r3, r1, #10
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aec:	4621      	mov	r1, r4
 8002aee:	028a      	lsls	r2, r1, #10
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af8:	2200      	movs	r2, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	61fa      	str	r2, [r7, #28]
 8002afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b02:	f7fd fb7f 	bl	8000204 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	0f1b      	lsrs	r3, r3, #28
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b2e:	e003      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3798      	adds	r7, #152	; 0x98
 8002b40:	46bd      	mov	sp, r7
 8002b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	00f42400 	.word	0x00f42400
 8002b50:	017d7840 	.word	0x017d7840

08002b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e28d      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8083 	beq.w	8002c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b74:	4b94      	ldr	r3, [pc, #592]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d019      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b80:	4b91      	ldr	r3, [pc, #580]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b8c:	4b8e      	ldr	r3, [pc, #568]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b98:	d00c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b8b      	ldr	r3, [pc, #556]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	d112      	bne.n	8002bcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba6:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb2:	d10b      	bne.n	8002bcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	4b84      	ldr	r3, [pc, #528]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05b      	beq.n	8002c78 <HAL_RCC_OscConfig+0x124>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d157      	bne.n	8002c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e25a      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x90>
 8002bd6:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a7b      	ldr	r2, [pc, #492]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0xcc>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0xb4>
 8002bee:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a75      	ldr	r2, [pc, #468]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b73      	ldr	r3, [pc, #460]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a72      	ldr	r2, [pc, #456]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0xcc>
 8002c08:	4b6f      	ldr	r3, [pc, #444]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6e      	ldr	r2, [pc, #440]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b6c      	ldr	r3, [pc, #432]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a6b      	ldr	r2, [pc, #428]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe fd9a 	bl	8001760 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fe fd96 	bl	8001760 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e21f      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0xdc>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fd86 	bl	8001760 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fd82 	bl	8001760 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e20b      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x104>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d06f      	beq.n	8002d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c86:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d017      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c92:	4b4d      	ldr	r3, [pc, #308]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d105      	bne.n	8002caa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c9e:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00b      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002caa:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb6:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d116      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_RCC_OscConfig+0x186>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e1d3      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b3b      	ldr	r3, [pc, #236]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4937      	ldr	r1, [pc, #220]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	e03a      	b.n	8002d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d020      	beq.n	8002d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <HAL_RCC_OscConfig+0x278>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fd2f 	bl	8001760 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d06:	f7fe fd2b 	bl	8001760 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1b4      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d18:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4925      	ldr	r1, [pc, #148]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_RCC_OscConfig+0x278>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe fd0e 	bl	8001760 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe fd0a 	bl	8001760 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e193      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d036      	beq.n	8002de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d016      	beq.n	8002da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d80:	f7fe fcee 	bl	8001760 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d88:	f7fe fcea 	bl	8001760 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e173      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x234>
 8002da6:	e01b      	b.n	8002de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fe fcd7 	bl	8001760 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db4:	e00e      	b.n	8002dd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db6:	f7fe fcd3 	bl	8001760 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d907      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e15c      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	42470000 	.word	0x42470000
 8002dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	4b8a      	ldr	r3, [pc, #552]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ea      	bne.n	8002db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8097 	beq.w	8002f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002df2:	4b83      	ldr	r3, [pc, #524]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10f      	bne.n	8002e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a7e      	ldr	r2, [pc, #504]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b7c      	ldr	r3, [pc, #496]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1e:	4b79      	ldr	r3, [pc, #484]	; (8003004 <HAL_RCC_OscConfig+0x4b0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e2a:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCC_OscConfig+0x4b0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a75      	ldr	r2, [pc, #468]	; (8003004 <HAL_RCC_OscConfig+0x4b0>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e36:	f7fe fc93 	bl	8001760 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fe fc8f 	bl	8001760 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e118      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e50:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <HAL_RCC_OscConfig+0x4b0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x31e>
 8002e64:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e01c      	b.n	8002eac <HAL_RCC_OscConfig+0x358>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x340>
 8002e7a:	4b61      	ldr	r3, [pc, #388]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a60      	ldr	r2, [pc, #384]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
 8002e86:	4b5e      	ldr	r3, [pc, #376]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	4a5d      	ldr	r2, [pc, #372]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6713      	str	r3, [r2, #112]	; 0x70
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0x358>
 8002e94:	4b5a      	ldr	r3, [pc, #360]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e98:	4a59      	ldr	r2, [pc, #356]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea0:	4b57      	ldr	r3, [pc, #348]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	4a56      	ldr	r2, [pc, #344]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb4:	f7fe fc54 	bl	8001760 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fc50 	bl	8001760 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0d7      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	4b4b      	ldr	r3, [pc, #300]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ee      	beq.n	8002ebc <HAL_RCC_OscConfig+0x368>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe fc3e 	bl	8001760 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fc3a 	bl	8001760 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0c1      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002efe:	4b40      	ldr	r3, [pc, #256]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1ee      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d105      	bne.n	8002f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	4a3a      	ldr	r2, [pc, #232]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80ad 	beq.w	8003080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f26:	4b36      	ldr	r3, [pc, #216]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d060      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d145      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b33      	ldr	r3, [pc, #204]	; (8003008 <HAL_RCC_OscConfig+0x4b4>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fc0e 	bl	8001760 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fc0a 	bl	8001760 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e093      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	085b      	lsrs	r3, r3, #1
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	071b      	lsls	r3, r3, #28
 8002f92:	491b      	ldr	r1, [pc, #108]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f98:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <HAL_RCC_OscConfig+0x4b4>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fbdf 	bl	8001760 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa6:	f7fe fbdb 	bl	8001760 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e064      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x452>
 8002fc4:	e05c      	b.n	8003080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <HAL_RCC_OscConfig+0x4b4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fbc8 	bl	8001760 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe fbc4 	bl	8001760 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e04d      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b06      	ldr	r3, [pc, #24]	; (8003000 <HAL_RCC_OscConfig+0x4ac>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x480>
 8002ff2:	e045      	b.n	8003080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e040      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
 8003000:	40023800 	.word	0x40023800
 8003004:	40007000 	.word	0x40007000
 8003008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800300c:	4b1f      	ldr	r3, [pc, #124]	; (800308c <HAL_RCC_OscConfig+0x538>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d030      	beq.n	800307c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d129      	bne.n	800307c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d122      	bne.n	800307c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003044:	4293      	cmp	r3, r2
 8003046:	d119      	bne.n	800307c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	085b      	lsrs	r3, r3, #1
 8003054:	3b01      	subs	r3, #1
 8003056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d10f      	bne.n	800307c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e041      	b.n	8003126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fe72 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f000 fe86 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d001      	beq.n	8003148 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e046      	b.n	80031d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <HAL_TIM_Base_Start+0xb4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d022      	beq.n	80031a0 <HAL_TIM_Base_Start+0x70>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003162:	d01d      	beq.n	80031a0 <HAL_TIM_Base_Start+0x70>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <HAL_TIM_Base_Start+0xb8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d018      	beq.n	80031a0 <HAL_TIM_Base_Start+0x70>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1e      	ldr	r2, [pc, #120]	; (80031ec <HAL_TIM_Base_Start+0xbc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_TIM_Base_Start+0x70>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <HAL_TIM_Base_Start+0xc0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d00e      	beq.n	80031a0 <HAL_TIM_Base_Start+0x70>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <HAL_TIM_Base_Start+0xc4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d009      	beq.n	80031a0 <HAL_TIM_Base_Start+0x70>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_TIM_Base_Start+0xc8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d004      	beq.n	80031a0 <HAL_TIM_Base_Start+0x70>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_TIM_Base_Start+0xcc>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d111      	bne.n	80031c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d010      	beq.n	80031d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c2:	e007      	b.n	80031d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800
 80031f0:	40000c00 	.word	0x40000c00
 80031f4:	40010400 	.word	0x40010400
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40001800 	.word	0x40001800

08003200 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e041      	b.n	8003296 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f839 	bl	800329e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f000 fdce 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_TIM_PWM_Start+0x24>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e022      	b.n	800331e <HAL_TIM_PWM_Start+0x6a>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d109      	bne.n	80032f2 <HAL_TIM_PWM_Start+0x3e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	e015      	b.n	800331e <HAL_TIM_PWM_Start+0x6a>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d109      	bne.n	800330c <HAL_TIM_PWM_Start+0x58>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e008      	b.n	800331e <HAL_TIM_PWM_Start+0x6a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b01      	cmp	r3, #1
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07c      	b.n	8003420 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_TIM_PWM_Start+0x82>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003334:	e013      	b.n	800335e <HAL_TIM_PWM_Start+0xaa>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b04      	cmp	r3, #4
 800333a:	d104      	bne.n	8003346 <HAL_TIM_PWM_Start+0x92>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003344:	e00b      	b.n	800335e <HAL_TIM_PWM_Start+0xaa>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d104      	bne.n	8003356 <HAL_TIM_PWM_Start+0xa2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003354:	e003      	b.n	800335e <HAL_TIM_PWM_Start+0xaa>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	6839      	ldr	r1, [r7, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f001 f94e 	bl	8004608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a2d      	ldr	r2, [pc, #180]	; (8003428 <HAL_TIM_PWM_Start+0x174>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_TIM_PWM_Start+0xcc>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a2c      	ldr	r2, [pc, #176]	; (800342c <HAL_TIM_PWM_Start+0x178>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_TIM_PWM_Start+0xd0>
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <HAL_TIM_PWM_Start+0xd2>
 8003384:	2300      	movs	r3, #0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a22      	ldr	r2, [pc, #136]	; (8003428 <HAL_TIM_PWM_Start+0x174>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d022      	beq.n	80033ea <HAL_TIM_PWM_Start+0x136>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d01d      	beq.n	80033ea <HAL_TIM_PWM_Start+0x136>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1f      	ldr	r2, [pc, #124]	; (8003430 <HAL_TIM_PWM_Start+0x17c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d018      	beq.n	80033ea <HAL_TIM_PWM_Start+0x136>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <HAL_TIM_PWM_Start+0x180>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d013      	beq.n	80033ea <HAL_TIM_PWM_Start+0x136>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1c      	ldr	r2, [pc, #112]	; (8003438 <HAL_TIM_PWM_Start+0x184>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00e      	beq.n	80033ea <HAL_TIM_PWM_Start+0x136>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a16      	ldr	r2, [pc, #88]	; (800342c <HAL_TIM_PWM_Start+0x178>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_TIM_PWM_Start+0x136>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_TIM_PWM_Start+0x188>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d004      	beq.n	80033ea <HAL_TIM_PWM_Start+0x136>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_TIM_PWM_Start+0x18c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d111      	bne.n	800340e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b06      	cmp	r3, #6
 80033fa:	d010      	beq.n	800341e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340c:	e007      	b.n	800341e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40010000 	.word	0x40010000
 800342c:	40010400 	.word	0x40010400
 8003430:	40000400 	.word	0x40000400
 8003434:	40000800 	.word	0x40000800
 8003438:	40000c00 	.word	0x40000c00
 800343c:	40014000 	.word	0x40014000
 8003440:	40001800 	.word	0x40001800

08003444 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e041      	b.n	80034da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fcce 	bl	8000e0c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 fcac 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_IC_Start_IT+0x1e>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e013      	b.n	800352a <HAL_TIM_IC_Start_IT+0x46>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d104      	bne.n	8003512 <HAL_TIM_IC_Start_IT+0x2e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800350e:	b2db      	uxtb	r3, r3
 8003510:	e00b      	b.n	800352a <HAL_TIM_IC_Start_IT+0x46>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start_IT+0x3e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e003      	b.n	800352a <HAL_TIM_IC_Start_IT+0x46>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	b2db      	uxtb	r3, r3
 800352a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <HAL_TIM_IC_Start_IT+0x58>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e013      	b.n	8003564 <HAL_TIM_IC_Start_IT+0x80>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b04      	cmp	r3, #4
 8003540:	d104      	bne.n	800354c <HAL_TIM_IC_Start_IT+0x68>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e00b      	b.n	8003564 <HAL_TIM_IC_Start_IT+0x80>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b08      	cmp	r3, #8
 8003550:	d104      	bne.n	800355c <HAL_TIM_IC_Start_IT+0x78>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e003      	b.n	8003564 <HAL_TIM_IC_Start_IT+0x80>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003562:	b2db      	uxtb	r3, r3
 8003564:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003566:	7bbb      	ldrb	r3, [r7, #14]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d102      	bne.n	8003572 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800356c:	7b7b      	ldrb	r3, [r7, #13]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0cc      	b.n	8003710 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d104      	bne.n	8003586 <HAL_TIM_IC_Start_IT+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	e013      	b.n	80035ae <HAL_TIM_IC_Start_IT+0xca>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d104      	bne.n	8003596 <HAL_TIM_IC_Start_IT+0xb2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003594:	e00b      	b.n	80035ae <HAL_TIM_IC_Start_IT+0xca>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_IC_Start_IT+0xc2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035a4:	e003      	b.n	80035ae <HAL_TIM_IC_Start_IT+0xca>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_TIM_IC_Start_IT+0xda>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035bc:	e013      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x102>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_IC_Start_IT+0xea>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035cc:	e00b      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x102>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d104      	bne.n	80035de <HAL_TIM_IC_Start_IT+0xfa>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035dc:	e003      	b.n	80035e6 <HAL_TIM_IC_Start_IT+0x102>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d841      	bhi.n	8003670 <HAL_TIM_IC_Start_IT+0x18c>
 80035ec:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <HAL_TIM_IC_Start_IT+0x110>)
 80035ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f2:	bf00      	nop
 80035f4:	08003629 	.word	0x08003629
 80035f8:	08003671 	.word	0x08003671
 80035fc:	08003671 	.word	0x08003671
 8003600:	08003671 	.word	0x08003671
 8003604:	0800363b 	.word	0x0800363b
 8003608:	08003671 	.word	0x08003671
 800360c:	08003671 	.word	0x08003671
 8003610:	08003671 	.word	0x08003671
 8003614:	0800364d 	.word	0x0800364d
 8003618:	08003671 	.word	0x08003671
 800361c:	08003671 	.word	0x08003671
 8003620:	08003671 	.word	0x08003671
 8003624:	0800365f 	.word	0x0800365f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0202 	orr.w	r2, r2, #2
 8003636:	60da      	str	r2, [r3, #12]
      break;
 8003638:	e01d      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0204 	orr.w	r2, r2, #4
 8003648:	60da      	str	r2, [r3, #12]
      break;
 800364a:	e014      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0208 	orr.w	r2, r2, #8
 800365a:	60da      	str	r2, [r3, #12]
      break;
 800365c:	e00b      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0210 	orr.w	r2, r2, #16
 800366c:	60da      	str	r2, [r3, #12]
      break;
 800366e:	e002      	b.n	8003676 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	bf00      	nop
  }

  if (status == HAL_OK)
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d148      	bne.n	800370e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2201      	movs	r2, #1
 8003682:	6839      	ldr	r1, [r7, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 ffbf 	bl	8004608 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a22      	ldr	r2, [pc, #136]	; (8003718 <HAL_TIM_IC_Start_IT+0x234>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_TIM_IC_Start_IT+0x1f6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369c:	d01d      	beq.n	80036da <HAL_TIM_IC_Start_IT+0x1f6>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1e      	ldr	r2, [pc, #120]	; (800371c <HAL_TIM_IC_Start_IT+0x238>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <HAL_TIM_IC_Start_IT+0x1f6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_TIM_IC_Start_IT+0x23c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_TIM_IC_Start_IT+0x1f6>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_TIM_IC_Start_IT+0x240>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_TIM_IC_Start_IT+0x1f6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_TIM_IC_Start_IT+0x244>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_TIM_IC_Start_IT+0x1f6>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_TIM_IC_Start_IT+0x248>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_TIM_IC_Start_IT+0x1f6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a16      	ldr	r2, [pc, #88]	; (8003730 <HAL_TIM_IC_Start_IT+0x24c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d111      	bne.n	80036fe <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b06      	cmp	r3, #6
 80036ea:	d010      	beq.n	800370e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fc:	e007      	b.n	800370e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800370e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40010000 	.word	0x40010000
 800371c:	40000400 	.word	0x40000400
 8003720:	40000800 	.word	0x40000800
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40010400 	.word	0x40010400
 800372c:	40014000 	.word	0x40014000
 8003730:	40001800 	.word	0x40001800

08003734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b02      	cmp	r3, #2
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0202 	mvn.w	r2, #2
 8003760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fc fec6 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fb0f 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fb16 	bl	8003db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b04      	cmp	r3, #4
 800379c:	d122      	bne.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d11b      	bne.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0204 	mvn.w	r2, #4
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fc fe9c 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fae5 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 faec 	bl	8003db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0208 	mvn.w	r2, #8
 8003808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2204      	movs	r2, #4
 800380e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fc fe72 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fabb 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fac2 	bl	8003db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	2b10      	cmp	r3, #16
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b10      	cmp	r3, #16
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0210 	mvn.w	r2, #16
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2208      	movs	r2, #8
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fc fe48 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa91 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fa98 	bl	8003db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10e      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d107      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0201 	mvn.w	r2, #1
 80038b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa6b 	bl	8003d8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d0:	2b80      	cmp	r3, #128	; 0x80
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 ff90 	bl	8004804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	2b40      	cmp	r3, #64	; 0x40
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa5d 	bl	8003dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b20      	cmp	r3, #32
 800391c:	d10e      	bne.n	800393c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b20      	cmp	r3, #32
 800392a:	d107      	bne.n	800393c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0220 	mvn.w	r2, #32
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 ff5a 	bl	80047f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_TIM_IC_ConfigChannel+0x1e>
 800395e:	2302      	movs	r3, #2
 8003960:	e088      	b.n	8003a74 <HAL_TIM_IC_ConfigChannel+0x130>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11b      	bne.n	80039a8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	6819      	ldr	r1, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f000 fc7e 	bl	8004280 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 020c 	bic.w	r2, r2, #12
 8003992:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	619a      	str	r2, [r3, #24]
 80039a6:	e060      	b.n	8003a6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d11c      	bne.n	80039e8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f000 fd02 	bl	80043c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6999      	ldr	r1, [r3, #24]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	021a      	lsls	r2, r3, #8
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	619a      	str	r2, [r3, #24]
 80039e6:	e040      	b.n	8003a6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d11b      	bne.n	8003a26 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f000 fd4f 	bl	80044a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69da      	ldr	r2, [r3, #28]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 020c 	bic.w	r2, r2, #12
 8003a10:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69d9      	ldr	r1, [r3, #28]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	61da      	str	r2, [r3, #28]
 8003a24:	e021      	b.n	8003a6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d11c      	bne.n	8003a66 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f000 fd6c 	bl	8004518 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a4e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69d9      	ldr	r1, [r3, #28]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	021a      	lsls	r2, r3, #8
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	61da      	str	r2, [r3, #28]
 8003a64:	e001      	b.n	8003a6a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0ae      	b.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	f200 809f 	bhi.w	8003be8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003be9 	.word	0x08003be9
 8003ab8:	08003be9 	.word	0x08003be9
 8003abc:	08003be9 	.word	0x08003be9
 8003ac0:	08003b25 	.word	0x08003b25
 8003ac4:	08003be9 	.word	0x08003be9
 8003ac8:	08003be9 	.word	0x08003be9
 8003acc:	08003be9 	.word	0x08003be9
 8003ad0:	08003b67 	.word	0x08003b67
 8003ad4:	08003be9 	.word	0x08003be9
 8003ad8:	08003be9 	.word	0x08003be9
 8003adc:	08003be9 	.word	0x08003be9
 8003ae0:	08003ba7 	.word	0x08003ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fa18 	bl	8003f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6999      	ldr	r1, [r3, #24]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	619a      	str	r2, [r3, #24]
      break;
 8003b22:	e064      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fa68 	bl	8004000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	021a      	lsls	r2, r3, #8
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	619a      	str	r2, [r3, #24]
      break;
 8003b64:	e043      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fabd 	bl	80040ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0208 	orr.w	r2, r2, #8
 8003b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0204 	bic.w	r2, r2, #4
 8003b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69d9      	ldr	r1, [r3, #28]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	61da      	str	r2, [r3, #28]
      break;
 8003ba4:	e023      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fb11 	bl	80041d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	021a      	lsls	r2, r3, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	61da      	str	r2, [r3, #28]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	75fb      	strb	r3, [r7, #23]
      break;
 8003bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_ConfigClockSource+0x1c>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e0b4      	b.n	8003d86 <HAL_TIM_ConfigClockSource+0x186>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c54:	d03e      	beq.n	8003cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8003c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c5a:	f200 8087 	bhi.w	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	f000 8086 	beq.w	8003d72 <HAL_TIM_ConfigClockSource+0x172>
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6a:	d87f      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b70      	cmp	r3, #112	; 0x70
 8003c6e:	d01a      	beq.n	8003ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8003c70:	2b70      	cmp	r3, #112	; 0x70
 8003c72:	d87b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b60      	cmp	r3, #96	; 0x60
 8003c76:	d050      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0x11a>
 8003c78:	2b60      	cmp	r3, #96	; 0x60
 8003c7a:	d877      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b50      	cmp	r3, #80	; 0x50
 8003c7e:	d03c      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xfa>
 8003c80:	2b50      	cmp	r3, #80	; 0x50
 8003c82:	d873      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b40      	cmp	r3, #64	; 0x40
 8003c86:	d058      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0x13a>
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d86f      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d064      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	2b30      	cmp	r3, #48	; 0x30
 8003c92:	d86b      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d060      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d867      	bhi.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05c      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d05a      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x15a>
 8003ca4:	e062      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6899      	ldr	r1, [r3, #8]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f000 fc87 	bl	80045c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	609a      	str	r2, [r3, #8]
      break;
 8003cd2:	e04f      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f000 fc70 	bl	80045c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cf6:	609a      	str	r2, [r3, #8]
      break;
 8003cf8:	e03c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6859      	ldr	r1, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f000 fb2e 	bl	8004368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2150      	movs	r1, #80	; 0x50
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fc3d 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003d18:	e02c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	461a      	mov	r2, r3
 8003d28:	f000 fb8a 	bl	8004440 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2160      	movs	r1, #96	; 0x60
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fc2d 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003d38:	e01c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 fb0e 	bl	8004368 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2140      	movs	r1, #64	; 0x40
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fc1d 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003d58:	e00c      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	4610      	mov	r0, r2
 8003d66:	f000 fc14 	bl	8004592 <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e003      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d70:	e000      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a40      	ldr	r2, [pc, #256]	; (8003ef4 <TIM_Base_SetConfig+0x114>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d00f      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3d      	ldr	r2, [pc, #244]	; (8003ef8 <TIM_Base_SetConfig+0x118>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3c      	ldr	r2, [pc, #240]	; (8003efc <TIM_Base_SetConfig+0x11c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3b      	ldr	r2, [pc, #236]	; (8003f00 <TIM_Base_SetConfig+0x120>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a3a      	ldr	r2, [pc, #232]	; (8003f04 <TIM_Base_SetConfig+0x124>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d108      	bne.n	8003e32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a2f      	ldr	r2, [pc, #188]	; (8003ef4 <TIM_Base_SetConfig+0x114>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d02b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e40:	d027      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2c      	ldr	r2, [pc, #176]	; (8003ef8 <TIM_Base_SetConfig+0x118>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d023      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2b      	ldr	r2, [pc, #172]	; (8003efc <TIM_Base_SetConfig+0x11c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <TIM_Base_SetConfig+0x120>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <TIM_Base_SetConfig+0x124>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d017      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a28      	ldr	r2, [pc, #160]	; (8003f08 <TIM_Base_SetConfig+0x128>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <TIM_Base_SetConfig+0x12c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a26      	ldr	r2, [pc, #152]	; (8003f10 <TIM_Base_SetConfig+0x130>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a25      	ldr	r2, [pc, #148]	; (8003f14 <TIM_Base_SetConfig+0x134>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <TIM_Base_SetConfig+0x138>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <TIM_Base_SetConfig+0x13c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <TIM_Base_SetConfig+0x114>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0xf8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <TIM_Base_SetConfig+0x124>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d103      	bne.n	8003ee0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	615a      	str	r2, [r3, #20]
}
 8003ee6:	bf00      	nop
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40000c00 	.word	0x40000c00
 8003f04:	40010400 	.word	0x40010400
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	40014400 	.word	0x40014400
 8003f10:	40014800 	.word	0x40014800
 8003f14:	40001800 	.word	0x40001800
 8003f18:	40001c00 	.word	0x40001c00
 8003f1c:	40002000 	.word	0x40002000

08003f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f023 0201 	bic.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0303 	bic.w	r3, r3, #3
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 0302 	bic.w	r3, r3, #2
 8003f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <TIM_OC1_SetConfig+0xd8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_OC1_SetConfig+0x64>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <TIM_OC1_SetConfig+0xdc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10c      	bne.n	8003f9e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0308 	bic.w	r3, r3, #8
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <TIM_OC1_SetConfig+0xd8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC1_SetConfig+0x8e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <TIM_OC1_SetConfig+0xdc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d111      	bne.n	8003fd2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	621a      	str	r2, [r3, #32]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40010400 	.word	0x40010400

08004000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0210 	bic.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0320 	bic.w	r3, r3, #32
 800404a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <TIM_OC2_SetConfig+0xe4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <TIM_OC2_SetConfig+0x68>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <TIM_OC2_SetConfig+0xe8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10d      	bne.n	8004084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <TIM_OC2_SetConfig+0xe4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_OC2_SetConfig+0x94>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a16      	ldr	r2, [pc, #88]	; (80040e8 <TIM_OC2_SetConfig+0xe8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d113      	bne.n	80040bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	621a      	str	r2, [r3, #32]
}
 80040d6:	bf00      	nop
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40010400 	.word	0x40010400

080040ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	021b      	lsls	r3, r3, #8
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a21      	ldr	r2, [pc, #132]	; (80041cc <TIM_OC3_SetConfig+0xe0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d003      	beq.n	8004152 <TIM_OC3_SetConfig+0x66>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <TIM_OC3_SetConfig+0xe4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10d      	bne.n	800416e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a16      	ldr	r2, [pc, #88]	; (80041cc <TIM_OC3_SetConfig+0xe0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_OC3_SetConfig+0x92>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <TIM_OC3_SetConfig+0xe4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d113      	bne.n	80041a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	021b      	lsls	r3, r3, #8
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	031b      	lsls	r3, r3, #12
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <TIM_OC4_SetConfig+0xa4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_OC4_SetConfig+0x68>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a11      	ldr	r2, [pc, #68]	; (800427c <TIM_OC4_SetConfig+0xa8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d109      	bne.n	8004250 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	019b      	lsls	r3, r3, #6
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	621a      	str	r2, [r3, #32]
}
 800426a:	bf00      	nop
 800426c:	371c      	adds	r7, #28
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40010400 	.word	0x40010400

08004280 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a28      	ldr	r2, [pc, #160]	; (800434c <TIM_TI1_SetConfig+0xcc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01b      	beq.n	80042e6 <TIM_TI1_SetConfig+0x66>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b4:	d017      	beq.n	80042e6 <TIM_TI1_SetConfig+0x66>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a25      	ldr	r2, [pc, #148]	; (8004350 <TIM_TI1_SetConfig+0xd0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <TIM_TI1_SetConfig+0x66>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a24      	ldr	r2, [pc, #144]	; (8004354 <TIM_TI1_SetConfig+0xd4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00f      	beq.n	80042e6 <TIM_TI1_SetConfig+0x66>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a23      	ldr	r2, [pc, #140]	; (8004358 <TIM_TI1_SetConfig+0xd8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <TIM_TI1_SetConfig+0x66>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <TIM_TI1_SetConfig+0xdc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <TIM_TI1_SetConfig+0x66>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a21      	ldr	r2, [pc, #132]	; (8004360 <TIM_TI1_SetConfig+0xe0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_TI1_SetConfig+0x66>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a20      	ldr	r2, [pc, #128]	; (8004364 <TIM_TI1_SetConfig+0xe4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <TIM_TI1_SetConfig+0x6a>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <TIM_TI1_SetConfig+0x6c>
 80042ea:	2300      	movs	r3, #0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0303 	bic.w	r3, r3, #3
 80042f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e003      	b.n	800430a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	b2db      	uxtb	r3, r3
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f023 030a 	bic.w	r3, r3, #10
 8004324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 030a 	and.w	r3, r3, #10
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40010400 	.word	0x40010400
 8004360:	40014000 	.word	0x40014000
 8004364:	40001800 	.word	0x40001800

08004368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 030a 	bic.w	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f023 0210 	bic.w	r2, r3, #16
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	031b      	lsls	r3, r3, #12
 800440a:	b29b      	uxth	r3, r3
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004418:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f023 0210 	bic.w	r2, r3, #16
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800446a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	031b      	lsls	r3, r3, #12
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800447c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	621a      	str	r2, [r3, #32]
}
 8004494:	bf00      	nop
 8004496:	371c      	adds	r7, #28
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0303 	bic.w	r3, r3, #3
 80044cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80044f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	621a      	str	r2, [r3, #32]
}
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004544:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004556:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	031b      	lsls	r3, r3, #12
 800455c:	b29b      	uxth	r3, r3
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800456a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	031b      	lsls	r3, r3, #12
 8004570:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f043 0307 	orr.w	r3, r3, #7
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	609a      	str	r2, [r3, #8]
}
 80045bc:	bf00      	nop
 80045be:	3714      	adds	r7, #20
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	021a      	lsls	r2, r3, #8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	2201      	movs	r2, #1
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1a      	ldr	r2, [r3, #32]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	43db      	mvns	r3, r3
 800462a:	401a      	ands	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004668:	2302      	movs	r3, #2
 800466a:	e05a      	b.n	8004722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a21      	ldr	r2, [pc, #132]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d022      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d01d      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d018      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d013      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a1a      	ldr	r2, [pc, #104]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00e      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d009      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a17      	ldr	r2, [pc, #92]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a15      	ldr	r2, [pc, #84]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10c      	bne.n	8004710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	4313      	orrs	r3, r2
 8004706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40010400 	.word	0x40010400
 8004744:	40014000 	.word	0x40014000
 8004748:	40001800 	.word	0x40001800

0800474c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004764:	2302      	movs	r3, #2
 8004766:	e03d      	b.n	80047e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e03f      	b.n	80048aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fc fb6e 	bl	8000f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2224      	movs	r2, #36	; 0x24
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800485a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 ff9b 	bl	8005798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004870:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004880:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004890:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b08a      	sub	sp, #40	; 0x28
 80048b6:	af02      	add	r7, sp, #8
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d17c      	bne.n	80049cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_UART_Transmit+0x2c>
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e075      	b.n	80049ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_UART_Transmit+0x3e>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e06e      	b.n	80049ce <HAL_UART_Transmit+0x11c>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2221      	movs	r2, #33	; 0x21
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004906:	f7fc ff2b 	bl	8001760 <HAL_GetTick>
 800490a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d108      	bne.n	8004934 <HAL_UART_Transmit+0x82>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e003      	b.n	800493c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004944:	e02a      	b.n	800499c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 fc53 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e036      	b.n	80049ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	3302      	adds	r3, #2
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e007      	b.n	800498e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3301      	adds	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1cf      	bne.n	8004946 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2140      	movs	r1, #64	; 0x40
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fc23 	bl	80051fc <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e006      	b.n	80049ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	e000      	b.n	80049ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049cc:	2302      	movs	r3, #2
  }
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3720      	adds	r7, #32
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b08c      	sub	sp, #48	; 0x30
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	60b9      	str	r1, [r7, #8]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d152      	bne.n	8004a96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e04b      	b.n	8004a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e044      	b.n	8004a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004a1c:	88fb      	ldrh	r3, [r7, #6]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 fc58 	bl	80052d8 <UART_Start_Receive_DMA>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d12c      	bne.n	8004a90 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d125      	bne.n	8004a8a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	617b      	str	r3, [r7, #20]
   return(result);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f043 0310 	orr.w	r3, r3, #16
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a74:	627a      	str	r2, [r7, #36]	; 0x24
 8004a76:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6a39      	ldr	r1, [r7, #32]
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e5      	bne.n	8004a54 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004a88:	e002      	b.n	8004a90 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004a90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a94:	e000      	b.n	8004a98 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3730      	adds	r7, #48	; 0x30
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b0ba      	sub	sp, #232	; 0xe8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_UART_IRQHandler+0x66>
 8004af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fd8f 	bl	8005622 <UART_Receive_IT>
      return;
 8004b04:	e256      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80de 	beq.w	8004ccc <HAL_UART_IRQHandler+0x22c>
 8004b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80d1 	beq.w	8004ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_UART_IRQHandler+0xae>
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f043 0201 	orr.w	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <HAL_UART_IRQHandler+0xd2>
 8004b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00b      	beq.n	8004b96 <HAL_UART_IRQHandler+0xf6>
 8004b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f043 0204 	orr.w	r2, r3, #4
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d011      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x126>
 8004ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d105      	bne.n	8004bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f043 0208 	orr.w	r2, r3, #8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 81ed 	beq.w	8004faa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_UART_IRQHandler+0x14e>
 8004bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fd1a 	bl	8005622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2301      	moveq	r3, #1
 8004bfe:	2300      	movne	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d103      	bne.n	8004c1a <HAL_UART_IRQHandler+0x17a>
 8004c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d04f      	beq.n	8004cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fc22 	bl	8005464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d141      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3314      	adds	r3, #20
 8004c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c3c:	e853 3f00 	ldrex	r3, [r3]
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3314      	adds	r3, #20
 8004c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1d9      	bne.n	8004c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d013      	beq.n	8004caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	4a7d      	ldr	r2, [pc, #500]	; (8004e7c <HAL_UART_IRQHandler+0x3dc>)
 8004c88:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fc fffa 	bl	8001c88 <HAL_DMA_Abort_IT>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d016      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e00e      	b.n	8004cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9a4 	bl	8004ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb0:	e00a      	b.n	8004cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f9a0 	bl	8004ff8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	e006      	b.n	8004cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f99c 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cc6:	e170      	b.n	8004faa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	bf00      	nop
    return;
 8004cca:	e16e      	b.n	8004faa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	f040 814a 	bne.w	8004f6a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 8143 	beq.w	8004f6a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 813c 	beq.w	8004f6a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	f040 80b4 	bne.w	8004e80 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8140 	beq.w	8004fae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d36:	429a      	cmp	r2, r3
 8004d38:	f080 8139 	bcs.w	8004fae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4e:	f000 8088 	beq.w	8004e62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d60:	e853 3f00 	ldrex	r3, [r3]
 8004d64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1d9      	bne.n	8004d52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e1      	bne.n	8004d9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	3314      	adds	r3, #20
 8004de0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de4:	e853 3f00 	ldrex	r3, [r3]
 8004de8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e3      	bne.n	8004dda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2a:	e853 3f00 	ldrex	r3, [r3]
 8004e2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	330c      	adds	r3, #12
 8004e40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e44:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e3      	bne.n	8004e20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fc fea3 	bl	8001ba8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fb fbf2 	bl	800065c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e78:	e099      	b.n	8004fae <HAL_UART_IRQHandler+0x50e>
 8004e7a:	bf00      	nop
 8004e7c:	0800552b 	.word	0x0800552b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 808b 	beq.w	8004fb2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8086 	beq.w	8004fb2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	330c      	adds	r3, #12
 8004ec6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004eca:	647a      	str	r2, [r7, #68]	; 0x44
 8004ecc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e3      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3314      	adds	r3, #20
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	623b      	str	r3, [r7, #32]
   return(result);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f023 0301 	bic.w	r3, r3, #1
 8004ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3314      	adds	r3, #20
 8004efe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f02:	633a      	str	r2, [r7, #48]	; 0x30
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0310 	bic.w	r3, r3, #16
 8004f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f48:	61fa      	str	r2, [r7, #28]
 8004f4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4c:	69b9      	ldr	r1, [r7, #24]
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	e841 2300 	strex	r3, r2, [r1]
 8004f54:	617b      	str	r3, [r7, #20]
   return(result);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e3      	bne.n	8004f24 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fb fb7a 	bl	800065c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f68:	e023      	b.n	8004fb2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <HAL_UART_IRQHandler+0x4ea>
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fae5 	bl	8005552 <UART_Transmit_IT>
    return;
 8004f88:	e014      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x514>
 8004f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fb25 	bl	80055f2 <UART_EndTransmit_IT>
    return;
 8004fa8:	e004      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
    return;
 8004faa:	bf00      	nop
 8004fac:	e002      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
      return;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <HAL_UART_IRQHandler+0x514>
      return;
 8004fb2:	bf00      	nop
  }
}
 8004fb4:	37e8      	adds	r7, #232	; 0xe8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop

08004fbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b09c      	sub	sp, #112	; 0x70
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d172      	bne.n	800510e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502a:	2200      	movs	r2, #0
 800502c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	e853 3f00 	ldrex	r3, [r3]
 800503c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800503e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005044:	66bb      	str	r3, [r7, #104]	; 0x68
 8005046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800504e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005050:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800505c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1e5      	bne.n	800502e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3314      	adds	r3, #20
 8005068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	667b      	str	r3, [r7, #100]	; 0x64
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3314      	adds	r3, #20
 8005080:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005082:	647a      	str	r2, [r7, #68]	; 0x44
 8005084:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e5      	bne.n	8005062 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3314      	adds	r3, #20
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	623b      	str	r3, [r7, #32]
   return(result);
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ac:	663b      	str	r3, [r7, #96]	; 0x60
 80050ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3314      	adds	r3, #20
 80050b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050b6:	633a      	str	r2, [r7, #48]	; 0x30
 80050b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e5      	bne.n	8005096 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d119      	bne.n	800510e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	330c      	adds	r3, #12
 80050e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f023 0310 	bic.w	r3, r3, #16
 80050f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fa:	61fa      	str	r2, [r7, #28]
 80050fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	69b9      	ldr	r1, [r7, #24]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	617b      	str	r3, [r7, #20]
   return(result);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e5      	bne.n	80050da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	2b01      	cmp	r3, #1
 8005114:	d106      	bne.n	8005124 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005118:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800511a:	4619      	mov	r1, r3
 800511c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800511e:	f7fb fa9d 	bl	800065c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005122:	e002      	b.n	800512a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005124:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005126:	f7ff ff53 	bl	8004fd0 <HAL_UART_RxCpltCallback>
}
 800512a:	bf00      	nop
 800512c:	3770      	adds	r7, #112	; 0x70
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	2b01      	cmp	r3, #1
 8005146:	d108      	bne.n	800515a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	b29b      	uxth	r3, r3
 8005150:	4619      	mov	r1, r3
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f7fb fa82 	bl	800065c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005158:	e002      	b.n	8005160 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff ff42 	bl	8004fe4 <HAL_UART_RxHalfCpltCallback>
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b21      	cmp	r3, #33	; 0x21
 800519a:	d108      	bne.n	80051ae <UART_DMAError+0x46>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2200      	movs	r2, #0
 80051a6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051a8:	68b8      	ldr	r0, [r7, #8]
 80051aa:	f000 f933 	bl	8005414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b22      	cmp	r3, #34	; 0x22
 80051ce:	d108      	bne.n	80051e2 <UART_DMAError+0x7a>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051dc:	68b8      	ldr	r0, [r7, #8]
 80051de:	f000 f941 	bl	8005464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f043 0210 	orr.w	r2, r3, #16
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ee:	68b8      	ldr	r0, [r7, #8]
 80051f0:	f7ff ff02 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b090      	sub	sp, #64	; 0x40
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	603b      	str	r3, [r7, #0]
 8005208:	4613      	mov	r3, r2
 800520a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800520c:	e050      	b.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d04c      	beq.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <UART_WaitOnFlagUntilTimeout+0x30>
 800521c:	f7fc faa0 	bl	8001760 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005228:	429a      	cmp	r2, r3
 800522a:	d241      	bcs.n	80052b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800524c:	637a      	str	r2, [r7, #52]	; 0x34
 800524e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3314      	adds	r3, #20
 8005266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	e853 3f00 	ldrex	r3, [r3]
 800526e:	613b      	str	r3, [r7, #16]
   return(result);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	63bb      	str	r3, [r7, #56]	; 0x38
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	3314      	adds	r3, #20
 800527e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005280:	623a      	str	r2, [r7, #32]
 8005282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005284:	69f9      	ldr	r1, [r7, #28]
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	61bb      	str	r3, [r7, #24]
   return(result);
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1e5      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e00f      	b.n	80052d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	4013      	ands	r3, r2
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	bf0c      	ite	eq
 80052c0:	2301      	moveq	r3, #1
 80052c2:	2300      	movne	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d09f      	beq.n	800520e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3740      	adds	r7, #64	; 0x40
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b098      	sub	sp, #96	; 0x60
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2222      	movs	r2, #34	; 0x22
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	4a40      	ldr	r2, [pc, #256]	; (8005408 <UART_Start_Receive_DMA+0x130>)
 8005306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	4a3f      	ldr	r2, [pc, #252]	; (800540c <UART_Start_Receive_DMA+0x134>)
 800530e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005314:	4a3e      	ldr	r2, [pc, #248]	; (8005410 <UART_Start_Receive_DMA+0x138>)
 8005316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	2200      	movs	r2, #0
 800531e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	f7fc fbde 	bl	8001af8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d019      	beq.n	8005396 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	330c      	adds	r3, #12
 8005368:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005378:	65bb      	str	r3, [r7, #88]	; 0x58
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	330c      	adds	r3, #12
 8005380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005382:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005384:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3314      	adds	r3, #20
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	657b      	str	r3, [r7, #84]	; 0x54
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e5      	bne.n	8005396 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	617b      	str	r3, [r7, #20]
   return(result);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e0:	653b      	str	r3, [r7, #80]	; 0x50
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053ea:	627a      	str	r2, [r7, #36]	; 0x24
 80053ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6a39      	ldr	r1, [r7, #32]
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3760      	adds	r7, #96	; 0x60
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	0800500d 	.word	0x0800500d
 800540c:	08005133 	.word	0x08005133
 8005410:	08005169 	.word	0x08005169

08005414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b089      	sub	sp, #36	; 0x24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	e853 3f00 	ldrex	r3, [r3]
 800542a:	60bb      	str	r3, [r7, #8]
   return(result);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	330c      	adds	r3, #12
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	61ba      	str	r2, [r7, #24]
 800543e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005440:	6979      	ldr	r1, [r7, #20]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	e841 2300 	strex	r3, r2, [r1]
 8005448:	613b      	str	r3, [r7, #16]
   return(result);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1e5      	bne.n	800541c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005458:	bf00      	nop
 800545a:	3724      	adds	r7, #36	; 0x24
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005464:	b480      	push	{r7}
 8005466:	b095      	sub	sp, #84	; 0x54
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800548c:	643a      	str	r2, [r7, #64]	; 0x40
 800548e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e5      	bne.n	800546c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3314      	adds	r3, #20
 80054a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	e853 3f00 	ldrex	r3, [r3]
 80054ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3314      	adds	r3, #20
 80054be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e5      	bne.n	80054a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d119      	bne.n	8005510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f023 0310 	bic.w	r3, r3, #16
 80054f2:	647b      	str	r3, [r7, #68]	; 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054fc:	61ba      	str	r2, [r7, #24]
 80054fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6979      	ldr	r1, [r7, #20]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	613b      	str	r3, [r7, #16]
   return(result);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e5      	bne.n	80054dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800551e:	bf00      	nop
 8005520:	3754      	adds	r7, #84	; 0x54
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff fd57 	bl	8004ff8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b21      	cmp	r3, #33	; 0x21
 8005564:	d13e      	bne.n	80055e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556e:	d114      	bne.n	800559a <UART_Transmit_IT+0x48>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d110      	bne.n	800559a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800558c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	1c9a      	adds	r2, r3, #2
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	621a      	str	r2, [r3, #32]
 8005598:	e008      	b.n	80055ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	1c59      	adds	r1, r3, #1
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6211      	str	r1, [r2, #32]
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	4619      	mov	r1, r3
 80055ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10f      	bne.n	80055e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e000      	b.n	80055e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055e4:	2302      	movs	r3, #2
  }
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b082      	sub	sp, #8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff fcd2 	bl	8004fbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b08c      	sub	sp, #48	; 0x30
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b22      	cmp	r3, #34	; 0x22
 8005634:	f040 80ab 	bne.w	800578e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d117      	bne.n	8005672 <UART_Receive_IT+0x50>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d113      	bne.n	8005672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005660:	b29a      	uxth	r2, r3
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	1c9a      	adds	r2, r3, #2
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	; 0x28
 8005670:	e026      	b.n	80056c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005678:	2300      	movs	r3, #0
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d007      	beq.n	8005696 <UART_Receive_IT+0x74>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <UART_Receive_IT+0x82>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e008      	b.n	80056b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4619      	mov	r1, r3
 80056ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d15a      	bne.n	800578a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0220 	bic.w	r2, r2, #32
 80056e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0201 	bic.w	r2, r2, #1
 8005702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	2b01      	cmp	r3, #1
 8005712:	d135      	bne.n	8005780 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	330c      	adds	r3, #12
 8005720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	613b      	str	r3, [r7, #16]
   return(result);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	330c      	adds	r3, #12
 8005738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573a:	623a      	str	r2, [r7, #32]
 800573c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	69f9      	ldr	r1, [r7, #28]
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	61bb      	str	r3, [r7, #24]
   return(result);
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b10      	cmp	r3, #16
 800575a:	d10a      	bne.n	8005772 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7fa ff6f 	bl	800065c <HAL_UARTEx_RxEventCallback>
 800577e:	e002      	b.n	8005786 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fc25 	bl	8004fd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005786:	2300      	movs	r3, #0
 8005788:	e002      	b.n	8005790 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3730      	adds	r7, #48	; 0x30
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800579c:	b0c0      	sub	sp, #256	; 0x100
 800579e:	af00      	add	r7, sp, #0
 80057a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	ea40 0301 	orr.w	r3, r0, r1
 80057c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	431a      	orrs	r2, r3
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057f0:	f021 010c 	bic.w	r1, r1, #12
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057fe:	430b      	orrs	r3, r1
 8005800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005812:	6999      	ldr	r1, [r3, #24]
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	ea40 0301 	orr.w	r3, r0, r1
 800581e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b8f      	ldr	r3, [pc, #572]	; (8005a64 <UART_SetConfig+0x2cc>)
 8005828:	429a      	cmp	r2, r3
 800582a:	d005      	beq.n	8005838 <UART_SetConfig+0xa0>
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <UART_SetConfig+0x2d0>)
 8005834:	429a      	cmp	r2, r3
 8005836:	d104      	bne.n	8005842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005838:	f7fc ffce 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 800583c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005840:	e003      	b.n	800584a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005842:	f7fc ffb5 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8005846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005854:	f040 810c 	bne.w	8005a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585c:	2200      	movs	r2, #0
 800585e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	1891      	adds	r1, r2, r2
 8005870:	65b9      	str	r1, [r7, #88]	; 0x58
 8005872:	415b      	adcs	r3, r3
 8005874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800587a:	4621      	mov	r1, r4
 800587c:	eb12 0801 	adds.w	r8, r2, r1
 8005880:	4629      	mov	r1, r5
 8005882:	eb43 0901 	adc.w	r9, r3, r1
 8005886:	f04f 0200 	mov.w	r2, #0
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800589a:	4690      	mov	r8, r2
 800589c:	4699      	mov	r9, r3
 800589e:	4623      	mov	r3, r4
 80058a0:	eb18 0303 	adds.w	r3, r8, r3
 80058a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058a8:	462b      	mov	r3, r5
 80058aa:	eb49 0303 	adc.w	r3, r9, r3
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058c6:	460b      	mov	r3, r1
 80058c8:	18db      	adds	r3, r3, r3
 80058ca:	653b      	str	r3, [r7, #80]	; 0x50
 80058cc:	4613      	mov	r3, r2
 80058ce:	eb42 0303 	adc.w	r3, r2, r3
 80058d2:	657b      	str	r3, [r7, #84]	; 0x54
 80058d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058dc:	f7fa fc92 	bl	8000204 <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4b61      	ldr	r3, [pc, #388]	; (8005a6c <UART_SetConfig+0x2d4>)
 80058e6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	011c      	lsls	r4, r3, #4
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	64b9      	str	r1, [r7, #72]	; 0x48
 8005908:	415b      	adcs	r3, r3
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005910:	4641      	mov	r1, r8
 8005912:	eb12 0a01 	adds.w	sl, r2, r1
 8005916:	4649      	mov	r1, r9
 8005918:	eb43 0b01 	adc.w	fp, r3, r1
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800592c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005930:	4692      	mov	sl, r2
 8005932:	469b      	mov	fp, r3
 8005934:	4643      	mov	r3, r8
 8005936:	eb1a 0303 	adds.w	r3, sl, r3
 800593a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800593e:	464b      	mov	r3, r9
 8005940:	eb4b 0303 	adc.w	r3, fp, r3
 8005944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800595c:	460b      	mov	r3, r1
 800595e:	18db      	adds	r3, r3, r3
 8005960:	643b      	str	r3, [r7, #64]	; 0x40
 8005962:	4613      	mov	r3, r2
 8005964:	eb42 0303 	adc.w	r3, r2, r3
 8005968:	647b      	str	r3, [r7, #68]	; 0x44
 800596a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800596e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005972:	f7fa fc47 	bl	8000204 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4611      	mov	r1, r2
 800597c:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <UART_SetConfig+0x2d4>)
 800597e:	fba3 2301 	umull	r2, r3, r3, r1
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2264      	movs	r2, #100	; 0x64
 8005986:	fb02 f303 	mul.w	r3, r2, r3
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005992:	4b36      	ldr	r3, [pc, #216]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005994:	fba3 2302 	umull	r2, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059a0:	441c      	add	r4, r3
 80059a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80059bc:	415b      	adcs	r3, r3
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6339      	str	r1, [r7, #48]	; 0x30
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	637b      	str	r3, [r7, #52]	; 0x34
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f8:	464b      	mov	r3, r9
 80059fa:	460a      	mov	r2, r1
 80059fc:	eb42 0303 	adc.w	r3, r2, r3
 8005a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a18:	460b      	mov	r3, r1
 8005a1a:	18db      	adds	r3, r3, r3
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a1e:	4613      	mov	r3, r2
 8005a20:	eb42 0303 	adc.w	r3, r2, r3
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a2e:	f7fa fbe9 	bl	8000204 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005a38:	fba3 1302 	umull	r1, r3, r3, r2
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	2164      	movs	r1, #100	; 0x64
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	3332      	adds	r3, #50	; 0x32
 8005a4a:	4a08      	ldr	r2, [pc, #32]	; (8005a6c <UART_SetConfig+0x2d4>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	f003 0207 	and.w	r2, r3, #7
 8005a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4422      	add	r2, r4
 8005a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a60:	e105      	b.n	8005c6e <UART_SetConfig+0x4d6>
 8005a62:	bf00      	nop
 8005a64:	40011000 	.word	0x40011000
 8005a68:	40011400 	.word	0x40011400
 8005a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a82:	4642      	mov	r2, r8
 8005a84:	464b      	mov	r3, r9
 8005a86:	1891      	adds	r1, r2, r2
 8005a88:	6239      	str	r1, [r7, #32]
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a92:	4641      	mov	r1, r8
 8005a94:	1854      	adds	r4, r2, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	eb43 0501 	adc.w	r5, r3, r1
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	00eb      	lsls	r3, r5, #3
 8005aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aaa:	00e2      	lsls	r2, r4, #3
 8005aac:	4614      	mov	r4, r2
 8005aae:	461d      	mov	r5, r3
 8005ab0:	4643      	mov	r3, r8
 8005ab2:	18e3      	adds	r3, r4, r3
 8005ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ab8:	464b      	mov	r3, r9
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ade:	4629      	mov	r1, r5
 8005ae0:	008b      	lsls	r3, r1, #2
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae8:	4621      	mov	r1, r4
 8005aea:	008a      	lsls	r2, r1, #2
 8005aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005af0:	f7fa fb88 	bl	8000204 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4b60      	ldr	r3, [pc, #384]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005afa:	fba3 2302 	umull	r2, r3, r3, r2
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	011c      	lsls	r4, r3, #4
 8005b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	61b9      	str	r1, [r7, #24]
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b24:	4641      	mov	r1, r8
 8005b26:	1851      	adds	r1, r2, r1
 8005b28:	6139      	str	r1, [r7, #16]
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	414b      	adcs	r3, r1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	00cb      	lsls	r3, r1, #3
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b46:	4651      	mov	r1, sl
 8005b48:	00ca      	lsls	r2, r1, #3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4642      	mov	r2, r8
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b58:	464b      	mov	r3, r9
 8005b5a:	460a      	mov	r2, r1
 8005b5c:	eb42 0303 	adc.w	r3, r2, r3
 8005b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	008b      	lsls	r3, r1, #2
 8005b80:	4641      	mov	r1, r8
 8005b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b86:	4641      	mov	r1, r8
 8005b88:	008a      	lsls	r2, r1, #2
 8005b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b8e:	f7fa fb39 	bl	8000204 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005b98:	fba3 1302 	umull	r1, r3, r3, r2
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	2164      	movs	r1, #100	; 0x64
 8005ba0:	fb01 f303 	mul.w	r3, r1, r3
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	3332      	adds	r3, #50	; 0x32
 8005baa:	4a34      	ldr	r2, [pc, #208]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb6:	441c      	add	r4, r3
 8005bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	673b      	str	r3, [r7, #112]	; 0x70
 8005bc0:	677a      	str	r2, [r7, #116]	; 0x74
 8005bc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bd6:	4641      	mov	r1, r8
 8005bd8:	1851      	adds	r1, r2, r1
 8005bda:	6039      	str	r1, [r7, #0]
 8005bdc:	4649      	mov	r1, r9
 8005bde:	414b      	adcs	r3, r1
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bee:	4659      	mov	r1, fp
 8005bf0:	00cb      	lsls	r3, r1, #3
 8005bf2:	4651      	mov	r1, sl
 8005bf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bf8:	4651      	mov	r1, sl
 8005bfa:	00ca      	lsls	r2, r1, #3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	4642      	mov	r2, r8
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c08:	464b      	mov	r3, r9
 8005c0a:	460a      	mov	r2, r1
 8005c0c:	eb42 0303 	adc.w	r3, r2, r3
 8005c10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c1c:	667a      	str	r2, [r7, #100]	; 0x64
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	008b      	lsls	r3, r1, #2
 8005c2e:	4641      	mov	r1, r8
 8005c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c34:	4641      	mov	r1, r8
 8005c36:	008a      	lsls	r2, r1, #2
 8005c38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c3c:	f7fa fae2 	bl	8000204 <__aeabi_uldivmod>
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005c46:	fba3 1302 	umull	r1, r3, r3, r2
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2164      	movs	r1, #100	; 0x64
 8005c4e:	fb01 f303 	mul.w	r3, r1, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	3332      	adds	r3, #50	; 0x32
 8005c58:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <UART_SetConfig+0x4e4>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4422      	add	r2, r4
 8005c6c:	609a      	str	r2, [r3, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c74:	46bd      	mov	sp, r7
 8005c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7a:	bf00      	nop
 8005c7c:	51eb851f 	.word	0x51eb851f

08005c80 <__libc_init_array>:
 8005c80:	b570      	push	{r4, r5, r6, lr}
 8005c82:	4d0d      	ldr	r5, [pc, #52]	; (8005cb8 <__libc_init_array+0x38>)
 8005c84:	4c0d      	ldr	r4, [pc, #52]	; (8005cbc <__libc_init_array+0x3c>)
 8005c86:	1b64      	subs	r4, r4, r5
 8005c88:	10a4      	asrs	r4, r4, #2
 8005c8a:	2600      	movs	r6, #0
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	d109      	bne.n	8005ca4 <__libc_init_array+0x24>
 8005c90:	4d0b      	ldr	r5, [pc, #44]	; (8005cc0 <__libc_init_array+0x40>)
 8005c92:	4c0c      	ldr	r4, [pc, #48]	; (8005cc4 <__libc_init_array+0x44>)
 8005c94:	f000 f820 	bl	8005cd8 <_init>
 8005c98:	1b64      	subs	r4, r4, r5
 8005c9a:	10a4      	asrs	r4, r4, #2
 8005c9c:	2600      	movs	r6, #0
 8005c9e:	42a6      	cmp	r6, r4
 8005ca0:	d105      	bne.n	8005cae <__libc_init_array+0x2e>
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca8:	4798      	blx	r3
 8005caa:	3601      	adds	r6, #1
 8005cac:	e7ee      	b.n	8005c8c <__libc_init_array+0xc>
 8005cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb2:	4798      	blx	r3
 8005cb4:	3601      	adds	r6, #1
 8005cb6:	e7f2      	b.n	8005c9e <__libc_init_array+0x1e>
 8005cb8:	08005d18 	.word	0x08005d18
 8005cbc:	08005d18 	.word	0x08005d18
 8005cc0:	08005d18 	.word	0x08005d18
 8005cc4:	08005d1c 	.word	0x08005d1c

08005cc8 <memset>:
 8005cc8:	4402      	add	r2, r0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d100      	bne.n	8005cd2 <memset+0xa>
 8005cd0:	4770      	bx	lr
 8005cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd6:	e7f9      	b.n	8005ccc <memset+0x4>

08005cd8 <_init>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	bf00      	nop
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr

08005ce4 <_fini>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr
