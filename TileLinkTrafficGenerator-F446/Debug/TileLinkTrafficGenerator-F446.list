
TileLinkTrafficGenerator-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080027ac  080027ac  000127ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002800  08002800  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002808  08002808  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800281c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800281c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b64  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000162b  00000000  00000000  00028ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0002a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217a5  00000000  00000000  0002aed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009971  00000000  00000000  0004c67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8282  00000000  00000000  00055fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011e270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a70  00000000  00000000  0011e2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002794 	.word	0x08002794

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002794 	.word	0x08002794

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <APP_getUsrButton>:

uint8_t counter;



uint8_t APP_getUsrButton() {
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800050c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000510:	4805      	ldr	r0, [pc, #20]	; (8000528 <APP_getUsrButton+0x20>)
 8000512:	f000 ffbd 	bl	8001490 <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	bf0c      	ite	eq
 800051c:	2301      	moveq	r3, #1
 800051e:	2300      	movne	r3, #0
 8000520:	b2db      	uxtb	r3, r3
}
 8000522:	4618      	mov	r0, r3
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020800 	.word	0x40020800

0800052c <APP_setLED>:

void APP_setLED(uint8_t state) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	461a      	mov	r2, r3
 800053a:	2120      	movs	r1, #32
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <APP_setLED+0x20>)
 800053e:	f000 ffbf 	bl	80014c0 <HAL_GPIO_WritePin>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40020000 	.word	0x40020000

08000550 <TL_Clock>:

void TL_Clock() {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(TL_Clk_GPIO_Port, TL_Clk_Pin, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <TL_Clock+0x2c>)
 800055c:	f000 ffb0 	bl	80014c0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000560:	2001      	movs	r0, #1
 8000562:	f000 fcf7 	bl	8000f54 <HAL_Delay>
  HAL_GPIO_WritePin(TL_Clk_GPIO_Port, TL_Clk_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <TL_Clock+0x2c>)
 800056e:	f000 ffa7 	bl	80014c0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f000 fcee 	bl	8000f54 <HAL_Delay>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40020000 	.word	0x40020000

08000580 <TL_Transmit>:


void TL_Transmit() {
 8000580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000584:	b0a7      	sub	sp, #156	; 0x9c
 8000586:	af00      	add	r7, sp, #0

  // @(posedge)

  // raise ready and valid
  HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2102      	movs	r1, #2
 800058c:	48d3      	ldr	r0, [pc, #844]	; (80008dc <TL_Transmit+0x35c>)
 800058e:	f000 ff97 	bl	80014c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	2101      	movs	r1, #1
 8000596:	48d2      	ldr	r0, [pc, #840]	; (80008e0 <TL_Transmit+0x360>)
 8000598:	f000 ff92 	bl	80014c0 <HAL_GPIO_WritePin>

  uint64_t tl_chanid = 0;
 800059c:	f04f 0200 	mov.w	r2, #0
 80005a0:	f04f 0300 	mov.w	r3, #0
 80005a4:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  uint64_t tl_opcode = 0;
 80005a8:	f04f 0200 	mov.w	r2, #0
 80005ac:	f04f 0300 	mov.w	r3, #0
 80005b0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  uint64_t tl_param = 0;
 80005b4:	f04f 0200 	mov.w	r2, #0
 80005b8:	f04f 0300 	mov.w	r3, #0
 80005bc:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  uint64_t tl_size = 1;
 80005c0:	f04f 0201 	mov.w	r2, #1
 80005c4:	f04f 0300 	mov.w	r3, #0
 80005c8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  uint64_t tl_source = 0;
 80005cc:	f04f 0200 	mov.w	r2, #0
 80005d0:	f04f 0300 	mov.w	r3, #0
 80005d4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  uint64_t tl_address = 0x00000000;
 80005d8:	f04f 0200 	mov.w	r2, #0
 80005dc:	f04f 0300 	mov.w	r3, #0
 80005e0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  uint64_t tl_data = 0x0000000010000000;
 80005e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005e8:	f04f 0300 	mov.w	r3, #0
 80005ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  uint64_t tl_corrupt = 0;
 80005f0:	f04f 0200 	mov.w	r2, #0
 80005f4:	f04f 0300 	mov.w	r3, #0
 80005f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  uint64_t tl_mask = 0b11111111;
 80005fc:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000600:	f04f 0300 	mov.w	r3, #0
 8000604:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  uint64_t tl_last = 1;
 8000608:	f04f 0201 	mov.w	r2, #1
 800060c:	f04f 0300 	mov.w	r3, #0
 8000610:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  for (uint8_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8000614:	2300      	movs	r3, #0
 8000616:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800061a:	e021      	b.n	8000660 <TL_Transmit+0xe0>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_last << i);
 800061c:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8000620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000624:	f1a4 0120 	sub.w	r1, r4, #32
 8000628:	f1c4 0020 	rsb	r0, r4, #32
 800062c:	fa03 f904 	lsl.w	r9, r3, r4
 8000630:	fa02 f101 	lsl.w	r1, r2, r1
 8000634:	ea49 0901 	orr.w	r9, r9, r1
 8000638:	fa22 f000 	lsr.w	r0, r2, r0
 800063c:	ea49 0900 	orr.w	r9, r9, r0
 8000640:	fa02 f804 	lsl.w	r8, r2, r4
 8000644:	fa5f f388 	uxtb.w	r3, r8
 8000648:	461a      	mov	r2, r3
 800064a:	2101      	movs	r1, #1
 800064c:	48a3      	ldr	r0, [pc, #652]	; (80008dc <TL_Transmit+0x35c>)
 800064e:	f000 ff37 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 8000652:	f7ff ff7d 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8000656:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800065a:	3301      	adds	r3, #1
 800065c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000660:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0d9      	beq.n	800061c <TL_Transmit+0x9c>
  }
  for (uint8_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8000668:	2300      	movs	r3, #0
 800066a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800066e:	e021      	b.n	80006b4 <TL_Transmit+0x134>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_mask << i);
 8000670:	f897 4096 	ldrb.w	r4, [r7, #150]	; 0x96
 8000674:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000678:	f1a4 0120 	sub.w	r1, r4, #32
 800067c:	f1c4 0020 	rsb	r0, r4, #32
 8000680:	fa03 fb04 	lsl.w	fp, r3, r4
 8000684:	fa02 f101 	lsl.w	r1, r2, r1
 8000688:	ea4b 0b01 	orr.w	fp, fp, r1
 800068c:	fa22 f000 	lsr.w	r0, r2, r0
 8000690:	ea4b 0b00 	orr.w	fp, fp, r0
 8000694:	fa02 fa04 	lsl.w	sl, r2, r4
 8000698:	fa5f f38a 	uxtb.w	r3, sl
 800069c:	461a      	mov	r2, r3
 800069e:	2101      	movs	r1, #1
 80006a0:	488e      	ldr	r0, [pc, #568]	; (80008dc <TL_Transmit+0x35c>)
 80006a2:	f000 ff0d 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 80006a6:	f7ff ff53 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80006aa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80006ae:	3301      	adds	r3, #1
 80006b0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80006b4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	d9d9      	bls.n	8000670 <TL_Transmit+0xf0>
  }
  for (uint8_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80006c2:	e01e      	b.n	8000702 <TL_Transmit+0x182>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_corrupt << i);
 80006c4:	f897 4095 	ldrb.w	r4, [r7, #149]	; 0x95
 80006c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80006cc:	f1a4 0120 	sub.w	r1, r4, #32
 80006d0:	f1c4 0020 	rsb	r0, r4, #32
 80006d4:	fa03 f604 	lsl.w	r6, r3, r4
 80006d8:	fa02 f101 	lsl.w	r1, r2, r1
 80006dc:	430e      	orrs	r6, r1
 80006de:	fa22 f000 	lsr.w	r0, r2, r0
 80006e2:	4306      	orrs	r6, r0
 80006e4:	fa02 f504 	lsl.w	r5, r2, r4
 80006e8:	b2eb      	uxtb	r3, r5
 80006ea:	461a      	mov	r2, r3
 80006ec:	2101      	movs	r1, #1
 80006ee:	487b      	ldr	r0, [pc, #492]	; (80008dc <TL_Transmit+0x35c>)
 80006f0:	f000 fee6 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 80006f4:	f7ff ff2c 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80006f8:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80006fc:	3301      	adds	r3, #1
 80006fe:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000702:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000706:	2b00      	cmp	r3, #0
 8000708:	d0dc      	beq.n	80006c4 <TL_Transmit+0x144>
  }
  for (uint8_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800070a:	2300      	movs	r3, #0
 800070c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8000710:	e025      	b.n	800075e <TL_Transmit+0x1de>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_data << i);
 8000712:	f897 4094 	ldrb.w	r4, [r7, #148]	; 0x94
 8000716:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800071a:	f1a4 0120 	sub.w	r1, r4, #32
 800071e:	f1c4 0020 	rsb	r0, r4, #32
 8000722:	fa03 f504 	lsl.w	r5, r3, r4
 8000726:	637d      	str	r5, [r7, #52]	; 0x34
 8000728:	fa02 f101 	lsl.w	r1, r2, r1
 800072c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800072e:	430d      	orrs	r5, r1
 8000730:	637d      	str	r5, [r7, #52]	; 0x34
 8000732:	fa22 f000 	lsr.w	r0, r2, r0
 8000736:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000738:	4301      	orrs	r1, r0
 800073a:	6379      	str	r1, [r7, #52]	; 0x34
 800073c:	fa02 f304 	lsl.w	r3, r2, r4
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
 8000742:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000746:	461a      	mov	r2, r3
 8000748:	2101      	movs	r1, #1
 800074a:	4864      	ldr	r0, [pc, #400]	; (80008dc <TL_Transmit+0x35c>)
 800074c:	f000 feb8 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 8000750:	f7ff fefe 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8000754:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000758:	3301      	adds	r3, #1
 800075a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800075e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000762:	2b3f      	cmp	r3, #63	; 0x3f
 8000764:	d9d5      	bls.n	8000712 <TL_Transmit+0x192>
  }
  for (uint8_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8000766:	2300      	movs	r3, #0
 8000768:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800076c:	e025      	b.n	80007ba <TL_Transmit+0x23a>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_address << i);
 800076e:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 8000772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000776:	f1a4 0120 	sub.w	r1, r4, #32
 800077a:	f1c4 0020 	rsb	r0, r4, #32
 800077e:	fa03 f504 	lsl.w	r5, r3, r4
 8000782:	62fd      	str	r5, [r7, #44]	; 0x2c
 8000784:	fa02 f101 	lsl.w	r1, r2, r1
 8000788:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800078a:	430d      	orrs	r5, r1
 800078c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800078e:	fa22 f000 	lsr.w	r0, r2, r0
 8000792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000794:	4301      	orrs	r1, r0
 8000796:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000798:	fa02 f304 	lsl.w	r3, r2, r4
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
 800079e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80007a2:	461a      	mov	r2, r3
 80007a4:	2101      	movs	r1, #1
 80007a6:	484d      	ldr	r0, [pc, #308]	; (80008dc <TL_Transmit+0x35c>)
 80007a8:	f000 fe8a 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 80007ac:	f7ff fed0 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80007b0:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80007b4:	3301      	adds	r3, #1
 80007b6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80007ba:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80007be:	2b1f      	cmp	r3, #31
 80007c0:	d9d5      	bls.n	800076e <TL_Transmit+0x1ee>
  }
  for (uint8_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 80007c8:	e025      	b.n	8000816 <TL_Transmit+0x296>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_source << i);
 80007ca:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 80007ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80007d2:	f1a0 0420 	sub.w	r4, r0, #32
 80007d6:	f1c0 0120 	rsb	r1, r0, #32
 80007da:	fa03 f500 	lsl.w	r5, r3, r0
 80007de:	627d      	str	r5, [r7, #36]	; 0x24
 80007e0:	fa02 f404 	lsl.w	r4, r2, r4
 80007e4:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80007e6:	4325      	orrs	r5, r4
 80007e8:	627d      	str	r5, [r7, #36]	; 0x24
 80007ea:	fa22 f101 	lsr.w	r1, r2, r1
 80007ee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80007f0:	430c      	orrs	r4, r1
 80007f2:	627c      	str	r4, [r7, #36]	; 0x24
 80007f4:	fa02 f300 	lsl.w	r3, r2, r0
 80007f8:	623b      	str	r3, [r7, #32]
 80007fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007fe:	461a      	mov	r2, r3
 8000800:	2101      	movs	r1, #1
 8000802:	4836      	ldr	r0, [pc, #216]	; (80008dc <TL_Transmit+0x35c>)
 8000804:	f000 fe5c 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 8000808:	f7ff fea2 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800080c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8000810:	3301      	adds	r3, #1
 8000812:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8000816:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800081a:	2b0c      	cmp	r3, #12
 800081c:	d9d5      	bls.n	80007ca <TL_Transmit+0x24a>
  }
  for (uint8_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800081e:	2300      	movs	r3, #0
 8000820:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8000824:	e024      	b.n	8000870 <TL_Transmit+0x2f0>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_size << i);
 8000826:	f897 1091 	ldrb.w	r1, [r7, #145]	; 0x91
 800082a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800082e:	f1a1 0420 	sub.w	r4, r1, #32
 8000832:	f1c1 0020 	rsb	r0, r1, #32
 8000836:	fa03 f501 	lsl.w	r5, r3, r1
 800083a:	61fd      	str	r5, [r7, #28]
 800083c:	fa02 f404 	lsl.w	r4, r2, r4
 8000840:	69fd      	ldr	r5, [r7, #28]
 8000842:	4325      	orrs	r5, r4
 8000844:	61fd      	str	r5, [r7, #28]
 8000846:	fa22 f000 	lsr.w	r0, r2, r0
 800084a:	69fc      	ldr	r4, [r7, #28]
 800084c:	4304      	orrs	r4, r0
 800084e:	61fc      	str	r4, [r7, #28]
 8000850:	fa02 f301 	lsl.w	r3, r2, r1
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	7e3b      	ldrb	r3, [r7, #24]
 8000858:	461a      	mov	r2, r3
 800085a:	2101      	movs	r1, #1
 800085c:	481f      	ldr	r0, [pc, #124]	; (80008dc <TL_Transmit+0x35c>)
 800085e:	f000 fe2f 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 8000862:	f7ff fe75 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8000866:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800086a:	3301      	adds	r3, #1
 800086c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8000870:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8000874:	2b02      	cmp	r3, #2
 8000876:	d9d6      	bls.n	8000826 <TL_Transmit+0x2a6>
  }
  for (uint8_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 800087e:	e024      	b.n	80008ca <TL_Transmit+0x34a>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_param << i);
 8000880:	f897 1090 	ldrb.w	r1, [r7, #144]	; 0x90
 8000884:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8000888:	f1a1 0420 	sub.w	r4, r1, #32
 800088c:	f1c1 0020 	rsb	r0, r1, #32
 8000890:	fa03 f501 	lsl.w	r5, r3, r1
 8000894:	617d      	str	r5, [r7, #20]
 8000896:	fa02 f404 	lsl.w	r4, r2, r4
 800089a:	697d      	ldr	r5, [r7, #20]
 800089c:	4325      	orrs	r5, r4
 800089e:	617d      	str	r5, [r7, #20]
 80008a0:	fa22 f000 	lsr.w	r0, r2, r0
 80008a4:	697c      	ldr	r4, [r7, #20]
 80008a6:	4304      	orrs	r4, r0
 80008a8:	617c      	str	r4, [r7, #20]
 80008aa:	fa02 f301 	lsl.w	r3, r2, r1
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	7c3b      	ldrb	r3, [r7, #16]
 80008b2:	461a      	mov	r2, r3
 80008b4:	2101      	movs	r1, #1
 80008b6:	4809      	ldr	r0, [pc, #36]	; (80008dc <TL_Transmit+0x35c>)
 80008b8:	f000 fe02 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 80008bc:	f7ff fe48 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80008c0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80008c4:	3301      	adds	r3, #1
 80008c6:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 80008ca:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d9d6      	bls.n	8000880 <TL_Transmit+0x300>
  }
  for (uint8_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80008d8:	e029      	b.n	800092e <TL_Transmit+0x3ae>
 80008da:	bf00      	nop
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020000 	.word	0x40020000
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_opcode << i);
 80008e4:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 80008e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80008ec:	f1a1 0420 	sub.w	r4, r1, #32
 80008f0:	f1c1 0020 	rsb	r0, r1, #32
 80008f4:	fa03 f501 	lsl.w	r5, r3, r1
 80008f8:	60fd      	str	r5, [r7, #12]
 80008fa:	fa02 f404 	lsl.w	r4, r2, r4
 80008fe:	68fd      	ldr	r5, [r7, #12]
 8000900:	4325      	orrs	r5, r4
 8000902:	60fd      	str	r5, [r7, #12]
 8000904:	fa22 f000 	lsr.w	r0, r2, r0
 8000908:	68fc      	ldr	r4, [r7, #12]
 800090a:	4304      	orrs	r4, r0
 800090c:	60fc      	str	r4, [r7, #12]
 800090e:	fa02 f301 	lsl.w	r3, r2, r1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	7a3b      	ldrb	r3, [r7, #8]
 8000916:	461a      	mov	r2, r3
 8000918:	2101      	movs	r1, #1
 800091a:	482a      	ldr	r0, [pc, #168]	; (80009c4 <TL_Transmit+0x444>)
 800091c:	f000 fdd0 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 8000920:	f7ff fe16 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8000924:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000928:	3301      	adds	r3, #1
 800092a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800092e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000932:	2b02      	cmp	r3, #2
 8000934:	d9d6      	bls.n	80008e4 <TL_Transmit+0x364>
  }
  for (uint8_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8000936:	2300      	movs	r3, #0
 8000938:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800093c:	e024      	b.n	8000988 <TL_Transmit+0x408>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_chanid << i);
 800093e:	f897 108e 	ldrb.w	r1, [r7, #142]	; 0x8e
 8000942:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8000946:	f1a1 0420 	sub.w	r4, r1, #32
 800094a:	f1c1 0020 	rsb	r0, r1, #32
 800094e:	fa03 f501 	lsl.w	r5, r3, r1
 8000952:	607d      	str	r5, [r7, #4]
 8000954:	fa02 f404 	lsl.w	r4, r2, r4
 8000958:	687d      	ldr	r5, [r7, #4]
 800095a:	4325      	orrs	r5, r4
 800095c:	607d      	str	r5, [r7, #4]
 800095e:	fa22 f000 	lsr.w	r0, r2, r0
 8000962:	687c      	ldr	r4, [r7, #4]
 8000964:	4304      	orrs	r4, r0
 8000966:	607c      	str	r4, [r7, #4]
 8000968:	fa02 f301 	lsl.w	r3, r2, r1
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	783b      	ldrb	r3, [r7, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	2101      	movs	r1, #1
 8000974:	4813      	ldr	r0, [pc, #76]	; (80009c4 <TL_Transmit+0x444>)
 8000976:	f000 fda3 	bl	80014c0 <HAL_GPIO_WritePin>
    TL_Clock();
 800097a:	f7ff fde9 	bl	8000550 <TL_Clock>
  for (uint8_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800097e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000982:	3301      	adds	r3, #1
 8000984:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000988:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800098c:	2b02      	cmp	r3, #2
 800098e:	d9d6      	bls.n	800093e <TL_Transmit+0x3be>
  }

  HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2102      	movs	r1, #2
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <TL_Transmit+0x444>)
 8000996:	f000 fd93 	bl	80014c0 <HAL_GPIO_WritePin>


  HAL_UART_Transmit(&huart2, (uint8_t *)"waiting for slave response\r\n", strlen("waiting for slave response\r\n"), 1000);
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	221c      	movs	r2, #28
 80009a0:	4909      	ldr	r1, [pc, #36]	; (80009c8 <TL_Transmit+0x448>)
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <TL_Transmit+0x44c>)
 80009a4:	f001 fb55 	bl	8002052 <HAL_UART_Transmit>
  while (HAL_GPIO_ReadPin(TL_MISO_Valid_GPIO_Port, TL_MISO_Valid_Pin)) { }
 80009a8:	bf00      	nop
 80009aa:	2102      	movs	r1, #2
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <TL_Transmit+0x450>)
 80009ae:	f000 fd6f 	bl	8001490 <HAL_GPIO_ReadPin>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1f8      	bne.n	80009aa <TL_Transmit+0x42a>
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	379c      	adds	r7, #156	; 0x9c
 80009be:	46bd      	mov	sp, r7
 80009c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c4:	40020800 	.word	0x40020800
 80009c8:	080027ac 	.word	0x080027ac
 80009cc:	2000002c 	.word	0x2000002c
 80009d0:	40020000 	.word	0x40020000

080009d4 <APP_init>:


void APP_init() {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  HAL_UART_Transmit(&huart2, (uint8_t *)"clocking 100 clock cycles\r\n", strlen("clocking 100 clock cycles\r\n"), 1000);
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	221b      	movs	r2, #27
 80009e0:	490a      	ldr	r1, [pc, #40]	; (8000a0c <APP_init+0x38>)
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <APP_init+0x3c>)
 80009e4:	f001 fb35 	bl	8002052 <HAL_UART_Transmit>

  for (uint16_t i=0; i<400; i+=1) {
 80009e8:	2300      	movs	r3, #0
 80009ea:	80fb      	strh	r3, [r7, #6]
 80009ec:	e004      	b.n	80009f8 <APP_init+0x24>
    TL_Clock();
 80009ee:	f7ff fdaf 	bl	8000550 <TL_Clock>
  for (uint16_t i=0; i<400; i+=1) {
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	80fb      	strh	r3, [r7, #6]
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80009fe:	d3f6      	bcc.n	80009ee <APP_init+0x1a>
  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	080027cc 	.word	0x080027cc
 8000a10:	2000002c 	.word	0x2000002c

08000a14 <APP_main>:

void APP_main() {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  if (APP_getUsrButton()) {
 8000a18:	f7ff fd76 	bl	8000508 <APP_getUsrButton>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <APP_main+0x12>
    TL_Transmit();
 8000a22:	f7ff fdad 	bl	8000580 <TL_Transmit>
  }


  APP_setLED(counter % 2);
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <APP_main+0x38>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fd7b 	bl	800052c <APP_setLED>

  counter += 1;
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <APP_main+0x38>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <APP_main+0x38>)
 8000a40:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 8000a42:	2064      	movs	r0, #100	; 0x64
 8000a44:	f000 fa86 	bl	8000f54 <HAL_Delay>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000028 	.word	0x20000028

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a54:	f000 fa0c 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 f80a 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5c:	f000 f89e 	bl	8000b9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a60:	f000 f872 	bl	8000b48 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000a64:	f7ff ffb6 	bl	80009d4 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000a68:	f7ff ffd4 	bl	8000a14 <APP_main>
 8000a6c:	e7fc      	b.n	8000a68 <main+0x18>
	...

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2234      	movs	r2, #52	; 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fe80 	bl	8002784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <SystemClock_Config+0xd4>)
 8000aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000ae4:	23a0      	movs	r3, #160	; 0xa0
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 ffbf 	bl	8001a7c <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b04:	f000 f8d8 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2105      	movs	r1, #5
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fce4 	bl	80014f4 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b32:	f000 f8c1 	bl	8000cb8 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_USART2_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f001 fa1a 	bl	8001fb8 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f895 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000002c 	.word	0x2000002c
 8000b98:	40004400 	.word	0x40004400

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a3b      	ldr	r2, [pc, #236]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a34      	ldr	r2, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a2d      	ldr	r2, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0x10c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2103      	movs	r1, #3
 8000c0a:	4828      	ldr	r0, [pc, #160]	; (8000cac <MX_GPIO_Init+0x110>)
 8000c0c:	f000 fc58 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5|TL_Clk_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f240 1121 	movw	r1, #289	; 0x121
 8000c16:	4826      	ldr	r0, [pc, #152]	; (8000cb0 <MX_GPIO_Init+0x114>)
 8000c18:	f000 fc52 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481e      	ldr	r0, [pc, #120]	; (8000cac <MX_GPIO_Init+0x110>)
 8000c32:	f000 fa99 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 8000c36:	2303      	movs	r3, #3
 8000c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4817      	ldr	r0, [pc, #92]	; (8000cac <MX_GPIO_Init+0x110>)
 8000c4e:	f000 fa8b 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 TL_Clk_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5|TL_Clk_Pin;
 8000c52:	f240 1321 	movw	r3, #289	; 0x121
 8000c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_GPIO_Init+0x114>)
 8000c6c:	f000 fa7c 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 8000c70:	2312      	movs	r3, #18
 8000c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	480b      	ldr	r0, [pc, #44]	; (8000cb0 <MX_GPIO_Init+0x114>)
 8000c84:	f000 fa70 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_GPIO_Init+0x118>)
 8000c9c:	f000 fa64 	bl	8001168 <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3720      	adds	r7, #32
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_UART_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_UART_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_UART_MspInit+0x8c>)
 8000d8a:	f000 f9ed 	bl	8001168 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f890 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd7 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f001 fc77 	bl	800273c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fdff 	bl	8000a50 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e60:	08002810 	.word	0x08002810
  ldr r2, =_sbss
 8000e64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e68:	20000074 	.word	0x20000074

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f931 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff ff0e 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f93b 	bl	800114e <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f911 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000070 	.word	0x20000070

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000070 	.word	0x20000070

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff47 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff5c 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	e165      	b.n	8001450 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001184:	2201      	movs	r2, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	f040 8154 	bne.w	800144a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d005      	beq.n	80011ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d130      	bne.n	800121c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f0:	2201      	movs	r2, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 0201 	and.w	r2, r3, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b03      	cmp	r3, #3
 8001226:	d017      	beq.n	8001258 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0303 	and.w	r3, r3, #3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d123      	bne.n	80012ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	08da      	lsrs	r2, r3, #3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3208      	adds	r2, #8
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	08da      	lsrs	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3208      	adds	r2, #8
 80012a6:	69b9      	ldr	r1, [r7, #24]
 80012a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0203 	and.w	r2, r3, #3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80ae 	beq.w	800144a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b5d      	ldr	r3, [pc, #372]	; (8001468 <HAL_GPIO_Init+0x300>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	4a5c      	ldr	r2, [pc, #368]	; (8001468 <HAL_GPIO_Init+0x300>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b5a      	ldr	r3, [pc, #360]	; (8001468 <HAL_GPIO_Init+0x300>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130a:	4a58      	ldr	r2, [pc, #352]	; (800146c <HAL_GPIO_Init+0x304>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4f      	ldr	r2, [pc, #316]	; (8001470 <HAL_GPIO_Init+0x308>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d025      	beq.n	8001382 <HAL_GPIO_Init+0x21a>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4e      	ldr	r2, [pc, #312]	; (8001474 <HAL_GPIO_Init+0x30c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d01f      	beq.n	800137e <HAL_GPIO_Init+0x216>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4d      	ldr	r2, [pc, #308]	; (8001478 <HAL_GPIO_Init+0x310>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x212>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4c      	ldr	r2, [pc, #304]	; (800147c <HAL_GPIO_Init+0x314>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x20e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4b      	ldr	r2, [pc, #300]	; (8001480 <HAL_GPIO_Init+0x318>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x20a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4a      	ldr	r2, [pc, #296]	; (8001484 <HAL_GPIO_Init+0x31c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x206>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a49      	ldr	r2, [pc, #292]	; (8001488 <HAL_GPIO_Init+0x320>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x202>
 8001366:	2306      	movs	r3, #6
 8001368:	e00c      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800136a:	2307      	movs	r3, #7
 800136c:	e00a      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800136e:	2305      	movs	r3, #5
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001372:	2304      	movs	r3, #4
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x21c>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	; (800146c <HAL_GPIO_Init+0x304>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_GPIO_Init+0x324>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a31      	ldr	r2, [pc, #196]	; (800148c <HAL_GPIO_Init+0x324>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <HAL_GPIO_Init+0x324>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a26      	ldr	r2, [pc, #152]	; (800148c <HAL_GPIO_Init+0x324>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_GPIO_Init+0x324>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <HAL_GPIO_Init+0x324>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_GPIO_Init+0x324>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_GPIO_Init+0x324>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f ae96 	bls.w	8001184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40021400 	.word	0x40021400
 8001488:	40021800 	.word	0x40021800
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e001      	b.n	80014b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014dc:	e003      	b.n	80014e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	041a      	lsls	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	619a      	str	r2, [r3, #24]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0cc      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001508:	4b68      	ldr	r3, [pc, #416]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d90c      	bls.n	8001530 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	4b65      	ldr	r3, [pc, #404]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d001      	beq.n	8001530 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0b8      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001548:	4b59      	ldr	r3, [pc, #356]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a58      	ldr	r2, [pc, #352]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001552:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001560:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4a52      	ldr	r2, [pc, #328]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800156a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b50      	ldr	r3, [pc, #320]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	494d      	ldr	r1, [pc, #308]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d044      	beq.n	8001614 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d119      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d107      	bne.n	80015c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e06f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e067      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d2:	4b37      	ldr	r3, [pc, #220]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f023 0203 	bic.w	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4934      	ldr	r1, [pc, #208]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff fcaa 	bl	8000f3c <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ec:	f7ff fca6 	bl	8000f3c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e04f      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 020c 	and.w	r2, r3, #12
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	429a      	cmp	r2, r3
 8001612:	d1eb      	bne.n	80015ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d20c      	bcs.n	800163c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e032      	b.n	80016a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d008      	beq.n	800165a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4916      	ldr	r1, [pc, #88]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	490e      	ldr	r1, [pc, #56]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800167a:	f000 f855 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 800167e:	4602      	mov	r2, r0
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	490a      	ldr	r1, [pc, #40]	; (80016b4 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	5ccb      	ldrb	r3, [r1, r3]
 800168e:	fa22 f303 	lsr.w	r3, r2, r3
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fc0a 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00
 80016b0:	40023800 	.word	0x40023800
 80016b4:	080027e8 	.word	0x080027e8
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000000 	.word	0x20000000

080016d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016dc:	f7ff fff0 	bl	80016c0 <HAL_RCC_GetHCLKFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	0a9b      	lsrs	r3, r3, #10
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	4903      	ldr	r1, [pc, #12]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	080027f8 	.word	0x080027f8

08001700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001704:	f7ff ffdc 	bl	80016c0 <HAL_RCC_GetHCLKFreq>
 8001708:	4602      	mov	r2, r0
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	0b5b      	lsrs	r3, r3, #13
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	4903      	ldr	r1, [pc, #12]	; (8001724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	080027f8 	.word	0x080027f8

08001728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b0a6      	sub	sp, #152	; 0x98
 800172e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800174e:	4bc8      	ldr	r3, [pc, #800]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b0c      	cmp	r3, #12
 8001758:	f200 817e 	bhi.w	8001a58 <HAL_RCC_GetSysClockFreq+0x330>
 800175c:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <HAL_RCC_GetSysClockFreq+0x3c>)
 800175e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001762:	bf00      	nop
 8001764:	08001799 	.word	0x08001799
 8001768:	08001a59 	.word	0x08001a59
 800176c:	08001a59 	.word	0x08001a59
 8001770:	08001a59 	.word	0x08001a59
 8001774:	080017a1 	.word	0x080017a1
 8001778:	08001a59 	.word	0x08001a59
 800177c:	08001a59 	.word	0x08001a59
 8001780:	08001a59 	.word	0x08001a59
 8001784:	080017a9 	.word	0x080017a9
 8001788:	08001a59 	.word	0x08001a59
 800178c:	08001a59 	.word	0x08001a59
 8001790:	08001a59 	.word	0x08001a59
 8001794:	08001913 	.word	0x08001913
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001798:	4bb6      	ldr	r3, [pc, #728]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x34c>)
 800179a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800179e:	e15f      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017a0:	4bb5      	ldr	r3, [pc, #724]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x350>)
 80017a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017a6:	e15b      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a8:	4bb1      	ldr	r3, [pc, #708]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017b4:	4bae      	ldr	r3, [pc, #696]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d031      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c0:	4bab      	ldr	r3, [pc, #684]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	2200      	movs	r2, #0
 80017c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80017ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d2:	663b      	str	r3, [r7, #96]	; 0x60
 80017d4:	2300      	movs	r3, #0
 80017d6:	667b      	str	r3, [r7, #100]	; 0x64
 80017d8:	4ba7      	ldr	r3, [pc, #668]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x350>)
 80017da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80017de:	462a      	mov	r2, r5
 80017e0:	fb03 f202 	mul.w	r2, r3, r2
 80017e4:	2300      	movs	r3, #0
 80017e6:	4621      	mov	r1, r4
 80017e8:	fb01 f303 	mul.w	r3, r1, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	4aa2      	ldr	r2, [pc, #648]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x350>)
 80017f0:	4621      	mov	r1, r4
 80017f2:	fba1 1202 	umull	r1, r2, r1, r2
 80017f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80017f8:	460a      	mov	r2, r1
 80017fa:	67ba      	str	r2, [r7, #120]	; 0x78
 80017fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80017fe:	4413      	add	r3, r2
 8001800:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001806:	2200      	movs	r2, #0
 8001808:	65bb      	str	r3, [r7, #88]	; 0x58
 800180a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800180c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001810:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001814:	f7fe fcf6 	bl	8000204 <__aeabi_uldivmod>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4613      	mov	r3, r2
 800181e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001822:	e064      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	2200      	movs	r2, #0
 800182c:	653b      	str	r3, [r7, #80]	; 0x50
 800182e:	657a      	str	r2, [r7, #84]	; 0x54
 8001830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001836:	64bb      	str	r3, [r7, #72]	; 0x48
 8001838:	2300      	movs	r3, #0
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800183c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001840:	4622      	mov	r2, r4
 8001842:	462b      	mov	r3, r5
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	0159      	lsls	r1, r3, #5
 800184e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001852:	0150      	lsls	r0, r2, #5
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4621      	mov	r1, r4
 800185a:	1a51      	subs	r1, r2, r1
 800185c:	6139      	str	r1, [r7, #16]
 800185e:	4629      	mov	r1, r5
 8001860:	eb63 0301 	sbc.w	r3, r3, r1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001872:	4659      	mov	r1, fp
 8001874:	018b      	lsls	r3, r1, #6
 8001876:	4651      	mov	r1, sl
 8001878:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187c:	4651      	mov	r1, sl
 800187e:	018a      	lsls	r2, r1, #6
 8001880:	4651      	mov	r1, sl
 8001882:	ebb2 0801 	subs.w	r8, r2, r1
 8001886:	4659      	mov	r1, fp
 8001888:	eb63 0901 	sbc.w	r9, r3, r1
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001898:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800189c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018a0:	4690      	mov	r8, r2
 80018a2:	4699      	mov	r9, r3
 80018a4:	4623      	mov	r3, r4
 80018a6:	eb18 0303 	adds.w	r3, r8, r3
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	462b      	mov	r3, r5
 80018ae:	eb49 0303 	adc.w	r3, r9, r3
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018c0:	4629      	mov	r1, r5
 80018c2:	028b      	lsls	r3, r1, #10
 80018c4:	4621      	mov	r1, r4
 80018c6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018ca:	4621      	mov	r1, r4
 80018cc:	028a      	lsls	r2, r1, #10
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018d6:	2200      	movs	r2, #0
 80018d8:	643b      	str	r3, [r7, #64]	; 0x40
 80018da:	647a      	str	r2, [r7, #68]	; 0x44
 80018dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018e0:	f7fe fc90 	bl	8000204 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ee:	4b60      	ldr	r3, [pc, #384]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0c1b      	lsrs	r3, r3, #16
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	3301      	adds	r3, #1
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001900:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001910:	e0a6      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800191a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191e:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02a      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192a:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	2200      	movs	r2, #0
 8001932:	63bb      	str	r3, [r7, #56]	; 0x38
 8001934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001938:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800193c:	2100      	movs	r1, #0
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x350>)
 8001940:	fb03 f201 	mul.w	r2, r3, r1
 8001944:	2300      	movs	r3, #0
 8001946:	fb00 f303 	mul.w	r3, r0, r3
 800194a:	4413      	add	r3, r2
 800194c:	4a4a      	ldr	r2, [pc, #296]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x350>)
 800194e:	fba0 1202 	umull	r1, r2, r0, r2
 8001952:	677a      	str	r2, [r7, #116]	; 0x74
 8001954:	460a      	mov	r2, r1
 8001956:	673a      	str	r2, [r7, #112]	; 0x70
 8001958:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800195a:	4413      	add	r3, r2
 800195c:	677b      	str	r3, [r7, #116]	; 0x74
 800195e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001962:	2200      	movs	r2, #0
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
 8001966:	637a      	str	r2, [r7, #52]	; 0x34
 8001968:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800196c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001970:	f7fe fc48 	bl	8000204 <__aeabi_uldivmod>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4613      	mov	r3, r2
 800197a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800197e:	e05b      	b.n	8001a38 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001980:	4b3b      	ldr	r3, [pc, #236]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	2200      	movs	r2, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
 800198a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
 8001998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800199c:	4642      	mov	r2, r8
 800199e:	464b      	mov	r3, r9
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	0159      	lsls	r1, r3, #5
 80019aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ae:	0150      	lsls	r0, r2, #5
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4641      	mov	r1, r8
 80019b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ba:	4649      	mov	r1, r9
 80019bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019d4:	ebb2 040a 	subs.w	r4, r2, sl
 80019d8:	eb63 050b 	sbc.w	r5, r3, fp
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	00eb      	lsls	r3, r5, #3
 80019e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ea:	00e2      	lsls	r2, r4, #3
 80019ec:	4614      	mov	r4, r2
 80019ee:	461d      	mov	r5, r3
 80019f0:	4643      	mov	r3, r8
 80019f2:	18e3      	adds	r3, r4, r3
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	464b      	mov	r3, r9
 80019f8:	eb45 0303 	adc.w	r3, r5, r3
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	028b      	lsls	r3, r1, #10
 8001a0e:	4621      	mov	r1, r4
 8001a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a14:	4621      	mov	r1, r4
 8001a16:	028a      	lsls	r2, r1, #10
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a20:	2200      	movs	r2, #0
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	61fa      	str	r2, [r7, #28]
 8001a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a2a:	f7fe fbeb 	bl	8000204 <__aeabi_uldivmod>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4613      	mov	r3, r2
 8001a34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	0f1b      	lsrs	r3, r3, #28
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a56:	e003      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3798      	adds	r7, #152	; 0x98
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e28d      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8083 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a9c:	4b94      	ldr	r3, [pc, #592]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d019      	beq.n	8001adc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aa8:	4b91      	ldr	r3, [pc, #580]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ab4:	4b8e      	ldr	r3, [pc, #568]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac0:	d00c      	beq.n	8001adc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac2:	4b8b      	ldr	r3, [pc, #556]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d112      	bne.n	8001af4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ace:	4b88      	ldr	r3, [pc, #544]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ada:	d10b      	bne.n	8001af4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	4b84      	ldr	r3, [pc, #528]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d05b      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x124>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d157      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e25a      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d106      	bne.n	8001b0c <HAL_RCC_OscConfig+0x90>
 8001afe:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7b      	ldr	r2, [pc, #492]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e01d      	b.n	8001b48 <HAL_RCC_OscConfig+0xcc>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0xb4>
 8001b16:	4b76      	ldr	r3, [pc, #472]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a75      	ldr	r2, [pc, #468]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b73      	ldr	r3, [pc, #460]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a72      	ldr	r2, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e00b      	b.n	8001b48 <HAL_RCC_OscConfig+0xcc>
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6b      	ldr	r2, [pc, #428]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f9f4 	bl	8000f3c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff f9f0 	bl	8000f3c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e21f      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	4b61      	ldr	r3, [pc, #388]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0xdc>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff f9e0 	bl	8000f3c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff f9dc 	bl	8000f3c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e20b      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x104>
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06f      	beq.n	8001c8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bae:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d017      	beq.n	8001bea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bba:	4b4d      	ldr	r3, [pc, #308]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d105      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d11c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d116      	bne.n	8001c18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_RCC_OscConfig+0x186>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e1d3      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4937      	ldr	r1, [pc, #220]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	e03a      	b.n	8001c8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d020      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c20:	4b34      	ldr	r3, [pc, #208]	; (8001cf4 <HAL_RCC_OscConfig+0x278>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff f989 	bl	8000f3c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f985 	bl	8000f3c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e1b4      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4925      	ldr	r1, [pc, #148]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	e015      	b.n	8001c8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_RCC_OscConfig+0x278>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f968 	bl	8000f3c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c70:	f7ff f964 	bl	8000f3c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e193      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d036      	beq.n	8001d08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d016      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f948 	bl	8000f3c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f944 	bl	8000f3c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e173      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x234>
 8001cce:	e01b      	b.n	8001d08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7ff f931 	bl	8000f3c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	e00e      	b.n	8001cfc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cde:	f7ff f92d 	bl	8000f3c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d907      	bls.n	8001cfc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e15c      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	42470000 	.word	0x42470000
 8001cf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfc:	4b8a      	ldr	r3, [pc, #552]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1ea      	bne.n	8001cde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8097 	beq.w	8001e44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1a:	4b83      	ldr	r3, [pc, #524]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10f      	bne.n	8001d46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	4b7f      	ldr	r3, [pc, #508]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	4a7e      	ldr	r2, [pc, #504]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d34:	6413      	str	r3, [r2, #64]	; 0x40
 8001d36:	4b7c      	ldr	r3, [pc, #496]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d42:	2301      	movs	r3, #1
 8001d44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d46:	4b79      	ldr	r3, [pc, #484]	; (8001f2c <HAL_RCC_OscConfig+0x4b0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d52:	4b76      	ldr	r3, [pc, #472]	; (8001f2c <HAL_RCC_OscConfig+0x4b0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a75      	ldr	r2, [pc, #468]	; (8001f2c <HAL_RCC_OscConfig+0x4b0>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f8ed 	bl	8000f3c <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d66:	f7ff f8e9 	bl	8000f3c <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e118      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	4b6c      	ldr	r3, [pc, #432]	; (8001f2c <HAL_RCC_OscConfig+0x4b0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x31e>
 8001d8c:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	4a65      	ldr	r2, [pc, #404]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6713      	str	r3, [r2, #112]	; 0x70
 8001d98:	e01c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x358>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b05      	cmp	r3, #5
 8001da0:	d10c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x340>
 8001da2:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	4a60      	ldr	r2, [pc, #384]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	f043 0304 	orr.w	r3, r3, #4
 8001dac:	6713      	str	r3, [r2, #112]	; 0x70
 8001dae:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a5d      	ldr	r2, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dba:	e00b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x358>
 8001dbc:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	4a59      	ldr	r2, [pc, #356]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc8:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001dce:	f023 0304 	bic.w	r3, r3, #4
 8001dd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d015      	beq.n	8001e08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff f8ae 	bl	8000f3c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de4:	f7ff f8aa 	bl	8000f3c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e0d7      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfa:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0ee      	beq.n	8001de4 <HAL_RCC_OscConfig+0x368>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7ff f898 	bl	8000f3c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e10:	f7ff f894 	bl	8000f3c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e0c1      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e26:	4b40      	ldr	r3, [pc, #256]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1ee      	bne.n	8001e10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e38:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	4a3a      	ldr	r2, [pc, #232]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001e3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80ad 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e4e:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d060      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d145      	bne.n	8001eee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x4b4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7ff f868 	bl	8000f3c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e70:	f7ff f864 	bl	8000f3c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e093      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f0      	bne.n	8001e70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	019b      	lsls	r3, r3, #6
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	041b      	lsls	r3, r3, #16
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	061b      	lsls	r3, r3, #24
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	071b      	lsls	r3, r3, #28
 8001eba:	491b      	ldr	r1, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4b4>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7ff f839 	bl	8000f3c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff f835 	bl	8000f3c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e064      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x452>
 8001eec:	e05c      	b.n	8001fa8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x4b4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f822 	bl	8000f3c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff f81e 	bl	8000f3c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e04d      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x4ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x480>
 8001f1a:	e045      	b.n	8001fa8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e040      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_RCC_OscConfig+0x538>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d030      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d129      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d122      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f64:	4013      	ands	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d119      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d10f      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e03f      	b.n	800204a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fe98 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f929 	bl	8002254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b08a      	sub	sp, #40	; 0x28
 8002056:	af02      	add	r7, sp, #8
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b20      	cmp	r3, #32
 8002070:	d17c      	bne.n	800216c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_UART_Transmit+0x2c>
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e075      	b.n	800216e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_UART_Transmit+0x3e>
 800208c:	2302      	movs	r3, #2
 800208e:	e06e      	b.n	800216e <HAL_UART_Transmit+0x11c>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2221      	movs	r2, #33	; 0x21
 80020a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020a6:	f7fe ff49 	bl	8000f3c <HAL_GetTick>
 80020aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	88fa      	ldrh	r2, [r7, #6]
 80020b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c0:	d108      	bne.n	80020d4 <HAL_UART_Transmit+0x82>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d104      	bne.n	80020d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	e003      	b.n	80020dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020e4:	e02a      	b.n	800213c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2200      	movs	r2, #0
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f840 	bl	8002176 <UART_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e036      	b.n	800216e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10b      	bne.n	800211e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002114:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	3302      	adds	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	e007      	b.n	800212e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1cf      	bne.n	80020e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	2140      	movs	r1, #64	; 0x40
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f810 	bl	8002176 <UART_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e006      	b.n	800216e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	e000      	b.n	800216e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
  }
}
 800216e:	4618      	mov	r0, r3
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b090      	sub	sp, #64	; 0x40
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	4613      	mov	r3, r2
 8002184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002186:	e050      	b.n	800222a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218e:	d04c      	beq.n	800222a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002196:	f7fe fed1 	bl	8000f3c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d241      	bcs.n	800222a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	330c      	adds	r3, #12
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	e853 3f00 	ldrex	r3, [r3]
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	330c      	adds	r3, #12
 80021c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021c6:	637a      	str	r2, [r7, #52]	; 0x34
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ce:	e841 2300 	strex	r3, r2, [r1]
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e5      	bne.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3314      	adds	r3, #20
 80021e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	e853 3f00 	ldrex	r3, [r3]
 80021e8:	613b      	str	r3, [r7, #16]
   return(result);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	f023 0301 	bic.w	r3, r3, #1
 80021f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3314      	adds	r3, #20
 80021f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021fa:	623a      	str	r2, [r7, #32]
 80021fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021fe:	69f9      	ldr	r1, [r7, #28]
 8002200:	6a3a      	ldr	r2, [r7, #32]
 8002202:	e841 2300 	strex	r3, r2, [r1]
 8002206:	61bb      	str	r3, [r7, #24]
   return(result);
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1e5      	bne.n	80021da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e00f      	b.n	800224a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4013      	ands	r3, r2
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	429a      	cmp	r2, r3
 8002246:	d09f      	beq.n	8002188 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3740      	adds	r7, #64	; 0x40
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002258:	b0c0      	sub	sp, #256	; 0x100
 800225a:	af00      	add	r7, sp, #0
 800225c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	ea40 0301 	orr.w	r3, r0, r1
 800227c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800227e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	431a      	orrs	r2, r3
 800228c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	431a      	orrs	r2, r3
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80022ac:	f021 010c 	bic.w	r1, r1, #12
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022ba:	430b      	orrs	r3, r1
 80022bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ce:	6999      	ldr	r1, [r3, #24]
 80022d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	ea40 0301 	orr.w	r3, r0, r1
 80022da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b8f      	ldr	r3, [pc, #572]	; (8002520 <UART_SetConfig+0x2cc>)
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d005      	beq.n	80022f4 <UART_SetConfig+0xa0>
 80022e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	4b8d      	ldr	r3, [pc, #564]	; (8002524 <UART_SetConfig+0x2d0>)
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d104      	bne.n	80022fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022f4:	f7ff fa04 	bl	8001700 <HAL_RCC_GetPCLK2Freq>
 80022f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022fc:	e003      	b.n	8002306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022fe:	f7ff f9eb 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 8002302:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002310:	f040 810c 	bne.w	800252c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002318:	2200      	movs	r2, #0
 800231a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800231e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002326:	4622      	mov	r2, r4
 8002328:	462b      	mov	r3, r5
 800232a:	1891      	adds	r1, r2, r2
 800232c:	65b9      	str	r1, [r7, #88]	; 0x58
 800232e:	415b      	adcs	r3, r3
 8002330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002336:	4621      	mov	r1, r4
 8002338:	eb12 0801 	adds.w	r8, r2, r1
 800233c:	4629      	mov	r1, r5
 800233e:	eb43 0901 	adc.w	r9, r3, r1
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800234e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002356:	4690      	mov	r8, r2
 8002358:	4699      	mov	r9, r3
 800235a:	4623      	mov	r3, r4
 800235c:	eb18 0303 	adds.w	r3, r8, r3
 8002360:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002364:	462b      	mov	r3, r5
 8002366:	eb49 0303 	adc.w	r3, r9, r3
 800236a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800237a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800237e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002382:	460b      	mov	r3, r1
 8002384:	18db      	adds	r3, r3, r3
 8002386:	653b      	str	r3, [r7, #80]	; 0x50
 8002388:	4613      	mov	r3, r2
 800238a:	eb42 0303 	adc.w	r3, r2, r3
 800238e:	657b      	str	r3, [r7, #84]	; 0x54
 8002390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002398:	f7fd ff34 	bl	8000204 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4b61      	ldr	r3, [pc, #388]	; (8002528 <UART_SetConfig+0x2d4>)
 80023a2:	fba3 2302 	umull	r2, r3, r3, r2
 80023a6:	095b      	lsrs	r3, r3, #5
 80023a8:	011c      	lsls	r4, r3, #4
 80023aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023ae:	2200      	movs	r2, #0
 80023b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80023b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80023bc:	4642      	mov	r2, r8
 80023be:	464b      	mov	r3, r9
 80023c0:	1891      	adds	r1, r2, r2
 80023c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80023c4:	415b      	adcs	r3, r3
 80023c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023cc:	4641      	mov	r1, r8
 80023ce:	eb12 0a01 	adds.w	sl, r2, r1
 80023d2:	4649      	mov	r1, r9
 80023d4:	eb43 0b01 	adc.w	fp, r3, r1
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ec:	4692      	mov	sl, r2
 80023ee:	469b      	mov	fp, r3
 80023f0:	4643      	mov	r3, r8
 80023f2:	eb1a 0303 	adds.w	r3, sl, r3
 80023f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023fa:	464b      	mov	r3, r9
 80023fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002400:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002410:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002418:	460b      	mov	r3, r1
 800241a:	18db      	adds	r3, r3, r3
 800241c:	643b      	str	r3, [r7, #64]	; 0x40
 800241e:	4613      	mov	r3, r2
 8002420:	eb42 0303 	adc.w	r3, r2, r3
 8002424:	647b      	str	r3, [r7, #68]	; 0x44
 8002426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800242a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800242e:	f7fd fee9 	bl	8000204 <__aeabi_uldivmod>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4611      	mov	r1, r2
 8002438:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <UART_SetConfig+0x2d4>)
 800243a:	fba3 2301 	umull	r2, r3, r3, r1
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	2264      	movs	r2, #100	; 0x64
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	1acb      	subs	r3, r1, r3
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800244e:	4b36      	ldr	r3, [pc, #216]	; (8002528 <UART_SetConfig+0x2d4>)
 8002450:	fba3 2302 	umull	r2, r3, r3, r2
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800245c:	441c      	add	r4, r3
 800245e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002462:	2200      	movs	r2, #0
 8002464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002468:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800246c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002470:	4642      	mov	r2, r8
 8002472:	464b      	mov	r3, r9
 8002474:	1891      	adds	r1, r2, r2
 8002476:	63b9      	str	r1, [r7, #56]	; 0x38
 8002478:	415b      	adcs	r3, r3
 800247a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800247c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002480:	4641      	mov	r1, r8
 8002482:	1851      	adds	r1, r2, r1
 8002484:	6339      	str	r1, [r7, #48]	; 0x30
 8002486:	4649      	mov	r1, r9
 8002488:	414b      	adcs	r3, r1
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002498:	4659      	mov	r1, fp
 800249a:	00cb      	lsls	r3, r1, #3
 800249c:	4651      	mov	r1, sl
 800249e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024a2:	4651      	mov	r1, sl
 80024a4:	00ca      	lsls	r2, r1, #3
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	4642      	mov	r2, r8
 80024ae:	189b      	adds	r3, r3, r2
 80024b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024b4:	464b      	mov	r3, r9
 80024b6:	460a      	mov	r2, r1
 80024b8:	eb42 0303 	adc.w	r3, r2, r3
 80024bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024d4:	460b      	mov	r3, r1
 80024d6:	18db      	adds	r3, r3, r3
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	4613      	mov	r3, r2
 80024dc:	eb42 0303 	adc.w	r3, r2, r3
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024ea:	f7fd fe8b 	bl	8000204 <__aeabi_uldivmod>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <UART_SetConfig+0x2d4>)
 80024f4:	fba3 1302 	umull	r1, r3, r3, r2
 80024f8:	095b      	lsrs	r3, r3, #5
 80024fa:	2164      	movs	r1, #100	; 0x64
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	3332      	adds	r3, #50	; 0x32
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <UART_SetConfig+0x2d4>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	f003 0207 	and.w	r2, r3, #7
 8002512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4422      	add	r2, r4
 800251a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800251c:	e105      	b.n	800272a <UART_SetConfig+0x4d6>
 800251e:	bf00      	nop
 8002520:	40011000 	.word	0x40011000
 8002524:	40011400 	.word	0x40011400
 8002528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800252c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002530:	2200      	movs	r2, #0
 8002532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002536:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800253a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800253e:	4642      	mov	r2, r8
 8002540:	464b      	mov	r3, r9
 8002542:	1891      	adds	r1, r2, r2
 8002544:	6239      	str	r1, [r7, #32]
 8002546:	415b      	adcs	r3, r3
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
 800254a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800254e:	4641      	mov	r1, r8
 8002550:	1854      	adds	r4, r2, r1
 8002552:	4649      	mov	r1, r9
 8002554:	eb43 0501 	adc.w	r5, r3, r1
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	00eb      	lsls	r3, r5, #3
 8002562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002566:	00e2      	lsls	r2, r4, #3
 8002568:	4614      	mov	r4, r2
 800256a:	461d      	mov	r5, r3
 800256c:	4643      	mov	r3, r8
 800256e:	18e3      	adds	r3, r4, r3
 8002570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002574:	464b      	mov	r3, r9
 8002576:	eb45 0303 	adc.w	r3, r5, r3
 800257a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800258a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800259a:	4629      	mov	r1, r5
 800259c:	008b      	lsls	r3, r1, #2
 800259e:	4621      	mov	r1, r4
 80025a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025a4:	4621      	mov	r1, r4
 80025a6:	008a      	lsls	r2, r1, #2
 80025a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80025ac:	f7fd fe2a 	bl	8000204 <__aeabi_uldivmod>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4b60      	ldr	r3, [pc, #384]	; (8002738 <UART_SetConfig+0x4e4>)
 80025b6:	fba3 2302 	umull	r2, r3, r3, r2
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	011c      	lsls	r4, r3, #4
 80025be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c2:	2200      	movs	r2, #0
 80025c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025d0:	4642      	mov	r2, r8
 80025d2:	464b      	mov	r3, r9
 80025d4:	1891      	adds	r1, r2, r2
 80025d6:	61b9      	str	r1, [r7, #24]
 80025d8:	415b      	adcs	r3, r3
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e0:	4641      	mov	r1, r8
 80025e2:	1851      	adds	r1, r2, r1
 80025e4:	6139      	str	r1, [r7, #16]
 80025e6:	4649      	mov	r1, r9
 80025e8:	414b      	adcs	r3, r1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f8:	4659      	mov	r1, fp
 80025fa:	00cb      	lsls	r3, r1, #3
 80025fc:	4651      	mov	r1, sl
 80025fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002602:	4651      	mov	r1, sl
 8002604:	00ca      	lsls	r2, r1, #3
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	4603      	mov	r3, r0
 800260c:	4642      	mov	r2, r8
 800260e:	189b      	adds	r3, r3, r2
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002614:	464b      	mov	r3, r9
 8002616:	460a      	mov	r2, r1
 8002618:	eb42 0303 	adc.w	r3, r2, r3
 800261c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	67bb      	str	r3, [r7, #120]	; 0x78
 800262a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002638:	4649      	mov	r1, r9
 800263a:	008b      	lsls	r3, r1, #2
 800263c:	4641      	mov	r1, r8
 800263e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002642:	4641      	mov	r1, r8
 8002644:	008a      	lsls	r2, r1, #2
 8002646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800264a:	f7fd fddb 	bl	8000204 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <UART_SetConfig+0x4e4>)
 8002654:	fba3 1302 	umull	r1, r3, r3, r2
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	2164      	movs	r1, #100	; 0x64
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	3332      	adds	r3, #50	; 0x32
 8002666:	4a34      	ldr	r2, [pc, #208]	; (8002738 <UART_SetConfig+0x4e4>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002672:	441c      	add	r4, r3
 8002674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002678:	2200      	movs	r2, #0
 800267a:	673b      	str	r3, [r7, #112]	; 0x70
 800267c:	677a      	str	r2, [r7, #116]	; 0x74
 800267e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002682:	4642      	mov	r2, r8
 8002684:	464b      	mov	r3, r9
 8002686:	1891      	adds	r1, r2, r2
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	415b      	adcs	r3, r3
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002692:	4641      	mov	r1, r8
 8002694:	1851      	adds	r1, r2, r1
 8002696:	6039      	str	r1, [r7, #0]
 8002698:	4649      	mov	r1, r9
 800269a:	414b      	adcs	r3, r1
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026aa:	4659      	mov	r1, fp
 80026ac:	00cb      	lsls	r3, r1, #3
 80026ae:	4651      	mov	r1, sl
 80026b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026b4:	4651      	mov	r1, sl
 80026b6:	00ca      	lsls	r2, r1, #3
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	4603      	mov	r3, r0
 80026be:	4642      	mov	r2, r8
 80026c0:	189b      	adds	r3, r3, r2
 80026c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80026c4:	464b      	mov	r3, r9
 80026c6:	460a      	mov	r2, r1
 80026c8:	eb42 0303 	adc.w	r3, r2, r3
 80026cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	663b      	str	r3, [r7, #96]	; 0x60
 80026d8:	667a      	str	r2, [r7, #100]	; 0x64
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026e6:	4649      	mov	r1, r9
 80026e8:	008b      	lsls	r3, r1, #2
 80026ea:	4641      	mov	r1, r8
 80026ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026f0:	4641      	mov	r1, r8
 80026f2:	008a      	lsls	r2, r1, #2
 80026f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026f8:	f7fd fd84 	bl	8000204 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <UART_SetConfig+0x4e4>)
 8002702:	fba3 1302 	umull	r1, r3, r3, r2
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2164      	movs	r1, #100	; 0x64
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	3332      	adds	r3, #50	; 0x32
 8002714:	4a08      	ldr	r2, [pc, #32]	; (8002738 <UART_SetConfig+0x4e4>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	f003 020f 	and.w	r2, r3, #15
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4422      	add	r2, r4
 8002728:	609a      	str	r2, [r3, #8]
}
 800272a:	bf00      	nop
 800272c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002730:	46bd      	mov	sp, r7
 8002732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002736:	bf00      	nop
 8002738:	51eb851f 	.word	0x51eb851f

0800273c <__libc_init_array>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	4d0d      	ldr	r5, [pc, #52]	; (8002774 <__libc_init_array+0x38>)
 8002740:	4c0d      	ldr	r4, [pc, #52]	; (8002778 <__libc_init_array+0x3c>)
 8002742:	1b64      	subs	r4, r4, r5
 8002744:	10a4      	asrs	r4, r4, #2
 8002746:	2600      	movs	r6, #0
 8002748:	42a6      	cmp	r6, r4
 800274a:	d109      	bne.n	8002760 <__libc_init_array+0x24>
 800274c:	4d0b      	ldr	r5, [pc, #44]	; (800277c <__libc_init_array+0x40>)
 800274e:	4c0c      	ldr	r4, [pc, #48]	; (8002780 <__libc_init_array+0x44>)
 8002750:	f000 f820 	bl	8002794 <_init>
 8002754:	1b64      	subs	r4, r4, r5
 8002756:	10a4      	asrs	r4, r4, #2
 8002758:	2600      	movs	r6, #0
 800275a:	42a6      	cmp	r6, r4
 800275c:	d105      	bne.n	800276a <__libc_init_array+0x2e>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	f855 3b04 	ldr.w	r3, [r5], #4
 8002764:	4798      	blx	r3
 8002766:	3601      	adds	r6, #1
 8002768:	e7ee      	b.n	8002748 <__libc_init_array+0xc>
 800276a:	f855 3b04 	ldr.w	r3, [r5], #4
 800276e:	4798      	blx	r3
 8002770:	3601      	adds	r6, #1
 8002772:	e7f2      	b.n	800275a <__libc_init_array+0x1e>
 8002774:	08002808 	.word	0x08002808
 8002778:	08002808 	.word	0x08002808
 800277c:	08002808 	.word	0x08002808
 8002780:	0800280c 	.word	0x0800280c

08002784 <memset>:
 8002784:	4402      	add	r2, r0
 8002786:	4603      	mov	r3, r0
 8002788:	4293      	cmp	r3, r2
 800278a:	d100      	bne.n	800278e <memset+0xa>
 800278c:	4770      	bx	lr
 800278e:	f803 1b01 	strb.w	r1, [r3], #1
 8002792:	e7f9      	b.n	8002788 <memset+0x4>

08002794 <_init>:
 8002794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002796:	bf00      	nop
 8002798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279a:	bc08      	pop	{r3}
 800279c:	469e      	mov	lr, r3
 800279e:	4770      	bx	lr

080027a0 <_fini>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr
