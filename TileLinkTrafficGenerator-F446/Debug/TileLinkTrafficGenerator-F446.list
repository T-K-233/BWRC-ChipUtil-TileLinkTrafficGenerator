
TileLinkTrafficGenerator-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a4  080033a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033ac  080033ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033b0  080033b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  080033c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080033c0  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df21  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c67  00000000  00000000  0002df5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002fbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  000307f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002255d  00000000  00000000  00031370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed4d  00000000  00000000  000538cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0a33  00000000  00000000  0006261a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013304d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000331c  00000000  00000000  001330a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003374 	.word	0x08003374

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003374 	.word	0x08003374

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_IC_CaptureCallback>:

uint8_t offset;
uint8_t tx_enabled = 0;
uint8_t tl_buffer[130];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if (tx_enabled) {
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d02b      	beq.n	8000570 <HAL_TIM_IC_CaptureCallback+0x68>
    HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	2102      	movs	r1, #2
 800051c:	4817      	ldr	r0, [pc, #92]	; (800057c <HAL_TIM_IC_CaptureCallback+0x74>)
 800051e:	f001 f8fb 	bl	8001718 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	2101      	movs	r1, #1
 8000526:	4816      	ldr	r0, [pc, #88]	; (8000580 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000528:	f001 f8f6 	bl	8001718 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl_buffer[TL_SERDES_TOTAL_SIZE-offset-1]);
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f1c3 037a 	rsb	r3, r3, #122	; 0x7a
 8000534:	4a14      	ldr	r2, [pc, #80]	; (8000588 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	461a      	mov	r2, r3
 800053a:	2101      	movs	r1, #1
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <HAL_TIM_IC_CaptureCallback+0x74>)
 800053e:	f001 f8eb 	bl	8001718 <HAL_GPIO_WritePin>

    offset += 1;
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_TIM_IC_CaptureCallback+0x7c>)
 800054c:	701a      	strb	r2, [r3, #0]

    if (offset > TL_SERDES_TOTAL_SIZE) {
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b7b      	cmp	r3, #123	; 0x7b
 8000554:	d90c      	bls.n	8000570 <HAL_TIM_IC_CaptureCallback+0x68>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2102      	movs	r1, #2
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <HAL_TIM_IC_CaptureCallback+0x74>)
 800055c:	f001 f8dc 	bl	8001718 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, 0);
 8000560:	2200      	movs	r2, #0
 8000562:	2101      	movs	r1, #1
 8000564:	4805      	ldr	r0, [pc, #20]	; (800057c <HAL_TIM_IC_CaptureCallback+0x74>)
 8000566:	f001 f8d7 	bl	8001718 <HAL_GPIO_WritePin>
      tx_enabled = 0;
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <HAL_TIM_IC_CaptureCallback+0x70>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000029 	.word	0x20000029
 800057c:	40020800 	.word	0x40020800
 8000580:	40020000 	.word	0x40020000
 8000584:	20000028 	.word	0x20000028
 8000588:	2000002c 	.word	0x2000002c

0800058c <TL_startTransmit>:

void TL_startTransmit() {
 800058c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000590:	b0a6      	sub	sp, #152	; 0x98
 8000592:	af00      	add	r7, sp, #0
  offset = 0;
 8000594:	4ac0      	ldr	r2, [pc, #768]	; (8000898 <TL_startTransmit+0x30c>)
 8000596:	2300      	movs	r3, #0
 8000598:	7013      	strb	r3, [r2, #0]

  uint64_t tl_chanid  = 0;
 800059a:	f04f 0200 	mov.w	r2, #0
 800059e:	f04f 0300 	mov.w	r3, #0
 80005a2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  uint64_t tl_opcode  = 0;
 80005a6:	f04f 0200 	mov.w	r2, #0
 80005aa:	f04f 0300 	mov.w	r3, #0
 80005ae:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  uint64_t tl_param   = 0;
 80005b2:	f04f 0200 	mov.w	r2, #0
 80005b6:	f04f 0300 	mov.w	r3, #0
 80005ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  uint64_t tl_size    = 2;
 80005be:	f04f 0202 	mov.w	r2, #2
 80005c2:	f04f 0300 	mov.w	r3, #0
 80005c6:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  uint64_t tl_source  = 0;
 80005ca:	f04f 0200 	mov.w	r2, #0
 80005ce:	f04f 0300 	mov.w	r3, #0
 80005d2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
  uint64_t tl_address = 0x80000000;
 80005d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80005da:	f04f 0300 	mov.w	r3, #0
 80005de:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  uint64_t tl_data    = 0x0000000000000001;
 80005e2:	f04f 0201 	mov.w	r2, #1
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  uint64_t tl_corrupt = 0;
 80005ee:	f04f 0200 	mov.w	r2, #0
 80005f2:	f04f 0300 	mov.w	r3, #0
 80005f6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  uint64_t tl_mask    = 0b00001111;
 80005fa:	f04f 020f 	mov.w	r2, #15
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  uint64_t tl_last    = 1;
 8000606:	f04f 0201 	mov.w	r2, #1
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  for (uint8_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8000612:	2300      	movs	r3, #0
 8000614:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000618:	e025      	b.n	8000666 <TL_startTransmit+0xda>
    tl_buffer[offset+i] = (tl_chanid >> i) & 0b1;
 800061a:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 800061e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8000622:	f1c4 0120 	rsb	r1, r4, #32
 8000626:	f1a4 0020 	sub.w	r0, r4, #32
 800062a:	fa22 f804 	lsr.w	r8, r2, r4
 800062e:	fa03 f101 	lsl.w	r1, r3, r1
 8000632:	ea48 0801 	orr.w	r8, r8, r1
 8000636:	fa23 f000 	lsr.w	r0, r3, r0
 800063a:	ea48 0800 	orr.w	r8, r8, r0
 800063e:	fa23 f904 	lsr.w	r9, r3, r4
 8000642:	fa5f f088 	uxtb.w	r0, r8
 8000646:	4b94      	ldr	r3, [pc, #592]	; (8000898 <TL_startTransmit+0x30c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000650:	18d1      	adds	r1, r2, r3
 8000652:	f000 0301 	and.w	r3, r0, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4a90      	ldr	r2, [pc, #576]	; (800089c <TL_startTransmit+0x310>)
 800065a:	5453      	strb	r3, [r2, r1]
  for (uint8_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800065c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000660:	3301      	adds	r3, #1
 8000662:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000666:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800066a:	2b02      	cmp	r3, #2
 800066c:	d9d5      	bls.n	800061a <TL_startTransmit+0x8e>
  }
  offset += TL_SERDES_CHANID_SIZE;
 800066e:	4b8a      	ldr	r3, [pc, #552]	; (8000898 <TL_startTransmit+0x30c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3303      	adds	r3, #3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	4a88      	ldr	r2, [pc, #544]	; (8000898 <TL_startTransmit+0x30c>)
 8000678:	7013      	strb	r3, [r2, #0]

  for (uint8_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800067a:	2300      	movs	r3, #0
 800067c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8000680:	e025      	b.n	80006ce <TL_startTransmit+0x142>
    tl_buffer[offset+i] = (tl_opcode >> i) & 0b1;
 8000682:	f897 4096 	ldrb.w	r4, [r7, #150]	; 0x96
 8000686:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800068a:	f1c4 0120 	rsb	r1, r4, #32
 800068e:	f1a4 0020 	sub.w	r0, r4, #32
 8000692:	fa22 fa04 	lsr.w	sl, r2, r4
 8000696:	fa03 f101 	lsl.w	r1, r3, r1
 800069a:	ea4a 0a01 	orr.w	sl, sl, r1
 800069e:	fa23 f000 	lsr.w	r0, r3, r0
 80006a2:	ea4a 0a00 	orr.w	sl, sl, r0
 80006a6:	fa23 fb04 	lsr.w	fp, r3, r4
 80006aa:	fa5f f08a 	uxtb.w	r0, sl
 80006ae:	4b7a      	ldr	r3, [pc, #488]	; (8000898 <TL_startTransmit+0x30c>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80006b8:	18d1      	adds	r1, r2, r3
 80006ba:	f000 0301 	and.w	r3, r0, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	4a76      	ldr	r2, [pc, #472]	; (800089c <TL_startTransmit+0x310>)
 80006c2:	5453      	strb	r3, [r2, r1]
  for (uint8_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80006c4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80006c8:	3301      	adds	r3, #1
 80006ca:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80006ce:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d9d5      	bls.n	8000682 <TL_startTransmit+0xf6>
  }
  offset += TL_SERDES_OPCODE_SIZE;
 80006d6:	4b70      	ldr	r3, [pc, #448]	; (8000898 <TL_startTransmit+0x30c>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3303      	adds	r3, #3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	4a6e      	ldr	r2, [pc, #440]	; (8000898 <TL_startTransmit+0x30c>)
 80006e0:	7013      	strb	r3, [r2, #0]

  for (uint8_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80006e2:	2300      	movs	r3, #0
 80006e4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80006e8:	e022      	b.n	8000730 <TL_startTransmit+0x1a4>
    tl_buffer[offset+i] = (tl_param >> i) & 0b1;
 80006ea:	f897 4095 	ldrb.w	r4, [r7, #149]	; 0x95
 80006ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80006f2:	f1c4 0120 	rsb	r1, r4, #32
 80006f6:	f1a4 0020 	sub.w	r0, r4, #32
 80006fa:	fa22 f504 	lsr.w	r5, r2, r4
 80006fe:	fa03 f101 	lsl.w	r1, r3, r1
 8000702:	430d      	orrs	r5, r1
 8000704:	fa23 f000 	lsr.w	r0, r3, r0
 8000708:	4305      	orrs	r5, r0
 800070a:	fa23 f604 	lsr.w	r6, r3, r4
 800070e:	b2e8      	uxtb	r0, r5
 8000710:	4b61      	ldr	r3, [pc, #388]	; (8000898 <TL_startTransmit+0x30c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800071a:	18d1      	adds	r1, r2, r3
 800071c:	f000 0301 	and.w	r3, r0, #1
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4a5e      	ldr	r2, [pc, #376]	; (800089c <TL_startTransmit+0x310>)
 8000724:	5453      	strb	r3, [r2, r1]
  for (uint8_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8000726:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800072a:	3301      	adds	r3, #1
 800072c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8000730:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000734:	2b02      	cmp	r3, #2
 8000736:	d9d8      	bls.n	80006ea <TL_startTransmit+0x15e>
  }
  offset += TL_SERDES_PARAM_SIZE;
 8000738:	4b57      	ldr	r3, [pc, #348]	; (8000898 <TL_startTransmit+0x30c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3303      	adds	r3, #3
 800073e:	b2db      	uxtb	r3, r3
 8000740:	4a55      	ldr	r2, [pc, #340]	; (8000898 <TL_startTransmit+0x30c>)
 8000742:	7013      	strb	r3, [r2, #0]

  for (uint8_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8000744:	2300      	movs	r3, #0
 8000746:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800074a:	e028      	b.n	800079e <TL_startTransmit+0x212>
    tl_buffer[offset+i] = (tl_size >> i) & 0b1;
 800074c:	f897 4094 	ldrb.w	r4, [r7, #148]	; 0x94
 8000750:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000754:	f1c4 0120 	rsb	r1, r4, #32
 8000758:	f1a4 0020 	sub.w	r0, r4, #32
 800075c:	fa22 f504 	lsr.w	r5, r2, r4
 8000760:	633d      	str	r5, [r7, #48]	; 0x30
 8000762:	fa03 f101 	lsl.w	r1, r3, r1
 8000766:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8000768:	430d      	orrs	r5, r1
 800076a:	633d      	str	r5, [r7, #48]	; 0x30
 800076c:	fa23 f000 	lsr.w	r0, r3, r0
 8000770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000772:	4301      	orrs	r1, r0
 8000774:	6339      	str	r1, [r7, #48]	; 0x30
 8000776:	40e3      	lsrs	r3, r4
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
 800077a:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
 800077e:	4b46      	ldr	r3, [pc, #280]	; (8000898 <TL_startTransmit+0x30c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000788:	18d1      	adds	r1, r2, r3
 800078a:	f000 0301 	and.w	r3, r0, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	4a42      	ldr	r2, [pc, #264]	; (800089c <TL_startTransmit+0x310>)
 8000792:	5453      	strb	r3, [r2, r1]
  for (uint8_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8000794:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000798:	3301      	adds	r3, #1
 800079a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800079e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d9d2      	bls.n	800074c <TL_startTransmit+0x1c0>
  }
  offset += TL_SERDES_SIZE_SIZE;
 80007a6:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <TL_startTransmit+0x30c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3304      	adds	r3, #4
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4a3a      	ldr	r2, [pc, #232]	; (8000898 <TL_startTransmit+0x30c>)
 80007b0:	7013      	strb	r3, [r2, #0]

  for (uint8_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80007b8:	e028      	b.n	800080c <TL_startTransmit+0x280>
    tl_buffer[offset+i] = (tl_source >> i) & 0b1;
 80007ba:	f897 4093 	ldrb.w	r4, [r7, #147]	; 0x93
 80007be:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80007c2:	f1c4 0120 	rsb	r1, r4, #32
 80007c6:	f1a4 0020 	sub.w	r0, r4, #32
 80007ca:	fa22 f504 	lsr.w	r5, r2, r4
 80007ce:	62bd      	str	r5, [r7, #40]	; 0x28
 80007d0:	fa03 f101 	lsl.w	r1, r3, r1
 80007d4:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80007d6:	430d      	orrs	r5, r1
 80007d8:	62bd      	str	r5, [r7, #40]	; 0x28
 80007da:	fa23 f000 	lsr.w	r0, r3, r0
 80007de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007e0:	4301      	orrs	r1, r0
 80007e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80007e4:	40e3      	lsrs	r3, r4
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007e8:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <TL_startTransmit+0x30c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80007f6:	18d1      	adds	r1, r2, r3
 80007f8:	f000 0301 	and.w	r3, r0, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	4a27      	ldr	r2, [pc, #156]	; (800089c <TL_startTransmit+0x310>)
 8000800:	5453      	strb	r3, [r2, r1]
  for (uint8_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8000802:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000806:	3301      	adds	r3, #1
 8000808:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 800080c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8000810:	2b03      	cmp	r3, #3
 8000812:	d9d2      	bls.n	80007ba <TL_startTransmit+0x22e>
  }
  offset += TL_SERDES_SOURCE_SIZE;
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <TL_startTransmit+0x30c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	3304      	adds	r3, #4
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <TL_startTransmit+0x30c>)
 800081e:	701a      	strb	r2, [r3, #0]

  for (uint8_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8000820:	2300      	movs	r3, #0
 8000822:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8000826:	e028      	b.n	800087a <TL_startTransmit+0x2ee>
    tl_buffer[offset+i] = (tl_address >> i) & 0b1;
 8000828:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 800082c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000830:	f1c0 0420 	rsb	r4, r0, #32
 8000834:	f1a0 0120 	sub.w	r1, r0, #32
 8000838:	fa22 f500 	lsr.w	r5, r2, r0
 800083c:	623d      	str	r5, [r7, #32]
 800083e:	fa03 f404 	lsl.w	r4, r3, r4
 8000842:	6a3d      	ldr	r5, [r7, #32]
 8000844:	4325      	orrs	r5, r4
 8000846:	623d      	str	r5, [r7, #32]
 8000848:	fa23 f101 	lsr.w	r1, r3, r1
 800084c:	6a3c      	ldr	r4, [r7, #32]
 800084e:	430c      	orrs	r4, r1
 8000850:	623c      	str	r4, [r7, #32]
 8000852:	40c3      	lsrs	r3, r0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
 8000856:	f897 2020 	ldrb.w	r2, [r7, #32]
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <TL_startTransmit+0x30c>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8000864:	440b      	add	r3, r1
 8000866:	f002 0201 	and.w	r2, r2, #1
 800086a:	b2d1      	uxtb	r1, r2
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <TL_startTransmit+0x310>)
 800086e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8000870:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8000874:	3301      	adds	r3, #1
 8000876:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800087a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800087e:	2b1f      	cmp	r3, #31
 8000880:	d9d2      	bls.n	8000828 <TL_startTransmit+0x29c>
  }
  offset += TL_SERDES_ADDRESS_SIZE;
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <TL_startTransmit+0x30c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3320      	adds	r3, #32
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b03      	ldr	r3, [pc, #12]	; (8000898 <TL_startTransmit+0x30c>)
 800088c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800088e:	2300      	movs	r3, #0
 8000890:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8000894:	e02c      	b.n	80008f0 <TL_startTransmit+0x364>
 8000896:	bf00      	nop
 8000898:	20000028 	.word	0x20000028
 800089c:	2000002c 	.word	0x2000002c
    tl_buffer[offset+i] = (tl_mask >> i) & 0b1;
 80008a0:	f897 1091 	ldrb.w	r1, [r7, #145]	; 0x91
 80008a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80008a8:	f1c1 0420 	rsb	r4, r1, #32
 80008ac:	f1a1 0020 	sub.w	r0, r1, #32
 80008b0:	fa22 f501 	lsr.w	r5, r2, r1
 80008b4:	61bd      	str	r5, [r7, #24]
 80008b6:	fa03 f404 	lsl.w	r4, r3, r4
 80008ba:	69bd      	ldr	r5, [r7, #24]
 80008bc:	4325      	orrs	r5, r4
 80008be:	61bd      	str	r5, [r7, #24]
 80008c0:	fa23 f000 	lsr.w	r0, r3, r0
 80008c4:	69bc      	ldr	r4, [r7, #24]
 80008c6:	4304      	orrs	r4, r0
 80008c8:	61bc      	str	r4, [r7, #24]
 80008ca:	40cb      	lsrs	r3, r1
 80008cc:	61fb      	str	r3, [r7, #28]
 80008ce:	7e3a      	ldrb	r2, [r7, #24]
 80008d0:	4b63      	ldr	r3, [pc, #396]	; (8000a60 <TL_startTransmit+0x4d4>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80008da:	440b      	add	r3, r1
 80008dc:	f002 0201 	and.w	r2, r2, #1
 80008e0:	b2d1      	uxtb	r1, r2
 80008e2:	4a60      	ldr	r2, [pc, #384]	; (8000a64 <TL_startTransmit+0x4d8>)
 80008e4:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80008e6:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80008ea:	3301      	adds	r3, #1
 80008ec:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80008f0:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d9d3      	bls.n	80008a0 <TL_startTransmit+0x314>
  }
  offset += TL_SERDES_MASK_SIZE;
 80008f8:	4b59      	ldr	r3, [pc, #356]	; (8000a60 <TL_startTransmit+0x4d4>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	3308      	adds	r3, #8
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b57      	ldr	r3, [pc, #348]	; (8000a60 <TL_startTransmit+0x4d4>)
 8000902:	701a      	strb	r2, [r3, #0]

  for (uint8_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8000904:	2300      	movs	r3, #0
 8000906:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 800090a:	e027      	b.n	800095c <TL_startTransmit+0x3d0>
    tl_buffer[offset+i] = (tl_data >> i) & 0b1;
 800090c:	f897 1090 	ldrb.w	r1, [r7, #144]	; 0x90
 8000910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000914:	f1c1 0420 	rsb	r4, r1, #32
 8000918:	f1a1 0020 	sub.w	r0, r1, #32
 800091c:	fa22 f501 	lsr.w	r5, r2, r1
 8000920:	613d      	str	r5, [r7, #16]
 8000922:	fa03 f404 	lsl.w	r4, r3, r4
 8000926:	693d      	ldr	r5, [r7, #16]
 8000928:	4325      	orrs	r5, r4
 800092a:	613d      	str	r5, [r7, #16]
 800092c:	fa23 f000 	lsr.w	r0, r3, r0
 8000930:	693c      	ldr	r4, [r7, #16]
 8000932:	4304      	orrs	r4, r0
 8000934:	613c      	str	r4, [r7, #16]
 8000936:	40cb      	lsrs	r3, r1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	7c3a      	ldrb	r2, [r7, #16]
 800093c:	4b48      	ldr	r3, [pc, #288]	; (8000a60 <TL_startTransmit+0x4d4>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8000946:	440b      	add	r3, r1
 8000948:	f002 0201 	and.w	r2, r2, #1
 800094c:	b2d1      	uxtb	r1, r2
 800094e:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <TL_startTransmit+0x4d8>)
 8000950:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8000952:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8000956:	3301      	adds	r3, #1
 8000958:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 800095c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8000960:	2b3f      	cmp	r3, #63	; 0x3f
 8000962:	d9d3      	bls.n	800090c <TL_startTransmit+0x380>
  }
  offset += TL_SERDES_DATA_SIZE;
 8000964:	4b3e      	ldr	r3, [pc, #248]	; (8000a60 <TL_startTransmit+0x4d4>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3340      	adds	r3, #64	; 0x40
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <TL_startTransmit+0x4d4>)
 800096e:	701a      	strb	r2, [r3, #0]

  for (uint8_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8000970:	2300      	movs	r3, #0
 8000972:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000976:	e027      	b.n	80009c8 <TL_startTransmit+0x43c>
    tl_buffer[offset+i] = (tl_corrupt >> i) & 0b1;
 8000978:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 800097c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8000980:	f1c1 0420 	rsb	r4, r1, #32
 8000984:	f1a1 0020 	sub.w	r0, r1, #32
 8000988:	fa22 f501 	lsr.w	r5, r2, r1
 800098c:	60bd      	str	r5, [r7, #8]
 800098e:	fa03 f404 	lsl.w	r4, r3, r4
 8000992:	68bd      	ldr	r5, [r7, #8]
 8000994:	4325      	orrs	r5, r4
 8000996:	60bd      	str	r5, [r7, #8]
 8000998:	fa23 f000 	lsr.w	r0, r3, r0
 800099c:	68bc      	ldr	r4, [r7, #8]
 800099e:	4304      	orrs	r4, r0
 80009a0:	60bc      	str	r4, [r7, #8]
 80009a2:	40cb      	lsrs	r3, r1
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	7a3a      	ldrb	r2, [r7, #8]
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <TL_startTransmit+0x4d4>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009b2:	440b      	add	r3, r1
 80009b4:	f002 0201 	and.w	r2, r2, #1
 80009b8:	b2d1      	uxtb	r1, r2
 80009ba:	4a2a      	ldr	r2, [pc, #168]	; (8000a64 <TL_startTransmit+0x4d8>)
 80009bc:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80009be:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009c2:	3301      	adds	r3, #1
 80009c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80009c8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0d3      	beq.n	8000978 <TL_startTransmit+0x3ec>
  }
  offset += TL_SERDES_CORRUPT_SIZE;
 80009d0:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <TL_startTransmit+0x4d4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <TL_startTransmit+0x4d4>)
 80009da:	701a      	strb	r2, [r3, #0]

  for (uint8_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80009dc:	2300      	movs	r3, #0
 80009de:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80009e2:	e027      	b.n	8000a34 <TL_startTransmit+0x4a8>
    tl_buffer[offset+i] = (tl_last >> i) & 0b1;
 80009e4:	f897 108e 	ldrb.w	r1, [r7, #142]	; 0x8e
 80009e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80009ec:	f1c1 0420 	rsb	r4, r1, #32
 80009f0:	f1a1 0020 	sub.w	r0, r1, #32
 80009f4:	fa22 f501 	lsr.w	r5, r2, r1
 80009f8:	603d      	str	r5, [r7, #0]
 80009fa:	fa03 f404 	lsl.w	r4, r3, r4
 80009fe:	683d      	ldr	r5, [r7, #0]
 8000a00:	4325      	orrs	r5, r4
 8000a02:	603d      	str	r5, [r7, #0]
 8000a04:	fa23 f000 	lsr.w	r0, r3, r0
 8000a08:	683c      	ldr	r4, [r7, #0]
 8000a0a:	4304      	orrs	r4, r0
 8000a0c:	603c      	str	r4, [r7, #0]
 8000a0e:	40cb      	lsrs	r3, r1
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	783a      	ldrb	r2, [r7, #0]
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <TL_startTransmit+0x4d4>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a1e:	440b      	add	r3, r1
 8000a20:	f002 0201 	and.w	r2, r2, #1
 8000a24:	b2d1      	uxtb	r1, r2
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <TL_startTransmit+0x4d8>)
 8000a28:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8000a2a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a2e:	3301      	adds	r3, #1
 8000a30:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000a34:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0d3      	beq.n	80009e4 <TL_startTransmit+0x458>
  }
  offset += TL_SERDES_LAST_SIZE;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <TL_startTransmit+0x4d4>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <TL_startTransmit+0x4d4>)
 8000a46:	701a      	strb	r2, [r3, #0]


  offset = 0;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <TL_startTransmit+0x4d4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
  tx_enabled = 1;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <TL_startTransmit+0x4dc>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3798      	adds	r7, #152	; 0x98
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a5e:	4770      	bx	lr
 8000a60:	20000028 	.word	0x20000028
 8000a64:	2000002c 	.word	0x2000002c
 8000a68:	20000029 	.word	0x20000029

08000a6c <APP_getUsrButton>:


uint8_t APP_getUsrButton() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000a70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <APP_getUsrButton+0x20>)
 8000a76:	f000 fe37 	bl	80016e8 <HAL_GPIO_ReadPin>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bf0c      	ite	eq
 8000a80:	2301      	moveq	r3, #1
 8000a82:	2300      	movne	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40020800 	.word	0x40020800

08000a90 <APP_setLED>:

void APP_setLED(uint8_t state) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <APP_setLED+0x20>)
 8000aa2:	f000 fe39 	bl	8001718 <HAL_GPIO_WritePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <APP_init>:
  HAL_Delay(1);
  HAL_GPIO_WritePin(TL_Clk_GPIO_Port, TL_Clk_Pin, 0);
  HAL_Delay(1);
}

void APP_init() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <APP_init+0x10>)
 8000abc:	f001 fbf8 	bl	80022b0 <HAL_TIM_IC_Start_IT>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000b0 	.word	0x200000b0

08000ac8 <APP_main>:

void APP_main() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  if (APP_getUsrButton()) {
 8000acc:	f7ff ffce 	bl	8000a6c <APP_getUsrButton>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d007      	beq.n	8000ae6 <APP_main+0x1e>
    TL_startTransmit();
 8000ad6:	f7ff fd59 	bl	800058c <TL_startTransmit>
    APP_setLED(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff ffd8 	bl	8000a90 <APP_setLED>
    HAL_Delay(50);
 8000ae0:	2032      	movs	r0, #50	; 0x32
 8000ae2:	f000 fb37 	bl	8001154 <HAL_Delay>
  }

  HAL_Delay(100);
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f000 fb34 	bl	8001154 <HAL_Delay>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af4:	f000 fabc 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af8:	f000 f80c 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afc:	f000 f8f4 	bl	8000ce8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b00:	f000 f8c8 	bl	8000c94 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000b04:	f000 f872 	bl	8000bec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000b08:	f7ff ffd4 	bl	8000ab4 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000b0c:	f7ff ffdc 	bl	8000ac8 <APP_main>
 8000b10:	e7fc      	b.n	8000b0c <main+0x1c>
	...

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2234      	movs	r2, #52	; 0x34
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fc1e 	bl	8003364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <SystemClock_Config+0xd0>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a28      	ldr	r2, [pc, #160]	; (8000be4 <SystemClock_Config+0xd0>)
 8000b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <SystemClock_Config+0xd0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4b23      	ldr	r3, [pc, #140]	; (8000be8 <SystemClock_Config+0xd4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <SystemClock_Config+0xd4>)
 8000b5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <SystemClock_Config+0xd4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b78:	2310      	movs	r3, #16
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b84:	2308      	movs	r3, #8
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 f899 	bl	8001cd4 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ba8:	f000 f92c 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bac:	230f      	movs	r3, #15
 8000bae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bc4:	f107 0308 	add.w	r3, r7, #8
 8000bc8:	2105      	movs	r1, #5
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fdbe 	bl	800174c <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bd6:	f000 f915 	bl	8000e04 <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	; 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40007000 	.word	0x40007000

08000bec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	f107 0310 	add.w	r3, r7, #16
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c0a:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <MX_TIM4_Init+0xa4>)
 8000c0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c30:	f001 faee 	bl	8002210 <HAL_TIM_IC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000c3a:	f000 f8e3 	bl	8000e04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480f      	ldr	r0, [pc, #60]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c4e:	f002 f813 	bl	8002c78 <HAL_TIMEx_MasterConfigSynchronization>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000c58:	f000 f8d4 	bl	8000e04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c60:	2301      	movs	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_TIM4_Init+0xa0>)
 8000c74:	f001 fd4c 	bl	8002710 <HAL_TIM_IC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000c7e:	f000 f8c1 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000b0 	.word	0x200000b0
 8000c90:	40000800 	.word	0x40000800

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_USART2_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f002 f864 	bl	8002d98 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f000 f895 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000f8 	.word	0x200000f8
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a3b      	ldr	r2, [pc, #236]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a34      	ldr	r2, [pc, #208]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a2d      	ldr	r2, [pc, #180]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2103      	movs	r1, #3
 8000d56:	4828      	ldr	r0, [pc, #160]	; (8000df8 <MX_GPIO_Init+0x110>)
 8000d58:	f000 fcde 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5|TL_Clk_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f240 1121 	movw	r1, #289	; 0x121
 8000d62:	4826      	ldr	r0, [pc, #152]	; (8000dfc <MX_GPIO_Init+0x114>)
 8000d64:	f000 fcd8 	bl	8001718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	481e      	ldr	r0, [pc, #120]	; (8000df8 <MX_GPIO_Init+0x110>)
 8000d7e:	f000 fb1f 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 8000d82:	2303      	movs	r3, #3
 8000d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	4619      	mov	r1, r3
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <MX_GPIO_Init+0x110>)
 8000d9a:	f000 fb11 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 TL_Clk_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5|TL_Clk_Pin;
 8000d9e:	f240 1321 	movw	r3, #289	; 0x121
 8000da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	4811      	ldr	r0, [pc, #68]	; (8000dfc <MX_GPIO_Init+0x114>)
 8000db8:	f000 fb02 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480b      	ldr	r0, [pc, #44]	; (8000dfc <MX_GPIO_Init+0x114>)
 8000dd0:	f000 faf6 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_GPIO_Init+0x118>)
 8000de8:	f000 faea 	bl	80013c0 <HAL_GPIO_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <Error_Handler+0x8>
	...

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e40:	6413      	str	r3, [r2, #64]	; 0x40
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <HAL_TIM_IC_MspInit+0x94>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d133      	bne.n	8000eea <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_TIM_IC_MspInit+0x98>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a1b      	ldr	r2, [pc, #108]	; (8000ef8 <HAL_TIM_IC_MspInit+0x98>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_TIM_IC_MspInit+0x98>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_TIM_IC_MspInit+0x98>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_TIM_IC_MspInit+0x98>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_TIM_IC_MspInit+0x98>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eba:	2340      	movs	r3, #64	; 0x40
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4809      	ldr	r0, [pc, #36]	; (8000efc <HAL_TIM_IC_MspInit+0x9c>)
 8000ed6:	f000 fa73 	bl	80013c0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201e      	movs	r0, #30
 8000ee0:	f000 fa37 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ee4:	201e      	movs	r0, #30
 8000ee6:	f000 fa50 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	; 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40000800 	.word	0x40000800
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020400 	.word	0x40020400

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <HAL_UART_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f76:	f000 fa23 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <NMI_Handler+0x4>

08000f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <BusFault_Handler+0x4>

08000fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <UsageFault_Handler+0x4>

08000fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fdc:	f000 f89a 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <TIM4_IRQHandler+0x10>)
 8000fea:	f001 fa89 	bl	8002500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000b0 	.word	0x200000b0

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f002 f967 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fd4f 	bl	8000af0 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001060:	080033b4 	.word	0x080033b4
  ldr r2, =_sbss
 8001064:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001068:	20000140 	.word	0x20000140

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f94f 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	200f      	movs	r0, #15
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff feb4 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f967 	bl	80013a6 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 f92f 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	2000013c 	.word	0x2000013c

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000013c 	.word	0x2000013c

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff3e 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff31 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa2 	bl	80012f8 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	e165      	b.n	80016a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013dc:	2201      	movs	r2, #1
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	f040 8154 	bne.w	80016a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d005      	beq.n	8001412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	2b02      	cmp	r3, #2
 8001410:	d130      	bne.n	8001474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001448:	2201      	movs	r2, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 0201 	and.w	r2, r3, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b03      	cmp	r3, #3
 800147e:	d017      	beq.n	80014b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d123      	bne.n	8001504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	69b9      	ldr	r1, [r7, #24]
 8001500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80ae 	beq.w	80016a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_GPIO_Init+0x300>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a5c      	ldr	r2, [pc, #368]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001562:	4a58      	ldr	r2, [pc, #352]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	3302      	adds	r3, #2
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4f      	ldr	r2, [pc, #316]	; (80016c8 <HAL_GPIO_Init+0x308>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d025      	beq.n	80015da <HAL_GPIO_Init+0x21a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4e      	ldr	r2, [pc, #312]	; (80016cc <HAL_GPIO_Init+0x30c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01f      	beq.n	80015d6 <HAL_GPIO_Init+0x216>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4d      	ldr	r2, [pc, #308]	; (80016d0 <HAL_GPIO_Init+0x310>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x212>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4c      	ldr	r2, [pc, #304]	; (80016d4 <HAL_GPIO_Init+0x314>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x20e>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_GPIO_Init+0x318>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x20a>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4a      	ldr	r2, [pc, #296]	; (80016dc <HAL_GPIO_Init+0x31c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x206>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a49      	ldr	r2, [pc, #292]	; (80016e0 <HAL_GPIO_Init+0x320>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x202>
 80015be:	2306      	movs	r3, #6
 80015c0:	e00c      	b.n	80015dc <HAL_GPIO_Init+0x21c>
 80015c2:	2307      	movs	r3, #7
 80015c4:	e00a      	b.n	80015dc <HAL_GPIO_Init+0x21c>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e008      	b.n	80015dc <HAL_GPIO_Init+0x21c>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x21c>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x21c>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x21c>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x21c>
 80015da:	2300      	movs	r3, #0
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4093      	lsls	r3, r2
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ec:	4935      	ldr	r1, [pc, #212]	; (80016c4 <HAL_GPIO_Init+0x304>)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <HAL_GPIO_Init+0x324>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800161e:	4a31      	ldr	r2, [pc, #196]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001648:	4a26      	ldr	r2, [pc, #152]	; (80016e4 <HAL_GPIO_Init+0x324>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001672:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_GPIO_Init+0x324>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_GPIO_Init+0x324>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800169c:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_GPIO_Init+0x324>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	f67f ae96 	bls.w	80013dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40021400 	.word	0x40021400
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40013c00 	.word	0x40013c00

080016e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691a      	ldr	r2, [r3, #16]
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e001      	b.n	800170a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001734:	e003      	b.n	800173e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001736:	887b      	ldrh	r3, [r7, #2]
 8001738:	041a      	lsls	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	619a      	str	r2, [r3, #24]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d90c      	bls.n	8001788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d044      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e067      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4934      	ldr	r1, [pc, #208]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff fc7e 	bl	800113c <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff fc7a 	bl	800113c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 030f 	and.w	r3, r3, #15
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f855 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fbde 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800
 800190c:	0800338c 	.word	0x0800338c
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_RCC_GetHCLKFreq+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000000 	.word	0x20000000

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001934:	f7ff fff0 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	0800339c 	.word	0x0800339c

08001958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800195c:	f7ff ffdc 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0b5b      	lsrs	r3, r3, #13
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	; (800197c <HAL_RCC_GetPCLK2Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	0800339c 	.word	0x0800339c

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	b0a6      	sub	sp, #152	; 0x98
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a6:	4bc8      	ldr	r3, [pc, #800]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	f200 817e 	bhi.w	8001cb0 <HAL_RCC_GetSysClockFreq+0x330>
 80019b4:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019f1 	.word	0x080019f1
 80019c0:	08001cb1 	.word	0x08001cb1
 80019c4:	08001cb1 	.word	0x08001cb1
 80019c8:	08001cb1 	.word	0x08001cb1
 80019cc:	080019f9 	.word	0x080019f9
 80019d0:	08001cb1 	.word	0x08001cb1
 80019d4:	08001cb1 	.word	0x08001cb1
 80019d8:	08001cb1 	.word	0x08001cb1
 80019dc:	08001a01 	.word	0x08001a01
 80019e0:	08001cb1 	.word	0x08001cb1
 80019e4:	08001cb1 	.word	0x08001cb1
 80019e8:	08001cb1 	.word	0x08001cb1
 80019ec:	08001b6b 	.word	0x08001b6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4bb6      	ldr	r3, [pc, #728]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x34c>)
 80019f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80019f6:	e15f      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f8:	4bb5      	ldr	r3, [pc, #724]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 80019fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80019fe:	e15b      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a00:	4bb1      	ldr	r3, [pc, #708]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0c:	4bae      	ldr	r3, [pc, #696]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d031      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a18:	4bab      	ldr	r3, [pc, #684]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	2200      	movs	r2, #0
 8001a20:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a2a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001a30:	4ba7      	ldr	r3, [pc, #668]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a32:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a36:	462a      	mov	r2, r5
 8001a38:	fb03 f202 	mul.w	r2, r3, r2
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	4621      	mov	r1, r4
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	4aa2      	ldr	r2, [pc, #648]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001a48:	4621      	mov	r1, r4
 8001a4a:	fba1 1202 	umull	r1, r2, r1, r2
 8001a4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001a50:	460a      	mov	r2, r1
 8001a52:	67ba      	str	r2, [r7, #120]	; 0x78
 8001a54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a56:	4413      	add	r3, r2
 8001a58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5e:	2200      	movs	r2, #0
 8001a60:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a62:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a64:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a68:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a6c:	f7fe fbca 	bl	8000204 <__aeabi_uldivmod>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4613      	mov	r3, r2
 8001a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a7a:	e064      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	2200      	movs	r2, #0
 8001a84:	653b      	str	r3, [r7, #80]	; 0x50
 8001a86:	657a      	str	r2, [r7, #84]	; 0x54
 8001a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a90:	2300      	movs	r3, #0
 8001a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a94:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001a98:	4622      	mov	r2, r4
 8001a9a:	462b      	mov	r3, r5
 8001a9c:	f04f 0000 	mov.w	r0, #0
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	0159      	lsls	r1, r3, #5
 8001aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aaa:	0150      	lsls	r0, r2, #5
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	1a51      	subs	r1, r2, r1
 8001ab4:	6139      	str	r1, [r7, #16]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	eb63 0301 	sbc.w	r3, r3, r1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001aca:	4659      	mov	r1, fp
 8001acc:	018b      	lsls	r3, r1, #6
 8001ace:	4651      	mov	r1, sl
 8001ad0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ad4:	4651      	mov	r1, sl
 8001ad6:	018a      	lsls	r2, r1, #6
 8001ad8:	4651      	mov	r1, sl
 8001ada:	ebb2 0801 	subs.w	r8, r2, r1
 8001ade:	4659      	mov	r1, fp
 8001ae0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001af0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001af4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001af8:	4690      	mov	r8, r2
 8001afa:	4699      	mov	r9, r3
 8001afc:	4623      	mov	r3, r4
 8001afe:	eb18 0303 	adds.w	r3, r8, r3
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	462b      	mov	r3, r5
 8001b06:	eb49 0303 	adc.w	r3, r9, r3
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b18:	4629      	mov	r1, r5
 8001b1a:	028b      	lsls	r3, r1, #10
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b22:	4621      	mov	r1, r4
 8001b24:	028a      	lsls	r2, r1, #10
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b2e:	2200      	movs	r2, #0
 8001b30:	643b      	str	r3, [r7, #64]	; 0x40
 8001b32:	647a      	str	r2, [r7, #68]	; 0x44
 8001b34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001b38:	f7fe fb64 	bl	8000204 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b46:	4b60      	ldr	r3, [pc, #384]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	3301      	adds	r3, #1
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001b58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001b68:	e0a6      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6a:	4b57      	ldr	r3, [pc, #348]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d02a      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b94:	2100      	movs	r1, #0
 8001b96:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001b98:	fb03 f201 	mul.w	r2, r3, r1
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	fb00 f303 	mul.w	r3, r0, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001ba6:	fba0 1202 	umull	r1, r2, r0, r2
 8001baa:	677a      	str	r2, [r7, #116]	; 0x74
 8001bac:	460a      	mov	r2, r1
 8001bae:	673a      	str	r2, [r7, #112]	; 0x70
 8001bb0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001bb2:	4413      	add	r3, r2
 8001bb4:	677b      	str	r3, [r7, #116]	; 0x74
 8001bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bba:	2200      	movs	r2, #0
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bbe:	637a      	str	r2, [r7, #52]	; 0x34
 8001bc0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bc4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001bc8:	f7fe fb1c 	bl	8000204 <__aeabi_uldivmod>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001bd6:	e05b      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	2200      	movs	r2, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bf4:	4642      	mov	r2, r8
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	f04f 0100 	mov.w	r1, #0
 8001c00:	0159      	lsls	r1, r3, #5
 8001c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c06:	0150      	lsls	r0, r2, #5
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4641      	mov	r1, r8
 8001c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c12:	4649      	mov	r1, r9
 8001c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8001c30:	eb63 050b 	sbc.w	r5, r3, fp
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	00eb      	lsls	r3, r5, #3
 8001c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c42:	00e2      	lsls	r2, r4, #3
 8001c44:	4614      	mov	r4, r2
 8001c46:	461d      	mov	r5, r3
 8001c48:	4643      	mov	r3, r8
 8001c4a:	18e3      	adds	r3, r4, r3
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	464b      	mov	r3, r9
 8001c50:	eb45 0303 	adc.w	r3, r5, r3
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c62:	4629      	mov	r1, r5
 8001c64:	028b      	lsls	r3, r1, #10
 8001c66:	4621      	mov	r1, r4
 8001c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	028a      	lsls	r2, r1, #10
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	61fa      	str	r2, [r7, #28]
 8001c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c82:	f7fe fabf 	bl	8000204 <__aeabi_uldivmod>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0f1b      	lsrs	r3, r3, #28
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001cae:	e003      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_GetSysClockFreq+0x34c>)
 8001cb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001cb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3798      	adds	r7, #152	; 0x98
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	017d7840 	.word	0x017d7840

08001cd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e28d      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8083 	beq.w	8001dfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001cf4:	4b94      	ldr	r3, [pc, #592]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d019      	beq.n	8001d34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d00:	4b91      	ldr	r3, [pc, #580]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d0c:	4b8e      	ldr	r3, [pc, #568]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d18:	d00c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d112      	bne.n	8001d4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	4b84      	ldr	r3, [pc, #528]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d05b      	beq.n	8001df8 <HAL_RCC_OscConfig+0x124>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d157      	bne.n	8001df8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e25a      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d106      	bne.n	8001d64 <HAL_RCC_OscConfig+0x90>
 8001d56:	4b7c      	ldr	r3, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a7b      	ldr	r2, [pc, #492]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xcc>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0xb4>
 8001d6e:	4b76      	ldr	r3, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a75      	ldr	r2, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b73      	ldr	r3, [pc, #460]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a72      	ldr	r2, [pc, #456]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xcc>
 8001d88:	4b6f      	ldr	r3, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a6e      	ldr	r2, [pc, #440]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b6c      	ldr	r3, [pc, #432]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a6b      	ldr	r2, [pc, #428]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff f9c8 	bl	800113c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff f9c4 	bl	800113c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e21f      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xdc>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f9b4 	bl	800113c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff f9b0 	bl	800113c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e20b      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b57      	ldr	r3, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x104>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06f      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e06:	4b50      	ldr	r3, [pc, #320]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d017      	beq.n	8001e42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e12:	4b4d      	ldr	r3, [pc, #308]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d105      	bne.n	8001e2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x186>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1d3      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4937      	ldr	r1, [pc, #220]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b34      	ldr	r3, [pc, #208]	; (8001f4c <HAL_RCC_OscConfig+0x278>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f95d 	bl	800113c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff f959 	bl	800113c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1b4      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4925      	ldr	r1, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_OscConfig+0x278>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f93c 	bl	800113c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f938 	bl	800113c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e193      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d036      	beq.n	8001f60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff f91c 	bl	800113c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff f918 	bl	800113c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e173      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x234>
 8001f26:	e01b      	b.n	8001f60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7ff f905 	bl	800113c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	e00e      	b.n	8001f54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff f901 	bl	800113c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d907      	bls.n	8001f54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e15c      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	42470000 	.word	0x42470000
 8001f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b8a      	ldr	r3, [pc, #552]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ea      	bne.n	8001f36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 8097 	beq.w	800209c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b83      	ldr	r3, [pc, #524]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	4b7f      	ldr	r3, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a7e      	ldr	r2, [pc, #504]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b79      	ldr	r3, [pc, #484]	; (8002184 <HAL_RCC_OscConfig+0x4b0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d118      	bne.n	8001fdc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001faa:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_RCC_OscConfig+0x4b0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a75      	ldr	r2, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x4b0>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7ff f8c1 	bl	800113c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7ff f8bd 	bl	800113c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e118      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd0:	4b6c      	ldr	r3, [pc, #432]	; (8002184 <HAL_RCC_OscConfig+0x4b0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x31e>
 8001fe4:	4b66      	ldr	r3, [pc, #408]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	4a65      	ldr	r2, [pc, #404]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001fea:	f043 0301 	orr.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff0:	e01c      	b.n	800202c <HAL_RCC_OscConfig+0x358>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2b05      	cmp	r3, #5
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x340>
 8001ffa:	4b61      	ldr	r3, [pc, #388]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a60      	ldr	r2, [pc, #384]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	6713      	str	r3, [r2, #112]	; 0x70
 8002006:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200a:	4a5d      	ldr	r2, [pc, #372]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6713      	str	r3, [r2, #112]	; 0x70
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0x358>
 8002014:	4b5a      	ldr	r3, [pc, #360]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a59      	ldr	r2, [pc, #356]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	4b57      	ldr	r3, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002026:	f023 0304 	bic.w	r3, r3, #4
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d015      	beq.n	8002060 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7ff f882 	bl	800113c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff f87e 	bl	800113c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0d7      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002052:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0ee      	beq.n	800203c <HAL_RCC_OscConfig+0x368>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7ff f86c 	bl	800113c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	e00a      	b.n	800207e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f7ff f868 	bl	800113c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e0c1      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207e:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ee      	bne.n	8002068 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002090:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	4a3a      	ldr	r2, [pc, #232]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80ad 	beq.w	8002200 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d060      	beq.n	8002174 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d145      	bne.n	8002146 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ba:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_RCC_OscConfig+0x4b4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7ff f83c 	bl	800113c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f838 	bl	800113c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e093      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	019b      	lsls	r3, r3, #6
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	071b      	lsls	r3, r3, #28
 8002112:	491b      	ldr	r1, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x4b4>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211e:	f7ff f80d 	bl	800113c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7ff f809 	bl	800113c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e064      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x452>
 8002144:	e05c      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_RCC_OscConfig+0x4b4>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fff6 	bl	800113c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fff2 	bl	800113c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04d      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x4ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x480>
 8002172:	e045      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e040      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000
 8002188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_RCC_OscConfig+0x538>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d030      	beq.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d129      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d122      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d119      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10f      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d107      	bne.n	80021fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e041      	b.n	80022a6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fe12 	bl	8000e60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3304      	adds	r3, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f000 fb22 	bl	8002898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_IC_Start_IT+0x1e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e013      	b.n	80022f6 <HAL_TIM_IC_Start_IT+0x46>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d104      	bne.n	80022de <HAL_TIM_IC_Start_IT+0x2e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e00b      	b.n	80022f6 <HAL_TIM_IC_Start_IT+0x46>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_IC_Start_IT+0x3e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	e003      	b.n	80022f6 <HAL_TIM_IC_Start_IT+0x46>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <HAL_TIM_IC_Start_IT+0x58>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002304:	b2db      	uxtb	r3, r3
 8002306:	e013      	b.n	8002330 <HAL_TIM_IC_Start_IT+0x80>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d104      	bne.n	8002318 <HAL_TIM_IC_Start_IT+0x68>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002314:	b2db      	uxtb	r3, r3
 8002316:	e00b      	b.n	8002330 <HAL_TIM_IC_Start_IT+0x80>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d104      	bne.n	8002328 <HAL_TIM_IC_Start_IT+0x78>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002324:	b2db      	uxtb	r3, r3
 8002326:	e003      	b.n	8002330 <HAL_TIM_IC_Start_IT+0x80>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800232e:	b2db      	uxtb	r3, r3
 8002330:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002332:	7bbb      	ldrb	r3, [r7, #14]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d102      	bne.n	800233e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002338:	7b7b      	ldrb	r3, [r7, #13]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0cc      	b.n	80024dc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d104      	bne.n	8002352 <HAL_TIM_IC_Start_IT+0xa2>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	e013      	b.n	800237a <HAL_TIM_IC_Start_IT+0xca>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d104      	bne.n	8002362 <HAL_TIM_IC_Start_IT+0xb2>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002360:	e00b      	b.n	800237a <HAL_TIM_IC_Start_IT+0xca>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d104      	bne.n	8002372 <HAL_TIM_IC_Start_IT+0xc2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002370:	e003      	b.n	800237a <HAL_TIM_IC_Start_IT+0xca>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d104      	bne.n	800238a <HAL_TIM_IC_Start_IT+0xda>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002388:	e013      	b.n	80023b2 <HAL_TIM_IC_Start_IT+0x102>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d104      	bne.n	800239a <HAL_TIM_IC_Start_IT+0xea>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002398:	e00b      	b.n	80023b2 <HAL_TIM_IC_Start_IT+0x102>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d104      	bne.n	80023aa <HAL_TIM_IC_Start_IT+0xfa>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a8:	e003      	b.n	80023b2 <HAL_TIM_IC_Start_IT+0x102>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d841      	bhi.n	800243c <HAL_TIM_IC_Start_IT+0x18c>
 80023b8:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <HAL_TIM_IC_Start_IT+0x110>)
 80023ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023f5 	.word	0x080023f5
 80023c4:	0800243d 	.word	0x0800243d
 80023c8:	0800243d 	.word	0x0800243d
 80023cc:	0800243d 	.word	0x0800243d
 80023d0:	08002407 	.word	0x08002407
 80023d4:	0800243d 	.word	0x0800243d
 80023d8:	0800243d 	.word	0x0800243d
 80023dc:	0800243d 	.word	0x0800243d
 80023e0:	08002419 	.word	0x08002419
 80023e4:	0800243d 	.word	0x0800243d
 80023e8:	0800243d 	.word	0x0800243d
 80023ec:	0800243d 	.word	0x0800243d
 80023f0:	0800242b 	.word	0x0800242b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0202 	orr.w	r2, r2, #2
 8002402:	60da      	str	r2, [r3, #12]
      break;
 8002404:	e01d      	b.n	8002442 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0204 	orr.w	r2, r2, #4
 8002414:	60da      	str	r2, [r3, #12]
      break;
 8002416:	e014      	b.n	8002442 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0208 	orr.w	r2, r2, #8
 8002426:	60da      	str	r2, [r3, #12]
      break;
 8002428:	e00b      	b.n	8002442 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0210 	orr.w	r2, r2, #16
 8002438:	60da      	str	r2, [r3, #12]
      break;
 800243a:	e002      	b.n	8002442 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
      break;
 8002440:	bf00      	nop
  }

  if (status == HAL_OK)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d148      	bne.n	80024da <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fbeb 	bl	8002c2c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <HAL_TIM_IC_Start_IT+0x234>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002468:	d01d      	beq.n	80024a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_TIM_IC_Start_IT+0x238>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d018      	beq.n	80024a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <HAL_TIM_IC_Start_IT+0x23c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d013      	beq.n	80024a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_TIM_IC_Start_IT+0x240>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00e      	beq.n	80024a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_TIM_IC_Start_IT+0x244>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_TIM_IC_Start_IT+0x248>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_TIM_IC_Start_IT+0x1f6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIM_IC_Start_IT+0x24c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d111      	bne.n	80024ca <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b06      	cmp	r3, #6
 80024b6:	d010      	beq.n	80024da <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c8:	e007      	b.n	80024da <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40010000 	.word	0x40010000
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800
 80024f0:	40000c00 	.word	0x40000c00
 80024f4:	40010400 	.word	0x40010400
 80024f8:	40014000 	.word	0x40014000
 80024fc:	40001800 	.word	0x40001800

08002500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d122      	bne.n	800255c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b02      	cmp	r3, #2
 8002522:	d11b      	bne.n	800255c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0202 	mvn.w	r2, #2
 800252c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fd ffe0 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f986 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f98d 	bl	8002870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d122      	bne.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b04      	cmp	r3, #4
 8002576:	d11b      	bne.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0204 	mvn.w	r2, #4
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fd ffb6 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f95c 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f963 	bl	8002870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0208 	mvn.w	r2, #8
 80025d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2204      	movs	r2, #4
 80025da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7fd ff8c 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f932 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f939 	bl	8002870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b10      	cmp	r3, #16
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b10      	cmp	r3, #16
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0210 	mvn.w	r2, #16
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2208      	movs	r2, #8
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fd ff62 	bl	8000508 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f908 	bl	800285c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f90f 	bl	8002870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d10e      	bne.n	8002684 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0201 	mvn.w	r2, #1
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f8e2 	bl	8002848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b80      	cmp	r3, #128	; 0x80
 8002690:	d10e      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d107      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fb6a 	bl	8002d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d10e      	bne.n	80026dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d107      	bne.n	80026dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f8d4 	bl	8002884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d107      	bne.n	8002708 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0220 	mvn.w	r2, #32
 8002700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fb34 	bl	8002d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_TIM_IC_ConfigChannel+0x1e>
 800272a:	2302      	movs	r3, #2
 800272c:	e088      	b.n	8002840 <HAL_TIM_IC_ConfigChannel+0x130>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	6819      	ldr	r1, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f000 f944 	bl	80029d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 020c 	bic.w	r2, r2, #12
 800275e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6999      	ldr	r1, [r3, #24]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	619a      	str	r2, [r3, #24]
 8002772:	e060      	b.n	8002836 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b04      	cmp	r3, #4
 8002778:	d11c      	bne.n	80027b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f000 f999 	bl	8002ac0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800279c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6999      	ldr	r1, [r3, #24]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	021a      	lsls	r2, r3, #8
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	e040      	b.n	8002836 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d11b      	bne.n	80027f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f000 f9b6 	bl	8002b3a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	69da      	ldr	r2, [r3, #28]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 020c 	bic.w	r2, r2, #12
 80027dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69d9      	ldr	r1, [r3, #28]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	61da      	str	r2, [r3, #28]
 80027f0:	e021      	b.n	8002836 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d11c      	bne.n	8002832 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f000 f9d3 	bl	8002bb2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800281a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69d9      	ldr	r1, [r3, #28]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	021a      	lsls	r2, r3, #8
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	61da      	str	r2, [r3, #28]
 8002830:	e001      	b.n	8002836 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800283e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a40      	ldr	r2, [pc, #256]	; (80029ac <TIM_Base_SetConfig+0x114>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b6:	d00f      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a3d      	ldr	r2, [pc, #244]	; (80029b0 <TIM_Base_SetConfig+0x118>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00b      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3c      	ldr	r2, [pc, #240]	; (80029b4 <TIM_Base_SetConfig+0x11c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d007      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3b      	ldr	r2, [pc, #236]	; (80029b8 <TIM_Base_SetConfig+0x120>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0x40>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3a      	ldr	r2, [pc, #232]	; (80029bc <TIM_Base_SetConfig+0x124>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d108      	bne.n	80028ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <TIM_Base_SetConfig+0x114>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d02b      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d027      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <TIM_Base_SetConfig+0x118>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d023      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <TIM_Base_SetConfig+0x11c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01f      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a2a      	ldr	r2, [pc, #168]	; (80029b8 <TIM_Base_SetConfig+0x120>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01b      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a29      	ldr	r2, [pc, #164]	; (80029bc <TIM_Base_SetConfig+0x124>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d017      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <TIM_Base_SetConfig+0x128>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <TIM_Base_SetConfig+0x12c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00f      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <TIM_Base_SetConfig+0x130>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00b      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a25      	ldr	r2, [pc, #148]	; (80029cc <TIM_Base_SetConfig+0x134>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <TIM_Base_SetConfig+0x138>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d003      	beq.n	800294a <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a23      	ldr	r2, [pc, #140]	; (80029d4 <TIM_Base_SetConfig+0x13c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d108      	bne.n	800295c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <TIM_Base_SetConfig+0x114>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d003      	beq.n	8002990 <TIM_Base_SetConfig+0xf8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <TIM_Base_SetConfig+0x124>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d103      	bne.n	8002998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	615a      	str	r2, [r3, #20]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40000800 	.word	0x40000800
 80029b8:	40000c00 	.word	0x40000c00
 80029bc:	40010400 	.word	0x40010400
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40014400 	.word	0x40014400
 80029c8:	40014800 	.word	0x40014800
 80029cc:	40001800 	.word	0x40001800
 80029d0:	40001c00 	.word	0x40001c00
 80029d4:	40002000 	.word	0x40002000

080029d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <TIM_TI1_SetConfig+0xcc>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01b      	beq.n	8002a3e <TIM_TI1_SetConfig+0x66>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d017      	beq.n	8002a3e <TIM_TI1_SetConfig+0x66>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <TIM_TI1_SetConfig+0xd0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d013      	beq.n	8002a3e <TIM_TI1_SetConfig+0x66>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <TIM_TI1_SetConfig+0xd4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d00f      	beq.n	8002a3e <TIM_TI1_SetConfig+0x66>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <TIM_TI1_SetConfig+0xd8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00b      	beq.n	8002a3e <TIM_TI1_SetConfig+0x66>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <TIM_TI1_SetConfig+0xdc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <TIM_TI1_SetConfig+0x66>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <TIM_TI1_SetConfig+0xe0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d003      	beq.n	8002a3e <TIM_TI1_SetConfig+0x66>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a20      	ldr	r2, [pc, #128]	; (8002abc <TIM_TI1_SetConfig+0xe4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <TIM_TI1_SetConfig+0x6a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <TIM_TI1_SetConfig+0x6c>
 8002a42:	2300      	movs	r3, #0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e003      	b.n	8002a62 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f023 030a 	bic.w	r3, r3, #10
 8002a7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f003 030a 	and.w	r3, r3, #10
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	40000800 	.word	0x40000800
 8002ab0:	40000c00 	.word	0x40000c00
 8002ab4:	40010400 	.word	0x40010400
 8002ab8:	40014000 	.word	0x40014000
 8002abc:	40001800 	.word	0x40001800

08002ac0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	f023 0210 	bic.w	r2, r3, #16
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002afe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	031b      	lsls	r3, r3, #12
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	621a      	str	r2, [r3, #32]
}
 8002b2e:	bf00      	nop
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b087      	sub	sp, #28
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
 8002b46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b76:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002b8a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	031b      	lsls	r3, r3, #12
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002c04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	031b      	lsls	r3, r3, #12
 8002c0a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	621a      	str	r2, [r3, #32]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	2201      	movs	r2, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	401a      	ands	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e05a      	b.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cdc:	d01d      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1d      	ldr	r2, [pc, #116]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d018      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00e      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a15      	ldr	r2, [pc, #84]	; (8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10c      	bne.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40010000 	.word	0x40010000
 8002d58:	40000400 	.word	0x40000400
 8002d5c:	40000800 	.word	0x40000800
 8002d60:	40000c00 	.word	0x40000c00
 8002d64:	40010400 	.word	0x40010400
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40001800 	.word	0x40001800

08002d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e03f      	b.n	8002e2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe f89e 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f829 	bl	8002e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
	...

08002e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e38:	b0c0      	sub	sp, #256	; 0x100
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	ea40 0301 	orr.w	r3, r0, r1
 8002e5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e8c:	f021 010c 	bic.w	r1, r1, #12
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	6999      	ldr	r1, [r3, #24]
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	ea40 0301 	orr.w	r3, r0, r1
 8002eba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b8f      	ldr	r3, [pc, #572]	; (8003100 <UART_SetConfig+0x2cc>)
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d005      	beq.n	8002ed4 <UART_SetConfig+0xa0>
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <UART_SetConfig+0x2d0>)
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d104      	bne.n	8002ede <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ed4:	f7fe fd40 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8002ed8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002edc:	e003      	b.n	8002ee6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ede:	f7fe fd27 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 8002ee2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef0:	f040 810c 	bne.w	800310c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002efe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f06:	4622      	mov	r2, r4
 8002f08:	462b      	mov	r3, r5
 8002f0a:	1891      	adds	r1, r2, r2
 8002f0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f0e:	415b      	adcs	r3, r3
 8002f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f16:	4621      	mov	r1, r4
 8002f18:	eb12 0801 	adds.w	r8, r2, r1
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	eb43 0901 	adc.w	r9, r3, r1
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f36:	4690      	mov	r8, r2
 8002f38:	4699      	mov	r9, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	eb18 0303 	adds.w	r3, r8, r3
 8002f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f44:	462b      	mov	r3, r5
 8002f46:	eb49 0303 	adc.w	r3, r9, r3
 8002f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f62:	460b      	mov	r3, r1
 8002f64:	18db      	adds	r3, r3, r3
 8002f66:	653b      	str	r3, [r7, #80]	; 0x50
 8002f68:	4613      	mov	r3, r2
 8002f6a:	eb42 0303 	adc.w	r3, r2, r3
 8002f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f78:	f7fd f944 	bl	8000204 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4b61      	ldr	r3, [pc, #388]	; (8003108 <UART_SetConfig+0x2d4>)
 8002f82:	fba3 2302 	umull	r2, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	011c      	lsls	r4, r3, #4
 8002f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	1891      	adds	r1, r2, r2
 8002fa2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fa4:	415b      	adcs	r3, r3
 8002fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fac:	4641      	mov	r1, r8
 8002fae:	eb12 0a01 	adds.w	sl, r2, r1
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	eb43 0b01 	adc.w	fp, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fcc:	4692      	mov	sl, r2
 8002fce:	469b      	mov	fp, r3
 8002fd0:	4643      	mov	r3, r8
 8002fd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	eb4b 0303 	adc.w	r3, fp, r3
 8002fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ff0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ff4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	18db      	adds	r3, r3, r3
 8002ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ffe:	4613      	mov	r3, r2
 8003000:	eb42 0303 	adc.w	r3, r2, r3
 8003004:	647b      	str	r3, [r7, #68]	; 0x44
 8003006:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800300a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800300e:	f7fd f8f9 	bl	8000204 <__aeabi_uldivmod>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4611      	mov	r1, r2
 8003018:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <UART_SetConfig+0x2d4>)
 800301a:	fba3 2301 	umull	r2, r3, r3, r1
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2264      	movs	r2, #100	; 0x64
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	1acb      	subs	r3, r1, r3
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <UART_SetConfig+0x2d4>)
 8003030:	fba3 2302 	umull	r2, r3, r3, r2
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800303c:	441c      	add	r4, r3
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003042:	2200      	movs	r2, #0
 8003044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003048:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800304c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003050:	4642      	mov	r2, r8
 8003052:	464b      	mov	r3, r9
 8003054:	1891      	adds	r1, r2, r2
 8003056:	63b9      	str	r1, [r7, #56]	; 0x38
 8003058:	415b      	adcs	r3, r3
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003060:	4641      	mov	r1, r8
 8003062:	1851      	adds	r1, r2, r1
 8003064:	6339      	str	r1, [r7, #48]	; 0x30
 8003066:	4649      	mov	r1, r9
 8003068:	414b      	adcs	r3, r1
 800306a:	637b      	str	r3, [r7, #52]	; 0x34
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003078:	4659      	mov	r1, fp
 800307a:	00cb      	lsls	r3, r1, #3
 800307c:	4651      	mov	r1, sl
 800307e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003082:	4651      	mov	r1, sl
 8003084:	00ca      	lsls	r2, r1, #3
 8003086:	4610      	mov	r0, r2
 8003088:	4619      	mov	r1, r3
 800308a:	4603      	mov	r3, r0
 800308c:	4642      	mov	r2, r8
 800308e:	189b      	adds	r3, r3, r2
 8003090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003094:	464b      	mov	r3, r9
 8003096:	460a      	mov	r2, r1
 8003098:	eb42 0303 	adc.w	r3, r2, r3
 800309c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030b4:	460b      	mov	r3, r1
 80030b6:	18db      	adds	r3, r3, r3
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ba:	4613      	mov	r3, r2
 80030bc:	eb42 0303 	adc.w	r3, r2, r3
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030ca:	f7fd f89b 	bl	8000204 <__aeabi_uldivmod>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <UART_SetConfig+0x2d4>)
 80030d4:	fba3 1302 	umull	r1, r3, r3, r2
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	2164      	movs	r1, #100	; 0x64
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	3332      	adds	r3, #50	; 0x32
 80030e6:	4a08      	ldr	r2, [pc, #32]	; (8003108 <UART_SetConfig+0x2d4>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	f003 0207 	and.w	r2, r3, #7
 80030f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4422      	add	r2, r4
 80030fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030fc:	e105      	b.n	800330a <UART_SetConfig+0x4d6>
 80030fe:	bf00      	nop
 8003100:	40011000 	.word	0x40011000
 8003104:	40011400 	.word	0x40011400
 8003108:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800310c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003110:	2200      	movs	r2, #0
 8003112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003116:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800311a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800311e:	4642      	mov	r2, r8
 8003120:	464b      	mov	r3, r9
 8003122:	1891      	adds	r1, r2, r2
 8003124:	6239      	str	r1, [r7, #32]
 8003126:	415b      	adcs	r3, r3
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800312e:	4641      	mov	r1, r8
 8003130:	1854      	adds	r4, r2, r1
 8003132:	4649      	mov	r1, r9
 8003134:	eb43 0501 	adc.w	r5, r3, r1
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	00eb      	lsls	r3, r5, #3
 8003142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003146:	00e2      	lsls	r2, r4, #3
 8003148:	4614      	mov	r4, r2
 800314a:	461d      	mov	r5, r3
 800314c:	4643      	mov	r3, r8
 800314e:	18e3      	adds	r3, r4, r3
 8003150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003154:	464b      	mov	r3, r9
 8003156:	eb45 0303 	adc.w	r3, r5, r3
 800315a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800315e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800316a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800317a:	4629      	mov	r1, r5
 800317c:	008b      	lsls	r3, r1, #2
 800317e:	4621      	mov	r1, r4
 8003180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003184:	4621      	mov	r1, r4
 8003186:	008a      	lsls	r2, r1, #2
 8003188:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800318c:	f7fd f83a 	bl	8000204 <__aeabi_uldivmod>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4b60      	ldr	r3, [pc, #384]	; (8003318 <UART_SetConfig+0x4e4>)
 8003196:	fba3 2302 	umull	r2, r3, r3, r2
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	011c      	lsls	r4, r3, #4
 800319e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	1891      	adds	r1, r2, r2
 80031b6:	61b9      	str	r1, [r7, #24]
 80031b8:	415b      	adcs	r3, r3
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c0:	4641      	mov	r1, r8
 80031c2:	1851      	adds	r1, r2, r1
 80031c4:	6139      	str	r1, [r7, #16]
 80031c6:	4649      	mov	r1, r9
 80031c8:	414b      	adcs	r3, r1
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031d8:	4659      	mov	r1, fp
 80031da:	00cb      	lsls	r3, r1, #3
 80031dc:	4651      	mov	r1, sl
 80031de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031e2:	4651      	mov	r1, sl
 80031e4:	00ca      	lsls	r2, r1, #3
 80031e6:	4610      	mov	r0, r2
 80031e8:	4619      	mov	r1, r3
 80031ea:	4603      	mov	r3, r0
 80031ec:	4642      	mov	r2, r8
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031f4:	464b      	mov	r3, r9
 80031f6:	460a      	mov	r2, r1
 80031f8:	eb42 0303 	adc.w	r3, r2, r3
 80031fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	67bb      	str	r3, [r7, #120]	; 0x78
 800320a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003218:	4649      	mov	r1, r9
 800321a:	008b      	lsls	r3, r1, #2
 800321c:	4641      	mov	r1, r8
 800321e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003222:	4641      	mov	r1, r8
 8003224:	008a      	lsls	r2, r1, #2
 8003226:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800322a:	f7fc ffeb 	bl	8000204 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <UART_SetConfig+0x4e4>)
 8003234:	fba3 1302 	umull	r1, r3, r3, r2
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	2164      	movs	r1, #100	; 0x64
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	3332      	adds	r3, #50	; 0x32
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <UART_SetConfig+0x4e4>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003252:	441c      	add	r4, r3
 8003254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003258:	2200      	movs	r2, #0
 800325a:	673b      	str	r3, [r7, #112]	; 0x70
 800325c:	677a      	str	r2, [r7, #116]	; 0x74
 800325e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003262:	4642      	mov	r2, r8
 8003264:	464b      	mov	r3, r9
 8003266:	1891      	adds	r1, r2, r2
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	415b      	adcs	r3, r3
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003272:	4641      	mov	r1, r8
 8003274:	1851      	adds	r1, r2, r1
 8003276:	6039      	str	r1, [r7, #0]
 8003278:	4649      	mov	r1, r9
 800327a:	414b      	adcs	r3, r1
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800328a:	4659      	mov	r1, fp
 800328c:	00cb      	lsls	r3, r1, #3
 800328e:	4651      	mov	r1, sl
 8003290:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003294:	4651      	mov	r1, sl
 8003296:	00ca      	lsls	r2, r1, #3
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	4603      	mov	r3, r0
 800329e:	4642      	mov	r2, r8
 80032a0:	189b      	adds	r3, r3, r2
 80032a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80032a4:	464b      	mov	r3, r9
 80032a6:	460a      	mov	r2, r1
 80032a8:	eb42 0303 	adc.w	r3, r2, r3
 80032ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	663b      	str	r3, [r7, #96]	; 0x60
 80032b8:	667a      	str	r2, [r7, #100]	; 0x64
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032c6:	4649      	mov	r1, r9
 80032c8:	008b      	lsls	r3, r1, #2
 80032ca:	4641      	mov	r1, r8
 80032cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d0:	4641      	mov	r1, r8
 80032d2:	008a      	lsls	r2, r1, #2
 80032d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032d8:	f7fc ff94 	bl	8000204 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <UART_SetConfig+0x4e4>)
 80032e2:	fba3 1302 	umull	r1, r3, r3, r2
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2164      	movs	r1, #100	; 0x64
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	3332      	adds	r3, #50	; 0x32
 80032f4:	4a08      	ldr	r2, [pc, #32]	; (8003318 <UART_SetConfig+0x4e4>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	f003 020f 	and.w	r2, r3, #15
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4422      	add	r2, r4
 8003308:	609a      	str	r2, [r3, #8]
}
 800330a:	bf00      	nop
 800330c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003310:	46bd      	mov	sp, r7
 8003312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003316:	bf00      	nop
 8003318:	51eb851f 	.word	0x51eb851f

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4d0d      	ldr	r5, [pc, #52]	; (8003354 <__libc_init_array+0x38>)
 8003320:	4c0d      	ldr	r4, [pc, #52]	; (8003358 <__libc_init_array+0x3c>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	2600      	movs	r6, #0
 8003328:	42a6      	cmp	r6, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	4d0b      	ldr	r5, [pc, #44]	; (800335c <__libc_init_array+0x40>)
 800332e:	4c0c      	ldr	r4, [pc, #48]	; (8003360 <__libc_init_array+0x44>)
 8003330:	f000 f820 	bl	8003374 <_init>
 8003334:	1b64      	subs	r4, r4, r5
 8003336:	10a4      	asrs	r4, r4, #2
 8003338:	2600      	movs	r6, #0
 800333a:	42a6      	cmp	r6, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	f855 3b04 	ldr.w	r3, [r5], #4
 8003344:	4798      	blx	r3
 8003346:	3601      	adds	r6, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	f855 3b04 	ldr.w	r3, [r5], #4
 800334e:	4798      	blx	r3
 8003350:	3601      	adds	r6, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	080033ac 	.word	0x080033ac
 8003358:	080033ac 	.word	0x080033ac
 800335c:	080033ac 	.word	0x080033ac
 8003360:	080033b0 	.word	0x080033b0

08003364 <memset>:
 8003364:	4402      	add	r2, r0
 8003366:	4603      	mov	r3, r0
 8003368:	4293      	cmp	r3, r2
 800336a:	d100      	bne.n	800336e <memset+0xa>
 800336c:	4770      	bx	lr
 800336e:	f803 1b01 	strb.w	r1, [r3], #1
 8003372:	e7f9      	b.n	8003368 <memset+0x4>

08003374 <_init>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr

08003380 <_fini>:
 8003380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003382:	bf00      	nop
 8003384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003386:	bc08      	pop	{r3}
 8003388:	469e      	mov	lr, r3
 800338a:	4770      	bx	lr
