
TileLinkTrafficGenerator-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005124  08005124  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800512c  0800512c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000070  080051a4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080051a4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8d7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcd  00000000  00000000  0002e977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00030748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f7f  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f727  00000000  00000000  00054eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d21d1  00000000  00000000  00064626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001367f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  00136848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005034 	.word	0x08005034

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005034 	.word	0x08005034

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_TIM_IC_CaptureCallback>:
extern UART_HandleTypeDef huart2;

TL_Control tl;
char str[128];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if (tl.tx_pending) {
 80005cc:	4b3b      	ldr	r3, [pc, #236]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80005ce:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d034      	beq.n	8000640 <HAL_TIM_IC_CaptureCallback+0x7c>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl.tx_frame.buffer[tl.tx_bit_offset]);
 80005d6:	4b39      	ldr	r3, [pc, #228]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80005d8:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80005dc:	461a      	mov	r2, r3
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80005e0:	4413      	add	r3, r2
 80005e2:	7edb      	ldrb	r3, [r3, #27]
 80005e4:	461a      	mov	r2, r3
 80005e6:	2101      	movs	r1, #1
 80005e8:	4835      	ldr	r0, [pc, #212]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80005ea:	f001 fb49 	bl	8001c80 <HAL_GPIO_WritePin>

    if (tl.tx_bit_offset == 0) {
 80005ee:	4b33      	ldr	r3, [pc, #204]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80005f0:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d109      	bne.n	800060c <HAL_TIM_IC_CaptureCallback+0x48>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2101      	movs	r1, #1
 80005fc:	4831      	ldr	r0, [pc, #196]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80005fe:	f001 fb3f 	bl	8001c80 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	2102      	movs	r1, #2
 8000606:	482e      	ldr	r0, [pc, #184]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000608:	f001 fb3a 	bl	8001c80 <HAL_GPIO_WritePin>
    }


    if (tl.tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800060c:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800060e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8000612:	2b7b      	cmp	r3, #123	; 0x7b
 8000614:	d10c      	bne.n	8000630 <HAL_TIM_IC_CaptureCallback+0x6c>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2102      	movs	r1, #2
 800061a:	4829      	ldr	r0, [pc, #164]	; (80006c0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800061c:	f001 fb30 	bl	8001c80 <HAL_GPIO_WritePin>
      tl.tx_pending = 0;
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000622:	2200      	movs	r2, #0
 8000624:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
      tl.tx_finished = 1;
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800062a:	2201      	movs	r2, #1
 800062c:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    }

    tl.tx_bit_offset += 1;
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000632:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8000636:	3301      	adds	r3, #1
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800063c:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
  }

  if (tl.rx_pending) {
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000642:	f8b3 324c 	ldrh.w	r3, [r3, #588]	; 0x24c
 8000646:	2b00      	cmp	r3, #0
 8000648:	d033      	beq.n	80006b2 <HAL_TIM_IC_CaptureCallback+0xee>
    if (tl.rx_finished) {
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800064c:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 8000650:	2b00      	cmp	r3, #0
 8000652:	d008      	beq.n	8000666 <HAL_TIM_IC_CaptureCallback+0xa2>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	481a      	ldr	r0, [pc, #104]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800065a:	f001 fb11 	bl	8001c80 <HAL_GPIO_WritePin>
      tl.rx_pending = 0;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
    }
    if (HAL_GPIO_ReadPin(TL_MISO_Valid_GPIO_Port, TL_MISO_Valid_Pin) == GPIO_PIN_SET) {
 8000666:	2102      	movs	r1, #2
 8000668:	4816      	ldr	r0, [pc, #88]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800066a:	f001 faf1 	bl	8001c50 <HAL_GPIO_ReadPin>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d11e      	bne.n	80006b2 <HAL_TIM_IC_CaptureCallback+0xee>
      tl.rx_frame.buffer[tl.rx_bit_offset] = HAL_GPIO_ReadPin(TL_MISO_Data_GPIO_Port, TL_MISO_Data_Pin);
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000676:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800067a:	461c      	mov	r4, r3
 800067c:	2110      	movs	r1, #16
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000680:	f001 fae6 	bl	8001c50 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800068a:	4423      	add	r3, r4
 800068c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

      tl.rx_bit_offset += 1;
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000692:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8000696:	3301      	adds	r3, #1
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800069c:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

      if (tl.rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80006a2:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80006a6:	2b7b      	cmp	r3, #123	; 0x7b
 80006a8:	d103      	bne.n	80006b2 <HAL_TIM_IC_CaptureCallback+0xee>
        tl.rx_finished = 1;
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
      }
    }
  }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000090 	.word	0x20000090
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020000 	.word	0x40020000

080006c8 <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 80006c8:	b4f0      	push	{r4, r5, r6, r7}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80006d0:	2100      	movs	r1, #0
 80006d2:	83f9      	strh	r1, [r7, #30]
 80006d4:	e011      	b.n	80006fa <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	7e89      	ldrb	r1, [r1, #26]
 80006da:	4608      	mov	r0, r1
 80006dc:	8bf9      	ldrh	r1, [r7, #30]
 80006de:	fa40 f101 	asr.w	r1, r0, r1
 80006e2:	b2c8      	uxtb	r0, r1
 80006e4:	8bf9      	ldrh	r1, [r7, #30]
 80006e6:	f000 0001 	and.w	r0, r0, #1
 80006ea:	b2c4      	uxtb	r4, r0
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	4401      	add	r1, r0
 80006f0:	4620      	mov	r0, r4
 80006f2:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80006f4:	8bf9      	ldrh	r1, [r7, #30]
 80006f6:	3101      	adds	r1, #1
 80006f8:	83f9      	strh	r1, [r7, #30]
 80006fa:	8bf9      	ldrh	r1, [r7, #30]
 80006fc:	2900      	cmp	r1, #0
 80006fe:	d0ea      	beq.n	80006d6 <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8000700:	2100      	movs	r1, #0
 8000702:	83b9      	strh	r1, [r7, #28]
 8000704:	e012      	b.n	800072c <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->corrupt >> i) & 0b1;
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	7e09      	ldrb	r1, [r1, #24]
 800070a:	4608      	mov	r0, r1
 800070c:	8bb9      	ldrh	r1, [r7, #28]
 800070e:	fa40 f101 	asr.w	r1, r0, r1
 8000712:	b2c8      	uxtb	r0, r1
 8000714:	8bb9      	ldrh	r1, [r7, #28]
 8000716:	3101      	adds	r1, #1
 8000718:	f000 0001 	and.w	r0, r0, #1
 800071c:	b2c4      	uxtb	r4, r0
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	4401      	add	r1, r0
 8000722:	4620      	mov	r0, r4
 8000724:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8000726:	8bb9      	ldrh	r1, [r7, #28]
 8000728:	3101      	adds	r1, #1
 800072a:	83b9      	strh	r1, [r7, #28]
 800072c:	8bb9      	ldrh	r1, [r7, #28]
 800072e:	2900      	cmp	r1, #0
 8000730:	d0e9      	beq.n	8000706 <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8000732:	2100      	movs	r1, #0
 8000734:	8379      	strh	r1, [r7, #26]
 8000736:	e01e      	b.n	8000776 <TL_serialize+0xae>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800073e:	8b7c      	ldrh	r4, [r7, #26]
 8000740:	f1c4 0620 	rsb	r6, r4, #32
 8000744:	f1a4 0520 	sub.w	r5, r4, #32
 8000748:	fa20 f204 	lsr.w	r2, r0, r4
 800074c:	fa01 f606 	lsl.w	r6, r1, r6
 8000750:	4332      	orrs	r2, r6
 8000752:	fa21 f505 	lsr.w	r5, r1, r5
 8000756:	432a      	orrs	r2, r5
 8000758:	fa21 f304 	lsr.w	r3, r1, r4
 800075c:	b2d0      	uxtb	r0, r2
 800075e:	8b79      	ldrh	r1, [r7, #26]
 8000760:	3102      	adds	r1, #2
 8000762:	f000 0001 	and.w	r0, r0, #1
 8000766:	b2c4      	uxtb	r4, r0
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	4401      	add	r1, r0
 800076c:	4620      	mov	r0, r4
 800076e:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8000770:	8b79      	ldrh	r1, [r7, #26]
 8000772:	3101      	adds	r1, #1
 8000774:	8379      	strh	r1, [r7, #26]
 8000776:	8b79      	ldrh	r1, [r7, #26]
 8000778:	293f      	cmp	r1, #63	; 0x3f
 800077a:	d9dd      	bls.n	8000738 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800077c:	2300      	movs	r3, #0
 800077e:	833b      	strh	r3, [r7, #24]
 8000780:	e012      	b.n	80007a8 <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->mask >> i) & 0b1;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7e5b      	ldrb	r3, [r3, #25]
 8000786:	461a      	mov	r2, r3
 8000788:	8b3b      	ldrh	r3, [r7, #24]
 800078a:	fa42 f303 	asr.w	r3, r2, r3
 800078e:	b2da      	uxtb	r2, r3
 8000790:	8b3b      	ldrh	r3, [r7, #24]
 8000792:	3342      	adds	r3, #66	; 0x42
 8000794:	f002 0201 	and.w	r2, r2, #1
 8000798:	b2d1      	uxtb	r1, r2
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	460a      	mov	r2, r1
 80007a0:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80007a2:	8b3b      	ldrh	r3, [r7, #24]
 80007a4:	3301      	adds	r3, #1
 80007a6:	833b      	strh	r3, [r7, #24]
 80007a8:	8b3b      	ldrh	r3, [r7, #24]
 80007aa:	2b07      	cmp	r3, #7
 80007ac:	d9e9      	bls.n	8000782 <TL_serialize+0xba>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	82fb      	strh	r3, [r7, #22]
 80007b2:	e011      	b.n	80007d8 <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->address >> i) & 0b1;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	8afb      	ldrh	r3, [r7, #22]
 80007ba:	fa22 f303 	lsr.w	r3, r2, r3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	8afb      	ldrh	r3, [r7, #22]
 80007c2:	334a      	adds	r3, #74	; 0x4a
 80007c4:	f002 0201 	and.w	r2, r2, #1
 80007c8:	b2d1      	uxtb	r1, r2
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	460a      	mov	r2, r1
 80007d0:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80007d2:	8afb      	ldrh	r3, [r7, #22]
 80007d4:	3301      	adds	r3, #1
 80007d6:	82fb      	strh	r3, [r7, #22]
 80007d8:	8afb      	ldrh	r3, [r7, #22]
 80007da:	2b1f      	cmp	r3, #31
 80007dc:	d9ea      	bls.n	80007b4 <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80007de:	2300      	movs	r3, #0
 80007e0:	82bb      	strh	r3, [r7, #20]
 80007e2:	e012      	b.n	800080a <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	461a      	mov	r2, r3
 80007ea:	8abb      	ldrh	r3, [r7, #20]
 80007ec:	fa42 f303 	asr.w	r3, r2, r3
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	8abb      	ldrh	r3, [r7, #20]
 80007f4:	336a      	adds	r3, #106	; 0x6a
 80007f6:	f002 0201 	and.w	r2, r2, #1
 80007fa:	b2d1      	uxtb	r1, r2
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8000804:	8abb      	ldrh	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	82bb      	strh	r3, [r7, #20]
 800080a:	8abb      	ldrh	r3, [r7, #20]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d9e9      	bls.n	80007e4 <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8000810:	2300      	movs	r3, #0
 8000812:	827b      	strh	r3, [r7, #18]
 8000814:	e012      	b.n	800083c <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	78db      	ldrb	r3, [r3, #3]
 800081a:	461a      	mov	r2, r3
 800081c:	8a7b      	ldrh	r3, [r7, #18]
 800081e:	fa42 f303 	asr.w	r3, r2, r3
 8000822:	b2da      	uxtb	r2, r3
 8000824:	8a7b      	ldrh	r3, [r7, #18]
 8000826:	336e      	adds	r3, #110	; 0x6e
 8000828:	f002 0201 	and.w	r2, r2, #1
 800082c:	b2d1      	uxtb	r1, r2
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	460a      	mov	r2, r1
 8000834:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8000836:	8a7b      	ldrh	r3, [r7, #18]
 8000838:	3301      	adds	r3, #1
 800083a:	827b      	strh	r3, [r7, #18]
 800083c:	8a7b      	ldrh	r3, [r7, #18]
 800083e:	2b03      	cmp	r3, #3
 8000840:	d9e9      	bls.n	8000816 <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8000842:	2300      	movs	r3, #0
 8000844:	823b      	strh	r3, [r7, #16]
 8000846:	e012      	b.n	800086e <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	789b      	ldrb	r3, [r3, #2]
 800084c:	461a      	mov	r2, r3
 800084e:	8a3b      	ldrh	r3, [r7, #16]
 8000850:	fa42 f303 	asr.w	r3, r2, r3
 8000854:	b2da      	uxtb	r2, r3
 8000856:	8a3b      	ldrh	r3, [r7, #16]
 8000858:	3372      	adds	r3, #114	; 0x72
 800085a:	f002 0201 	and.w	r2, r2, #1
 800085e:	b2d1      	uxtb	r1, r2
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4413      	add	r3, r2
 8000864:	460a      	mov	r2, r1
 8000866:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8000868:	8a3b      	ldrh	r3, [r7, #16]
 800086a:	3301      	adds	r3, #1
 800086c:	823b      	strh	r3, [r7, #16]
 800086e:	8a3b      	ldrh	r3, [r7, #16]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d9e9      	bls.n	8000848 <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8000874:	2300      	movs	r3, #0
 8000876:	81fb      	strh	r3, [r7, #14]
 8000878:	e012      	b.n	80008a0 <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	785b      	ldrb	r3, [r3, #1]
 800087e:	461a      	mov	r2, r3
 8000880:	89fb      	ldrh	r3, [r7, #14]
 8000882:	fa42 f303 	asr.w	r3, r2, r3
 8000886:	b2da      	uxtb	r2, r3
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	3375      	adds	r3, #117	; 0x75
 800088c:	f002 0201 	and.w	r2, r2, #1
 8000890:	b2d1      	uxtb	r1, r2
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	460a      	mov	r2, r1
 8000898:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800089a:	89fb      	ldrh	r3, [r7, #14]
 800089c:	3301      	adds	r3, #1
 800089e:	81fb      	strh	r3, [r7, #14]
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d9e9      	bls.n	800087a <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80008a6:	2300      	movs	r3, #0
 80008a8:	81bb      	strh	r3, [r7, #12]
 80008aa:	e012      	b.n	80008d2 <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	89bb      	ldrh	r3, [r7, #12]
 80008b4:	fa42 f303 	asr.w	r3, r2, r3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	89bb      	ldrh	r3, [r7, #12]
 80008bc:	3378      	adds	r3, #120	; 0x78
 80008be:	f002 0201 	and.w	r2, r2, #1
 80008c2:	b2d1      	uxtb	r1, r2
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	460a      	mov	r2, r1
 80008ca:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80008cc:	89bb      	ldrh	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	81bb      	strh	r3, [r7, #12]
 80008d2:	89bb      	ldrh	r3, [r7, #12]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d9e9      	bls.n	80008ac <TL_serialize+0x1e4>
  }
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bcf0      	pop	{r4, r5, r6, r7}
 80008e2:	4770      	bx	lr

080008e4 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 80008e4:	b4f0      	push	{r4, r5, r6, r7}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  frame->chanid = 0;
 80008ec:	6879      	ldr	r1, [r7, #4]
 80008ee:	2000      	movs	r0, #0
 80008f0:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	2000      	movs	r0, #0
 80008f6:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	2000      	movs	r0, #0
 80008fc:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2000      	movs	r0, #0
 8000902:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	2000      	movs	r0, #0
 8000908:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	2000      	movs	r0, #0
 800090e:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 8000910:	687e      	ldr	r6, [r7, #4]
 8000912:	f04f 0000 	mov.w	r0, #0
 8000916:	f04f 0100 	mov.w	r1, #0
 800091a:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	2000      	movs	r0, #0
 8000922:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 8000924:	6879      	ldr	r1, [r7, #4]
 8000926:	2000      	movs	r0, #0
 8000928:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	2000      	movs	r0, #0
 800092e:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8000930:	2100      	movs	r1, #0
 8000932:	83f9      	strh	r1, [r7, #30]
 8000934:	e014      	b.n	8000960 <TL_deserialize+0x7c>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	7e89      	ldrb	r1, [r1, #26]
 800093a:	b248      	sxtb	r0, r1
 800093c:	8bf9      	ldrh	r1, [r7, #30]
 800093e:	687e      	ldr	r6, [r7, #4]
 8000940:	4431      	add	r1, r6
 8000942:	7ec9      	ldrb	r1, [r1, #27]
 8000944:	f001 0601 	and.w	r6, r1, #1
 8000948:	8bf9      	ldrh	r1, [r7, #30]
 800094a:	fa06 f101 	lsl.w	r1, r6, r1
 800094e:	b249      	sxtb	r1, r1
 8000950:	4301      	orrs	r1, r0
 8000952:	b249      	sxtb	r1, r1
 8000954:	b2c8      	uxtb	r0, r1
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 800095a:	8bf9      	ldrh	r1, [r7, #30]
 800095c:	3101      	adds	r1, #1
 800095e:	83f9      	strh	r1, [r7, #30]
 8000960:	8bf9      	ldrh	r1, [r7, #30]
 8000962:	2900      	cmp	r1, #0
 8000964:	d0e7      	beq.n	8000936 <TL_deserialize+0x52>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8000966:	2100      	movs	r1, #0
 8000968:	83b9      	strh	r1, [r7, #28]
 800096a:	e015      	b.n	8000998 <TL_deserialize+0xb4>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	7e09      	ldrb	r1, [r1, #24]
 8000970:	b248      	sxtb	r0, r1
 8000972:	8bb9      	ldrh	r1, [r7, #28]
 8000974:	3101      	adds	r1, #1
 8000976:	687e      	ldr	r6, [r7, #4]
 8000978:	4431      	add	r1, r6
 800097a:	7ec9      	ldrb	r1, [r1, #27]
 800097c:	f001 0601 	and.w	r6, r1, #1
 8000980:	8bb9      	ldrh	r1, [r7, #28]
 8000982:	fa06 f101 	lsl.w	r1, r6, r1
 8000986:	b249      	sxtb	r1, r1
 8000988:	4301      	orrs	r1, r0
 800098a:	b249      	sxtb	r1, r1
 800098c:	b2c8      	uxtb	r0, r1
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8000992:	8bb9      	ldrh	r1, [r7, #28]
 8000994:	3101      	adds	r1, #1
 8000996:	83b9      	strh	r1, [r7, #28]
 8000998:	8bb9      	ldrh	r1, [r7, #28]
 800099a:	2900      	cmp	r1, #0
 800099c:	d0e6      	beq.n	800096c <TL_deserialize+0x88>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800099e:	2100      	movs	r1, #0
 80009a0:	8379      	strh	r1, [r7, #26]
 80009a2:	e01b      	b.n	80009dc <TL_deserialize+0xf8>
    frame->data |= ((frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80009aa:	8b7e      	ldrh	r6, [r7, #26]
 80009ac:	f106 0c02 	add.w	ip, r6, #2
 80009b0:	687e      	ldr	r6, [r7, #4]
 80009b2:	4466      	add	r6, ip
 80009b4:	7ef6      	ldrb	r6, [r6, #27]
 80009b6:	f006 0c01 	and.w	ip, r6, #1
 80009ba:	8b7e      	ldrh	r6, [r7, #26]
 80009bc:	fa0c f606 	lsl.w	r6, ip, r6
 80009c0:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80009c4:	4632      	mov	r2, r6
 80009c6:	4663      	mov	r3, ip
 80009c8:	ea40 0402 	orr.w	r4, r0, r2
 80009cc:	ea41 0503 	orr.w	r5, r1, r3
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	e9c1 4504 	strd	r4, r5, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80009d6:	8b79      	ldrh	r1, [r7, #26]
 80009d8:	3101      	adds	r1, #1
 80009da:	8379      	strh	r1, [r7, #26]
 80009dc:	8b79      	ldrh	r1, [r7, #26]
 80009de:	293f      	cmp	r1, #63	; 0x3f
 80009e0:	d9e0      	bls.n	80009a4 <TL_deserialize+0xc0>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80009e2:	2300      	movs	r3, #0
 80009e4:	833b      	strh	r3, [r7, #24]
 80009e6:	e015      	b.n	8000a14 <TL_deserialize+0x130>
    frame->mask |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7e5b      	ldrb	r3, [r3, #25]
 80009ec:	b25a      	sxtb	r2, r3
 80009ee:	8b3b      	ldrh	r3, [r7, #24]
 80009f0:	3342      	adds	r3, #66	; 0x42
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	440b      	add	r3, r1
 80009f6:	7edb      	ldrb	r3, [r3, #27]
 80009f8:	f003 0101 	and.w	r1, r3, #1
 80009fc:	8b3b      	ldrh	r3, [r7, #24]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b25b      	sxtb	r3, r3
 8000a08:	b2da      	uxtb	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	765a      	strb	r2, [r3, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8000a0e:	8b3b      	ldrh	r3, [r7, #24]
 8000a10:	3301      	adds	r3, #1
 8000a12:	833b      	strh	r3, [r7, #24]
 8000a14:	8b3b      	ldrh	r3, [r7, #24]
 8000a16:	2b07      	cmp	r3, #7
 8000a18:	d9e6      	bls.n	80009e8 <TL_deserialize+0x104>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	82fb      	strh	r3, [r7, #22]
 8000a1e:	e011      	b.n	8000a44 <TL_deserialize+0x160>
    frame->address |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	8afa      	ldrh	r2, [r7, #22]
 8000a26:	324a      	adds	r2, #74	; 0x4a
 8000a28:	6879      	ldr	r1, [r7, #4]
 8000a2a:	440a      	add	r2, r1
 8000a2c:	7ed2      	ldrb	r2, [r2, #27]
 8000a2e:	f002 0101 	and.w	r1, r2, #1
 8000a32:	8afa      	ldrh	r2, [r7, #22]
 8000a34:	fa01 f202 	lsl.w	r2, r1, r2
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8000a3e:	8afb      	ldrh	r3, [r7, #22]
 8000a40:	3301      	adds	r3, #1
 8000a42:	82fb      	strh	r3, [r7, #22]
 8000a44:	8afb      	ldrh	r3, [r7, #22]
 8000a46:	2b1f      	cmp	r3, #31
 8000a48:	d9ea      	bls.n	8000a20 <TL_deserialize+0x13c>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	82bb      	strh	r3, [r7, #20]
 8000a4e:	e015      	b.n	8000a7c <TL_deserialize+0x198>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	b25a      	sxtb	r2, r3
 8000a56:	8abb      	ldrh	r3, [r7, #20]
 8000a58:	336a      	adds	r3, #106	; 0x6a
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	7edb      	ldrb	r3, [r3, #27]
 8000a60:	f003 0101 	and.w	r1, r3, #1
 8000a64:	8abb      	ldrh	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8000a76:	8abb      	ldrh	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	82bb      	strh	r3, [r7, #20]
 8000a7c:	8abb      	ldrh	r3, [r7, #20]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d9e6      	bls.n	8000a50 <TL_deserialize+0x16c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8000a82:	2300      	movs	r3, #0
 8000a84:	827b      	strh	r3, [r7, #18]
 8000a86:	e015      	b.n	8000ab4 <TL_deserialize+0x1d0>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	8a7b      	ldrh	r3, [r7, #18]
 8000a90:	336e      	adds	r3, #110	; 0x6e
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	440b      	add	r3, r1
 8000a96:	7edb      	ldrb	r3, [r3, #27]
 8000a98:	f003 0101 	and.w	r1, r3, #1
 8000a9c:	8a7b      	ldrh	r3, [r7, #18]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b25b      	sxtb	r3, r3
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8000aae:	8a7b      	ldrh	r3, [r7, #18]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	827b      	strh	r3, [r7, #18]
 8000ab4:	8a7b      	ldrh	r3, [r7, #18]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d9e6      	bls.n	8000a88 <TL_deserialize+0x1a4>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	823b      	strh	r3, [r7, #16]
 8000abe:	e015      	b.n	8000aec <TL_deserialize+0x208>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	789b      	ldrb	r3, [r3, #2]
 8000ac4:	b25a      	sxtb	r2, r3
 8000ac6:	8a3b      	ldrh	r3, [r7, #16]
 8000ac8:	3372      	adds	r3, #114	; 0x72
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	440b      	add	r3, r1
 8000ace:	7edb      	ldrb	r3, [r3, #27]
 8000ad0:	f003 0101 	and.w	r1, r3, #1
 8000ad4:	8a3b      	ldrh	r3, [r7, #16]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	b25b      	sxtb	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8000ae6:	8a3b      	ldrh	r3, [r7, #16]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	823b      	strh	r3, [r7, #16]
 8000aec:	8a3b      	ldrh	r3, [r7, #16]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d9e6      	bls.n	8000ac0 <TL_deserialize+0x1dc>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	81fb      	strh	r3, [r7, #14]
 8000af6:	e015      	b.n	8000b24 <TL_deserialize+0x240>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	b25a      	sxtb	r2, r3
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	3375      	adds	r3, #117	; 0x75
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	440b      	add	r3, r1
 8000b06:	7edb      	ldrb	r3, [r3, #27]
 8000b08:	f003 0101 	and.w	r1, r3, #1
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	b25b      	sxtb	r3, r3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	3301      	adds	r3, #1
 8000b22:	81fb      	strh	r3, [r7, #14]
 8000b24:	89fb      	ldrh	r3, [r7, #14]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d9e6      	bls.n	8000af8 <TL_deserialize+0x214>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	81bb      	strh	r3, [r7, #12]
 8000b2e:	e015      	b.n	8000b5c <TL_deserialize+0x278>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b25a      	sxtb	r2, r3
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	3378      	adds	r3, #120	; 0x78
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	7edb      	ldrb	r3, [r3, #27]
 8000b40:	f003 0101 	and.w	r1, r3, #1
 8000b44:	89bb      	ldrh	r3, [r7, #12]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8000b56:	89bb      	ldrh	r3, [r7, #12]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	81bb      	strh	r3, [r7, #12]
 8000b5c:	89bb      	ldrh	r3, [r7, #12]
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d9e6      	bls.n	8000b30 <TL_deserialize+0x24c>
  }
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b6c:	4770      	bx	lr
	...

08000b70 <TL_transmit>:

void TL_transmit(TileLinkFrame *frame) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  TL_serialize(frame);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fda5 	bl	80006c8 <TL_serialize>

  // reset state
  tl.tx_bit_offset = 0;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <TL_transmit+0x48>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
  tl.rx_bit_offset = 0;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <TL_transmit+0x48>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
  tl.tx_finished = 0;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <TL_transmit+0x48>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
  tl.rx_finished = 0;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <TL_transmit+0x48>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a

  // enable TX RX
  tl.rx_pending = 1;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <TL_transmit+0x48>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f8a3 224c 	strh.w	r2, [r3, #588]	; 0x24c
  tl.tx_pending = 1;
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <TL_transmit+0x48>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000090 	.word	0x20000090

08000bbc <TL_issueGet>:

//TL_Control *tl
void TL_issueGet(uint32_t address) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  tl.tx_frame.chanid  = 0;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <TL_issueGet+0x6c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
  tl.tx_frame.opcode  = 0x4;  // get
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <TL_issueGet+0x6c>)
 8000bcc:	2204      	movs	r2, #4
 8000bce:	705a      	strb	r2, [r3, #1]
  tl.tx_frame.param   = 0;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <TL_issueGet+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	709a      	strb	r2, [r3, #2]
  tl.tx_frame.size    = 2;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <TL_issueGet+0x6c>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	70da      	strb	r2, [r3, #3]
  tl.tx_frame.source  = 0;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <TL_issueGet+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	711a      	strb	r2, [r3, #4]
  tl.tx_frame.address = address;
 8000be2:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <TL_issueGet+0x6c>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6093      	str	r3, [r2, #8]
  tl.tx_frame.data    = 0x0000000000000000;
 8000be8:	490f      	ldr	r1, [pc, #60]	; (8000c28 <TL_issueGet+0x6c>)
 8000bea:	f04f 0200 	mov.w	r2, #0
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	e9c1 2304 	strd	r2, r3, [r1, #16]
  tl.tx_frame.corrupt = 0;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <TL_issueGet+0x6c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	761a      	strb	r2, [r3, #24]
  tl.tx_frame.mask    = 0b00001111;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <TL_issueGet+0x6c>)
 8000bfe:	220f      	movs	r2, #15
 8000c00:	765a      	strb	r2, [r3, #25]
  tl.tx_frame.last    = 1;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <TL_issueGet+0x6c>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	769a      	strb	r2, [r3, #26]

  TL_transmit(&tl.tx_frame);
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <TL_issueGet+0x6c>)
 8000c0a:	f7ff ffb1 	bl	8000b70 <TL_transmit>

  while (!tl.rx_finished) {}
 8000c0e:	bf00      	nop
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <TL_issueGet+0x6c>)
 8000c12:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0fa      	beq.n	8000c10 <TL_issueGet+0x54>

  TL_deserialize(&tl.rx_frame);
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <TL_issueGet+0x70>)
 8000c1c:	f7ff fe62 	bl	80008e4 <TL_deserialize>

}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000090 	.word	0x20000090
 8000c2c:	200001b8 	.word	0x200001b8

08000c30 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c34:	2100      	movs	r1, #0
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <APP_init+0x18>)
 8000c38:	f001 fe46 	bl	80028c8 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <APP_init+0x1c>)
 8000c40:	f001 ff5a 	bl	8002af8 <HAL_TIM_IC_Start_IT>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000360 	.word	0x20000360
 8000c4c:	200003a8 	.word	0x200003a8

08000c50 <APP_main>:

void APP_main() {
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c52:	b08b      	sub	sp, #44	; 0x2c
 8000c54:	af06      	add	r7, sp, #24
  uint8_t cmd;
  if (HAL_UART_Receive(&huart2, &cmd, 1, 1000) == HAL_OK) {
 8000c56:	f107 010f 	add.w	r1, r7, #15
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	2201      	movs	r2, #1
 8000c60:	485d      	ldr	r0, [pc, #372]	; (8000dd8 <APP_main+0x188>)
 8000c62:	f003 f9c2 	bl	8003fea <HAL_UART_Receive>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f040 80ad 	bne.w	8000dc8 <APP_main+0x178>
    if (cmd == 't') {
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	2b74      	cmp	r3, #116	; 0x74
 8000c72:	d152      	bne.n	8000d1a <APP_main+0xca>
      TL_issueGet(MTIME_REG_ADDR);
 8000c74:	4859      	ldr	r0, [pc, #356]	; (8000ddc <APP_main+0x18c>)
 8000c76:	f7ff ffa1 	bl	8000bbc <TL_issueGet>

      sprintf(str, "[TX] GET address: 0x%08lx size: %d\r\n", tl.tx_frame.address, tl.tx_frame.size);
 8000c7a:	4b59      	ldr	r3, [pc, #356]	; (8000de0 <APP_main+0x190>)
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	4b58      	ldr	r3, [pc, #352]	; (8000de0 <APP_main+0x190>)
 8000c80:	78db      	ldrb	r3, [r3, #3]
 8000c82:	4958      	ldr	r1, [pc, #352]	; (8000de4 <APP_main+0x194>)
 8000c84:	4858      	ldr	r0, [pc, #352]	; (8000de8 <APP_main+0x198>)
 8000c86:	f003 fd67 	bl	8004758 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000c8a:	4857      	ldr	r0, [pc, #348]	; (8000de8 <APP_main+0x198>)
 8000c8c:	f7ff fac0 	bl	8000210 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c98:	4953      	ldr	r1, [pc, #332]	; (8000de8 <APP_main+0x198>)
 8000c9a:	484f      	ldr	r0, [pc, #316]	; (8000dd8 <APP_main+0x188>)
 8000c9c:	f003 f913 	bl	8003ec6 <HAL_UART_Transmit>

      sprintf(str, "[RX] chanid: %d opcode: %d size: %d source: 0x%08lx denied: %d corrupt: %d  data: 0x%08lx%08lx\r\n", tl.rx_frame.chanid, tl.rx_frame.opcode, tl.rx_frame.size, tl.rx_frame.address, tl.rx_frame.mask, tl.rx_frame.corrupt, (uint32_t)(tl.rx_frame.data >> 32), (uint32_t)tl.rx_frame.data);
 8000ca0:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <APP_main+0x190>)
 8000ca2:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8000ca6:	469c      	mov	ip, r3
 8000ca8:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <APP_main+0x190>)
 8000caa:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 8000cae:	469e      	mov	lr, r3
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <APP_main+0x190>)
 8000cb2:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <APP_main+0x190>)
 8000cba:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 8000cbe:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <APP_main+0x190>)
 8000cc0:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8000cc4:	461e      	mov	r6, r3
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <APP_main+0x190>)
 8000cc8:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <APP_main+0x190>)
 8000cd0:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	000a      	movs	r2, r1
 8000cde:	2300      	movs	r3, #0
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <APP_main+0x190>)
 8000ce4:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8000ce8:	4613      	mov	r3, r2
 8000cea:	9305      	str	r3, [sp, #20]
 8000cec:	9104      	str	r1, [sp, #16]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	9303      	str	r3, [sp, #12]
 8000cf2:	9602      	str	r6, [sp, #8]
 8000cf4:	9401      	str	r4, [sp, #4]
 8000cf6:	9500      	str	r5, [sp, #0]
 8000cf8:	4673      	mov	r3, lr
 8000cfa:	4662      	mov	r2, ip
 8000cfc:	493b      	ldr	r1, [pc, #236]	; (8000dec <APP_main+0x19c>)
 8000cfe:	483a      	ldr	r0, [pc, #232]	; (8000de8 <APP_main+0x198>)
 8000d00:	f003 fd2a 	bl	8004758 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000d04:	4838      	ldr	r0, [pc, #224]	; (8000de8 <APP_main+0x198>)
 8000d06:	f7ff fa83 	bl	8000210 <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	4935      	ldr	r1, [pc, #212]	; (8000de8 <APP_main+0x198>)
 8000d14:	4830      	ldr	r0, [pc, #192]	; (8000dd8 <APP_main+0x188>)
 8000d16:	f003 f8d6 	bl	8003ec6 <HAL_UART_Transmit>
    }
    if (cmd == 'r') {
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2b72      	cmp	r3, #114	; 0x72
 8000d1e:	d153      	bne.n	8000dc8 <APP_main+0x178>

      TL_issueGet(0x10000);
 8000d20:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000d24:	f7ff ff4a 	bl	8000bbc <TL_issueGet>

      sprintf(str, "[TX] GET address: 0x%08lx size: %d\r\n", tl.tx_frame.address, tl.tx_frame.size);
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <APP_main+0x190>)
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <APP_main+0x190>)
 8000d2e:	78db      	ldrb	r3, [r3, #3]
 8000d30:	492c      	ldr	r1, [pc, #176]	; (8000de4 <APP_main+0x194>)
 8000d32:	482d      	ldr	r0, [pc, #180]	; (8000de8 <APP_main+0x198>)
 8000d34:	f003 fd10 	bl	8004758 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000d38:	482b      	ldr	r0, [pc, #172]	; (8000de8 <APP_main+0x198>)
 8000d3a:	f7ff fa69 	bl	8000210 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	b29a      	uxth	r2, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	4928      	ldr	r1, [pc, #160]	; (8000de8 <APP_main+0x198>)
 8000d48:	4823      	ldr	r0, [pc, #140]	; (8000dd8 <APP_main+0x188>)
 8000d4a:	f003 f8bc 	bl	8003ec6 <HAL_UART_Transmit>

      sprintf(str, "[RX] chanid: %d opcode: %d size: %d source: 0x%08lx denied: %d corrupt: %d  data: 0x%08lx%08lx\r\n", tl.rx_frame.chanid, tl.rx_frame.opcode, tl.rx_frame.size, tl.rx_frame.address, tl.rx_frame.mask, tl.rx_frame.corrupt, (uint32_t)(tl.rx_frame.data >> 32), (uint32_t)tl.rx_frame.data);
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <APP_main+0x190>)
 8000d50:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 8000d54:	469c      	mov	ip, r3
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <APP_main+0x190>)
 8000d58:	f893 3129 	ldrb.w	r3, [r3, #297]	; 0x129
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <APP_main+0x190>)
 8000d60:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8000d64:	461d      	mov	r5, r3
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <APP_main+0x190>)
 8000d68:	f8d3 4130 	ldr.w	r4, [r3, #304]	; 0x130
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <APP_main+0x190>)
 8000d6e:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8000d72:	461e      	mov	r6, r3
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <APP_main+0x190>)
 8000d76:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <APP_main+0x190>)
 8000d7e:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	f04f 0300 	mov.w	r3, #0
 8000d8a:	000a      	movs	r2, r1
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <APP_main+0x190>)
 8000d92:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8000d96:	4613      	mov	r3, r2
 8000d98:	9305      	str	r3, [sp, #20]
 8000d9a:	9104      	str	r1, [sp, #16]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	9303      	str	r3, [sp, #12]
 8000da0:	9602      	str	r6, [sp, #8]
 8000da2:	9401      	str	r4, [sp, #4]
 8000da4:	9500      	str	r5, [sp, #0]
 8000da6:	4673      	mov	r3, lr
 8000da8:	4662      	mov	r2, ip
 8000daa:	4910      	ldr	r1, [pc, #64]	; (8000dec <APP_main+0x19c>)
 8000dac:	480e      	ldr	r0, [pc, #56]	; (8000de8 <APP_main+0x198>)
 8000dae:	f003 fcd3 	bl	8004758 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000db2:	480d      	ldr	r0, [pc, #52]	; (8000de8 <APP_main+0x198>)
 8000db4:	f7ff fa2c 	bl	8000210 <strlen>
 8000db8:	4603      	mov	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc0:	4909      	ldr	r1, [pc, #36]	; (8000de8 <APP_main+0x198>)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <APP_main+0x188>)
 8000dc4:	f003 f87f 	bl	8003ec6 <HAL_UART_Transmit>

    }
  }

  HAL_Delay(50);
 8000dc8:	2032      	movs	r0, #50	; 0x32
 8000dca:	f000 fc77 	bl	80016bc <HAL_Delay>
}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200003f0 	.word	0x200003f0
 8000ddc:	0200bff8 	.word	0x0200bff8
 8000de0:	20000090 	.word	0x20000090
 8000de4:	0800504c 	.word	0x0800504c
 8000de8:	200002e0 	.word	0x200002e0
 8000dec:	08005074 	.word	0x08005074

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fbf0 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f80e 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f998 	bl	8001130 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e00:	f000 f96c 	bl	80010dc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000e04:	f000 f916 	bl	8001034 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000e08:	f000 f872 	bl	8000ef0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000e0c:	f7ff ff10 	bl	8000c30 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000e10:	f7ff ff1e 	bl	8000c50 <APP_main>
 8000e14:	e7fc      	b.n	8000e10 <main+0x20>
	...

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	; 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2234      	movs	r2, #52	; 0x34
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 fc8e 	bl	8004748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <SystemClock_Config+0xd0>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a28      	ldr	r2, [pc, #160]	; (8000ee8 <SystemClock_Config+0xd0>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <SystemClock_Config+0xd0>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <SystemClock_Config+0xd4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a22      	ldr	r2, [pc, #136]	; (8000eec <SystemClock_Config+0xd4>)
 8000e62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <SystemClock_Config+0xd4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e80:	2302      	movs	r3, #2
 8000e82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000e8c:	23a0      	movs	r3, #160	; 0xa0
 8000e8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 f9cb 	bl	800223c <HAL_RCC_OscConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eac:	f000 f9cc 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ebc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ec0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	2105      	movs	r1, #5
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fef0 	bl	8001cb4 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eda:	f000 f9b5 	bl	8001248 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3750      	adds	r7, #80	; 0x50
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40007000 	.word	0x40007000

08000ef0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2220      	movs	r2, #32
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f003 fc0d 	bl	8004748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f30:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <MX_TIM1_Init+0x140>)
 8000f32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000f34:	4b3d      	ldr	r3, [pc, #244]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f36:	229f      	movs	r2, #159	; 0x9f
 8000f38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000f40:	4b3a      	ldr	r3, [pc, #232]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b38      	ldr	r3, [pc, #224]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f4e:	4b37      	ldr	r3, [pc, #220]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f5a:	4834      	ldr	r0, [pc, #208]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f5c:	f001 fc0c 	bl	8002778 <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f66:	f000 f96f 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f74:	4619      	mov	r1, r3
 8000f76:	482d      	ldr	r0, [pc, #180]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f78:	f002 f94c 	bl	8003214 <HAL_TIM_ConfigClockSource>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f82:	f000 f961 	bl	8001248 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f86:	4829      	ldr	r0, [pc, #164]	; (800102c <MX_TIM1_Init+0x13c>)
 8000f88:	f001 fc45 	bl	8002816 <HAL_TIM_PWM_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f92:	f000 f959 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4821      	ldr	r0, [pc, #132]	; (800102c <MX_TIM1_Init+0x13c>)
 8000fa6:	f002 fe5f 	bl	8003c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fb0:	f000 f94a 	bl	8001248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb4:	2360      	movs	r3, #96	; 0x60
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8000fb8:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <MX_TIM1_Init+0x13c>)
 8000fdc:	f002 f858 	bl	8003090 <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000fe6:	f000 f92f 	bl	8001248 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001002:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4807      	ldr	r0, [pc, #28]	; (800102c <MX_TIM1_Init+0x13c>)
 800100e:	f002 fea7 	bl	8003d60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001018:	f000 f916 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <MX_TIM1_Init+0x13c>)
 800101e:	f000 f9b3 	bl	8001388 <HAL_TIM_MspPostInit>

}
 8001022:	bf00      	nop
 8001024:	3758      	adds	r7, #88	; 0x58
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000360 	.word	0x20000360
 8001030:	40010000 	.word	0x40010000

08001034 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <MX_TIM4_Init+0xa0>)
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <MX_TIM4_Init+0xa4>)
 8001054:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_TIM4_Init+0xa0>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <MX_TIM4_Init+0xa0>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM4_Init+0xa0>)
 8001064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001068:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM4_Init+0xa0>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_TIM4_Init+0xa0>)
 8001072:	2200      	movs	r2, #0
 8001074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001076:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_TIM4_Init+0xa0>)
 8001078:	f001 fcee 	bl	8002a58 <HAL_TIM_IC_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001082:	f000 f8e1 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	4619      	mov	r1, r3
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <MX_TIM4_Init+0xa0>)
 8001096:	f002 fde7 	bl	8003c68 <HAL_TIMEx_MasterConfigSynchronization>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80010a0:	f000 f8d2 	bl	8001248 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_TIM4_Init+0xa0>)
 80010bc:	f001 ff4c 	bl	8002f58 <HAL_TIM_IC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80010c6:	f000 f8bf 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200003a8 	.word	0x200003a8
 80010d8:	40000800 	.word	0x40000800

080010dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_USART2_UART_Init+0x50>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART2_UART_Init+0x4c>)
 8001114:	f002 fe8a 	bl	8003e2c <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800111e:	f000 f893 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003f0 	.word	0x200003f0
 800112c:	40004400 	.word	0x40004400

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <MX_GPIO_Init+0x108>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <MX_GPIO_Init+0x108>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <MX_GPIO_Init+0x108>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <MX_GPIO_Init+0x108>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a33      	ldr	r2, [pc, #204]	; (8001238 <MX_GPIO_Init+0x108>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b31      	ldr	r3, [pc, #196]	; (8001238 <MX_GPIO_Init+0x108>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_GPIO_Init+0x108>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <MX_GPIO_Init+0x108>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <MX_GPIO_Init+0x108>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2103      	movs	r1, #3
 800119e:	4827      	ldr	r0, [pc, #156]	; (800123c <MX_GPIO_Init+0x10c>)
 80011a0:	f000 fd6e 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2121      	movs	r1, #33	; 0x21
 80011a8:	4825      	ldr	r0, [pc, #148]	; (8001240 <MX_GPIO_Init+0x110>)
 80011aa:	f000 fd69 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	481e      	ldr	r0, [pc, #120]	; (800123c <MX_GPIO_Init+0x10c>)
 80011c4:	f000 fbb0 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 80011c8:	2303      	movs	r3, #3
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	4817      	ldr	r0, [pc, #92]	; (800123c <MX_GPIO_Init+0x10c>)
 80011e0:	f000 fba2 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5;
 80011e4:	2321      	movs	r3, #33	; 0x21
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	4811      	ldr	r0, [pc, #68]	; (8001240 <MX_GPIO_Init+0x110>)
 80011fc:	f000 fb94 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 8001200:	2312      	movs	r3, #18
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <MX_GPIO_Init+0x110>)
 8001214:	f000 fb88 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8001218:	2301      	movs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_GPIO_Init+0x114>)
 800122c:	f000 fb7c 	bl	8001928 <HAL_GPIO_Init>

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40023800 	.word	0x40023800
 800123c:	40020800 	.word	0x40020800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <HAL_TIM_Base_MspInit+0x3c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10d      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_TIM_Base_MspInit+0x40>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_TIM_Base_MspInit+0x40>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_TIM_Base_MspInit+0x40>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40010000 	.word	0x40010000
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_TIM_IC_MspInit+0x94>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d133      	bne.n	8001372 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_TIM_IC_MspInit+0x98>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_TIM_IC_MspInit+0x98>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_TIM_IC_MspInit+0x98>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_TIM_IC_MspInit+0x98>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_TIM_IC_MspInit+0x98>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_TIM_IC_MspInit+0x98>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001342:	2340      	movs	r3, #64	; 0x40
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001352:	2302      	movs	r3, #2
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <HAL_TIM_IC_MspInit+0x9c>)
 800135e:	f000 fae3 	bl	8001928 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	201e      	movs	r0, #30
 8001368:	f000 faa7 	bl	80018ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800136c:	201e      	movs	r0, #30
 800136e:	f000 fac0 	bl	80018f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40000800 	.word	0x40000800
 8001380:	40023800 	.word	0x40023800
 8001384:	40020400 	.word	0x40020400

08001388 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_TIM_MspPostInit+0x68>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d11e      	bne.n	80013e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_TIM_MspPostInit+0x6c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_TIM_MspPostInit+0x6c>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_TIM_MspPostInit+0x6c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013d8:	2301      	movs	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_TIM_MspPostInit+0x70>)
 80013e4:	f000 faa0 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3720      	adds	r7, #32
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_UART_MspInit+0x84>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12b      	bne.n	8001476 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_UART_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001456:	230c      	movs	r3, #12
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001466:	2307      	movs	r3, #7
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_UART_MspInit+0x8c>)
 8001472:	f000 fa59 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40004400 	.word	0x40004400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f000 f8d0 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM4_IRQHandler+0x10>)
 80014e6:	f001 fc2f 	bl	8002d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200003a8 	.word	0x200003a8

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	; (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f003 f8e6 	bl	80046f4 <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20020000 	.word	0x20020000
 8001554:	00000400 	.word	0x00000400
 8001558:	20000434 	.word	0x20000434
 800155c:	20000450 	.word	0x20000450

08001560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	; (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800158a:	490e      	ldr	r1, [pc, #56]	; (80015c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015a0:	4c0b      	ldr	r4, [pc, #44]	; (80015d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ae:	f7ff ffd7 	bl	8001560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f003 f8a5 	bl	8004700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fc1b 	bl	8000df0 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015c8:	08005134 	.word	0x08005134
  ldr r2, =_sbss
 80015cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015d0:	2000044c 	.word	0x2000044c

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	; (8001618 <HAL_Init+0x40>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_Init+0x40>)
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_Init+0x40>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f94f 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	200f      	movs	r0, #15
 8001608:	f000 f808 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7ff fe22 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x54>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f967 	bl	800190e <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f000 f92f 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_InitTick+0x5c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000000 	.word	0x20000000
 8001674:	20000008 	.word	0x20000008
 8001678:	20000004 	.word	0x20000004

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000438 	.word	0x20000438

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000438 	.word	0x20000438

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000008 	.word	0x20000008

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4907      	ldr	r1, [pc, #28]	; (80017a0 <__NVIC_EnableIRQ+0x38>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff29 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff3e 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff8e 	bl	80017f8 <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff31 	bl	8001768 <__NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffa2 	bl	8001860 <SysTick_Config>
 800191c:	4603      	mov	r3, r0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	e165      	b.n	8001c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8154 	bne.w	8001c0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d005      	beq.n	800197a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001976:	2b02      	cmp	r3, #2
 8001978:	d130      	bne.n	80019dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b0:	2201      	movs	r2, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 0201 	and.w	r2, r3, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d017      	beq.n	8001a18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d123      	bne.n	8001a6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	08da      	lsrs	r2, r3, #3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3208      	adds	r2, #8
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	08da      	lsrs	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3208      	adds	r2, #8
 8001a66:	69b9      	ldr	r1, [r7, #24]
 8001a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80ae 	beq.w	8001c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <HAL_GPIO_Init+0x300>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a5c      	ldr	r2, [pc, #368]	; (8001c28 <HAL_GPIO_Init+0x300>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <HAL_GPIO_Init+0x300>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aca:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_GPIO_Init+0x304>)
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	089b      	lsrs	r3, r3, #2
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4f      	ldr	r2, [pc, #316]	; (8001c30 <HAL_GPIO_Init+0x308>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x21a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_GPIO_Init+0x30c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x216>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <HAL_GPIO_Init+0x310>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x212>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x314>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x20e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <HAL_GPIO_Init+0x318>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x20a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_GPIO_Init+0x31c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x206>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_GPIO_Init+0x320>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x202>
 8001b26:	2306      	movs	r3, #6
 8001b28:	e00c      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	e00a      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e008      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x21c>
 8001b42:	2300      	movs	r3, #0
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f002 0203 	and.w	r2, r2, #3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b54:	4935      	ldr	r1, [pc, #212]	; (8001c2c <HAL_GPIO_Init+0x304>)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b86:	4a31      	ldr	r2, [pc, #196]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <HAL_GPIO_Init+0x324>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	f67f ae96 	bls.w	8001944 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40021400 	.word	0x40021400
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40013c00 	.word	0x40013c00

08001c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c9c:	e003      	b.n	8001ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	041a      	lsls	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	619a      	str	r2, [r3, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0cc      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d90c      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0b8      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d08:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a58      	ldr	r2, [pc, #352]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0308 	and.w	r3, r3, #8
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d20:	4b53      	ldr	r3, [pc, #332]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a52      	ldr	r2, [pc, #328]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	494d      	ldr	r1, [pc, #308]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d044      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d119      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e07f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d107      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d82:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e067      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 0203 	bic.w	r2, r3, #3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4934      	ldr	r1, [pc, #208]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da4:	f7ff fc7e 	bl	80016a4 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7ff fc7a 	bl	80016a4 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e04f      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 020c 	and.w	r2, r3, #12
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d1eb      	bne.n	8001dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b25      	ldr	r3, [pc, #148]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d20c      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e032      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4916      	ldr	r1, [pc, #88]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e3a:	f000 f855 	bl	8001ee8 <HAL_RCC_GetSysClockFreq>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	490a      	ldr	r1, [pc, #40]	; (8001e74 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4c:	5ccb      	ldrb	r3, [r1, r3]
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	4a09      	ldr	r2, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fbde 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023c00 	.word	0x40023c00
 8001e70:	40023800 	.word	0x40023800
 8001e74:	080050d8 	.word	0x080050d8
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000

08001e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e9c:	f7ff fff0 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0a9b      	lsrs	r3, r3, #10
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	080050e8 	.word	0x080050e8

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ec4:	f7ff ffdc 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	0b5b      	lsrs	r3, r3, #13
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4903      	ldr	r1, [pc, #12]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed6:	5ccb      	ldrb	r3, [r1, r3]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	080050e8 	.word	0x080050e8

08001ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b0a6      	sub	sp, #152	; 0x98
 8001eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f0e:	4bc8      	ldr	r3, [pc, #800]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	f200 817e 	bhi.w	8002218 <HAL_RCC_GetSysClockFreq+0x330>
 8001f1c:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001f59 	.word	0x08001f59
 8001f28:	08002219 	.word	0x08002219
 8001f2c:	08002219 	.word	0x08002219
 8001f30:	08002219 	.word	0x08002219
 8001f34:	08001f61 	.word	0x08001f61
 8001f38:	08002219 	.word	0x08002219
 8001f3c:	08002219 	.word	0x08002219
 8001f40:	08002219 	.word	0x08002219
 8001f44:	08001f69 	.word	0x08001f69
 8001f48:	08002219 	.word	0x08002219
 8001f4c:	08002219 	.word	0x08002219
 8001f50:	08002219 	.word	0x08002219
 8001f54:	080020d3 	.word	0x080020d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4bb6      	ldr	r3, [pc, #728]	; (8002234 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001f5e:	e15f      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f60:	4bb5      	ldr	r3, [pc, #724]	; (8002238 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001f66:	e15b      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f68:	4bb1      	ldr	r3, [pc, #708]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f74:	4bae      	ldr	r3, [pc, #696]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d031      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f80:	4bab      	ldr	r3, [pc, #684]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	099b      	lsrs	r3, r3, #6
 8001f86:	2200      	movs	r2, #0
 8001f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f92:	663b      	str	r3, [r7, #96]	; 0x60
 8001f94:	2300      	movs	r3, #0
 8001f96:	667b      	str	r3, [r7, #100]	; 0x64
 8001f98:	4ba7      	ldr	r3, [pc, #668]	; (8002238 <HAL_RCC_GetSysClockFreq+0x350>)
 8001f9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f9e:	462a      	mov	r2, r5
 8001fa0:	fb03 f202 	mul.w	r2, r3, r2
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	4aa2      	ldr	r2, [pc, #648]	; (8002238 <HAL_RCC_GetSysClockFreq+0x350>)
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	fba1 1202 	umull	r1, r2, r1, r2
 8001fb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001fb8:	460a      	mov	r2, r1
 8001fba:	67ba      	str	r2, [r7, #120]	; 0x78
 8001fbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001fbe:	4413      	add	r3, r2
 8001fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fd0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001fd4:	f7fe f974 	bl	80002c0 <__aeabi_uldivmod>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4613      	mov	r3, r2
 8001fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001fe2:	e064      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe4:	4b92      	ldr	r3, [pc, #584]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	2200      	movs	r2, #0
 8001fec:	653b      	str	r3, [r7, #80]	; 0x50
 8001fee:	657a      	str	r2, [r7, #84]	; 0x54
 8001ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ffc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002000:	4622      	mov	r2, r4
 8002002:	462b      	mov	r3, r5
 8002004:	f04f 0000 	mov.w	r0, #0
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	0159      	lsls	r1, r3, #5
 800200e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002012:	0150      	lsls	r0, r2, #5
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4621      	mov	r1, r4
 800201a:	1a51      	subs	r1, r2, r1
 800201c:	6139      	str	r1, [r7, #16]
 800201e:	4629      	mov	r1, r5
 8002020:	eb63 0301 	sbc.w	r3, r3, r1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 0300 	mov.w	r3, #0
 800202e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002032:	4659      	mov	r1, fp
 8002034:	018b      	lsls	r3, r1, #6
 8002036:	4651      	mov	r1, sl
 8002038:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800203c:	4651      	mov	r1, sl
 800203e:	018a      	lsls	r2, r1, #6
 8002040:	4651      	mov	r1, sl
 8002042:	ebb2 0801 	subs.w	r8, r2, r1
 8002046:	4659      	mov	r1, fp
 8002048:	eb63 0901 	sbc.w	r9, r3, r1
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002058:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800205c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002060:	4690      	mov	r8, r2
 8002062:	4699      	mov	r9, r3
 8002064:	4623      	mov	r3, r4
 8002066:	eb18 0303 	adds.w	r3, r8, r3
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	462b      	mov	r3, r5
 800206e:	eb49 0303 	adc.w	r3, r9, r3
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002080:	4629      	mov	r1, r5
 8002082:	028b      	lsls	r3, r1, #10
 8002084:	4621      	mov	r1, r4
 8002086:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800208a:	4621      	mov	r1, r4
 800208c:	028a      	lsls	r2, r1, #10
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002096:	2200      	movs	r2, #0
 8002098:	643b      	str	r3, [r7, #64]	; 0x40
 800209a:	647a      	str	r2, [r7, #68]	; 0x44
 800209c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020a0:	f7fe f90e 	bl	80002c0 <__aeabi_uldivmod>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4613      	mov	r3, r2
 80020aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020ae:	4b60      	ldr	r3, [pc, #384]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	3301      	adds	r3, #1
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80020c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80020d0:	e0a6      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d2:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020de:	4b54      	ldr	r3, [pc, #336]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d02a      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ea:	4b51      	ldr	r3, [pc, #324]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	099b      	lsrs	r3, r3, #6
 80020f0:	2200      	movs	r2, #0
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80020f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020fc:	2100      	movs	r1, #0
 80020fe:	4b4e      	ldr	r3, [pc, #312]	; (8002238 <HAL_RCC_GetSysClockFreq+0x350>)
 8002100:	fb03 f201 	mul.w	r2, r3, r1
 8002104:	2300      	movs	r3, #0
 8002106:	fb00 f303 	mul.w	r3, r0, r3
 800210a:	4413      	add	r3, r2
 800210c:	4a4a      	ldr	r2, [pc, #296]	; (8002238 <HAL_RCC_GetSysClockFreq+0x350>)
 800210e:	fba0 1202 	umull	r1, r2, r0, r2
 8002112:	677a      	str	r2, [r7, #116]	; 0x74
 8002114:	460a      	mov	r2, r1
 8002116:	673a      	str	r2, [r7, #112]	; 0x70
 8002118:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800211a:	4413      	add	r3, r2
 800211c:	677b      	str	r3, [r7, #116]	; 0x74
 800211e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002122:	2200      	movs	r2, #0
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
 8002126:	637a      	str	r2, [r7, #52]	; 0x34
 8002128:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800212c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002130:	f7fe f8c6 	bl	80002c0 <__aeabi_uldivmod>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4613      	mov	r3, r2
 800213a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800213e:	e05b      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	2200      	movs	r2, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
 800214a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
 8002158:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800215c:	4642      	mov	r2, r8
 800215e:	464b      	mov	r3, r9
 8002160:	f04f 0000 	mov.w	r0, #0
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	0159      	lsls	r1, r3, #5
 800216a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800216e:	0150      	lsls	r0, r2, #5
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4641      	mov	r1, r8
 8002176:	ebb2 0a01 	subs.w	sl, r2, r1
 800217a:	4649      	mov	r1, r9
 800217c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800218c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002190:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002194:	ebb2 040a 	subs.w	r4, r2, sl
 8002198:	eb63 050b 	sbc.w	r5, r3, fp
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	00eb      	lsls	r3, r5, #3
 80021a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021aa:	00e2      	lsls	r2, r4, #3
 80021ac:	4614      	mov	r4, r2
 80021ae:	461d      	mov	r5, r3
 80021b0:	4643      	mov	r3, r8
 80021b2:	18e3      	adds	r3, r4, r3
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	464b      	mov	r3, r9
 80021b8:	eb45 0303 	adc.w	r3, r5, r3
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ca:	4629      	mov	r1, r5
 80021cc:	028b      	lsls	r3, r1, #10
 80021ce:	4621      	mov	r1, r4
 80021d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d4:	4621      	mov	r1, r4
 80021d6:	028a      	lsls	r2, r1, #10
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e0:	2200      	movs	r2, #0
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	61fa      	str	r2, [r7, #28]
 80021e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ea:	f7fe f869 	bl	80002c0 <__aeabi_uldivmod>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4613      	mov	r3, r2
 80021f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_RCC_GetSysClockFreq+0x348>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0f1b      	lsrs	r3, r3, #28
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002206:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800220a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002216:	e003      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_GetSysClockFreq+0x34c>)
 800221a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800221e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002220:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002224:	4618      	mov	r0, r3
 8002226:	3798      	adds	r7, #152	; 0x98
 8002228:	46bd      	mov	sp, r7
 800222a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	00f42400 	.word	0x00f42400
 8002238:	017d7840 	.word	0x017d7840

0800223c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e28d      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 8083 	beq.w	8002362 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800225c:	4b94      	ldr	r3, [pc, #592]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b04      	cmp	r3, #4
 8002266:	d019      	beq.n	800229c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002268:	4b91      	ldr	r3, [pc, #580]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002270:	2b08      	cmp	r3, #8
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002274:	4b8e      	ldr	r3, [pc, #568]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002280:	d00c      	beq.n	800229c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002282:	4b8b      	ldr	r3, [pc, #556]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d112      	bne.n	80022b4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4b88      	ldr	r3, [pc, #544]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d05b      	beq.n	8002360 <HAL_RCC_OscConfig+0x124>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d157      	bne.n	8002360 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e25a      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x90>
 80022be:	4b7c      	ldr	r3, [pc, #496]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a7b      	ldr	r2, [pc, #492]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e01d      	b.n	8002308 <HAL_RCC_OscConfig+0xcc>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0xb4>
 80022d6:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a75      	ldr	r2, [pc, #468]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a72      	ldr	r2, [pc, #456]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0xcc>
 80022f0:	4b6f      	ldr	r3, [pc, #444]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6e      	ldr	r2, [pc, #440]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b6c      	ldr	r3, [pc, #432]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6b      	ldr	r2, [pc, #428]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d013      	beq.n	8002338 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7ff f9c8 	bl	80016a4 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff f9c4 	bl	80016a4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e21f      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0xdc>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7ff f9b4 	bl	80016a4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002340:	f7ff f9b0 	bl	80016a4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b64      	cmp	r3, #100	; 0x64
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e20b      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	4b57      	ldr	r3, [pc, #348]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x104>
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d06f      	beq.n	800244e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800236e:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d017      	beq.n	80023aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800237a:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002382:	2b08      	cmp	r3, #8
 8002384:	d105      	bne.n	8002392 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002386:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d11c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_RCC_OscConfig+0x186>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1d3      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4937      	ldr	r1, [pc, #220]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	e03a      	b.n	800244e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e0:	4b34      	ldr	r3, [pc, #208]	; (80024b4 <HAL_RCC_OscConfig+0x278>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7ff f95d 	bl	80016a4 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff f959 	bl	80016a4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1b4      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4925      	ldr	r1, [pc, #148]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <HAL_RCC_OscConfig+0x278>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7ff f93c 	bl	80016a4 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002430:	f7ff f938 	bl	80016a4 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e193      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d036      	beq.n	80024c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_RCC_OscConfig+0x27c>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002468:	f7ff f91c 	bl	80016a4 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002470:	f7ff f918 	bl	80016a4 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e173      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x274>)
 8002484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x234>
 800248e:	e01b      	b.n	80024c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_RCC_OscConfig+0x27c>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7ff f905 	bl	80016a4 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	e00e      	b.n	80024bc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249e:	f7ff f901 	bl	80016a4 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d907      	bls.n	80024bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e15c      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
 80024b0:	40023800 	.word	0x40023800
 80024b4:	42470000 	.word	0x42470000
 80024b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024bc:	4b8a      	ldr	r3, [pc, #552]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ea      	bne.n	800249e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8097 	beq.w	8002604 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024da:	4b83      	ldr	r3, [pc, #524]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10f      	bne.n	8002506 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80024f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f4:	6413      	str	r3, [r2, #64]	; 0x40
 80024f6:	4b7c      	ldr	r3, [pc, #496]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002502:	2301      	movs	r3, #1
 8002504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002506:	4b79      	ldr	r3, [pc, #484]	; (80026ec <HAL_RCC_OscConfig+0x4b0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d118      	bne.n	8002544 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x4b0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a75      	ldr	r2, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x4b0>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251e:	f7ff f8c1 	bl	80016a4 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002526:	f7ff f8bd 	bl	80016a4 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e118      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4b6c      	ldr	r3, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x4b0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x31e>
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x358>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	2b05      	cmp	r3, #5
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x340>
 8002562:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002566:	4a60      	ldr	r2, [pc, #384]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	6713      	str	r3, [r2, #112]	; 0x70
 800256e:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6713      	str	r3, [r2, #112]	; 0x70
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0x358>
 800257c:	4b5a      	ldr	r3, [pc, #360]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	4a59      	ldr	r2, [pc, #356]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 8002582:	f023 0301 	bic.w	r3, r3, #1
 8002586:	6713      	str	r3, [r2, #112]	; 0x70
 8002588:	4b57      	ldr	r3, [pc, #348]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 800258e:	f023 0304 	bic.w	r3, r3, #4
 8002592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d015      	beq.n	80025c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7ff f882 	bl	80016a4 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7ff f87e 	bl	80016a4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0d7      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ba:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0ee      	beq.n	80025a4 <HAL_RCC_OscConfig+0x368>
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff f86c 	bl	80016a4 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7ff f868 	bl	80016a4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0c1      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e6:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ee      	bne.n	80025d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4a3a      	ldr	r2, [pc, #232]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80025fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80ad 	beq.w	8002768 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b08      	cmp	r3, #8
 8002618:	d060      	beq.n	80026dc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d145      	bne.n	80026ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <HAL_RCC_OscConfig+0x4b4>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7ff f83c 	bl	80016a4 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff f838 	bl	80016a4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e093      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002642:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69da      	ldr	r2, [r3, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	019b      	lsls	r3, r3, #6
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	3b01      	subs	r3, #1
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	071b      	lsls	r3, r3, #28
 800267a:	491b      	ldr	r1, [pc, #108]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_RCC_OscConfig+0x4b4>)
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002686:	f7ff f80d 	bl	80016a4 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268e:	f7ff f809 	bl	80016a4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e064      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x452>
 80026ac:	e05c      	b.n	8002768 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_OscConfig+0x4b4>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fff6 	bl	80016a4 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fe fff2 	bl	80016a4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e04d      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_OscConfig+0x4ac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x480>
 80026da:	e045      	b.n	8002768 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e040      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40007000 	.word	0x40007000
 80026f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026f4:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <HAL_RCC_OscConfig+0x538>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d030      	beq.n	8002764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d129      	bne.n	8002764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d122      	bne.n	8002764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002724:	4013      	ands	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800272a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800272c:	4293      	cmp	r3, r2
 800272e:	d119      	bne.n	8002764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	3b01      	subs	r3, #1
 800273e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d10f      	bne.n	8002764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d107      	bne.n	8002764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d001      	beq.n	8002768 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e041      	b.n	800280e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fd80 	bl	80012a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3304      	adds	r3, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4610      	mov	r0, r2
 80027b8:	f000 fe1c 	bl	80033f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e041      	b.n	80028ac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f839 	bl	80028b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f000 fdcd 	bl	80033f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_TIM_PWM_Start+0x24>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	e022      	b.n	8002932 <HAL_TIM_PWM_Start+0x6a>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d109      	bne.n	8002906 <HAL_TIM_PWM_Start+0x3e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e015      	b.n	8002932 <HAL_TIM_PWM_Start+0x6a>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d109      	bne.n	8002920 <HAL_TIM_PWM_Start+0x58>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	e008      	b.n	8002932 <HAL_TIM_PWM_Start+0x6a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b01      	cmp	r3, #1
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07c      	b.n	8002a34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <HAL_TIM_PWM_Start+0x82>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002948:	e013      	b.n	8002972 <HAL_TIM_PWM_Start+0xaa>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d104      	bne.n	800295a <HAL_TIM_PWM_Start+0x92>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002958:	e00b      	b.n	8002972 <HAL_TIM_PWM_Start+0xaa>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d104      	bne.n	800296a <HAL_TIM_PWM_Start+0xa2>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002968:	e003      	b.n	8002972 <HAL_TIM_PWM_Start+0xaa>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2201      	movs	r2, #1
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f001 f94e 	bl	8003c1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2d      	ldr	r2, [pc, #180]	; (8002a3c <HAL_TIM_PWM_Start+0x174>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_TIM_PWM_Start+0xcc>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <HAL_TIM_PWM_Start+0x178>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d101      	bne.n	8002998 <HAL_TIM_PWM_Start+0xd0>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_TIM_PWM_Start+0xd2>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d007      	beq.n	80029ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <HAL_TIM_PWM_Start+0x174>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d022      	beq.n	80029fe <HAL_TIM_PWM_Start+0x136>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d01d      	beq.n	80029fe <HAL_TIM_PWM_Start+0x136>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <HAL_TIM_PWM_Start+0x17c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d018      	beq.n	80029fe <HAL_TIM_PWM_Start+0x136>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1d      	ldr	r2, [pc, #116]	; (8002a48 <HAL_TIM_PWM_Start+0x180>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_TIM_PWM_Start+0x136>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_TIM_PWM_Start+0x184>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00e      	beq.n	80029fe <HAL_TIM_PWM_Start+0x136>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a16      	ldr	r2, [pc, #88]	; (8002a40 <HAL_TIM_PWM_Start+0x178>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d009      	beq.n	80029fe <HAL_TIM_PWM_Start+0x136>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_TIM_PWM_Start+0x188>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d004      	beq.n	80029fe <HAL_TIM_PWM_Start+0x136>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a16      	ldr	r2, [pc, #88]	; (8002a54 <HAL_TIM_PWM_Start+0x18c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d111      	bne.n	8002a22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b06      	cmp	r3, #6
 8002a0e:	d010      	beq.n	8002a32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a20:	e007      	b.n	8002a32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0201 	orr.w	r2, r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40010400 	.word	0x40010400
 8002a44:	40000400 	.word	0x40000400
 8002a48:	40000800 	.word	0x40000800
 8002a4c:	40000c00 	.word	0x40000c00
 8002a50:	40014000 	.word	0x40014000
 8002a54:	40001800 	.word	0x40001800

08002a58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e041      	b.n	8002aee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe fc32 	bl	80012e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f000 fcac 	bl	80033f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d104      	bne.n	8002b16 <HAL_TIM_IC_Start_IT+0x1e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	e013      	b.n	8002b3e <HAL_TIM_IC_Start_IT+0x46>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d104      	bne.n	8002b26 <HAL_TIM_IC_Start_IT+0x2e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	e00b      	b.n	8002b3e <HAL_TIM_IC_Start_IT+0x46>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_IC_Start_IT+0x3e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	e003      	b.n	8002b3e <HAL_TIM_IC_Start_IT+0x46>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <HAL_TIM_IC_Start_IT+0x58>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e013      	b.n	8002b78 <HAL_TIM_IC_Start_IT+0x80>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d104      	bne.n	8002b60 <HAL_TIM_IC_Start_IT+0x68>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	e00b      	b.n	8002b78 <HAL_TIM_IC_Start_IT+0x80>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d104      	bne.n	8002b70 <HAL_TIM_IC_Start_IT+0x78>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	e003      	b.n	8002b78 <HAL_TIM_IC_Start_IT+0x80>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b7a:	7bbb      	ldrb	r3, [r7, #14]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d102      	bne.n	8002b86 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b80:	7b7b      	ldrb	r3, [r7, #13]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e0cc      	b.n	8002d24 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d104      	bne.n	8002b9a <HAL_TIM_IC_Start_IT+0xa2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b98:	e013      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0xca>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d104      	bne.n	8002baa <HAL_TIM_IC_Start_IT+0xb2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba8:	e00b      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0xca>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d104      	bne.n	8002bba <HAL_TIM_IC_Start_IT+0xc2>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb8:	e003      	b.n	8002bc2 <HAL_TIM_IC_Start_IT+0xca>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d104      	bne.n	8002bd2 <HAL_TIM_IC_Start_IT+0xda>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd0:	e013      	b.n	8002bfa <HAL_TIM_IC_Start_IT+0x102>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_IC_Start_IT+0xea>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be0:	e00b      	b.n	8002bfa <HAL_TIM_IC_Start_IT+0x102>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_IC_Start_IT+0xfa>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf0:	e003      	b.n	8002bfa <HAL_TIM_IC_Start_IT+0x102>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d841      	bhi.n	8002c84 <HAL_TIM_IC_Start_IT+0x18c>
 8002c00:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <HAL_TIM_IC_Start_IT+0x110>)
 8002c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c06:	bf00      	nop
 8002c08:	08002c3d 	.word	0x08002c3d
 8002c0c:	08002c85 	.word	0x08002c85
 8002c10:	08002c85 	.word	0x08002c85
 8002c14:	08002c85 	.word	0x08002c85
 8002c18:	08002c4f 	.word	0x08002c4f
 8002c1c:	08002c85 	.word	0x08002c85
 8002c20:	08002c85 	.word	0x08002c85
 8002c24:	08002c85 	.word	0x08002c85
 8002c28:	08002c61 	.word	0x08002c61
 8002c2c:	08002c85 	.word	0x08002c85
 8002c30:	08002c85 	.word	0x08002c85
 8002c34:	08002c85 	.word	0x08002c85
 8002c38:	08002c73 	.word	0x08002c73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0202 	orr.w	r2, r2, #2
 8002c4a:	60da      	str	r2, [r3, #12]
      break;
 8002c4c:	e01d      	b.n	8002c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0204 	orr.w	r2, r2, #4
 8002c5c:	60da      	str	r2, [r3, #12]
      break;
 8002c5e:	e014      	b.n	8002c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0208 	orr.w	r2, r2, #8
 8002c6e:	60da      	str	r2, [r3, #12]
      break;
 8002c70:	e00b      	b.n	8002c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0210 	orr.w	r2, r2, #16
 8002c80:	60da      	str	r2, [r3, #12]
      break;
 8002c82:	e002      	b.n	8002c8a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      break;
 8002c88:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d148      	bne.n	8002d22 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	6839      	ldr	r1, [r7, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 ffbf 	bl	8003c1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <HAL_TIM_IC_Start_IT+0x234>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_TIM_IC_Start_IT+0x1f6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb0:	d01d      	beq.n	8002cee <HAL_TIM_IC_Start_IT+0x1f6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_TIM_IC_Start_IT+0x238>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d018      	beq.n	8002cee <HAL_TIM_IC_Start_IT+0x1f6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1c      	ldr	r2, [pc, #112]	; (8002d34 <HAL_TIM_IC_Start_IT+0x23c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_TIM_IC_Start_IT+0x1f6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_TIM_IC_Start_IT+0x240>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_TIM_IC_Start_IT+0x1f6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <HAL_TIM_IC_Start_IT+0x244>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_TIM_IC_Start_IT+0x1f6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <HAL_TIM_IC_Start_IT+0x248>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_TIM_IC_Start_IT+0x1f6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <HAL_TIM_IC_Start_IT+0x24c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d111      	bne.n	8002d12 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b06      	cmp	r3, #6
 8002cfe:	d010      	beq.n	8002d22 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d10:	e007      	b.n	8002d22 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800
 8002d38:	40000c00 	.word	0x40000c00
 8002d3c:	40010400 	.word	0x40010400
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40001800 	.word	0x40001800

08002d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0202 	mvn.w	r2, #2
 8002d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fc1a 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fb0f 	bl	80033b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fb16 	bl	80033ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0204 	mvn.w	r2, #4
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd fbf0 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fae5 	bl	80033b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 faec 	bl	80033ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0208 	mvn.w	r2, #8
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2204      	movs	r2, #4
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd fbc6 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fabb 	bl	80033b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fac2 	bl	80033ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d122      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d11b      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0210 	mvn.w	r2, #16
 8002e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2208      	movs	r2, #8
 8002e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd fb9c 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8002e8c:	e005      	b.n	8002e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fa91 	bl	80033b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fa98 	bl	80033ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10e      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0201 	mvn.w	r2, #1
 8002ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa6b 	bl	80033a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 ff90 	bl	8003e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	2b40      	cmp	r3, #64	; 0x40
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa5d 	bl	80033de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b20      	cmp	r3, #32
 8002f30:	d10e      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0220 	mvn.w	r2, #32
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 ff5a 	bl	8003e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f64:	2300      	movs	r3, #0
 8002f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e088      	b.n	8003088 <HAL_TIM_IC_ConfigChannel+0x130>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d11b      	bne.n	8002fbc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f000 fc7e 	bl	8003894 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 020c 	bic.w	r2, r2, #12
 8002fa6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6999      	ldr	r1, [r3, #24]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	619a      	str	r2, [r3, #24]
 8002fba:	e060      	b.n	800307e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d11c      	bne.n	8002ffc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6819      	ldr	r1, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f000 fd02 	bl	80039da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002fe4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6999      	ldr	r1, [r3, #24]
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	619a      	str	r2, [r3, #24]
 8002ffa:	e040      	b.n	800307e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d11b      	bne.n	800303a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f000 fd4f 	bl	8003ab4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 020c 	bic.w	r2, r2, #12
 8003024:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69d9      	ldr	r1, [r3, #28]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	61da      	str	r2, [r3, #28]
 8003038:	e021      	b.n	800307e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d11c      	bne.n	800307a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f000 fd6c 	bl	8003b2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003062:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	69d9      	ldr	r1, [r3, #28]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	021a      	lsls	r2, r3, #8
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	61da      	str	r2, [r3, #28]
 8003078:	e001      	b.n	800307e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0ae      	b.n	800320c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	f200 809f 	bhi.w	80031fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	080031fd 	.word	0x080031fd
 80030cc:	080031fd 	.word	0x080031fd
 80030d0:	080031fd 	.word	0x080031fd
 80030d4:	08003139 	.word	0x08003139
 80030d8:	080031fd 	.word	0x080031fd
 80030dc:	080031fd 	.word	0x080031fd
 80030e0:	080031fd 	.word	0x080031fd
 80030e4:	0800317b 	.word	0x0800317b
 80030e8:	080031fd 	.word	0x080031fd
 80030ec:	080031fd 	.word	0x080031fd
 80030f0:	080031fd 	.word	0x080031fd
 80030f4:	080031bb 	.word	0x080031bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fa18 	bl	8003534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0208 	orr.w	r2, r2, #8
 8003112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699a      	ldr	r2, [r3, #24]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0204 	bic.w	r2, r2, #4
 8003122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6999      	ldr	r1, [r3, #24]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691a      	ldr	r2, [r3, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	619a      	str	r2, [r3, #24]
      break;
 8003136:	e064      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fa68 	bl	8003614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6999      	ldr	r1, [r3, #24]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	021a      	lsls	r2, r3, #8
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	619a      	str	r2, [r3, #24]
      break;
 8003178:	e043      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fabd 	bl	8003700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69da      	ldr	r2, [r3, #28]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0208 	orr.w	r2, r2, #8
 8003194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0204 	bic.w	r2, r2, #4
 80031a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69d9      	ldr	r1, [r3, #28]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]
      break;
 80031b8:	e023      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68b9      	ldr	r1, [r7, #8]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fb11 	bl	80037e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	021a      	lsls	r2, r3, #8
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	61da      	str	r2, [r3, #28]
      break;
 80031fa:	e002      	b.n	8003202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800320a:	7dfb      	ldrb	r3, [r7, #23]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIM_ConfigClockSource+0x1c>
 800322c:	2302      	movs	r3, #2
 800322e:	e0b4      	b.n	800339a <HAL_TIM_ConfigClockSource+0x186>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800324e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003268:	d03e      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0xd4>
 800326a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326e:	f200 8087 	bhi.w	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	f000 8086 	beq.w	8003386 <HAL_TIM_ConfigClockSource+0x172>
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327e:	d87f      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b70      	cmp	r3, #112	; 0x70
 8003282:	d01a      	beq.n	80032ba <HAL_TIM_ConfigClockSource+0xa6>
 8003284:	2b70      	cmp	r3, #112	; 0x70
 8003286:	d87b      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b60      	cmp	r3, #96	; 0x60
 800328a:	d050      	beq.n	800332e <HAL_TIM_ConfigClockSource+0x11a>
 800328c:	2b60      	cmp	r3, #96	; 0x60
 800328e:	d877      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b50      	cmp	r3, #80	; 0x50
 8003292:	d03c      	beq.n	800330e <HAL_TIM_ConfigClockSource+0xfa>
 8003294:	2b50      	cmp	r3, #80	; 0x50
 8003296:	d873      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d058      	beq.n	800334e <HAL_TIM_ConfigClockSource+0x13a>
 800329c:	2b40      	cmp	r3, #64	; 0x40
 800329e:	d86f      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 80032a0:	2b30      	cmp	r3, #48	; 0x30
 80032a2:	d064      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x15a>
 80032a4:	2b30      	cmp	r3, #48	; 0x30
 80032a6:	d86b      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d060      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x15a>
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d867      	bhi.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05c      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x15a>
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d05a      	beq.n	800336e <HAL_TIM_ConfigClockSource+0x15a>
 80032b8:	e062      	b.n	8003380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f000 fc87 	bl	8003bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	609a      	str	r2, [r3, #8]
      break;
 80032e6:	e04f      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6899      	ldr	r1, [r3, #8]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f000 fc70 	bl	8003bdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800330a:	609a      	str	r2, [r3, #8]
      break;
 800330c:	e03c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	461a      	mov	r2, r3
 800331c:	f000 fb2e 	bl	800397c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2150      	movs	r1, #80	; 0x50
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fc3d 	bl	8003ba6 <TIM_ITRx_SetConfig>
      break;
 800332c:	e02c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6859      	ldr	r1, [r3, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	461a      	mov	r2, r3
 800333c:	f000 fb8a 	bl	8003a54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2160      	movs	r1, #96	; 0x60
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fc2d 	bl	8003ba6 <TIM_ITRx_SetConfig>
      break;
 800334c:	e01c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	461a      	mov	r2, r3
 800335c:	f000 fb0e 	bl	800397c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2140      	movs	r1, #64	; 0x40
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fc1d 	bl	8003ba6 <TIM_ITRx_SetConfig>
      break;
 800336c:	e00c      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f000 fc14 	bl	8003ba6 <TIM_ITRx_SetConfig>
      break;
 800337e:	e003      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e000      	b.n	8003388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003398:	7bfb      	ldrb	r3, [r7, #15]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a40      	ldr	r2, [pc, #256]	; (8003508 <TIM_Base_SetConfig+0x114>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003412:	d00f      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3d      	ldr	r2, [pc, #244]	; (800350c <TIM_Base_SetConfig+0x118>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00b      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3c      	ldr	r2, [pc, #240]	; (8003510 <TIM_Base_SetConfig+0x11c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a3b      	ldr	r2, [pc, #236]	; (8003514 <TIM_Base_SetConfig+0x120>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3a      	ldr	r2, [pc, #232]	; (8003518 <TIM_Base_SetConfig+0x124>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d108      	bne.n	8003446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2f      	ldr	r2, [pc, #188]	; (8003508 <TIM_Base_SetConfig+0x114>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d02b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d027      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2c      	ldr	r2, [pc, #176]	; (800350c <TIM_Base_SetConfig+0x118>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d023      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2b      	ldr	r2, [pc, #172]	; (8003510 <TIM_Base_SetConfig+0x11c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01f      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2a      	ldr	r2, [pc, #168]	; (8003514 <TIM_Base_SetConfig+0x120>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a29      	ldr	r2, [pc, #164]	; (8003518 <TIM_Base_SetConfig+0x124>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d017      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a28      	ldr	r2, [pc, #160]	; (800351c <TIM_Base_SetConfig+0x128>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <TIM_Base_SetConfig+0x12c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00f      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a26      	ldr	r2, [pc, #152]	; (8003524 <TIM_Base_SetConfig+0x130>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a25      	ldr	r2, [pc, #148]	; (8003528 <TIM_Base_SetConfig+0x134>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d007      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <TIM_Base_SetConfig+0x138>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a23      	ldr	r2, [pc, #140]	; (8003530 <TIM_Base_SetConfig+0x13c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <TIM_Base_SetConfig+0x114>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d003      	beq.n	80034ec <TIM_Base_SetConfig+0xf8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <TIM_Base_SetConfig+0x124>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	615a      	str	r2, [r3, #20]
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40010000 	.word	0x40010000
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800
 8003514:	40000c00 	.word	0x40000c00
 8003518:	40010400 	.word	0x40010400
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400
 8003524:	40014800 	.word	0x40014800
 8003528:	40001800 	.word	0x40001800
 800352c:	40001c00 	.word	0x40001c00
 8003530:	40002000 	.word	0x40002000

08003534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0201 	bic.w	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0303 	bic.w	r3, r3, #3
 800356a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 0302 	bic.w	r3, r3, #2
 800357c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a20      	ldr	r2, [pc, #128]	; (800360c <TIM_OC1_SetConfig+0xd8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d003      	beq.n	8003598 <TIM_OC1_SetConfig+0x64>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <TIM_OC1_SetConfig+0xdc>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d10c      	bne.n	80035b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f023 0308 	bic.w	r3, r3, #8
 800359e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a15      	ldr	r2, [pc, #84]	; (800360c <TIM_OC1_SetConfig+0xd8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_OC1_SetConfig+0x8e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a14      	ldr	r2, [pc, #80]	; (8003610 <TIM_OC1_SetConfig+0xdc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d111      	bne.n	80035e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	621a      	str	r2, [r3, #32]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40010000 	.word	0x40010000
 8003610:	40010400 	.word	0x40010400

08003614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f023 0210 	bic.w	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0320 	bic.w	r3, r3, #32
 800365e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <TIM_OC2_SetConfig+0xe4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_OC2_SetConfig+0x68>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <TIM_OC2_SetConfig+0xe8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10d      	bne.n	8003698 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003696:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a17      	ldr	r2, [pc, #92]	; (80036f8 <TIM_OC2_SetConfig+0xe4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_OC2_SetConfig+0x94>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a16      	ldr	r2, [pc, #88]	; (80036fc <TIM_OC2_SetConfig+0xe8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d113      	bne.n	80036d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40010400 	.word	0x40010400

08003700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a21      	ldr	r2, [pc, #132]	; (80037e0 <TIM_OC3_SetConfig+0xe0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_OC3_SetConfig+0x66>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a20      	ldr	r2, [pc, #128]	; (80037e4 <TIM_OC3_SetConfig+0xe4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10d      	bne.n	8003782 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800376c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <TIM_OC3_SetConfig+0xe0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC3_SetConfig+0x92>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a15      	ldr	r2, [pc, #84]	; (80037e4 <TIM_OC3_SetConfig+0xe4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d113      	bne.n	80037ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010400 	.word	0x40010400

080037e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	031b      	lsls	r3, r3, #12
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <TIM_OC4_SetConfig+0xa4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_OC4_SetConfig+0x68>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a11      	ldr	r2, [pc, #68]	; (8003890 <TIM_OC4_SetConfig+0xa8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d109      	bne.n	8003864 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	019b      	lsls	r3, r3, #6
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40010400 	.word	0x40010400

08003894 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f023 0201 	bic.w	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a28      	ldr	r2, [pc, #160]	; (8003960 <TIM_TI1_SetConfig+0xcc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01b      	beq.n	80038fa <TIM_TI1_SetConfig+0x66>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c8:	d017      	beq.n	80038fa <TIM_TI1_SetConfig+0x66>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a25      	ldr	r2, [pc, #148]	; (8003964 <TIM_TI1_SetConfig+0xd0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <TIM_TI1_SetConfig+0x66>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4a24      	ldr	r2, [pc, #144]	; (8003968 <TIM_TI1_SetConfig+0xd4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00f      	beq.n	80038fa <TIM_TI1_SetConfig+0x66>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a23      	ldr	r2, [pc, #140]	; (800396c <TIM_TI1_SetConfig+0xd8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00b      	beq.n	80038fa <TIM_TI1_SetConfig+0x66>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a22      	ldr	r2, [pc, #136]	; (8003970 <TIM_TI1_SetConfig+0xdc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d007      	beq.n	80038fa <TIM_TI1_SetConfig+0x66>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a21      	ldr	r2, [pc, #132]	; (8003974 <TIM_TI1_SetConfig+0xe0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d003      	beq.n	80038fa <TIM_TI1_SetConfig+0x66>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a20      	ldr	r2, [pc, #128]	; (8003978 <TIM_TI1_SetConfig+0xe4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <TIM_TI1_SetConfig+0x6a>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <TIM_TI1_SetConfig+0x6c>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e003      	b.n	800391e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	b2db      	uxtb	r3, r3
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f023 030a 	bic.w	r3, r3, #10
 8003938:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 030a 	and.w	r3, r3, #10
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	621a      	str	r2, [r3, #32]
}
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40010400 	.word	0x40010400
 8003974:	40014000 	.word	0x40014000
 8003978:	40001800 	.word	0x40001800

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039da:	b480      	push	{r7}
 80039dc:	b087      	sub	sp, #28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f023 0210 	bic.w	r2, r3, #16
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	031b      	lsls	r3, r3, #12
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	621a      	str	r2, [r3, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	371c      	adds	r7, #28
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f023 0210 	bic.w	r2, r3, #16
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	031b      	lsls	r3, r3, #12
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	621a      	str	r2, [r3, #32]
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 0303 	bic.w	r3, r3, #3
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003b04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	621a      	str	r2, [r3, #32]
}
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	031b      	lsls	r3, r3, #12
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003b7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	031b      	lsls	r3, r3, #12
 8003b84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	621a      	str	r2, [r3, #32]
}
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f043 0307 	orr.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	2201      	movs	r2, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	431a      	orrs	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e05a      	b.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a21      	ldr	r2, [pc, #132]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ccc:	d01d      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d013      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a17      	ldr	r2, [pc, #92]	; (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10c      	bne.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800
 8003d50:	40000c00 	.word	0x40000c00
 8003d54:	40010400 	.word	0x40010400
 8003d58:	40014000 	.word	0x40014000
 8003d5c:	40001800 	.word	0x40001800

08003d60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e03d      	b.n	8003df8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e03f      	b.n	8003ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fad2 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	; 0x24
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f9cb 	bl	800420c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08a      	sub	sp, #40	; 0x28
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d17c      	bne.n	8003fe0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <HAL_UART_Transmit+0x2c>
 8003eec:	88fb      	ldrh	r3, [r7, #6]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e075      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Transmit+0x3e>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e06e      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2221      	movs	r2, #33	; 0x21
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f1a:	f7fd fbc3 	bl	80016a4 <HAL_GetTick>
 8003f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	88fa      	ldrh	r2, [r7, #6]
 8003f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d108      	bne.n	8003f48 <HAL_UART_Transmit+0x82>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	e003      	b.n	8003f50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f58:	e02a      	b.n	8003fb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f8e2 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e036      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	61bb      	str	r3, [r7, #24]
 8003f90:	e007      	b.n	8003fa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1cf      	bne.n	8003f5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2140      	movs	r1, #64	; 0x40
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f8b2 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e006      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b08a      	sub	sp, #40	; 0x28
 8003fee:	af02      	add	r7, sp, #8
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b20      	cmp	r3, #32
 8004008:	f040 808c 	bne.w	8004124 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_UART_Receive+0x2e>
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e084      	b.n	8004126 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_UART_Receive+0x40>
 8004026:	2302      	movs	r3, #2
 8004028:	e07d      	b.n	8004126 <HAL_UART_Receive+0x13c>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2222      	movs	r2, #34	; 0x22
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004046:	f7fd fb2d 	bl	80016a4 <HAL_GetTick>
 800404a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004060:	d108      	bne.n	8004074 <HAL_UART_Receive+0x8a>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004084:	e043      	b.n	800410e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	2120      	movs	r1, #32
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f84c 	bl	800412e <UART_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e042      	b.n	8004126 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10c      	bne.n	80040c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	3302      	adds	r3, #2
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	e01f      	b.n	8004100 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c8:	d007      	beq.n	80040da <HAL_UART_Receive+0xf0>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <HAL_UART_Receive+0xfe>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e008      	b.n	80040fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1b6      	bne.n	8004086 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b090      	sub	sp, #64	; 0x40
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	4613      	mov	r3, r2
 800413c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413e:	e050      	b.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004146:	d04c      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0x30>
 800414e:	f7fd faa9 	bl	80016a4 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800415a:	429a      	cmp	r2, r3
 800415c:	d241      	bcs.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800417e:	637a      	str	r2, [r7, #52]	; 0x34
 8004180:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	613b      	str	r3, [r7, #16]
   return(result);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041b2:	623a      	str	r2, [r7, #32]
 80041b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	69f9      	ldr	r1, [r7, #28]
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	61bb      	str	r3, [r7, #24]
   return(result);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e00f      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d09f      	beq.n	8004140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3740      	adds	r7, #64	; 0x40
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800420c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004210:	b0c0      	sub	sp, #256	; 0x100
 8004212:	af00      	add	r7, sp, #0
 8004214:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	68d9      	ldr	r1, [r3, #12]
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	ea40 0301 	orr.w	r3, r0, r1
 8004234:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	431a      	orrs	r2, r3
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	431a      	orrs	r2, r3
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004264:	f021 010c 	bic.w	r1, r1, #12
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004272:	430b      	orrs	r3, r1
 8004274:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004286:	6999      	ldr	r1, [r3, #24]
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	ea40 0301 	orr.w	r3, r0, r1
 8004292:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b8f      	ldr	r3, [pc, #572]	; (80044d8 <UART_SetConfig+0x2cc>)
 800429c:	429a      	cmp	r2, r3
 800429e:	d005      	beq.n	80042ac <UART_SetConfig+0xa0>
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4b8d      	ldr	r3, [pc, #564]	; (80044dc <UART_SetConfig+0x2d0>)
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d104      	bne.n	80042b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042ac:	f7fd fe08 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 80042b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042b4:	e003      	b.n	80042be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042b6:	f7fd fdef 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 80042ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c8:	f040 810c 	bne.w	80044e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042de:	4622      	mov	r2, r4
 80042e0:	462b      	mov	r3, r5
 80042e2:	1891      	adds	r1, r2, r2
 80042e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80042e6:	415b      	adcs	r3, r3
 80042e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042ee:	4621      	mov	r1, r4
 80042f0:	eb12 0801 	adds.w	r8, r2, r1
 80042f4:	4629      	mov	r1, r5
 80042f6:	eb43 0901 	adc.w	r9, r3, r1
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430e:	4690      	mov	r8, r2
 8004310:	4699      	mov	r9, r3
 8004312:	4623      	mov	r3, r4
 8004314:	eb18 0303 	adds.w	r3, r8, r3
 8004318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800431c:	462b      	mov	r3, r5
 800431e:	eb49 0303 	adc.w	r3, r9, r3
 8004322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004332:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004336:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800433a:	460b      	mov	r3, r1
 800433c:	18db      	adds	r3, r3, r3
 800433e:	653b      	str	r3, [r7, #80]	; 0x50
 8004340:	4613      	mov	r3, r2
 8004342:	eb42 0303 	adc.w	r3, r2, r3
 8004346:	657b      	str	r3, [r7, #84]	; 0x54
 8004348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800434c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004350:	f7fb ffb6 	bl	80002c0 <__aeabi_uldivmod>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	4b61      	ldr	r3, [pc, #388]	; (80044e0 <UART_SetConfig+0x2d4>)
 800435a:	fba3 2302 	umull	r2, r3, r3, r2
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	011c      	lsls	r4, r3, #4
 8004362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800436c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004370:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004374:	4642      	mov	r2, r8
 8004376:	464b      	mov	r3, r9
 8004378:	1891      	adds	r1, r2, r2
 800437a:	64b9      	str	r1, [r7, #72]	; 0x48
 800437c:	415b      	adcs	r3, r3
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004380:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004384:	4641      	mov	r1, r8
 8004386:	eb12 0a01 	adds.w	sl, r2, r1
 800438a:	4649      	mov	r1, r9
 800438c:	eb43 0b01 	adc.w	fp, r3, r1
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800439c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a4:	4692      	mov	sl, r2
 80043a6:	469b      	mov	fp, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	eb1a 0303 	adds.w	r3, sl, r3
 80043ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043b2:	464b      	mov	r3, r9
 80043b4:	eb4b 0303 	adc.w	r3, fp, r3
 80043b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043d0:	460b      	mov	r3, r1
 80043d2:	18db      	adds	r3, r3, r3
 80043d4:	643b      	str	r3, [r7, #64]	; 0x40
 80043d6:	4613      	mov	r3, r2
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	647b      	str	r3, [r7, #68]	; 0x44
 80043de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043e6:	f7fb ff6b 	bl	80002c0 <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <UART_SetConfig+0x2d4>)
 80043f2:	fba3 2301 	umull	r2, r3, r3, r1
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2264      	movs	r2, #100	; 0x64
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	1acb      	subs	r3, r1, r3
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <UART_SetConfig+0x2d4>)
 8004408:	fba3 2302 	umull	r2, r3, r3, r2
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004414:	441c      	add	r4, r3
 8004416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004420:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004424:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	1891      	adds	r1, r2, r2
 800442e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004430:	415b      	adcs	r3, r3
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004434:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004438:	4641      	mov	r1, r8
 800443a:	1851      	adds	r1, r2, r1
 800443c:	6339      	str	r1, [r7, #48]	; 0x30
 800443e:	4649      	mov	r1, r9
 8004440:	414b      	adcs	r3, r1
 8004442:	637b      	str	r3, [r7, #52]	; 0x34
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004450:	4659      	mov	r1, fp
 8004452:	00cb      	lsls	r3, r1, #3
 8004454:	4651      	mov	r1, sl
 8004456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445a:	4651      	mov	r1, sl
 800445c:	00ca      	lsls	r2, r1, #3
 800445e:	4610      	mov	r0, r2
 8004460:	4619      	mov	r1, r3
 8004462:	4603      	mov	r3, r0
 8004464:	4642      	mov	r2, r8
 8004466:	189b      	adds	r3, r3, r2
 8004468:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800446c:	464b      	mov	r3, r9
 800446e:	460a      	mov	r2, r1
 8004470:	eb42 0303 	adc.w	r3, r2, r3
 8004474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004484:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800448c:	460b      	mov	r3, r1
 800448e:	18db      	adds	r3, r3, r3
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
 8004492:	4613      	mov	r3, r2
 8004494:	eb42 0303 	adc.w	r3, r2, r3
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800449e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044a2:	f7fb ff0d 	bl	80002c0 <__aeabi_uldivmod>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <UART_SetConfig+0x2d4>)
 80044ac:	fba3 1302 	umull	r1, r3, r3, r2
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	2164      	movs	r1, #100	; 0x64
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	3332      	adds	r3, #50	; 0x32
 80044be:	4a08      	ldr	r2, [pc, #32]	; (80044e0 <UART_SetConfig+0x2d4>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	f003 0207 	and.w	r2, r3, #7
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4422      	add	r2, r4
 80044d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044d4:	e105      	b.n	80046e2 <UART_SetConfig+0x4d6>
 80044d6:	bf00      	nop
 80044d8:	40011000 	.word	0x40011000
 80044dc:	40011400 	.word	0x40011400
 80044e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044f6:	4642      	mov	r2, r8
 80044f8:	464b      	mov	r3, r9
 80044fa:	1891      	adds	r1, r2, r2
 80044fc:	6239      	str	r1, [r7, #32]
 80044fe:	415b      	adcs	r3, r3
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
 8004502:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004506:	4641      	mov	r1, r8
 8004508:	1854      	adds	r4, r2, r1
 800450a:	4649      	mov	r1, r9
 800450c:	eb43 0501 	adc.w	r5, r3, r1
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	00eb      	lsls	r3, r5, #3
 800451a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800451e:	00e2      	lsls	r2, r4, #3
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	4643      	mov	r3, r8
 8004526:	18e3      	adds	r3, r4, r3
 8004528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800452c:	464b      	mov	r3, r9
 800452e:	eb45 0303 	adc.w	r3, r5, r3
 8004532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004542:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004552:	4629      	mov	r1, r5
 8004554:	008b      	lsls	r3, r1, #2
 8004556:	4621      	mov	r1, r4
 8004558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455c:	4621      	mov	r1, r4
 800455e:	008a      	lsls	r2, r1, #2
 8004560:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004564:	f7fb feac 	bl	80002c0 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4b60      	ldr	r3, [pc, #384]	; (80046f0 <UART_SetConfig+0x4e4>)
 800456e:	fba3 2302 	umull	r2, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	011c      	lsls	r4, r3, #4
 8004576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800457a:	2200      	movs	r2, #0
 800457c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004580:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004584:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004588:	4642      	mov	r2, r8
 800458a:	464b      	mov	r3, r9
 800458c:	1891      	adds	r1, r2, r2
 800458e:	61b9      	str	r1, [r7, #24]
 8004590:	415b      	adcs	r3, r3
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004598:	4641      	mov	r1, r8
 800459a:	1851      	adds	r1, r2, r1
 800459c:	6139      	str	r1, [r7, #16]
 800459e:	4649      	mov	r1, r9
 80045a0:	414b      	adcs	r3, r1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b0:	4659      	mov	r1, fp
 80045b2:	00cb      	lsls	r3, r1, #3
 80045b4:	4651      	mov	r1, sl
 80045b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ba:	4651      	mov	r1, sl
 80045bc:	00ca      	lsls	r2, r1, #3
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	4642      	mov	r2, r8
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045cc:	464b      	mov	r3, r9
 80045ce:	460a      	mov	r2, r1
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80045e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045f0:	4649      	mov	r1, r9
 80045f2:	008b      	lsls	r3, r1, #2
 80045f4:	4641      	mov	r1, r8
 80045f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fa:	4641      	mov	r1, r8
 80045fc:	008a      	lsls	r2, r1, #2
 80045fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004602:	f7fb fe5d 	bl	80002c0 <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <UART_SetConfig+0x4e4>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	; 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	3332      	adds	r3, #50	; 0x32
 800461e:	4a34      	ldr	r2, [pc, #208]	; (80046f0 <UART_SetConfig+0x4e4>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800462a:	441c      	add	r4, r3
 800462c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004630:	2200      	movs	r2, #0
 8004632:	673b      	str	r3, [r7, #112]	; 0x70
 8004634:	677a      	str	r2, [r7, #116]	; 0x74
 8004636:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800463a:	4642      	mov	r2, r8
 800463c:	464b      	mov	r3, r9
 800463e:	1891      	adds	r1, r2, r2
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	415b      	adcs	r3, r3
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800464a:	4641      	mov	r1, r8
 800464c:	1851      	adds	r1, r2, r1
 800464e:	6039      	str	r1, [r7, #0]
 8004650:	4649      	mov	r1, r9
 8004652:	414b      	adcs	r3, r1
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004662:	4659      	mov	r1, fp
 8004664:	00cb      	lsls	r3, r1, #3
 8004666:	4651      	mov	r1, sl
 8004668:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800466c:	4651      	mov	r1, sl
 800466e:	00ca      	lsls	r2, r1, #3
 8004670:	4610      	mov	r0, r2
 8004672:	4619      	mov	r1, r3
 8004674:	4603      	mov	r3, r0
 8004676:	4642      	mov	r2, r8
 8004678:	189b      	adds	r3, r3, r2
 800467a:	66bb      	str	r3, [r7, #104]	; 0x68
 800467c:	464b      	mov	r3, r9
 800467e:	460a      	mov	r2, r1
 8004680:	eb42 0303 	adc.w	r3, r2, r3
 8004684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	663b      	str	r3, [r7, #96]	; 0x60
 8004690:	667a      	str	r2, [r7, #100]	; 0x64
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800469e:	4649      	mov	r1, r9
 80046a0:	008b      	lsls	r3, r1, #2
 80046a2:	4641      	mov	r1, r8
 80046a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a8:	4641      	mov	r1, r8
 80046aa:	008a      	lsls	r2, r1, #2
 80046ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046b0:	f7fb fe06 	bl	80002c0 <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <UART_SetConfig+0x4e4>)
 80046ba:	fba3 1302 	umull	r1, r3, r3, r2
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2164      	movs	r1, #100	; 0x64
 80046c2:	fb01 f303 	mul.w	r3, r1, r3
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	3332      	adds	r3, #50	; 0x32
 80046cc:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <UART_SetConfig+0x4e4>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	f003 020f 	and.w	r2, r3, #15
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4422      	add	r2, r4
 80046e0:	609a      	str	r2, [r3, #8]
}
 80046e2:	bf00      	nop
 80046e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046e8:	46bd      	mov	sp, r7
 80046ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ee:	bf00      	nop
 80046f0:	51eb851f 	.word	0x51eb851f

080046f4 <__errno>:
 80046f4:	4b01      	ldr	r3, [pc, #4]	; (80046fc <__errno+0x8>)
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	2000000c 	.word	0x2000000c

08004700 <__libc_init_array>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4d0d      	ldr	r5, [pc, #52]	; (8004738 <__libc_init_array+0x38>)
 8004704:	4c0d      	ldr	r4, [pc, #52]	; (800473c <__libc_init_array+0x3c>)
 8004706:	1b64      	subs	r4, r4, r5
 8004708:	10a4      	asrs	r4, r4, #2
 800470a:	2600      	movs	r6, #0
 800470c:	42a6      	cmp	r6, r4
 800470e:	d109      	bne.n	8004724 <__libc_init_array+0x24>
 8004710:	4d0b      	ldr	r5, [pc, #44]	; (8004740 <__libc_init_array+0x40>)
 8004712:	4c0c      	ldr	r4, [pc, #48]	; (8004744 <__libc_init_array+0x44>)
 8004714:	f000 fc8e 	bl	8005034 <_init>
 8004718:	1b64      	subs	r4, r4, r5
 800471a:	10a4      	asrs	r4, r4, #2
 800471c:	2600      	movs	r6, #0
 800471e:	42a6      	cmp	r6, r4
 8004720:	d105      	bne.n	800472e <__libc_init_array+0x2e>
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	f855 3b04 	ldr.w	r3, [r5], #4
 8004728:	4798      	blx	r3
 800472a:	3601      	adds	r6, #1
 800472c:	e7ee      	b.n	800470c <__libc_init_array+0xc>
 800472e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004732:	4798      	blx	r3
 8004734:	3601      	adds	r6, #1
 8004736:	e7f2      	b.n	800471e <__libc_init_array+0x1e>
 8004738:	0800512c 	.word	0x0800512c
 800473c:	0800512c 	.word	0x0800512c
 8004740:	0800512c 	.word	0x0800512c
 8004744:	08005130 	.word	0x08005130

08004748 <memset>:
 8004748:	4402      	add	r2, r0
 800474a:	4603      	mov	r3, r0
 800474c:	4293      	cmp	r3, r2
 800474e:	d100      	bne.n	8004752 <memset+0xa>
 8004750:	4770      	bx	lr
 8004752:	f803 1b01 	strb.w	r1, [r3], #1
 8004756:	e7f9      	b.n	800474c <memset+0x4>

08004758 <siprintf>:
 8004758:	b40e      	push	{r1, r2, r3}
 800475a:	b500      	push	{lr}
 800475c:	b09c      	sub	sp, #112	; 0x70
 800475e:	ab1d      	add	r3, sp, #116	; 0x74
 8004760:	9002      	str	r0, [sp, #8]
 8004762:	9006      	str	r0, [sp, #24]
 8004764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004768:	4809      	ldr	r0, [pc, #36]	; (8004790 <siprintf+0x38>)
 800476a:	9107      	str	r1, [sp, #28]
 800476c:	9104      	str	r1, [sp, #16]
 800476e:	4909      	ldr	r1, [pc, #36]	; (8004794 <siprintf+0x3c>)
 8004770:	f853 2b04 	ldr.w	r2, [r3], #4
 8004774:	9105      	str	r1, [sp, #20]
 8004776:	6800      	ldr	r0, [r0, #0]
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	a902      	add	r1, sp, #8
 800477c:	f000 f868 	bl	8004850 <_svfiprintf_r>
 8004780:	9b02      	ldr	r3, [sp, #8]
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	b01c      	add	sp, #112	; 0x70
 8004788:	f85d eb04 	ldr.w	lr, [sp], #4
 800478c:	b003      	add	sp, #12
 800478e:	4770      	bx	lr
 8004790:	2000000c 	.word	0x2000000c
 8004794:	ffff0208 	.word	0xffff0208

08004798 <__ssputs_r>:
 8004798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800479c:	688e      	ldr	r6, [r1, #8]
 800479e:	429e      	cmp	r6, r3
 80047a0:	4682      	mov	sl, r0
 80047a2:	460c      	mov	r4, r1
 80047a4:	4690      	mov	r8, r2
 80047a6:	461f      	mov	r7, r3
 80047a8:	d838      	bhi.n	800481c <__ssputs_r+0x84>
 80047aa:	898a      	ldrh	r2, [r1, #12]
 80047ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047b0:	d032      	beq.n	8004818 <__ssputs_r+0x80>
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	6909      	ldr	r1, [r1, #16]
 80047b6:	eba5 0901 	sub.w	r9, r5, r1
 80047ba:	6965      	ldr	r5, [r4, #20]
 80047bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047c4:	3301      	adds	r3, #1
 80047c6:	444b      	add	r3, r9
 80047c8:	106d      	asrs	r5, r5, #1
 80047ca:	429d      	cmp	r5, r3
 80047cc:	bf38      	it	cc
 80047ce:	461d      	movcc	r5, r3
 80047d0:	0553      	lsls	r3, r2, #21
 80047d2:	d531      	bpl.n	8004838 <__ssputs_r+0xa0>
 80047d4:	4629      	mov	r1, r5
 80047d6:	f000 fb63 	bl	8004ea0 <_malloc_r>
 80047da:	4606      	mov	r6, r0
 80047dc:	b950      	cbnz	r0, 80047f4 <__ssputs_r+0x5c>
 80047de:	230c      	movs	r3, #12
 80047e0:	f8ca 3000 	str.w	r3, [sl]
 80047e4:	89a3      	ldrh	r3, [r4, #12]
 80047e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ea:	81a3      	strh	r3, [r4, #12]
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f4:	6921      	ldr	r1, [r4, #16]
 80047f6:	464a      	mov	r2, r9
 80047f8:	f000 fabe 	bl	8004d78 <memcpy>
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004806:	81a3      	strh	r3, [r4, #12]
 8004808:	6126      	str	r6, [r4, #16]
 800480a:	6165      	str	r5, [r4, #20]
 800480c:	444e      	add	r6, r9
 800480e:	eba5 0509 	sub.w	r5, r5, r9
 8004812:	6026      	str	r6, [r4, #0]
 8004814:	60a5      	str	r5, [r4, #8]
 8004816:	463e      	mov	r6, r7
 8004818:	42be      	cmp	r6, r7
 800481a:	d900      	bls.n	800481e <__ssputs_r+0x86>
 800481c:	463e      	mov	r6, r7
 800481e:	6820      	ldr	r0, [r4, #0]
 8004820:	4632      	mov	r2, r6
 8004822:	4641      	mov	r1, r8
 8004824:	f000 fab6 	bl	8004d94 <memmove>
 8004828:	68a3      	ldr	r3, [r4, #8]
 800482a:	1b9b      	subs	r3, r3, r6
 800482c:	60a3      	str	r3, [r4, #8]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	4433      	add	r3, r6
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	2000      	movs	r0, #0
 8004836:	e7db      	b.n	80047f0 <__ssputs_r+0x58>
 8004838:	462a      	mov	r2, r5
 800483a:	f000 fba5 	bl	8004f88 <_realloc_r>
 800483e:	4606      	mov	r6, r0
 8004840:	2800      	cmp	r0, #0
 8004842:	d1e1      	bne.n	8004808 <__ssputs_r+0x70>
 8004844:	6921      	ldr	r1, [r4, #16]
 8004846:	4650      	mov	r0, sl
 8004848:	f000 fabe 	bl	8004dc8 <_free_r>
 800484c:	e7c7      	b.n	80047de <__ssputs_r+0x46>
	...

08004850 <_svfiprintf_r>:
 8004850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004854:	4698      	mov	r8, r3
 8004856:	898b      	ldrh	r3, [r1, #12]
 8004858:	061b      	lsls	r3, r3, #24
 800485a:	b09d      	sub	sp, #116	; 0x74
 800485c:	4607      	mov	r7, r0
 800485e:	460d      	mov	r5, r1
 8004860:	4614      	mov	r4, r2
 8004862:	d50e      	bpl.n	8004882 <_svfiprintf_r+0x32>
 8004864:	690b      	ldr	r3, [r1, #16]
 8004866:	b963      	cbnz	r3, 8004882 <_svfiprintf_r+0x32>
 8004868:	2140      	movs	r1, #64	; 0x40
 800486a:	f000 fb19 	bl	8004ea0 <_malloc_r>
 800486e:	6028      	str	r0, [r5, #0]
 8004870:	6128      	str	r0, [r5, #16]
 8004872:	b920      	cbnz	r0, 800487e <_svfiprintf_r+0x2e>
 8004874:	230c      	movs	r3, #12
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	e0d1      	b.n	8004a22 <_svfiprintf_r+0x1d2>
 800487e:	2340      	movs	r3, #64	; 0x40
 8004880:	616b      	str	r3, [r5, #20]
 8004882:	2300      	movs	r3, #0
 8004884:	9309      	str	r3, [sp, #36]	; 0x24
 8004886:	2320      	movs	r3, #32
 8004888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800488c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004890:	2330      	movs	r3, #48	; 0x30
 8004892:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a3c <_svfiprintf_r+0x1ec>
 8004896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800489a:	f04f 0901 	mov.w	r9, #1
 800489e:	4623      	mov	r3, r4
 80048a0:	469a      	mov	sl, r3
 80048a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048a6:	b10a      	cbz	r2, 80048ac <_svfiprintf_r+0x5c>
 80048a8:	2a25      	cmp	r2, #37	; 0x25
 80048aa:	d1f9      	bne.n	80048a0 <_svfiprintf_r+0x50>
 80048ac:	ebba 0b04 	subs.w	fp, sl, r4
 80048b0:	d00b      	beq.n	80048ca <_svfiprintf_r+0x7a>
 80048b2:	465b      	mov	r3, fp
 80048b4:	4622      	mov	r2, r4
 80048b6:	4629      	mov	r1, r5
 80048b8:	4638      	mov	r0, r7
 80048ba:	f7ff ff6d 	bl	8004798 <__ssputs_r>
 80048be:	3001      	adds	r0, #1
 80048c0:	f000 80aa 	beq.w	8004a18 <_svfiprintf_r+0x1c8>
 80048c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c6:	445a      	add	r2, fp
 80048c8:	9209      	str	r2, [sp, #36]	; 0x24
 80048ca:	f89a 3000 	ldrb.w	r3, [sl]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80a2 	beq.w	8004a18 <_svfiprintf_r+0x1c8>
 80048d4:	2300      	movs	r3, #0
 80048d6:	f04f 32ff 	mov.w	r2, #4294967295
 80048da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048de:	f10a 0a01 	add.w	sl, sl, #1
 80048e2:	9304      	str	r3, [sp, #16]
 80048e4:	9307      	str	r3, [sp, #28]
 80048e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048ea:	931a      	str	r3, [sp, #104]	; 0x68
 80048ec:	4654      	mov	r4, sl
 80048ee:	2205      	movs	r2, #5
 80048f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048f4:	4851      	ldr	r0, [pc, #324]	; (8004a3c <_svfiprintf_r+0x1ec>)
 80048f6:	f7fb fc93 	bl	8000220 <memchr>
 80048fa:	9a04      	ldr	r2, [sp, #16]
 80048fc:	b9d8      	cbnz	r0, 8004936 <_svfiprintf_r+0xe6>
 80048fe:	06d0      	lsls	r0, r2, #27
 8004900:	bf44      	itt	mi
 8004902:	2320      	movmi	r3, #32
 8004904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004908:	0711      	lsls	r1, r2, #28
 800490a:	bf44      	itt	mi
 800490c:	232b      	movmi	r3, #43	; 0x2b
 800490e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004912:	f89a 3000 	ldrb.w	r3, [sl]
 8004916:	2b2a      	cmp	r3, #42	; 0x2a
 8004918:	d015      	beq.n	8004946 <_svfiprintf_r+0xf6>
 800491a:	9a07      	ldr	r2, [sp, #28]
 800491c:	4654      	mov	r4, sl
 800491e:	2000      	movs	r0, #0
 8004920:	f04f 0c0a 	mov.w	ip, #10
 8004924:	4621      	mov	r1, r4
 8004926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800492a:	3b30      	subs	r3, #48	; 0x30
 800492c:	2b09      	cmp	r3, #9
 800492e:	d94e      	bls.n	80049ce <_svfiprintf_r+0x17e>
 8004930:	b1b0      	cbz	r0, 8004960 <_svfiprintf_r+0x110>
 8004932:	9207      	str	r2, [sp, #28]
 8004934:	e014      	b.n	8004960 <_svfiprintf_r+0x110>
 8004936:	eba0 0308 	sub.w	r3, r0, r8
 800493a:	fa09 f303 	lsl.w	r3, r9, r3
 800493e:	4313      	orrs	r3, r2
 8004940:	9304      	str	r3, [sp, #16]
 8004942:	46a2      	mov	sl, r4
 8004944:	e7d2      	b.n	80048ec <_svfiprintf_r+0x9c>
 8004946:	9b03      	ldr	r3, [sp, #12]
 8004948:	1d19      	adds	r1, r3, #4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	9103      	str	r1, [sp, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfbb      	ittet	lt
 8004952:	425b      	neglt	r3, r3
 8004954:	f042 0202 	orrlt.w	r2, r2, #2
 8004958:	9307      	strge	r3, [sp, #28]
 800495a:	9307      	strlt	r3, [sp, #28]
 800495c:	bfb8      	it	lt
 800495e:	9204      	strlt	r2, [sp, #16]
 8004960:	7823      	ldrb	r3, [r4, #0]
 8004962:	2b2e      	cmp	r3, #46	; 0x2e
 8004964:	d10c      	bne.n	8004980 <_svfiprintf_r+0x130>
 8004966:	7863      	ldrb	r3, [r4, #1]
 8004968:	2b2a      	cmp	r3, #42	; 0x2a
 800496a:	d135      	bne.n	80049d8 <_svfiprintf_r+0x188>
 800496c:	9b03      	ldr	r3, [sp, #12]
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	9203      	str	r2, [sp, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	bfb8      	it	lt
 8004978:	f04f 33ff 	movlt.w	r3, #4294967295
 800497c:	3402      	adds	r4, #2
 800497e:	9305      	str	r3, [sp, #20]
 8004980:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a4c <_svfiprintf_r+0x1fc>
 8004984:	7821      	ldrb	r1, [r4, #0]
 8004986:	2203      	movs	r2, #3
 8004988:	4650      	mov	r0, sl
 800498a:	f7fb fc49 	bl	8000220 <memchr>
 800498e:	b140      	cbz	r0, 80049a2 <_svfiprintf_r+0x152>
 8004990:	2340      	movs	r3, #64	; 0x40
 8004992:	eba0 000a 	sub.w	r0, r0, sl
 8004996:	fa03 f000 	lsl.w	r0, r3, r0
 800499a:	9b04      	ldr	r3, [sp, #16]
 800499c:	4303      	orrs	r3, r0
 800499e:	3401      	adds	r4, #1
 80049a0:	9304      	str	r3, [sp, #16]
 80049a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049a6:	4826      	ldr	r0, [pc, #152]	; (8004a40 <_svfiprintf_r+0x1f0>)
 80049a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ac:	2206      	movs	r2, #6
 80049ae:	f7fb fc37 	bl	8000220 <memchr>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d038      	beq.n	8004a28 <_svfiprintf_r+0x1d8>
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <_svfiprintf_r+0x1f4>)
 80049b8:	bb1b      	cbnz	r3, 8004a02 <_svfiprintf_r+0x1b2>
 80049ba:	9b03      	ldr	r3, [sp, #12]
 80049bc:	3307      	adds	r3, #7
 80049be:	f023 0307 	bic.w	r3, r3, #7
 80049c2:	3308      	adds	r3, #8
 80049c4:	9303      	str	r3, [sp, #12]
 80049c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c8:	4433      	add	r3, r6
 80049ca:	9309      	str	r3, [sp, #36]	; 0x24
 80049cc:	e767      	b.n	800489e <_svfiprintf_r+0x4e>
 80049ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80049d2:	460c      	mov	r4, r1
 80049d4:	2001      	movs	r0, #1
 80049d6:	e7a5      	b.n	8004924 <_svfiprintf_r+0xd4>
 80049d8:	2300      	movs	r3, #0
 80049da:	3401      	adds	r4, #1
 80049dc:	9305      	str	r3, [sp, #20]
 80049de:	4619      	mov	r1, r3
 80049e0:	f04f 0c0a 	mov.w	ip, #10
 80049e4:	4620      	mov	r0, r4
 80049e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ea:	3a30      	subs	r2, #48	; 0x30
 80049ec:	2a09      	cmp	r2, #9
 80049ee:	d903      	bls.n	80049f8 <_svfiprintf_r+0x1a8>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0c5      	beq.n	8004980 <_svfiprintf_r+0x130>
 80049f4:	9105      	str	r1, [sp, #20]
 80049f6:	e7c3      	b.n	8004980 <_svfiprintf_r+0x130>
 80049f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049fc:	4604      	mov	r4, r0
 80049fe:	2301      	movs	r3, #1
 8004a00:	e7f0      	b.n	80049e4 <_svfiprintf_r+0x194>
 8004a02:	ab03      	add	r3, sp, #12
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	462a      	mov	r2, r5
 8004a08:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <_svfiprintf_r+0x1f8>)
 8004a0a:	a904      	add	r1, sp, #16
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f3af 8000 	nop.w
 8004a12:	1c42      	adds	r2, r0, #1
 8004a14:	4606      	mov	r6, r0
 8004a16:	d1d6      	bne.n	80049c6 <_svfiprintf_r+0x176>
 8004a18:	89ab      	ldrh	r3, [r5, #12]
 8004a1a:	065b      	lsls	r3, r3, #25
 8004a1c:	f53f af2c 	bmi.w	8004878 <_svfiprintf_r+0x28>
 8004a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a22:	b01d      	add	sp, #116	; 0x74
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	ab03      	add	r3, sp, #12
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <_svfiprintf_r+0x1f8>)
 8004a30:	a904      	add	r1, sp, #16
 8004a32:	4638      	mov	r0, r7
 8004a34:	f000 f87a 	bl	8004b2c <_printf_i>
 8004a38:	e7eb      	b.n	8004a12 <_svfiprintf_r+0x1c2>
 8004a3a:	bf00      	nop
 8004a3c:	080050f0 	.word	0x080050f0
 8004a40:	080050fa 	.word	0x080050fa
 8004a44:	00000000 	.word	0x00000000
 8004a48:	08004799 	.word	0x08004799
 8004a4c:	080050f6 	.word	0x080050f6

08004a50 <_printf_common>:
 8004a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	4616      	mov	r6, r2
 8004a56:	4699      	mov	r9, r3
 8004a58:	688a      	ldr	r2, [r1, #8]
 8004a5a:	690b      	ldr	r3, [r1, #16]
 8004a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a60:	4293      	cmp	r3, r2
 8004a62:	bfb8      	it	lt
 8004a64:	4613      	movlt	r3, r2
 8004a66:	6033      	str	r3, [r6, #0]
 8004a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	b10a      	cbz	r2, 8004a76 <_printf_common+0x26>
 8004a72:	3301      	adds	r3, #1
 8004a74:	6033      	str	r3, [r6, #0]
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	0699      	lsls	r1, r3, #26
 8004a7a:	bf42      	ittt	mi
 8004a7c:	6833      	ldrmi	r3, [r6, #0]
 8004a7e:	3302      	addmi	r3, #2
 8004a80:	6033      	strmi	r3, [r6, #0]
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	f015 0506 	ands.w	r5, r5, #6
 8004a88:	d106      	bne.n	8004a98 <_printf_common+0x48>
 8004a8a:	f104 0a19 	add.w	sl, r4, #25
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	6832      	ldr	r2, [r6, #0]
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	42ab      	cmp	r3, r5
 8004a96:	dc26      	bgt.n	8004ae6 <_printf_common+0x96>
 8004a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a9c:	1e13      	subs	r3, r2, #0
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	bf18      	it	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	0692      	lsls	r2, r2, #26
 8004aa6:	d42b      	bmi.n	8004b00 <_printf_common+0xb0>
 8004aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aac:	4649      	mov	r1, r9
 8004aae:	4638      	mov	r0, r7
 8004ab0:	47c0      	blx	r8
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d01e      	beq.n	8004af4 <_printf_common+0xa4>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	68e5      	ldr	r5, [r4, #12]
 8004aba:	6832      	ldr	r2, [r6, #0]
 8004abc:	f003 0306 	and.w	r3, r3, #6
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	bf08      	it	eq
 8004ac4:	1aad      	subeq	r5, r5, r2
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	6922      	ldr	r2, [r4, #16]
 8004aca:	bf0c      	ite	eq
 8004acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad0:	2500      	movne	r5, #0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	bfc4      	itt	gt
 8004ad6:	1a9b      	subgt	r3, r3, r2
 8004ad8:	18ed      	addgt	r5, r5, r3
 8004ada:	2600      	movs	r6, #0
 8004adc:	341a      	adds	r4, #26
 8004ade:	42b5      	cmp	r5, r6
 8004ae0:	d11a      	bne.n	8004b18 <_printf_common+0xc8>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e008      	b.n	8004af8 <_printf_common+0xa8>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4652      	mov	r2, sl
 8004aea:	4649      	mov	r1, r9
 8004aec:	4638      	mov	r0, r7
 8004aee:	47c0      	blx	r8
 8004af0:	3001      	adds	r0, #1
 8004af2:	d103      	bne.n	8004afc <_printf_common+0xac>
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7c6      	b.n	8004a8e <_printf_common+0x3e>
 8004b00:	18e1      	adds	r1, r4, r3
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	2030      	movs	r0, #48	; 0x30
 8004b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b0a:	4422      	add	r2, r4
 8004b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b14:	3302      	adds	r3, #2
 8004b16:	e7c7      	b.n	8004aa8 <_printf_common+0x58>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4638      	mov	r0, r7
 8004b20:	47c0      	blx	r8
 8004b22:	3001      	adds	r0, #1
 8004b24:	d0e6      	beq.n	8004af4 <_printf_common+0xa4>
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7d9      	b.n	8004ade <_printf_common+0x8e>
	...

08004b2c <_printf_i>:
 8004b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	7e0f      	ldrb	r7, [r1, #24]
 8004b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b34:	2f78      	cmp	r7, #120	; 0x78
 8004b36:	4691      	mov	r9, r2
 8004b38:	4680      	mov	r8, r0
 8004b3a:	460c      	mov	r4, r1
 8004b3c:	469a      	mov	sl, r3
 8004b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b42:	d807      	bhi.n	8004b54 <_printf_i+0x28>
 8004b44:	2f62      	cmp	r7, #98	; 0x62
 8004b46:	d80a      	bhi.n	8004b5e <_printf_i+0x32>
 8004b48:	2f00      	cmp	r7, #0
 8004b4a:	f000 80d8 	beq.w	8004cfe <_printf_i+0x1d2>
 8004b4e:	2f58      	cmp	r7, #88	; 0x58
 8004b50:	f000 80a3 	beq.w	8004c9a <_printf_i+0x16e>
 8004b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b5c:	e03a      	b.n	8004bd4 <_printf_i+0xa8>
 8004b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b62:	2b15      	cmp	r3, #21
 8004b64:	d8f6      	bhi.n	8004b54 <_printf_i+0x28>
 8004b66:	a101      	add	r1, pc, #4	; (adr r1, 8004b6c <_printf_i+0x40>)
 8004b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b6c:	08004bc5 	.word	0x08004bc5
 8004b70:	08004bd9 	.word	0x08004bd9
 8004b74:	08004b55 	.word	0x08004b55
 8004b78:	08004b55 	.word	0x08004b55
 8004b7c:	08004b55 	.word	0x08004b55
 8004b80:	08004b55 	.word	0x08004b55
 8004b84:	08004bd9 	.word	0x08004bd9
 8004b88:	08004b55 	.word	0x08004b55
 8004b8c:	08004b55 	.word	0x08004b55
 8004b90:	08004b55 	.word	0x08004b55
 8004b94:	08004b55 	.word	0x08004b55
 8004b98:	08004ce5 	.word	0x08004ce5
 8004b9c:	08004c09 	.word	0x08004c09
 8004ba0:	08004cc7 	.word	0x08004cc7
 8004ba4:	08004b55 	.word	0x08004b55
 8004ba8:	08004b55 	.word	0x08004b55
 8004bac:	08004d07 	.word	0x08004d07
 8004bb0:	08004b55 	.word	0x08004b55
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004b55 	.word	0x08004b55
 8004bbc:	08004b55 	.word	0x08004b55
 8004bc0:	08004ccf 	.word	0x08004ccf
 8004bc4:	682b      	ldr	r3, [r5, #0]
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	602a      	str	r2, [r5, #0]
 8004bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0a3      	b.n	8004d20 <_printf_i+0x1f4>
 8004bd8:	6820      	ldr	r0, [r4, #0]
 8004bda:	6829      	ldr	r1, [r5, #0]
 8004bdc:	0606      	lsls	r6, r0, #24
 8004bde:	f101 0304 	add.w	r3, r1, #4
 8004be2:	d50a      	bpl.n	8004bfa <_printf_i+0xce>
 8004be4:	680e      	ldr	r6, [r1, #0]
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	2e00      	cmp	r6, #0
 8004bea:	da03      	bge.n	8004bf4 <_printf_i+0xc8>
 8004bec:	232d      	movs	r3, #45	; 0x2d
 8004bee:	4276      	negs	r6, r6
 8004bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf4:	485e      	ldr	r0, [pc, #376]	; (8004d70 <_printf_i+0x244>)
 8004bf6:	230a      	movs	r3, #10
 8004bf8:	e019      	b.n	8004c2e <_printf_i+0x102>
 8004bfa:	680e      	ldr	r6, [r1, #0]
 8004bfc:	602b      	str	r3, [r5, #0]
 8004bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c02:	bf18      	it	ne
 8004c04:	b236      	sxthne	r6, r6
 8004c06:	e7ef      	b.n	8004be8 <_printf_i+0xbc>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	1d19      	adds	r1, r3, #4
 8004c0e:	6029      	str	r1, [r5, #0]
 8004c10:	0601      	lsls	r1, r0, #24
 8004c12:	d501      	bpl.n	8004c18 <_printf_i+0xec>
 8004c14:	681e      	ldr	r6, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <_printf_i+0xf2>
 8004c18:	0646      	lsls	r6, r0, #25
 8004c1a:	d5fb      	bpl.n	8004c14 <_printf_i+0xe8>
 8004c1c:	881e      	ldrh	r6, [r3, #0]
 8004c1e:	4854      	ldr	r0, [pc, #336]	; (8004d70 <_printf_i+0x244>)
 8004c20:	2f6f      	cmp	r7, #111	; 0x6f
 8004c22:	bf0c      	ite	eq
 8004c24:	2308      	moveq	r3, #8
 8004c26:	230a      	movne	r3, #10
 8004c28:	2100      	movs	r1, #0
 8004c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c2e:	6865      	ldr	r5, [r4, #4]
 8004c30:	60a5      	str	r5, [r4, #8]
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	bfa2      	ittt	ge
 8004c36:	6821      	ldrge	r1, [r4, #0]
 8004c38:	f021 0104 	bicge.w	r1, r1, #4
 8004c3c:	6021      	strge	r1, [r4, #0]
 8004c3e:	b90e      	cbnz	r6, 8004c44 <_printf_i+0x118>
 8004c40:	2d00      	cmp	r5, #0
 8004c42:	d04d      	beq.n	8004ce0 <_printf_i+0x1b4>
 8004c44:	4615      	mov	r5, r2
 8004c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c4e:	5dc7      	ldrb	r7, [r0, r7]
 8004c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c54:	4637      	mov	r7, r6
 8004c56:	42bb      	cmp	r3, r7
 8004c58:	460e      	mov	r6, r1
 8004c5a:	d9f4      	bls.n	8004c46 <_printf_i+0x11a>
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d10b      	bne.n	8004c78 <_printf_i+0x14c>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	07de      	lsls	r6, r3, #31
 8004c64:	d508      	bpl.n	8004c78 <_printf_i+0x14c>
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	6861      	ldr	r1, [r4, #4]
 8004c6a:	4299      	cmp	r1, r3
 8004c6c:	bfde      	ittt	le
 8004c6e:	2330      	movle	r3, #48	; 0x30
 8004c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c78:	1b52      	subs	r2, r2, r5
 8004c7a:	6122      	str	r2, [r4, #16]
 8004c7c:	f8cd a000 	str.w	sl, [sp]
 8004c80:	464b      	mov	r3, r9
 8004c82:	aa03      	add	r2, sp, #12
 8004c84:	4621      	mov	r1, r4
 8004c86:	4640      	mov	r0, r8
 8004c88:	f7ff fee2 	bl	8004a50 <_printf_common>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d14c      	bne.n	8004d2a <_printf_i+0x1fe>
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295
 8004c94:	b004      	add	sp, #16
 8004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9a:	4835      	ldr	r0, [pc, #212]	; (8004d70 <_printf_i+0x244>)
 8004c9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ca0:	6829      	ldr	r1, [r5, #0]
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ca8:	6029      	str	r1, [r5, #0]
 8004caa:	061d      	lsls	r5, r3, #24
 8004cac:	d514      	bpl.n	8004cd8 <_printf_i+0x1ac>
 8004cae:	07df      	lsls	r7, r3, #31
 8004cb0:	bf44      	itt	mi
 8004cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb6:	6023      	strmi	r3, [r4, #0]
 8004cb8:	b91e      	cbnz	r6, 8004cc2 <_printf_i+0x196>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	f023 0320 	bic.w	r3, r3, #32
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	e7b0      	b.n	8004c28 <_printf_i+0xfc>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	f043 0320 	orr.w	r3, r3, #32
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	2378      	movs	r3, #120	; 0x78
 8004cd0:	4828      	ldr	r0, [pc, #160]	; (8004d74 <_printf_i+0x248>)
 8004cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cd6:	e7e3      	b.n	8004ca0 <_printf_i+0x174>
 8004cd8:	0659      	lsls	r1, r3, #25
 8004cda:	bf48      	it	mi
 8004cdc:	b2b6      	uxthmi	r6, r6
 8004cde:	e7e6      	b.n	8004cae <_printf_i+0x182>
 8004ce0:	4615      	mov	r5, r2
 8004ce2:	e7bb      	b.n	8004c5c <_printf_i+0x130>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	6826      	ldr	r6, [r4, #0]
 8004ce8:	6961      	ldr	r1, [r4, #20]
 8004cea:	1d18      	adds	r0, r3, #4
 8004cec:	6028      	str	r0, [r5, #0]
 8004cee:	0635      	lsls	r5, r6, #24
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	d501      	bpl.n	8004cf8 <_printf_i+0x1cc>
 8004cf4:	6019      	str	r1, [r3, #0]
 8004cf6:	e002      	b.n	8004cfe <_printf_i+0x1d2>
 8004cf8:	0670      	lsls	r0, r6, #25
 8004cfa:	d5fb      	bpl.n	8004cf4 <_printf_i+0x1c8>
 8004cfc:	8019      	strh	r1, [r3, #0]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	4615      	mov	r5, r2
 8004d04:	e7ba      	b.n	8004c7c <_printf_i+0x150>
 8004d06:	682b      	ldr	r3, [r5, #0]
 8004d08:	1d1a      	adds	r2, r3, #4
 8004d0a:	602a      	str	r2, [r5, #0]
 8004d0c:	681d      	ldr	r5, [r3, #0]
 8004d0e:	6862      	ldr	r2, [r4, #4]
 8004d10:	2100      	movs	r1, #0
 8004d12:	4628      	mov	r0, r5
 8004d14:	f7fb fa84 	bl	8000220 <memchr>
 8004d18:	b108      	cbz	r0, 8004d1e <_printf_i+0x1f2>
 8004d1a:	1b40      	subs	r0, r0, r5
 8004d1c:	6060      	str	r0, [r4, #4]
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	6123      	str	r3, [r4, #16]
 8004d22:	2300      	movs	r3, #0
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d28:	e7a8      	b.n	8004c7c <_printf_i+0x150>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	462a      	mov	r2, r5
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	47d0      	blx	sl
 8004d34:	3001      	adds	r0, #1
 8004d36:	d0ab      	beq.n	8004c90 <_printf_i+0x164>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	079b      	lsls	r3, r3, #30
 8004d3c:	d413      	bmi.n	8004d66 <_printf_i+0x23a>
 8004d3e:	68e0      	ldr	r0, [r4, #12]
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	4298      	cmp	r0, r3
 8004d44:	bfb8      	it	lt
 8004d46:	4618      	movlt	r0, r3
 8004d48:	e7a4      	b.n	8004c94 <_printf_i+0x168>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4632      	mov	r2, r6
 8004d4e:	4649      	mov	r1, r9
 8004d50:	4640      	mov	r0, r8
 8004d52:	47d0      	blx	sl
 8004d54:	3001      	adds	r0, #1
 8004d56:	d09b      	beq.n	8004c90 <_printf_i+0x164>
 8004d58:	3501      	adds	r5, #1
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	9903      	ldr	r1, [sp, #12]
 8004d5e:	1a5b      	subs	r3, r3, r1
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dcf2      	bgt.n	8004d4a <_printf_i+0x21e>
 8004d64:	e7eb      	b.n	8004d3e <_printf_i+0x212>
 8004d66:	2500      	movs	r5, #0
 8004d68:	f104 0619 	add.w	r6, r4, #25
 8004d6c:	e7f5      	b.n	8004d5a <_printf_i+0x22e>
 8004d6e:	bf00      	nop
 8004d70:	08005101 	.word	0x08005101
 8004d74:	08005112 	.word	0x08005112

08004d78 <memcpy>:
 8004d78:	440a      	add	r2, r1
 8004d7a:	4291      	cmp	r1, r2
 8004d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d80:	d100      	bne.n	8004d84 <memcpy+0xc>
 8004d82:	4770      	bx	lr
 8004d84:	b510      	push	{r4, lr}
 8004d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d8e:	4291      	cmp	r1, r2
 8004d90:	d1f9      	bne.n	8004d86 <memcpy+0xe>
 8004d92:	bd10      	pop	{r4, pc}

08004d94 <memmove>:
 8004d94:	4288      	cmp	r0, r1
 8004d96:	b510      	push	{r4, lr}
 8004d98:	eb01 0402 	add.w	r4, r1, r2
 8004d9c:	d902      	bls.n	8004da4 <memmove+0x10>
 8004d9e:	4284      	cmp	r4, r0
 8004da0:	4623      	mov	r3, r4
 8004da2:	d807      	bhi.n	8004db4 <memmove+0x20>
 8004da4:	1e43      	subs	r3, r0, #1
 8004da6:	42a1      	cmp	r1, r4
 8004da8:	d008      	beq.n	8004dbc <memmove+0x28>
 8004daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004db2:	e7f8      	b.n	8004da6 <memmove+0x12>
 8004db4:	4402      	add	r2, r0
 8004db6:	4601      	mov	r1, r0
 8004db8:	428a      	cmp	r2, r1
 8004dba:	d100      	bne.n	8004dbe <memmove+0x2a>
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dc6:	e7f7      	b.n	8004db8 <memmove+0x24>

08004dc8 <_free_r>:
 8004dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dca:	2900      	cmp	r1, #0
 8004dcc:	d044      	beq.n	8004e58 <_free_r+0x90>
 8004dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dd2:	9001      	str	r0, [sp, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dda:	bfb8      	it	lt
 8004ddc:	18e4      	addlt	r4, r4, r3
 8004dde:	f000 f913 	bl	8005008 <__malloc_lock>
 8004de2:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <_free_r+0x94>)
 8004de4:	9801      	ldr	r0, [sp, #4]
 8004de6:	6813      	ldr	r3, [r2, #0]
 8004de8:	b933      	cbnz	r3, 8004df8 <_free_r+0x30>
 8004dea:	6063      	str	r3, [r4, #4]
 8004dec:	6014      	str	r4, [r2, #0]
 8004dee:	b003      	add	sp, #12
 8004df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004df4:	f000 b90e 	b.w	8005014 <__malloc_unlock>
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d908      	bls.n	8004e0e <_free_r+0x46>
 8004dfc:	6825      	ldr	r5, [r4, #0]
 8004dfe:	1961      	adds	r1, r4, r5
 8004e00:	428b      	cmp	r3, r1
 8004e02:	bf01      	itttt	eq
 8004e04:	6819      	ldreq	r1, [r3, #0]
 8004e06:	685b      	ldreq	r3, [r3, #4]
 8004e08:	1949      	addeq	r1, r1, r5
 8004e0a:	6021      	streq	r1, [r4, #0]
 8004e0c:	e7ed      	b.n	8004dea <_free_r+0x22>
 8004e0e:	461a      	mov	r2, r3
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	b10b      	cbz	r3, 8004e18 <_free_r+0x50>
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d9fa      	bls.n	8004e0e <_free_r+0x46>
 8004e18:	6811      	ldr	r1, [r2, #0]
 8004e1a:	1855      	adds	r5, r2, r1
 8004e1c:	42a5      	cmp	r5, r4
 8004e1e:	d10b      	bne.n	8004e38 <_free_r+0x70>
 8004e20:	6824      	ldr	r4, [r4, #0]
 8004e22:	4421      	add	r1, r4
 8004e24:	1854      	adds	r4, r2, r1
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	6011      	str	r1, [r2, #0]
 8004e2a:	d1e0      	bne.n	8004dee <_free_r+0x26>
 8004e2c:	681c      	ldr	r4, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	6053      	str	r3, [r2, #4]
 8004e32:	4421      	add	r1, r4
 8004e34:	6011      	str	r1, [r2, #0]
 8004e36:	e7da      	b.n	8004dee <_free_r+0x26>
 8004e38:	d902      	bls.n	8004e40 <_free_r+0x78>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	6003      	str	r3, [r0, #0]
 8004e3e:	e7d6      	b.n	8004dee <_free_r+0x26>
 8004e40:	6825      	ldr	r5, [r4, #0]
 8004e42:	1961      	adds	r1, r4, r5
 8004e44:	428b      	cmp	r3, r1
 8004e46:	bf04      	itt	eq
 8004e48:	6819      	ldreq	r1, [r3, #0]
 8004e4a:	685b      	ldreq	r3, [r3, #4]
 8004e4c:	6063      	str	r3, [r4, #4]
 8004e4e:	bf04      	itt	eq
 8004e50:	1949      	addeq	r1, r1, r5
 8004e52:	6021      	streq	r1, [r4, #0]
 8004e54:	6054      	str	r4, [r2, #4]
 8004e56:	e7ca      	b.n	8004dee <_free_r+0x26>
 8004e58:	b003      	add	sp, #12
 8004e5a:	bd30      	pop	{r4, r5, pc}
 8004e5c:	2000043c 	.word	0x2000043c

08004e60 <sbrk_aligned>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	4e0e      	ldr	r6, [pc, #56]	; (8004e9c <sbrk_aligned+0x3c>)
 8004e64:	460c      	mov	r4, r1
 8004e66:	6831      	ldr	r1, [r6, #0]
 8004e68:	4605      	mov	r5, r0
 8004e6a:	b911      	cbnz	r1, 8004e72 <sbrk_aligned+0x12>
 8004e6c:	f000 f8bc 	bl	8004fe8 <_sbrk_r>
 8004e70:	6030      	str	r0, [r6, #0]
 8004e72:	4621      	mov	r1, r4
 8004e74:	4628      	mov	r0, r5
 8004e76:	f000 f8b7 	bl	8004fe8 <_sbrk_r>
 8004e7a:	1c43      	adds	r3, r0, #1
 8004e7c:	d00a      	beq.n	8004e94 <sbrk_aligned+0x34>
 8004e7e:	1cc4      	adds	r4, r0, #3
 8004e80:	f024 0403 	bic.w	r4, r4, #3
 8004e84:	42a0      	cmp	r0, r4
 8004e86:	d007      	beq.n	8004e98 <sbrk_aligned+0x38>
 8004e88:	1a21      	subs	r1, r4, r0
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 f8ac 	bl	8004fe8 <_sbrk_r>
 8004e90:	3001      	adds	r0, #1
 8004e92:	d101      	bne.n	8004e98 <sbrk_aligned+0x38>
 8004e94:	f04f 34ff 	mov.w	r4, #4294967295
 8004e98:	4620      	mov	r0, r4
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	20000440 	.word	0x20000440

08004ea0 <_malloc_r>:
 8004ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea4:	1ccd      	adds	r5, r1, #3
 8004ea6:	f025 0503 	bic.w	r5, r5, #3
 8004eaa:	3508      	adds	r5, #8
 8004eac:	2d0c      	cmp	r5, #12
 8004eae:	bf38      	it	cc
 8004eb0:	250c      	movcc	r5, #12
 8004eb2:	2d00      	cmp	r5, #0
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	db01      	blt.n	8004ebc <_malloc_r+0x1c>
 8004eb8:	42a9      	cmp	r1, r5
 8004eba:	d905      	bls.n	8004ec8 <_malloc_r+0x28>
 8004ebc:	230c      	movs	r3, #12
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	2600      	movs	r6, #0
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec8:	4e2e      	ldr	r6, [pc, #184]	; (8004f84 <_malloc_r+0xe4>)
 8004eca:	f000 f89d 	bl	8005008 <__malloc_lock>
 8004ece:	6833      	ldr	r3, [r6, #0]
 8004ed0:	461c      	mov	r4, r3
 8004ed2:	bb34      	cbnz	r4, 8004f22 <_malloc_r+0x82>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f7ff ffc2 	bl	8004e60 <sbrk_aligned>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	4604      	mov	r4, r0
 8004ee0:	d14d      	bne.n	8004f7e <_malloc_r+0xde>
 8004ee2:	6834      	ldr	r4, [r6, #0]
 8004ee4:	4626      	mov	r6, r4
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	d140      	bne.n	8004f6c <_malloc_r+0xcc>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	4631      	mov	r1, r6
 8004eee:	4638      	mov	r0, r7
 8004ef0:	eb04 0803 	add.w	r8, r4, r3
 8004ef4:	f000 f878 	bl	8004fe8 <_sbrk_r>
 8004ef8:	4580      	cmp	r8, r0
 8004efa:	d13a      	bne.n	8004f72 <_malloc_r+0xd2>
 8004efc:	6821      	ldr	r1, [r4, #0]
 8004efe:	3503      	adds	r5, #3
 8004f00:	1a6d      	subs	r5, r5, r1
 8004f02:	f025 0503 	bic.w	r5, r5, #3
 8004f06:	3508      	adds	r5, #8
 8004f08:	2d0c      	cmp	r5, #12
 8004f0a:	bf38      	it	cc
 8004f0c:	250c      	movcc	r5, #12
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4638      	mov	r0, r7
 8004f12:	f7ff ffa5 	bl	8004e60 <sbrk_aligned>
 8004f16:	3001      	adds	r0, #1
 8004f18:	d02b      	beq.n	8004f72 <_malloc_r+0xd2>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	442b      	add	r3, r5
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	e00e      	b.n	8004f40 <_malloc_r+0xa0>
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	1b52      	subs	r2, r2, r5
 8004f26:	d41e      	bmi.n	8004f66 <_malloc_r+0xc6>
 8004f28:	2a0b      	cmp	r2, #11
 8004f2a:	d916      	bls.n	8004f5a <_malloc_r+0xba>
 8004f2c:	1961      	adds	r1, r4, r5
 8004f2e:	42a3      	cmp	r3, r4
 8004f30:	6025      	str	r5, [r4, #0]
 8004f32:	bf18      	it	ne
 8004f34:	6059      	strne	r1, [r3, #4]
 8004f36:	6863      	ldr	r3, [r4, #4]
 8004f38:	bf08      	it	eq
 8004f3a:	6031      	streq	r1, [r6, #0]
 8004f3c:	5162      	str	r2, [r4, r5]
 8004f3e:	604b      	str	r3, [r1, #4]
 8004f40:	4638      	mov	r0, r7
 8004f42:	f104 060b 	add.w	r6, r4, #11
 8004f46:	f000 f865 	bl	8005014 <__malloc_unlock>
 8004f4a:	f026 0607 	bic.w	r6, r6, #7
 8004f4e:	1d23      	adds	r3, r4, #4
 8004f50:	1af2      	subs	r2, r6, r3
 8004f52:	d0b6      	beq.n	8004ec2 <_malloc_r+0x22>
 8004f54:	1b9b      	subs	r3, r3, r6
 8004f56:	50a3      	str	r3, [r4, r2]
 8004f58:	e7b3      	b.n	8004ec2 <_malloc_r+0x22>
 8004f5a:	6862      	ldr	r2, [r4, #4]
 8004f5c:	42a3      	cmp	r3, r4
 8004f5e:	bf0c      	ite	eq
 8004f60:	6032      	streq	r2, [r6, #0]
 8004f62:	605a      	strne	r2, [r3, #4]
 8004f64:	e7ec      	b.n	8004f40 <_malloc_r+0xa0>
 8004f66:	4623      	mov	r3, r4
 8004f68:	6864      	ldr	r4, [r4, #4]
 8004f6a:	e7b2      	b.n	8004ed2 <_malloc_r+0x32>
 8004f6c:	4634      	mov	r4, r6
 8004f6e:	6876      	ldr	r6, [r6, #4]
 8004f70:	e7b9      	b.n	8004ee6 <_malloc_r+0x46>
 8004f72:	230c      	movs	r3, #12
 8004f74:	603b      	str	r3, [r7, #0]
 8004f76:	4638      	mov	r0, r7
 8004f78:	f000 f84c 	bl	8005014 <__malloc_unlock>
 8004f7c:	e7a1      	b.n	8004ec2 <_malloc_r+0x22>
 8004f7e:	6025      	str	r5, [r4, #0]
 8004f80:	e7de      	b.n	8004f40 <_malloc_r+0xa0>
 8004f82:	bf00      	nop
 8004f84:	2000043c 	.word	0x2000043c

08004f88 <_realloc_r>:
 8004f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	4614      	mov	r4, r2
 8004f90:	460e      	mov	r6, r1
 8004f92:	b921      	cbnz	r1, 8004f9e <_realloc_r+0x16>
 8004f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f98:	4611      	mov	r1, r2
 8004f9a:	f7ff bf81 	b.w	8004ea0 <_malloc_r>
 8004f9e:	b92a      	cbnz	r2, 8004fac <_realloc_r+0x24>
 8004fa0:	f7ff ff12 	bl	8004dc8 <_free_r>
 8004fa4:	4625      	mov	r5, r4
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	f000 f838 	bl	8005020 <_malloc_usable_size_r>
 8004fb0:	4284      	cmp	r4, r0
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	d802      	bhi.n	8004fbc <_realloc_r+0x34>
 8004fb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fba:	d812      	bhi.n	8004fe2 <_realloc_r+0x5a>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f7ff ff6e 	bl	8004ea0 <_malloc_r>
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d0ed      	beq.n	8004fa6 <_realloc_r+0x1e>
 8004fca:	42bc      	cmp	r4, r7
 8004fcc:	4622      	mov	r2, r4
 8004fce:	4631      	mov	r1, r6
 8004fd0:	bf28      	it	cs
 8004fd2:	463a      	movcs	r2, r7
 8004fd4:	f7ff fed0 	bl	8004d78 <memcpy>
 8004fd8:	4631      	mov	r1, r6
 8004fda:	4640      	mov	r0, r8
 8004fdc:	f7ff fef4 	bl	8004dc8 <_free_r>
 8004fe0:	e7e1      	b.n	8004fa6 <_realloc_r+0x1e>
 8004fe2:	4635      	mov	r5, r6
 8004fe4:	e7df      	b.n	8004fa6 <_realloc_r+0x1e>
	...

08004fe8 <_sbrk_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d06      	ldr	r5, [pc, #24]	; (8005004 <_sbrk_r+0x1c>)
 8004fec:	2300      	movs	r3, #0
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	f7fc fa7e 	bl	80014f4 <_sbrk>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_sbrk_r+0x1a>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_sbrk_r+0x1a>
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20000444 	.word	0x20000444

08005008 <__malloc_lock>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__malloc_lock+0x8>)
 800500a:	f000 b811 	b.w	8005030 <__retarget_lock_acquire_recursive>
 800500e:	bf00      	nop
 8005010:	20000448 	.word	0x20000448

08005014 <__malloc_unlock>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__malloc_unlock+0x8>)
 8005016:	f000 b80c 	b.w	8005032 <__retarget_lock_release_recursive>
 800501a:	bf00      	nop
 800501c:	20000448 	.word	0x20000448

08005020 <_malloc_usable_size_r>:
 8005020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005024:	1f18      	subs	r0, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfbc      	itt	lt
 800502a:	580b      	ldrlt	r3, [r1, r0]
 800502c:	18c0      	addlt	r0, r0, r3
 800502e:	4770      	bx	lr

08005030 <__retarget_lock_acquire_recursive>:
 8005030:	4770      	bx	lr

08005032 <__retarget_lock_release_recursive>:
 8005032:	4770      	bx	lr

08005034 <_init>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr

08005040 <_fini>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr
