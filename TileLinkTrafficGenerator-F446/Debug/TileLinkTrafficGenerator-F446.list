
TileLinkTrafficGenerator-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005490  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f8  080057f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057f8  080057f8  000157f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005800  08005800  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000070  08005878  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08005878  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed54  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f84  00000000  00000000  0002edf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00030d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00031a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023415  00000000  00000000  00032610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010133  00000000  00000000  00055a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2346  00000000  00000000  00065b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137e9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003908  00000000  00000000  00137ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005648 	.word	0x08005648

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005648 	.word	0x08005648

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_TIM_IC_CaptureCallback>:

TileLinkController tl;

char str[128];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  TL_update(&tl);
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <HAL_TIM_IC_CaptureCallback+0x18>)
 80005ce:	f000 ff77 	bl	80014c0 <TL_update>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090

080005e0 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e4:	2100      	movs	r1, #0
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <APP_init+0x18>)
 80005e8:	f002 fc78 	bl	8002edc <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <APP_init+0x1c>)
 80005f0:	f002 fd8c 	bl	800310c <HAL_TIM_IC_Start_IT>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000360 	.word	0x20000360
 80005fc:	200003a8 	.word	0x200003a8

08000600 <GET>:

void GET(uint32_t address) {
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af06      	add	r7, sp, #24
 8000606:	6078      	str	r0, [r7, #4]
  TL_GET(&tl, address);
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	482b      	ldr	r0, [pc, #172]	; (80006b8 <GET+0xb8>)
 800060c:	f001 fa4f 	bl	8001aae <TL_GET>
  sprintf(str, "[TL Get] <address: 0x%08lx, size: %d>\r\n", tl.tx_frame.address, tl.tx_frame.size);
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <GET+0xb8>)
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <GET+0xb8>)
 8000616:	78db      	ldrb	r3, [r3, #3]
 8000618:	4928      	ldr	r1, [pc, #160]	; (80006bc <GET+0xbc>)
 800061a:	4829      	ldr	r0, [pc, #164]	; (80006c0 <GET+0xc0>)
 800061c:	f004 fba6 	bl	8004d6c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000620:	4827      	ldr	r0, [pc, #156]	; (80006c0 <GET+0xc0>)
 8000622:	f7ff fdf5 	bl	8000210 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	4924      	ldr	r1, [pc, #144]	; (80006c0 <GET+0xc0>)
 8000630:	4824      	ldr	r0, [pc, #144]	; (80006c4 <GET+0xc4>)
 8000632:	f003 ff52 	bl	80044da <HAL_UART_Transmit>
  sprintf(str, "[TL AccessAckData] <chanid: %d, opcode: %d, size: %d, source: 0x%08lx, denied: %d, corrupt: %d, data: 0x%08lx%08lx>\r\n", tl.rx_frame.chanid, tl.rx_frame.opcode, tl.rx_frame.size, tl.rx_frame.address, tl.rx_frame.mask, tl.rx_frame.corrupt, (uint32_t)(tl.rx_frame.data >> 32), (uint32_t)tl.rx_frame.data);
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <GET+0xb8>)
 8000638:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800063c:	469c      	mov	ip, r3
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <GET+0xb8>)
 8000640:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8000644:	469e      	mov	lr, r3
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <GET+0xb8>)
 8000648:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800064c:	461d      	mov	r5, r3
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <GET+0xb8>)
 8000650:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <GET+0xb8>)
 8000656:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800065a:	461e      	mov	r6, r3
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <GET+0xb8>)
 800065e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <GET+0xb8>)
 8000666:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	000a      	movs	r2, r1
 8000674:	2300      	movs	r3, #0
 8000676:	4611      	mov	r1, r2
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <GET+0xb8>)
 800067a:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800067e:	4613      	mov	r3, r2
 8000680:	9305      	str	r3, [sp, #20]
 8000682:	9104      	str	r1, [sp, #16]
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	9303      	str	r3, [sp, #12]
 8000688:	9602      	str	r6, [sp, #8]
 800068a:	9401      	str	r4, [sp, #4]
 800068c:	9500      	str	r5, [sp, #0]
 800068e:	4673      	mov	r3, lr
 8000690:	4662      	mov	r2, ip
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <GET+0xc8>)
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <GET+0xc0>)
 8000696:	f004 fb69 	bl	8004d6c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <GET+0xc0>)
 800069c:	f7ff fdb8 	bl	8000210 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	4905      	ldr	r1, [pc, #20]	; (80006c0 <GET+0xc0>)
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <GET+0xc4>)
 80006ac:	f003 ff15 	bl	80044da <HAL_UART_Transmit>
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b8:	20000090 	.word	0x20000090
 80006bc:	08005660 	.word	0x08005660
 80006c0:	200002e0 	.word	0x200002e0
 80006c4:	200003f0 	.word	0x200003f0
 80006c8:	08005688 	.word	0x08005688

080006cc <PUTFULL>:

void PUTFULL(uint32_t address, uint64_t data) {
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af04      	add	r7, sp, #16
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	e9c7 2300 	strd	r2, r3, [r7]
  TL_PUTFULLDATA(&tl, address, data);
 80006d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006dc:	68f9      	ldr	r1, [r7, #12]
 80006de:	482c      	ldr	r0, [pc, #176]	; (8000790 <PUTFULL+0xc4>)
 80006e0:	f001 fa1f 	bl	8001b22 <TL_PUTFULLDATA>
  sprintf(str, "[TL PutFullData] <address: 0x%08lx, size: %d, data: data: 0x%08lx%08lx>\r\n", tl.tx_frame.address, tl.tx_frame.size, (uint32_t)(tl.tx_frame.data >> 32), (uint32_t)tl.tx_frame.data);
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <PUTFULL+0xc4>)
 80006e6:	689c      	ldr	r4, [r3, #8]
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <PUTFULL+0xc4>)
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	461d      	mov	r5, r3
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <PUTFULL+0xc4>)
 80006f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	f04f 0300 	mov.w	r3, #0
 80006fc:	000a      	movs	r2, r1
 80006fe:	2300      	movs	r3, #0
 8000700:	4611      	mov	r1, r2
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <PUTFULL+0xc4>)
 8000704:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000708:	4613      	mov	r3, r2
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	9100      	str	r1, [sp, #0]
 800070e:	462b      	mov	r3, r5
 8000710:	4622      	mov	r2, r4
 8000712:	4920      	ldr	r1, [pc, #128]	; (8000794 <PUTFULL+0xc8>)
 8000714:	4820      	ldr	r0, [pc, #128]	; (8000798 <PUTFULL+0xcc>)
 8000716:	f004 fb29 	bl	8004d6c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800071a:	481f      	ldr	r0, [pc, #124]	; (8000798 <PUTFULL+0xcc>)
 800071c:	f7ff fd78 	bl	8000210 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000728:	491b      	ldr	r1, [pc, #108]	; (8000798 <PUTFULL+0xcc>)
 800072a:	481c      	ldr	r0, [pc, #112]	; (800079c <PUTFULL+0xd0>)
 800072c:	f003 fed5 	bl	80044da <HAL_UART_Transmit>
  sprintf(str, "[TL AccessAck] <chanid: %d, opcode: %d, size: %d, source: 0x%08lx, denied: %d, corrupt: %d>\r\n", tl.rx_frame.chanid, tl.rx_frame.opcode, tl.rx_frame.size, tl.rx_frame.address, tl.rx_frame.mask, tl.rx_frame.corrupt);
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <PUTFULL+0xc4>)
 8000732:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000736:	461c      	mov	r4, r3
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <PUTFULL+0xc4>)
 800073a:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800073e:	461d      	mov	r5, r3
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <PUTFULL+0xc4>)
 8000742:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8000746:	4619      	mov	r1, r3
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <PUTFULL+0xc4>)
 800074a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <PUTFULL+0xc4>)
 8000750:	f892 2139 	ldrb.w	r2, [r2, #313]	; 0x139
 8000754:	4610      	mov	r0, r2
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <PUTFULL+0xc4>)
 8000758:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
 800075c:	9203      	str	r2, [sp, #12]
 800075e:	9002      	str	r0, [sp, #8]
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	9100      	str	r1, [sp, #0]
 8000764:	462b      	mov	r3, r5
 8000766:	4622      	mov	r2, r4
 8000768:	490d      	ldr	r1, [pc, #52]	; (80007a0 <PUTFULL+0xd4>)
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <PUTFULL+0xcc>)
 800076c:	f004 fafe 	bl	8004d6c <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <PUTFULL+0xcc>)
 8000772:	f7ff fd4d 	bl	8000210 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	4906      	ldr	r1, [pc, #24]	; (8000798 <PUTFULL+0xcc>)
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <PUTFULL+0xd0>)
 8000782:	f003 feaa 	bl	80044da <HAL_UART_Transmit>
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bdb0      	pop	{r4, r5, r7, pc}
 800078e:	bf00      	nop
 8000790:	20000090 	.word	0x20000090
 8000794:	08005700 	.word	0x08005700
 8000798:	200002e0 	.word	0x200002e0
 800079c:	200003f0 	.word	0x200003f0
 80007a0:	0800574c 	.word	0x0800574c
 80007a4:	00000000 	.word	0x00000000

080007a8 <APP_main>:

void APP_main() {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  uint8_t cmd;
  if (HAL_UART_Receive(&huart2, &cmd, 1, 1000) == HAL_OK) {
 80007ae:	1cf9      	adds	r1, r7, #3
 80007b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b4:	2201      	movs	r2, #1
 80007b6:	486c      	ldr	r0, [pc, #432]	; (8000968 <APP_main+0x1c0>)
 80007b8:	f003 ff21 	bl	80045fe <HAL_UART_Receive>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f040 821b 	bne.w	8000bfa <APP_main+0x452>
    switch (cmd) {
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	3b32      	subs	r3, #50	; 0x32
 80007c8:	2b43      	cmp	r3, #67	; 0x43
 80007ca:	f200 8217 	bhi.w	8000bfc <APP_main+0x454>
 80007ce:	a201      	add	r2, pc, #4	; (adr r2, 80007d4 <APP_main+0x2c>)
 80007d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d4:	08000bcf 	.word	0x08000bcf
 80007d8:	08000bfd 	.word	0x08000bfd
 80007dc:	08000bfd 	.word	0x08000bfd
 80007e0:	08000bfd 	.word	0x08000bfd
 80007e4:	08000bfd 	.word	0x08000bfd
 80007e8:	08000bfd 	.word	0x08000bfd
 80007ec:	08000bfd 	.word	0x08000bfd
 80007f0:	08000bfd 	.word	0x08000bfd
 80007f4:	08000bfd 	.word	0x08000bfd
 80007f8:	08000bfd 	.word	0x08000bfd
 80007fc:	08000bfd 	.word	0x08000bfd
 8000800:	08000bfd 	.word	0x08000bfd
 8000804:	08000bfd 	.word	0x08000bfd
 8000808:	08000bfd 	.word	0x08000bfd
 800080c:	08000bfd 	.word	0x08000bfd
 8000810:	08000bfd 	.word	0x08000bfd
 8000814:	080008ef 	.word	0x080008ef
 8000818:	08000bfd 	.word	0x08000bfd
 800081c:	08000bfd 	.word	0x08000bfd
 8000820:	08000bfd 	.word	0x08000bfd
 8000824:	08000bfd 	.word	0x08000bfd
 8000828:	08000bfd 	.word	0x08000bfd
 800082c:	08000bfd 	.word	0x08000bfd
 8000830:	08000bfd 	.word	0x08000bfd
 8000834:	08000bfd 	.word	0x08000bfd
 8000838:	08000bfd 	.word	0x08000bfd
 800083c:	08000bfd 	.word	0x08000bfd
 8000840:	08000bfd 	.word	0x08000bfd
 8000844:	08000bfd 	.word	0x08000bfd
 8000848:	08000bfd 	.word	0x08000bfd
 800084c:	08000975 	.word	0x08000975
 8000850:	08000bfd 	.word	0x08000bfd
 8000854:	08000bb7 	.word	0x08000bb7
 8000858:	08000bfd 	.word	0x08000bfd
 800085c:	08000bfd 	.word	0x08000bfd
 8000860:	08000921 	.word	0x08000921
 8000864:	08000bfd 	.word	0x08000bfd
 8000868:	08000bfd 	.word	0x08000bfd
 800086c:	08000bfd 	.word	0x08000bfd
 8000870:	08000bfd 	.word	0x08000bfd
 8000874:	08000bfd 	.word	0x08000bfd
 8000878:	08000bfd 	.word	0x08000bfd
 800087c:	08000bfd 	.word	0x08000bfd
 8000880:	08000bfd 	.word	0x08000bfd
 8000884:	08000bfd 	.word	0x08000bfd
 8000888:	08000bfd 	.word	0x08000bfd
 800088c:	08000bfd 	.word	0x08000bfd
 8000890:	08000bfd 	.word	0x08000bfd
 8000894:	080008e5 	.word	0x080008e5
 8000898:	08000bfd 	.word	0x08000bfd
 800089c:	0800093f 	.word	0x0800093f
 80008a0:	08000bfd 	.word	0x08000bfd
 80008a4:	08000bfd 	.word	0x08000bfd
 80008a8:	08000bfd 	.word	0x08000bfd
 80008ac:	08000bfd 	.word	0x08000bfd
 80008b0:	0800090f 	.word	0x0800090f
 80008b4:	08000bfd 	.word	0x08000bfd
 80008b8:	08000bfd 	.word	0x08000bfd
 80008bc:	08000bfd 	.word	0x08000bfd
 80008c0:	08000bfd 	.word	0x08000bfd
 80008c4:	08000bfd 	.word	0x08000bfd
 80008c8:	08000bfd 	.word	0x08000bfd
 80008cc:	08000bfd 	.word	0x08000bfd
 80008d0:	08000bfd 	.word	0x08000bfd
 80008d4:	08000bc7 	.word	0x08000bc7
 80008d8:	08000bfd 	.word	0x08000bfd
 80008dc:	08000919 	.word	0x08000919
 80008e0:	08000bd9 	.word	0x08000bd9
      case 'b':
        GET(BOOT_SELECT_ADDR);
 80008e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008e8:	f7ff fe8a 	bl	8000600 <GET>
        break;
 80008ec:	e186      	b.n	8000bfc <APP_main+0x454>
      case 'B':
        for (uint8_t i=0; i<0x40; i+=4) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	71fb      	strb	r3, [r7, #7]
 80008f2:	e008      	b.n	8000906 <APP_main+0x15e>
          GET(BOOTROM_BASE_ADDR+i);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe80 	bl	8000600 <GET>
        for (uint8_t i=0; i<0x40; i+=4) {
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	3304      	adds	r3, #4
 8000904:	71fb      	strb	r3, [r7, #7]
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b3f      	cmp	r3, #63	; 0x3f
 800090a:	d9f3      	bls.n	80008f4 <APP_main+0x14c>
        }
        break;
 800090c:	e176      	b.n	8000bfc <APP_main+0x454>

      case 'i':
        GET(CLINT_MSIP_ADDR);
 800090e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000912:	f7ff fe75 	bl	8000600 <GET>
        break;
 8000916:	e171      	b.n	8000bfc <APP_main+0x454>

      case 't':
        GET(CLINT_MTIME_ADDR);
 8000918:	4814      	ldr	r0, [pc, #80]	; (800096c <APP_main+0x1c4>)
 800091a:	f7ff fe71 	bl	8000600 <GET>
        break;
 800091e:	e16d      	b.n	8000bfc <APP_main+0x454>

      case 'U':
        PUTFULL(UART_TXCTRL_ADDR, 0x1);
 8000920:	f04f 0201 	mov.w	r2, #1
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	4811      	ldr	r0, [pc, #68]	; (8000970 <APP_main+0x1c8>)
 800092a:	f7ff fecf 	bl	80006cc <PUTFULL>
        PUTFULL(UART_TXDATA_ADDR, 0xDEADBEEF);
 800092e:	a30c      	add	r3, pc, #48	; (adr r3, 8000960 <APP_main+0x1b8>)
 8000930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000934:	f04f 40a8 	mov.w	r0, #1409286144	; 0x54000000
 8000938:	f7ff fec8 	bl	80006cc <PUTFULL>
        break;
 800093c:	e15e      	b.n	8000bfc <APP_main+0x454>


      case 'd':
        for (uint16_t i=0; i<0x40; i+=4) {
 800093e:	2300      	movs	r3, #0
 8000940:	80bb      	strh	r3, [r7, #4]
 8000942:	e008      	b.n	8000956 <APP_main+0x1ae>
          GET(DTIM_BASE_ADDR+i);
 8000944:	88bb      	ldrh	r3, [r7, #4]
 8000946:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe58 	bl	8000600 <GET>
        for (uint16_t i=0; i<0x40; i+=4) {
 8000950:	88bb      	ldrh	r3, [r7, #4]
 8000952:	3304      	adds	r3, #4
 8000954:	80bb      	strh	r3, [r7, #4]
 8000956:	88bb      	ldrh	r3, [r7, #4]
 8000958:	2b3f      	cmp	r3, #63	; 0x3f
 800095a:	d9f3      	bls.n	8000944 <APP_main+0x19c>
        }
        break;
 800095c:	e14e      	b.n	8000bfc <APP_main+0x454>
 800095e:	bf00      	nop
 8000960:	deadbeef 	.word	0xdeadbeef
 8000964:	00000000 	.word	0x00000000
 8000968:	200003f0 	.word	0x200003f0
 800096c:	0200bff8 	.word	0x0200bff8
 8000970:	54000008 	.word	0x54000008

      case 'P':
        PUTFULL(DTIM_BASE_ADDR + 0, 0x54000437);
 8000974:	4aaa      	ldr	r2, [pc, #680]	; (8000c20 <APP_main+0x478>)
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800097e:	f7ff fea5 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 4, 0x00040413);
 8000982:	4aa8      	ldr	r2, [pc, #672]	; (8000c24 <APP_main+0x47c>)
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	48a7      	ldr	r0, [pc, #668]	; (8000c28 <APP_main+0x480>)
 800098a:	f7ff fe9f 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 8, 0x00100493);
 800098e:	4aa7      	ldr	r2, [pc, #668]	; (8000c2c <APP_main+0x484>)
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	48a6      	ldr	r0, [pc, #664]	; (8000c30 <APP_main+0x488>)
 8000996:	f7ff fe99 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 12, 0x00942423);
 800099a:	a39d      	add	r3, pc, #628	; (adr r3, 8000c10 <APP_main+0x468>)
 800099c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009a0:	48a4      	ldr	r0, [pc, #656]	; (8000c34 <APP_main+0x48c>)
 80009a2:	f7ff fe93 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 16, 0x06800293);
 80009a6:	4aa4      	ldr	r2, [pc, #656]	; (8000c38 <APP_main+0x490>)
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	48a3      	ldr	r0, [pc, #652]	; (8000c3c <APP_main+0x494>)
 80009ae:	f7ff fe8d 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 20, 0x00542023);
 80009b2:	a399      	add	r3, pc, #612	; (adr r3, 8000c18 <APP_main+0x470>)
 80009b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b8:	48a1      	ldr	r0, [pc, #644]	; (8000c40 <APP_main+0x498>)
 80009ba:	f7ff fe87 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 24, 0x06500293);
 80009be:	4aa1      	ldr	r2, [pc, #644]	; (8000c44 <APP_main+0x49c>)
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	48a0      	ldr	r0, [pc, #640]	; (8000c48 <APP_main+0x4a0>)
 80009c6:	f7ff fe81 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 28, 0x00542023);
 80009ca:	a393      	add	r3, pc, #588	; (adr r3, 8000c18 <APP_main+0x470>)
 80009cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d0:	489e      	ldr	r0, [pc, #632]	; (8000c4c <APP_main+0x4a4>)
 80009d2:	f7ff fe7b 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 32, 0x06C00293);
 80009d6:	4a9e      	ldr	r2, [pc, #632]	; (8000c50 <APP_main+0x4a8>)
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	489d      	ldr	r0, [pc, #628]	; (8000c54 <APP_main+0x4ac>)
 80009de:	f7ff fe75 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 36, 0x00542023);
 80009e2:	a38d      	add	r3, pc, #564	; (adr r3, 8000c18 <APP_main+0x470>)
 80009e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e8:	489b      	ldr	r0, [pc, #620]	; (8000c58 <APP_main+0x4b0>)
 80009ea:	f7ff fe6f 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 40, 0x06C00293);
 80009ee:	4a98      	ldr	r2, [pc, #608]	; (8000c50 <APP_main+0x4a8>)
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	4899      	ldr	r0, [pc, #612]	; (8000c5c <APP_main+0x4b4>)
 80009f6:	f7ff fe69 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 44, 0x00542023);
 80009fa:	a387      	add	r3, pc, #540	; (adr r3, 8000c18 <APP_main+0x470>)
 80009fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a00:	4897      	ldr	r0, [pc, #604]	; (8000c60 <APP_main+0x4b8>)
 8000a02:	f7ff fe63 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 48, 0x06F00293);
 8000a06:	4a97      	ldr	r2, [pc, #604]	; (8000c64 <APP_main+0x4bc>)
 8000a08:	f04f 0300 	mov.w	r3, #0
 8000a0c:	4896      	ldr	r0, [pc, #600]	; (8000c68 <APP_main+0x4c0>)
 8000a0e:	f7ff fe5d 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 52, 0x00542023);
 8000a12:	a381      	add	r3, pc, #516	; (adr r3, 8000c18 <APP_main+0x470>)
 8000a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a18:	4894      	ldr	r0, [pc, #592]	; (8000c6c <APP_main+0x4c4>)
 8000a1a:	f7ff fe57 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 56, 0x02000293);
 8000a1e:	4a94      	ldr	r2, [pc, #592]	; (8000c70 <APP_main+0x4c8>)
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	4893      	ldr	r0, [pc, #588]	; (8000c74 <APP_main+0x4cc>)
 8000a26:	f7ff fe51 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 60, 0x00542023);
 8000a2a:	a37b      	add	r3, pc, #492	; (adr r3, 8000c18 <APP_main+0x470>)
 8000a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a30:	4891      	ldr	r0, [pc, #580]	; (8000c78 <APP_main+0x4d0>)
 8000a32:	f7ff fe4b 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 64, 0x07700293);
 8000a36:	4a91      	ldr	r2, [pc, #580]	; (8000c7c <APP_main+0x4d4>)
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	4890      	ldr	r0, [pc, #576]	; (8000c80 <APP_main+0x4d8>)
 8000a3e:	f7ff fe45 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 68, 0x00542023);
 8000a42:	a375      	add	r3, pc, #468	; (adr r3, 8000c18 <APP_main+0x470>)
 8000a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a48:	488e      	ldr	r0, [pc, #568]	; (8000c84 <APP_main+0x4dc>)
 8000a4a:	f7ff fe3f 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 72, 0x06F00293);
 8000a4e:	4a85      	ldr	r2, [pc, #532]	; (8000c64 <APP_main+0x4bc>)
 8000a50:	f04f 0300 	mov.w	r3, #0
 8000a54:	488c      	ldr	r0, [pc, #560]	; (8000c88 <APP_main+0x4e0>)
 8000a56:	f7ff fe39 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 76, 0x00542023);
 8000a5a:	a36f      	add	r3, pc, #444	; (adr r3, 8000c18 <APP_main+0x470>)
 8000a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a60:	488a      	ldr	r0, [pc, #552]	; (8000c8c <APP_main+0x4e4>)
 8000a62:	f7ff fe33 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 80, 0x07200293);
 8000a66:	4a8a      	ldr	r2, [pc, #552]	; (8000c90 <APP_main+0x4e8>)
 8000a68:	f04f 0300 	mov.w	r3, #0
 8000a6c:	4889      	ldr	r0, [pc, #548]	; (8000c94 <APP_main+0x4ec>)
 8000a6e:	f7ff fe2d 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 84, 0x00542023);
 8000a72:	a369      	add	r3, pc, #420	; (adr r3, 8000c18 <APP_main+0x470>)
 8000a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a78:	4887      	ldr	r0, [pc, #540]	; (8000c98 <APP_main+0x4f0>)
 8000a7a:	f7ff fe27 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 88, 0x06C00293);
 8000a7e:	4a74      	ldr	r2, [pc, #464]	; (8000c50 <APP_main+0x4a8>)
 8000a80:	f04f 0300 	mov.w	r3, #0
 8000a84:	4885      	ldr	r0, [pc, #532]	; (8000c9c <APP_main+0x4f4>)
 8000a86:	f7ff fe21 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 92, 0x00542023);
 8000a8a:	a363      	add	r3, pc, #396	; (adr r3, 8000c18 <APP_main+0x470>)
 8000a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a90:	4883      	ldr	r0, [pc, #524]	; (8000ca0 <APP_main+0x4f8>)
 8000a92:	f7ff fe1b 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 96, 0x06400293);
 8000a96:	4a83      	ldr	r2, [pc, #524]	; (8000ca4 <APP_main+0x4fc>)
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	4882      	ldr	r0, [pc, #520]	; (8000ca8 <APP_main+0x500>)
 8000a9e:	f7ff fe15 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 100, 0x00542023);
 8000aa2:	a35d      	add	r3, pc, #372	; (adr r3, 8000c18 <APP_main+0x470>)
 8000aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa8:	4880      	ldr	r0, [pc, #512]	; (8000cac <APP_main+0x504>)
 8000aaa:	f7ff fe0f 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 104, 0x02000293);
 8000aae:	4a70      	ldr	r2, [pc, #448]	; (8000c70 <APP_main+0x4c8>)
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	487e      	ldr	r0, [pc, #504]	; (8000cb0 <APP_main+0x508>)
 8000ab6:	f7ff fe09 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 108, 0x00542023);
 8000aba:	a357      	add	r3, pc, #348	; (adr r3, 8000c18 <APP_main+0x470>)
 8000abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac0:	487c      	ldr	r0, [pc, #496]	; (8000cb4 <APP_main+0x50c>)
 8000ac2:	f7ff fe03 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 112, 0x02000293);
 8000ac6:	4a6a      	ldr	r2, [pc, #424]	; (8000c70 <APP_main+0x4c8>)
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	487a      	ldr	r0, [pc, #488]	; (8000cb8 <APP_main+0x510>)
 8000ace:	f7ff fdfd 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 116, 0x00542023);
 8000ad2:	a351      	add	r3, pc, #324	; (adr r3, 8000c18 <APP_main+0x470>)
 8000ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad8:	4878      	ldr	r0, [pc, #480]	; (8000cbc <APP_main+0x514>)
 8000ada:	f7ff fdf7 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 120, 0x02D00293);
 8000ade:	4a78      	ldr	r2, [pc, #480]	; (8000cc0 <APP_main+0x518>)
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	4877      	ldr	r0, [pc, #476]	; (8000cc4 <APP_main+0x51c>)
 8000ae6:	f7ff fdf1 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 124, 0x00542023);
 8000aea:	a34b      	add	r3, pc, #300	; (adr r3, 8000c18 <APP_main+0x470>)
 8000aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af0:	4875      	ldr	r0, [pc, #468]	; (8000cc8 <APP_main+0x520>)
 8000af2:	f7ff fdeb 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 128, 0x02D00293);
 8000af6:	4a72      	ldr	r2, [pc, #456]	; (8000cc0 <APP_main+0x518>)
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	4873      	ldr	r0, [pc, #460]	; (8000ccc <APP_main+0x524>)
 8000afe:	f7ff fde5 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 132, 0x00542023);
 8000b02:	a345      	add	r3, pc, #276	; (adr r3, 8000c18 <APP_main+0x470>)
 8000b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b08:	4871      	ldr	r0, [pc, #452]	; (8000cd0 <APP_main+0x528>)
 8000b0a:	f7ff fddf 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 136, 0x04F00293);
 8000b0e:	4a71      	ldr	r2, [pc, #452]	; (8000cd4 <APP_main+0x52c>)
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	4870      	ldr	r0, [pc, #448]	; (8000cd8 <APP_main+0x530>)
 8000b16:	f7ff fdd9 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 140, 0x00542023);
 8000b1a:	a33f      	add	r3, pc, #252	; (adr r3, 8000c18 <APP_main+0x470>)
 8000b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b20:	486e      	ldr	r0, [pc, #440]	; (8000cdc <APP_main+0x534>)
 8000b22:	f7ff fdd3 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 144, 0x05300293);
 8000b26:	4a6e      	ldr	r2, [pc, #440]	; (8000ce0 <APP_main+0x538>)
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	486d      	ldr	r0, [pc, #436]	; (8000ce4 <APP_main+0x53c>)
 8000b2e:	f7ff fdcd 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 148, 0x00542023);
 8000b32:	a339      	add	r3, pc, #228	; (adr r3, 8000c18 <APP_main+0x470>)
 8000b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b38:	486b      	ldr	r0, [pc, #428]	; (8000ce8 <APP_main+0x540>)
 8000b3a:	f7ff fdc7 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 152, 0x04300293);
 8000b3e:	4a6b      	ldr	r2, [pc, #428]	; (8000cec <APP_main+0x544>)
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	486a      	ldr	r0, [pc, #424]	; (8000cf0 <APP_main+0x548>)
 8000b46:	f7ff fdc1 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 156, 0x00542023);
 8000b4a:	a333      	add	r3, pc, #204	; (adr r3, 8000c18 <APP_main+0x470>)
 8000b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b50:	4868      	ldr	r0, [pc, #416]	; (8000cf4 <APP_main+0x54c>)
 8000b52:	f7ff fdbb 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 160, 0x04900293);
 8000b56:	4a68      	ldr	r2, [pc, #416]	; (8000cf8 <APP_main+0x550>)
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	4867      	ldr	r0, [pc, #412]	; (8000cfc <APP_main+0x554>)
 8000b5e:	f7ff fdb5 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 164, 0x00542023);
 8000b62:	a32d      	add	r3, pc, #180	; (adr r3, 8000c18 <APP_main+0x470>)
 8000b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b68:	4865      	ldr	r0, [pc, #404]	; (8000d00 <APP_main+0x558>)
 8000b6a:	f7ff fdaf 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 168, 0x00A00293);
 8000b6e:	4a65      	ldr	r2, [pc, #404]	; (8000d04 <APP_main+0x55c>)
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	4864      	ldr	r0, [pc, #400]	; (8000d08 <APP_main+0x560>)
 8000b76:	f7ff fda9 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 172, 0x00542023);
 8000b7a:	a327      	add	r3, pc, #156	; (adr r3, 8000c18 <APP_main+0x470>)
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	4862      	ldr	r0, [pc, #392]	; (8000d0c <APP_main+0x564>)
 8000b82:	f7ff fda3 	bl	80006cc <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 176, 0xF61FF06F);
 8000b86:	4a62      	ldr	r2, [pc, #392]	; (8000d10 <APP_main+0x568>)
 8000b88:	f04f 0300 	mov.w	r3, #0
 8000b8c:	4861      	ldr	r0, [pc, #388]	; (8000d14 <APP_main+0x56c>)
 8000b8e:	f7ff fd9d 	bl	80006cc <PUTFULL>

        HAL_Delay(100);
 8000b92:	2064      	movs	r0, #100	; 0x64
 8000b94:	f001 f89c 	bl	8001cd0 <HAL_Delay>
        PUTFULL(CLINT_MSIP_ADDR, 1);
 8000b98:	f04f 0201 	mov.w	r2, #1
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000ba4:	f7ff fd92 	bl	80006cc <PUTFULL>

        HAL_Delay(100);
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f001 f891 	bl	8001cd0 <HAL_Delay>
        GET(0x80001000);
 8000bae:	485a      	ldr	r0, [pc, #360]	; (8000d18 <APP_main+0x570>)
 8000bb0:	f7ff fd26 	bl	8000600 <GET>
        break;
 8000bb4:	e022      	b.n	8000bfc <APP_main+0x454>
      case 'R':
        PUTFULL(0x80001000, 0);
 8000bb6:	f04f 0200 	mov.w	r2, #0
 8000bba:	f04f 0300 	mov.w	r3, #0
 8000bbe:	4856      	ldr	r0, [pc, #344]	; (8000d18 <APP_main+0x570>)
 8000bc0:	f7ff fd84 	bl	80006cc <PUTFULL>
        break;
 8000bc4:	e01a      	b.n	8000bfc <APP_main+0x454>
      case 'r':
        GET(0x80001000);
 8000bc6:	4854      	ldr	r0, [pc, #336]	; (8000d18 <APP_main+0x570>)
 8000bc8:	f7ff fd1a 	bl	8000600 <GET>
        break;
 8000bcc:	e016      	b.n	8000bfc <APP_main+0x454>
      case '2':
        GET(CLINT_MSIP_ADDR);
 8000bce:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000bd2:	f7ff fd15 	bl	8000600 <GET>
        break;
 8000bd6:	e011      	b.n	8000bfc <APP_main+0x454>

      case 'u':
        GET(UART_TXDATA_ADDR);
 8000bd8:	f04f 40a8 	mov.w	r0, #1409286144	; 0x54000000
 8000bdc:	f7ff fd10 	bl	8000600 <GET>
        GET(UART_RXDATA_ADDR);
 8000be0:	484e      	ldr	r0, [pc, #312]	; (8000d1c <APP_main+0x574>)
 8000be2:	f7ff fd0d 	bl	8000600 <GET>
        GET(UART_TXCTRL_ADDR);
 8000be6:	484e      	ldr	r0, [pc, #312]	; (8000d20 <APP_main+0x578>)
 8000be8:	f7ff fd0a 	bl	8000600 <GET>
        GET(UART_RXCTRL_ADDR);
 8000bec:	484d      	ldr	r0, [pc, #308]	; (8000d24 <APP_main+0x57c>)
 8000bee:	f7ff fd07 	bl	8000600 <GET>
        GET(UART_DIV_ADDR);
 8000bf2:	484d      	ldr	r0, [pc, #308]	; (8000d28 <APP_main+0x580>)
 8000bf4:	f7ff fd04 	bl	8000600 <GET>
        break;
 8000bf8:	e000      	b.n	8000bfc <APP_main+0x454>
    }
  }
 8000bfa:	bf00      	nop

  HAL_Delay(50);
 8000bfc:	2032      	movs	r0, #50	; 0x32
 8000bfe:	f001 f867 	bl	8001cd0 <HAL_Delay>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	f3af 8000 	nop.w
 8000c10:	00942423 	.word	0x00942423
 8000c14:	00000000 	.word	0x00000000
 8000c18:	00542023 	.word	0x00542023
 8000c1c:	00000000 	.word	0x00000000
 8000c20:	54000437 	.word	0x54000437
 8000c24:	00040413 	.word	0x00040413
 8000c28:	80000004 	.word	0x80000004
 8000c2c:	00100493 	.word	0x00100493
 8000c30:	80000008 	.word	0x80000008
 8000c34:	8000000c 	.word	0x8000000c
 8000c38:	06800293 	.word	0x06800293
 8000c3c:	80000010 	.word	0x80000010
 8000c40:	80000014 	.word	0x80000014
 8000c44:	06500293 	.word	0x06500293
 8000c48:	80000018 	.word	0x80000018
 8000c4c:	8000001c 	.word	0x8000001c
 8000c50:	06c00293 	.word	0x06c00293
 8000c54:	80000020 	.word	0x80000020
 8000c58:	80000024 	.word	0x80000024
 8000c5c:	80000028 	.word	0x80000028
 8000c60:	8000002c 	.word	0x8000002c
 8000c64:	06f00293 	.word	0x06f00293
 8000c68:	80000030 	.word	0x80000030
 8000c6c:	80000034 	.word	0x80000034
 8000c70:	02000293 	.word	0x02000293
 8000c74:	80000038 	.word	0x80000038
 8000c78:	8000003c 	.word	0x8000003c
 8000c7c:	07700293 	.word	0x07700293
 8000c80:	80000040 	.word	0x80000040
 8000c84:	80000044 	.word	0x80000044
 8000c88:	80000048 	.word	0x80000048
 8000c8c:	8000004c 	.word	0x8000004c
 8000c90:	07200293 	.word	0x07200293
 8000c94:	80000050 	.word	0x80000050
 8000c98:	80000054 	.word	0x80000054
 8000c9c:	80000058 	.word	0x80000058
 8000ca0:	8000005c 	.word	0x8000005c
 8000ca4:	06400293 	.word	0x06400293
 8000ca8:	80000060 	.word	0x80000060
 8000cac:	80000064 	.word	0x80000064
 8000cb0:	80000068 	.word	0x80000068
 8000cb4:	8000006c 	.word	0x8000006c
 8000cb8:	80000070 	.word	0x80000070
 8000cbc:	80000074 	.word	0x80000074
 8000cc0:	02d00293 	.word	0x02d00293
 8000cc4:	80000078 	.word	0x80000078
 8000cc8:	8000007c 	.word	0x8000007c
 8000ccc:	80000080 	.word	0x80000080
 8000cd0:	80000084 	.word	0x80000084
 8000cd4:	04f00293 	.word	0x04f00293
 8000cd8:	80000088 	.word	0x80000088
 8000cdc:	8000008c 	.word	0x8000008c
 8000ce0:	05300293 	.word	0x05300293
 8000ce4:	80000090 	.word	0x80000090
 8000ce8:	80000094 	.word	0x80000094
 8000cec:	04300293 	.word	0x04300293
 8000cf0:	80000098 	.word	0x80000098
 8000cf4:	8000009c 	.word	0x8000009c
 8000cf8:	04900293 	.word	0x04900293
 8000cfc:	800000a0 	.word	0x800000a0
 8000d00:	800000a4 	.word	0x800000a4
 8000d04:	00a00293 	.word	0x00a00293
 8000d08:	800000a8 	.word	0x800000a8
 8000d0c:	800000ac 	.word	0x800000ac
 8000d10:	f61ff06f 	.word	0xf61ff06f
 8000d14:	800000b0 	.word	0x800000b0
 8000d18:	80001000 	.word	0x80001000
 8000d1c:	54000004 	.word	0x54000004
 8000d20:	54000008 	.word	0x54000008
 8000d24:	5400000c 	.word	0x5400000c
 8000d28:	54000018 	.word	0x54000018

08000d2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d30:	f000 ff5c 	bl	8001bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d34:	f000 f80e 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d38:	f000 f998 	bl	800106c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d3c:	f000 f96c 	bl	8001018 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000d40:	f000 f916 	bl	8000f70 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000d44:	f000 f872 	bl	8000e2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000d48:	f7ff fc4a 	bl	80005e0 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000d4c:	f7ff fd2c 	bl	80007a8 <APP_main>
 8000d50:	e7fc      	b.n	8000d4c <main+0x20>
	...

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b094      	sub	sp, #80	; 0x50
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2234      	movs	r2, #52	; 0x34
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fffa 	bl	8004d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <SystemClock_Config+0xd0>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a28      	ldr	r2, [pc, #160]	; (8000e24 <SystemClock_Config+0xd0>)
 8000d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <SystemClock_Config+0xd0>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d94:	2300      	movs	r3, #0
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <SystemClock_Config+0xd4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <SystemClock_Config+0xd4>)
 8000d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <SystemClock_Config+0xd4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db8:	2310      	movs	r3, #16
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000dc8:	23a0      	movs	r3, #160	; 0xa0
 8000dca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fd37 	bl	8002850 <HAL_RCC_OscConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000de8:	f000 f9cc 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dec:	230f      	movs	r3, #15
 8000dee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df0:	2302      	movs	r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000df8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e04:	f107 0308 	add.w	r3, r7, #8
 8000e08:	2105      	movs	r1, #5
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fa5c 	bl	80022c8 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e16:	f000 f9b5 	bl	8001184 <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3750      	adds	r7, #80	; 0x50
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40007000 	.word	0x40007000

08000e2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	; 0x58
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2220      	movs	r2, #32
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 ff79 	bl	8004d5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000e6c:	4a3f      	ldr	r2, [pc, #252]	; (8000f6c <MX_TIM1_Init+0x140>)
 8000e6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000e72:	229f      	movs	r2, #159	; 0x9f
 8000e74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e76:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000e7c:	4b3a      	ldr	r3, [pc, #232]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000e7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e8a:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e96:	4834      	ldr	r0, [pc, #208]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000e98:	f001 ff78 	bl	8002d8c <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ea2:	f000 f96f 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	482d      	ldr	r0, [pc, #180]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000eb4:	f002 fcb8 	bl	8003828 <HAL_TIM_ConfigClockSource>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ebe:	f000 f961 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ec2:	4829      	ldr	r0, [pc, #164]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000ec4:	f001 ffb1 	bl	8002e2a <HAL_TIM_PWM_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ece:	f000 f959 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4821      	ldr	r0, [pc, #132]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000ee2:	f003 f9cb 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000eec:	f000 f94a 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ef0:	2370      	movs	r3, #112	; 0x70
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8000ef4:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	4619      	mov	r1, r3
 8000f16:	4814      	ldr	r0, [pc, #80]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000f18:	f002 fbc4 	bl	80036a4 <HAL_TIM_PWM_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f22:	f000 f92f 	bl	8001184 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000f4a:	f003 fa13 	bl	8004374 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f54:	f000 f916 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <MX_TIM1_Init+0x13c>)
 8000f5a:	f000 f9b3 	bl	80012c4 <HAL_TIM_MspPostInit>

}
 8000f5e:	bf00      	nop
 8000f60:	3758      	adds	r7, #88	; 0x58
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000360 	.word	0x20000360
 8000f6c:	40010000 	.word	0x40010000

08000f70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000f8e:	4a21      	ldr	r2, [pc, #132]	; (8001014 <MX_TIM4_Init+0xa4>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000fb2:	4817      	ldr	r0, [pc, #92]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fb4:	f002 f85a 	bl	800306c <HAL_TIM_IC_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f000 f8e1 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fca:	f107 0310 	add.w	r3, r7, #16
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000fd2:	f003 f953 	bl	800427c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000fdc:	f000 f8d2 	bl	8001184 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_TIM4_Init+0xa0>)
 8000ff8:	f002 fab8 	bl	800356c <HAL_TIM_IC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001002:	f000 f8bf 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200003a8 	.word	0x200003a8
 8001014:	40000800 	.word	0x40000800

08001018 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	; (8001068 <MX_USART2_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USART2_UART_Init+0x4c>)
 8001050:	f003 f9f6 	bl	8004440 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 f893 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200003f0 	.word	0x200003f0
 8001068:	40004400 	.word	0x40004400

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b3b      	ldr	r3, [pc, #236]	; (8001174 <MX_GPIO_Init+0x108>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a3a      	ldr	r2, [pc, #232]	; (8001174 <MX_GPIO_Init+0x108>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <MX_GPIO_Init+0x108>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <MX_GPIO_Init+0x108>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a33      	ldr	r2, [pc, #204]	; (8001174 <MX_GPIO_Init+0x108>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <MX_GPIO_Init+0x108>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_GPIO_Init+0x108>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a2c      	ldr	r2, [pc, #176]	; (8001174 <MX_GPIO_Init+0x108>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_GPIO_Init+0x108>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2103      	movs	r1, #3
 80010da:	4827      	ldr	r0, [pc, #156]	; (8001178 <MX_GPIO_Init+0x10c>)
 80010dc:	f001 f8da 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2121      	movs	r1, #33	; 0x21
 80010e4:	4825      	ldr	r0, [pc, #148]	; (800117c <MX_GPIO_Init+0x110>)
 80010e6:	f001 f8d5 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	481e      	ldr	r0, [pc, #120]	; (8001178 <MX_GPIO_Init+0x10c>)
 8001100:	f000 ff1c 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 8001104:	2303      	movs	r3, #3
 8001106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	4619      	mov	r1, r3
 800111a:	4817      	ldr	r0, [pc, #92]	; (8001178 <MX_GPIO_Init+0x10c>)
 800111c:	f000 ff0e 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5;
 8001120:	2321      	movs	r3, #33	; 0x21
 8001122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	4811      	ldr	r0, [pc, #68]	; (800117c <MX_GPIO_Init+0x110>)
 8001138:	f000 ff00 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 800113c:	2312      	movs	r3, #18
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4619      	mov	r1, r3
 800114e:	480b      	ldr	r0, [pc, #44]	; (800117c <MX_GPIO_Init+0x110>)
 8001150:	f000 fef4 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8001154:	2301      	movs	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_GPIO_Init+0x114>)
 8001168:	f000 fee8 	bl	8001f3c <HAL_GPIO_Init>

}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40020800 	.word	0x40020800
 800117c:	40020000 	.word	0x40020000
 8001180:	40020400 	.word	0x40020400

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	e7fe      	b.n	800118c <Error_Handler+0x8>
	...

08001190 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <HAL_MspInit+0x4c>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	4a08      	ldr	r2, [pc, #32]	; (80011dc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	; 0x40
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0b      	ldr	r2, [pc, #44]	; (800121c <HAL_TIM_Base_MspInit+0x3c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10d      	bne.n	800120e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_TIM_Base_MspInit+0x40>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a09      	ldr	r2, [pc, #36]	; (8001220 <HAL_TIM_Base_MspInit+0x40>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_TIM_Base_MspInit+0x40>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40010000 	.word	0x40010000
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <HAL_TIM_IC_MspInit+0x94>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d133      	bne.n	80012ae <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_TIM_IC_MspInit+0x98>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <HAL_TIM_IC_MspInit+0x98>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_TIM_IC_MspInit+0x98>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_TIM_IC_MspInit+0x98>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a14      	ldr	r2, [pc, #80]	; (80012bc <HAL_TIM_IC_MspInit+0x98>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_TIM_IC_MspInit+0x98>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800127e:	2340      	movs	r3, #64	; 0x40
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800128e:	2302      	movs	r3, #2
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4809      	ldr	r0, [pc, #36]	; (80012c0 <HAL_TIM_IC_MspInit+0x9c>)
 800129a:	f000 fe4f 	bl	8001f3c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	201e      	movs	r0, #30
 80012a4:	f000 fe13 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80012a8:	201e      	movs	r0, #30
 80012aa:	f000 fe2c 	bl	8001f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3728      	adds	r7, #40	; 0x28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40000800 	.word	0x40000800
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400

080012c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <HAL_TIM_MspPostInit+0x68>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d11e      	bne.n	8001324 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_TIM_MspPostInit+0x6c>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_TIM_MspPostInit+0x6c>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_TIM_MspPostInit+0x6c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001314:	2301      	movs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_TIM_MspPostInit+0x70>)
 8001320:	f000 fe0c 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40010000 	.word	0x40010000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000

08001338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_UART_MspInit+0x84>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12b      	bne.n	80013b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_UART_MspInit+0x88>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_UART_MspInit+0x88>)
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_UART_MspInit+0x88>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_UART_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_UART_MspInit+0x88>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_UART_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001392:	230c      	movs	r3, #12
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a2:	2307      	movs	r3, #7
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_UART_MspInit+0x8c>)
 80013ae:	f000 fdc5 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40004400 	.word	0x40004400
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 fc3c 	bl	8001c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}

0800141c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <TIM4_IRQHandler+0x10>)
 8001422:	f001 ff9b 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200003a8 	.word	0x200003a8

08001430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <_sbrk+0x5c>)
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <_sbrk+0x60>)
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <_sbrk+0x64>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_sbrk+0x68>)
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <_sbrk+0x64>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	429a      	cmp	r2, r3
 800145e:	d207      	bcs.n	8001470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001460:	f003 fc52 	bl	8004d08 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	220c      	movs	r2, #12
 8001468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e009      	b.n	8001484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <_sbrk+0x64>)
 8001480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001482:	68fb      	ldr	r3, [r7, #12]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20020000 	.word	0x20020000
 8001490:	00000400 	.word	0x00000400
 8001494:	20000434 	.word	0x20000434
 8001498:	20000450 	.word	0x20000450

0800149c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <SystemInit+0x20>)
 80014a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <SystemInit+0x20>)
 80014a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d034      	beq.n	800153c <TL_update+0x7c>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80014d8:	461a      	mov	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	7edb      	ldrb	r3, [r3, #27]
 80014e0:	461a      	mov	r2, r3
 80014e2:	2101      	movs	r1, #1
 80014e4:	4834      	ldr	r0, [pc, #208]	; (80015b8 <TL_update+0xf8>)
 80014e6:	f000 fed5 	bl	8002294 <HAL_GPIO_WritePin>

    if (tl->tx_bit_offset == 0) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <TL_update+0x48>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2101      	movs	r1, #1
 80014f8:	4830      	ldr	r0, [pc, #192]	; (80015bc <TL_update+0xfc>)
 80014fa:	f000 fecb 	bl	8002294 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 80014fe:	2201      	movs	r2, #1
 8001500:	2102      	movs	r1, #2
 8001502:	482d      	ldr	r0, [pc, #180]	; (80015b8 <TL_update+0xf8>)
 8001504:	f000 fec6 	bl	8002294 <HAL_GPIO_WritePin>
    }


    if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 800150e:	2b7b      	cmp	r3, #123	; 0x7b
 8001510:	d10c      	bne.n	800152c <TL_update+0x6c>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2102      	movs	r1, #2
 8001516:	4828      	ldr	r0, [pc, #160]	; (80015b8 <TL_update+0xf8>)
 8001518:	f000 febc 	bl	8002294 <HAL_GPIO_WritePin>
      tl->tx_pending = 0;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
      tl->tx_finished = 1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    }

    tl->tx_bit_offset += 1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001532:	3301      	adds	r3, #1
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  }

  if (tl->rx_pending) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 8001542:	2b00      	cmp	r3, #0
 8001544:	d033      	beq.n	80015ae <TL_update+0xee>
    if (tl->rx_finished) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <TL_update+0xa2>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 0);
 8001550:	2200      	movs	r2, #0
 8001552:	2101      	movs	r1, #1
 8001554:	4819      	ldr	r0, [pc, #100]	; (80015bc <TL_update+0xfc>)
 8001556:	f000 fe9d 	bl	8002294 <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
    }
    if (HAL_GPIO_ReadPin(TL_MISO_Valid_GPIO_Port, TL_MISO_Valid_Pin) == GPIO_PIN_SET) {
 8001562:	2102      	movs	r1, #2
 8001564:	4815      	ldr	r0, [pc, #84]	; (80015bc <TL_update+0xfc>)
 8001566:	f000 fe7d 	bl	8002264 <HAL_GPIO_ReadPin>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d11e      	bne.n	80015ae <TL_update+0xee>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_MISO_Data_GPIO_Port, TL_MISO_Data_Pin);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001576:	461c      	mov	r4, r3
 8001578:	2110      	movs	r1, #16
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <TL_update+0xfc>)
 800157c:	f000 fe72 	bl	8002264 <HAL_GPIO_ReadPin>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4423      	add	r3, r4
 8001588:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b

      tl->rx_bit_offset += 1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001592:	3301      	adds	r3, #1
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246

      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 80015a2:	2b7b      	cmp	r3, #123	; 0x7b
 80015a4:	d103      	bne.n	80015ae <TL_update+0xee>
        tl->rx_finished = 1;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
      }
    }
  }
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020000 	.word	0x40020000

080015c0 <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 80015c0:	b4f0      	push	{r4, r5, r6, r7}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80015c8:	2100      	movs	r1, #0
 80015ca:	83f9      	strh	r1, [r7, #30]
 80015cc:	e011      	b.n	80015f2 <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	7e89      	ldrb	r1, [r1, #26]
 80015d2:	4608      	mov	r0, r1
 80015d4:	8bf9      	ldrh	r1, [r7, #30]
 80015d6:	fa40 f101 	asr.w	r1, r0, r1
 80015da:	b2c8      	uxtb	r0, r1
 80015dc:	8bf9      	ldrh	r1, [r7, #30]
 80015de:	f000 0001 	and.w	r0, r0, #1
 80015e2:	b2c4      	uxtb	r4, r0
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	4401      	add	r1, r0
 80015e8:	4620      	mov	r0, r4
 80015ea:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80015ec:	8bf9      	ldrh	r1, [r7, #30]
 80015ee:	3101      	adds	r1, #1
 80015f0:	83f9      	strh	r1, [r7, #30]
 80015f2:	8bf9      	ldrh	r1, [r7, #30]
 80015f4:	2900      	cmp	r1, #0
 80015f6:	d0ea      	beq.n	80015ce <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80015f8:	2100      	movs	r1, #0
 80015fa:	83b9      	strh	r1, [r7, #28]
 80015fc:	e012      	b.n	8001624 <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->mask >> i) & 0b1;
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	7e49      	ldrb	r1, [r1, #25]
 8001602:	4608      	mov	r0, r1
 8001604:	8bb9      	ldrh	r1, [r7, #28]
 8001606:	fa40 f101 	asr.w	r1, r0, r1
 800160a:	b2c8      	uxtb	r0, r1
 800160c:	8bb9      	ldrh	r1, [r7, #28]
 800160e:	3101      	adds	r1, #1
 8001610:	f000 0001 	and.w	r0, r0, #1
 8001614:	b2c4      	uxtb	r4, r0
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4401      	add	r1, r0
 800161a:	4620      	mov	r0, r4
 800161c:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800161e:	8bb9      	ldrh	r1, [r7, #28]
 8001620:	3101      	adds	r1, #1
 8001622:	83b9      	strh	r1, [r7, #28]
 8001624:	8bb9      	ldrh	r1, [r7, #28]
 8001626:	2907      	cmp	r1, #7
 8001628:	d9e9      	bls.n	80015fe <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800162a:	2100      	movs	r1, #0
 800162c:	8379      	strh	r1, [r7, #26]
 800162e:	e012      	b.n	8001656 <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->corrupt >> i) & 0b1;
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	7e09      	ldrb	r1, [r1, #24]
 8001634:	4608      	mov	r0, r1
 8001636:	8b79      	ldrh	r1, [r7, #26]
 8001638:	fa40 f101 	asr.w	r1, r0, r1
 800163c:	b2c8      	uxtb	r0, r1
 800163e:	8b79      	ldrh	r1, [r7, #26]
 8001640:	3109      	adds	r1, #9
 8001642:	f000 0001 	and.w	r0, r0, #1
 8001646:	b2c4      	uxtb	r4, r0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4401      	add	r1, r0
 800164c:	4620      	mov	r0, r4
 800164e:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001650:	8b79      	ldrh	r1, [r7, #26]
 8001652:	3101      	adds	r1, #1
 8001654:	8379      	strh	r1, [r7, #26]
 8001656:	8b79      	ldrh	r1, [r7, #26]
 8001658:	2900      	cmp	r1, #0
 800165a:	d0e9      	beq.n	8001630 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800165c:	2100      	movs	r1, #0
 800165e:	8339      	strh	r1, [r7, #24]
 8001660:	e01e      	b.n	80016a0 <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001668:	8b3c      	ldrh	r4, [r7, #24]
 800166a:	f1c4 0620 	rsb	r6, r4, #32
 800166e:	f1a4 0520 	sub.w	r5, r4, #32
 8001672:	fa20 f204 	lsr.w	r2, r0, r4
 8001676:	fa01 f606 	lsl.w	r6, r1, r6
 800167a:	4332      	orrs	r2, r6
 800167c:	fa21 f505 	lsr.w	r5, r1, r5
 8001680:	432a      	orrs	r2, r5
 8001682:	fa21 f304 	lsr.w	r3, r1, r4
 8001686:	b2d0      	uxtb	r0, r2
 8001688:	8b39      	ldrh	r1, [r7, #24]
 800168a:	310a      	adds	r1, #10
 800168c:	f000 0001 	and.w	r0, r0, #1
 8001690:	b2c4      	uxtb	r4, r0
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4401      	add	r1, r0
 8001696:	4620      	mov	r0, r4
 8001698:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800169a:	8b39      	ldrh	r1, [r7, #24]
 800169c:	3101      	adds	r1, #1
 800169e:	8339      	strh	r1, [r7, #24]
 80016a0:	8b39      	ldrh	r1, [r7, #24]
 80016a2:	293f      	cmp	r1, #63	; 0x3f
 80016a4:	d9dd      	bls.n	8001662 <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	82fb      	strh	r3, [r7, #22]
 80016aa:	e011      	b.n	80016d0 <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	8afb      	ldrh	r3, [r7, #22]
 80016b2:	fa22 f303 	lsr.w	r3, r2, r3
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	8afb      	ldrh	r3, [r7, #22]
 80016ba:	334a      	adds	r3, #74	; 0x4a
 80016bc:	f002 0201 	and.w	r2, r2, #1
 80016c0:	b2d1      	uxtb	r1, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	460a      	mov	r2, r1
 80016c8:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80016ca:	8afb      	ldrh	r3, [r7, #22]
 80016cc:	3301      	adds	r3, #1
 80016ce:	82fb      	strh	r3, [r7, #22]
 80016d0:	8afb      	ldrh	r3, [r7, #22]
 80016d2:	2b1f      	cmp	r3, #31
 80016d4:	d9ea      	bls.n	80016ac <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	82bb      	strh	r3, [r7, #20]
 80016da:	e012      	b.n	8001702 <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	791b      	ldrb	r3, [r3, #4]
 80016e0:	461a      	mov	r2, r3
 80016e2:	8abb      	ldrh	r3, [r7, #20]
 80016e4:	fa42 f303 	asr.w	r3, r2, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	8abb      	ldrh	r3, [r7, #20]
 80016ec:	336a      	adds	r3, #106	; 0x6a
 80016ee:	f002 0201 	and.w	r2, r2, #1
 80016f2:	b2d1      	uxtb	r1, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	460a      	mov	r2, r1
 80016fa:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80016fc:	8abb      	ldrh	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	82bb      	strh	r3, [r7, #20]
 8001702:	8abb      	ldrh	r3, [r7, #20]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d9e9      	bls.n	80016dc <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001708:	2300      	movs	r3, #0
 800170a:	827b      	strh	r3, [r7, #18]
 800170c:	e012      	b.n	8001734 <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	78db      	ldrb	r3, [r3, #3]
 8001712:	461a      	mov	r2, r3
 8001714:	8a7b      	ldrh	r3, [r7, #18]
 8001716:	fa42 f303 	asr.w	r3, r2, r3
 800171a:	b2da      	uxtb	r2, r3
 800171c:	8a7b      	ldrh	r3, [r7, #18]
 800171e:	336e      	adds	r3, #110	; 0x6e
 8001720:	f002 0201 	and.w	r2, r2, #1
 8001724:	b2d1      	uxtb	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	460a      	mov	r2, r1
 800172c:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800172e:	8a7b      	ldrh	r3, [r7, #18]
 8001730:	3301      	adds	r3, #1
 8001732:	827b      	strh	r3, [r7, #18]
 8001734:	8a7b      	ldrh	r3, [r7, #18]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d9e9      	bls.n	800170e <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800173a:	2300      	movs	r3, #0
 800173c:	823b      	strh	r3, [r7, #16]
 800173e:	e012      	b.n	8001766 <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	789b      	ldrb	r3, [r3, #2]
 8001744:	461a      	mov	r2, r3
 8001746:	8a3b      	ldrh	r3, [r7, #16]
 8001748:	fa42 f303 	asr.w	r3, r2, r3
 800174c:	b2da      	uxtb	r2, r3
 800174e:	8a3b      	ldrh	r3, [r7, #16]
 8001750:	3372      	adds	r3, #114	; 0x72
 8001752:	f002 0201 	and.w	r2, r2, #1
 8001756:	b2d1      	uxtb	r1, r2
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	460a      	mov	r2, r1
 800175e:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001760:	8a3b      	ldrh	r3, [r7, #16]
 8001762:	3301      	adds	r3, #1
 8001764:	823b      	strh	r3, [r7, #16]
 8001766:	8a3b      	ldrh	r3, [r7, #16]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d9e9      	bls.n	8001740 <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800176c:	2300      	movs	r3, #0
 800176e:	81fb      	strh	r3, [r7, #14]
 8001770:	e012      	b.n	8001798 <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	461a      	mov	r2, r3
 8001778:	89fb      	ldrh	r3, [r7, #14]
 800177a:	fa42 f303 	asr.w	r3, r2, r3
 800177e:	b2da      	uxtb	r2, r3
 8001780:	89fb      	ldrh	r3, [r7, #14]
 8001782:	3375      	adds	r3, #117	; 0x75
 8001784:	f002 0201 	and.w	r2, r2, #1
 8001788:	b2d1      	uxtb	r1, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	460a      	mov	r2, r1
 8001790:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	3301      	adds	r3, #1
 8001796:	81fb      	strh	r3, [r7, #14]
 8001798:	89fb      	ldrh	r3, [r7, #14]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d9e9      	bls.n	8001772 <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800179e:	2300      	movs	r3, #0
 80017a0:	81bb      	strh	r3, [r7, #12]
 80017a2:	e012      	b.n	80017ca <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	89bb      	ldrh	r3, [r7, #12]
 80017ac:	fa42 f303 	asr.w	r3, r2, r3
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	89bb      	ldrh	r3, [r7, #12]
 80017b4:	3378      	adds	r3, #120	; 0x78
 80017b6:	f002 0201 	and.w	r2, r2, #1
 80017ba:	b2d1      	uxtb	r1, r2
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	460a      	mov	r2, r1
 80017c2:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	81bb      	strh	r3, [r7, #12]
 80017ca:	89bb      	ldrh	r3, [r7, #12]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d9e9      	bls.n	80017a4 <TL_serialize+0x1e4>
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bcf0      	pop	{r4, r5, r6, r7}
 80017da:	4770      	bx	lr

080017dc <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 80017dc:	b4f0      	push	{r4, r5, r6, r7}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  frame->chanid = 0;
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	2000      	movs	r0, #0
 80017e8:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	2000      	movs	r0, #0
 80017ee:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	2000      	movs	r0, #0
 80017f4:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	2000      	movs	r0, #0
 80017fa:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	2000      	movs	r0, #0
 8001800:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	2000      	movs	r0, #0
 8001806:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 8001808:	687e      	ldr	r6, [r7, #4]
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	2000      	movs	r0, #0
 800181a:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	2000      	movs	r0, #0
 8001820:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	2000      	movs	r0, #0
 8001826:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001828:	2100      	movs	r1, #0
 800182a:	83f9      	strh	r1, [r7, #30]
 800182c:	e014      	b.n	8001858 <TL_deserialize+0x7c>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	7e89      	ldrb	r1, [r1, #26]
 8001832:	b248      	sxtb	r0, r1
 8001834:	8bf9      	ldrh	r1, [r7, #30]
 8001836:	687e      	ldr	r6, [r7, #4]
 8001838:	4431      	add	r1, r6
 800183a:	7ec9      	ldrb	r1, [r1, #27]
 800183c:	f001 0601 	and.w	r6, r1, #1
 8001840:	8bf9      	ldrh	r1, [r7, #30]
 8001842:	fa06 f101 	lsl.w	r1, r6, r1
 8001846:	b249      	sxtb	r1, r1
 8001848:	4301      	orrs	r1, r0
 800184a:	b249      	sxtb	r1, r1
 800184c:	b2c8      	uxtb	r0, r1
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001852:	8bf9      	ldrh	r1, [r7, #30]
 8001854:	3101      	adds	r1, #1
 8001856:	83f9      	strh	r1, [r7, #30]
 8001858:	8bf9      	ldrh	r1, [r7, #30]
 800185a:	2900      	cmp	r1, #0
 800185c:	d0e7      	beq.n	800182e <TL_deserialize+0x52>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800185e:	2100      	movs	r1, #0
 8001860:	83b9      	strh	r1, [r7, #28]
 8001862:	e015      	b.n	8001890 <TL_deserialize+0xb4>
    frame->mask |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	7e49      	ldrb	r1, [r1, #25]
 8001868:	b248      	sxtb	r0, r1
 800186a:	8bb9      	ldrh	r1, [r7, #28]
 800186c:	3101      	adds	r1, #1
 800186e:	687e      	ldr	r6, [r7, #4]
 8001870:	4431      	add	r1, r6
 8001872:	7ec9      	ldrb	r1, [r1, #27]
 8001874:	f001 0601 	and.w	r6, r1, #1
 8001878:	8bb9      	ldrh	r1, [r7, #28]
 800187a:	fa06 f101 	lsl.w	r1, r6, r1
 800187e:	b249      	sxtb	r1, r1
 8001880:	4301      	orrs	r1, r0
 8001882:	b249      	sxtb	r1, r1
 8001884:	b2c8      	uxtb	r0, r1
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	7648      	strb	r0, [r1, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800188a:	8bb9      	ldrh	r1, [r7, #28]
 800188c:	3101      	adds	r1, #1
 800188e:	83b9      	strh	r1, [r7, #28]
 8001890:	8bb9      	ldrh	r1, [r7, #28]
 8001892:	2907      	cmp	r1, #7
 8001894:	d9e6      	bls.n	8001864 <TL_deserialize+0x88>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001896:	2100      	movs	r1, #0
 8001898:	8379      	strh	r1, [r7, #26]
 800189a:	e015      	b.n	80018c8 <TL_deserialize+0xec>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	7e09      	ldrb	r1, [r1, #24]
 80018a0:	b248      	sxtb	r0, r1
 80018a2:	8b79      	ldrh	r1, [r7, #26]
 80018a4:	3109      	adds	r1, #9
 80018a6:	687e      	ldr	r6, [r7, #4]
 80018a8:	4431      	add	r1, r6
 80018aa:	7ec9      	ldrb	r1, [r1, #27]
 80018ac:	f001 0601 	and.w	r6, r1, #1
 80018b0:	8b79      	ldrh	r1, [r7, #26]
 80018b2:	fa06 f101 	lsl.w	r1, r6, r1
 80018b6:	b249      	sxtb	r1, r1
 80018b8:	4301      	orrs	r1, r0
 80018ba:	b249      	sxtb	r1, r1
 80018bc:	b2c8      	uxtb	r0, r1
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80018c2:	8b79      	ldrh	r1, [r7, #26]
 80018c4:	3101      	adds	r1, #1
 80018c6:	8379      	strh	r1, [r7, #26]
 80018c8:	8b79      	ldrh	r1, [r7, #26]
 80018ca:	2900      	cmp	r1, #0
 80018cc:	d0e6      	beq.n	800189c <TL_deserialize+0xc0>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80018ce:	2100      	movs	r1, #0
 80018d0:	8339      	strh	r1, [r7, #24]
 80018d2:	e01b      	b.n	800190c <TL_deserialize+0x130>
    frame->data |= ((frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80018da:	8b3e      	ldrh	r6, [r7, #24]
 80018dc:	f106 0c0a 	add.w	ip, r6, #10
 80018e0:	687e      	ldr	r6, [r7, #4]
 80018e2:	4466      	add	r6, ip
 80018e4:	7ef6      	ldrb	r6, [r6, #27]
 80018e6:	f006 0c01 	and.w	ip, r6, #1
 80018ea:	8b3e      	ldrh	r6, [r7, #24]
 80018ec:	fa0c f606 	lsl.w	r6, ip, r6
 80018f0:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80018f4:	4632      	mov	r2, r6
 80018f6:	4663      	mov	r3, ip
 80018f8:	ea40 0402 	orr.w	r4, r0, r2
 80018fc:	ea41 0503 	orr.w	r5, r1, r3
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	e9c1 4504 	strd	r4, r5, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8001906:	8b39      	ldrh	r1, [r7, #24]
 8001908:	3101      	adds	r1, #1
 800190a:	8339      	strh	r1, [r7, #24]
 800190c:	8b39      	ldrh	r1, [r7, #24]
 800190e:	293f      	cmp	r1, #63	; 0x3f
 8001910:	d9e0      	bls.n	80018d4 <TL_deserialize+0xf8>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001912:	2300      	movs	r3, #0
 8001914:	82fb      	strh	r3, [r7, #22]
 8001916:	e011      	b.n	800193c <TL_deserialize+0x160>
    frame->address |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	8afa      	ldrh	r2, [r7, #22]
 800191e:	324a      	adds	r2, #74	; 0x4a
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	440a      	add	r2, r1
 8001924:	7ed2      	ldrb	r2, [r2, #27]
 8001926:	f002 0101 	and.w	r1, r2, #1
 800192a:	8afa      	ldrh	r2, [r7, #22]
 800192c:	fa01 f202 	lsl.w	r2, r1, r2
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001936:	8afb      	ldrh	r3, [r7, #22]
 8001938:	3301      	adds	r3, #1
 800193a:	82fb      	strh	r3, [r7, #22]
 800193c:	8afb      	ldrh	r3, [r7, #22]
 800193e:	2b1f      	cmp	r3, #31
 8001940:	d9ea      	bls.n	8001918 <TL_deserialize+0x13c>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001942:	2300      	movs	r3, #0
 8001944:	82bb      	strh	r3, [r7, #20]
 8001946:	e015      	b.n	8001974 <TL_deserialize+0x198>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	791b      	ldrb	r3, [r3, #4]
 800194c:	b25a      	sxtb	r2, r3
 800194e:	8abb      	ldrh	r3, [r7, #20]
 8001950:	336a      	adds	r3, #106	; 0x6a
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	440b      	add	r3, r1
 8001956:	7edb      	ldrb	r3, [r3, #27]
 8001958:	f003 0101 	and.w	r1, r3, #1
 800195c:	8abb      	ldrh	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	b25b      	sxtb	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b25b      	sxtb	r3, r3
 8001968:	b2da      	uxtb	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800196e:	8abb      	ldrh	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	82bb      	strh	r3, [r7, #20]
 8001974:	8abb      	ldrh	r3, [r7, #20]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d9e6      	bls.n	8001948 <TL_deserialize+0x16c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800197a:	2300      	movs	r3, #0
 800197c:	827b      	strh	r3, [r7, #18]
 800197e:	e015      	b.n	80019ac <TL_deserialize+0x1d0>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	78db      	ldrb	r3, [r3, #3]
 8001984:	b25a      	sxtb	r2, r3
 8001986:	8a7b      	ldrh	r3, [r7, #18]
 8001988:	336e      	adds	r3, #110	; 0x6e
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	440b      	add	r3, r1
 800198e:	7edb      	ldrb	r3, [r3, #27]
 8001990:	f003 0101 	and.w	r1, r3, #1
 8001994:	8a7b      	ldrh	r3, [r7, #18]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80019a6:	8a7b      	ldrh	r3, [r7, #18]
 80019a8:	3301      	adds	r3, #1
 80019aa:	827b      	strh	r3, [r7, #18]
 80019ac:	8a7b      	ldrh	r3, [r7, #18]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d9e6      	bls.n	8001980 <TL_deserialize+0x1a4>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	823b      	strh	r3, [r7, #16]
 80019b6:	e015      	b.n	80019e4 <TL_deserialize+0x208>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	789b      	ldrb	r3, [r3, #2]
 80019bc:	b25a      	sxtb	r2, r3
 80019be:	8a3b      	ldrh	r3, [r7, #16]
 80019c0:	3372      	adds	r3, #114	; 0x72
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	440b      	add	r3, r1
 80019c6:	7edb      	ldrb	r3, [r3, #27]
 80019c8:	f003 0101 	and.w	r1, r3, #1
 80019cc:	8a3b      	ldrh	r3, [r7, #16]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	b25b      	sxtb	r3, r3
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80019de:	8a3b      	ldrh	r3, [r7, #16]
 80019e0:	3301      	adds	r3, #1
 80019e2:	823b      	strh	r3, [r7, #16]
 80019e4:	8a3b      	ldrh	r3, [r7, #16]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d9e6      	bls.n	80019b8 <TL_deserialize+0x1dc>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	81fb      	strh	r3, [r7, #14]
 80019ee:	e015      	b.n	8001a1c <TL_deserialize+0x240>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	89fb      	ldrh	r3, [r7, #14]
 80019f8:	3375      	adds	r3, #117	; 0x75
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	440b      	add	r3, r1
 80019fe:	7edb      	ldrb	r3, [r3, #27]
 8001a00:	f003 0101 	and.w	r1, r3, #1
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	81fb      	strh	r3, [r7, #14]
 8001a1c:	89fb      	ldrh	r3, [r7, #14]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d9e6      	bls.n	80019f0 <TL_deserialize+0x214>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	81bb      	strh	r3, [r7, #12]
 8001a26:	e015      	b.n	8001a54 <TL_deserialize+0x278>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b25a      	sxtb	r2, r3
 8001a2e:	89bb      	ldrh	r3, [r7, #12]
 8001a30:	3378      	adds	r3, #120	; 0x78
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	440b      	add	r3, r1
 8001a36:	7edb      	ldrb	r3, [r3, #27]
 8001a38:	f003 0101 	and.w	r1, r3, #1
 8001a3c:	89bb      	ldrh	r3, [r7, #12]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	b25b      	sxtb	r3, r3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001a4e:	89bb      	ldrh	r3, [r7, #12]
 8001a50:	3301      	adds	r3, #1
 8001a52:	81bb      	strh	r3, [r7, #12]
 8001a54:	89bb      	ldrh	r3, [r7, #12]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d9e6      	bls.n	8001a28 <TL_deserialize+0x24c>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bcf0      	pop	{r4, r5, r6, r7}
 8001a64:	4770      	bx	lr

08001a66 <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fda5 	bl	80015c0 <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->rx_bit_offset = 0;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
  tl->tx_finished = 0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_finished = 0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  // enable TX RX
  tl->rx_pending = 1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
  tl->tx_pending = 1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <TL_GET>:


void TL_GET(TileLinkController *tl, uint32_t address) {
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
  tl->tx_frame.chanid  = 0;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
  tl->tx_frame.opcode  = 0x4;  // get
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	705a      	strb	r2, [r3, #1]
  tl->tx_frame.param   = 0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	709a      	strb	r2, [r3, #2]
  tl->tx_frame.size    = 2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	70da      	strb	r2, [r3, #3]
  tl->tx_frame.source  = 0;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	711a      	strb	r2, [r3, #4]
  tl->tx_frame.address = address;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	609a      	str	r2, [r3, #8]
  tl->tx_frame.data    = 0x0000000000000000;
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9c1 2304 	strd	r2, r3, [r1, #16]
  tl->tx_frame.corrupt = 0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	761a      	strb	r2, [r3, #24]
  tl->tx_frame.mask    = 0b00001111;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	220f      	movs	r2, #15
 8001af4:	765a      	strb	r2, [r3, #25]
  tl->tx_frame.last    = 1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	769a      	strb	r2, [r3, #26]
  TL_transmit(tl);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffb2 	bl	8001a66 <TL_transmit>
  while (!tl->rx_finished) {}
 8001b02:	bf00      	nop
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0fa      	beq.n	8001b04 <TL_GET+0x56>
  TL_deserialize(&tl->rx_frame);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fe61 	bl	80017dc <TL_deserialize>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <TL_PUTFULLDATA>:

void TL_PUTFULLDATA(TileLinkController *tl, uint32_t address, uint64_t data) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	e9c7 2300 	strd	r2, r3, [r7]
  tl->tx_frame.chanid  = 0;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
  tl->tx_frame.opcode  = 0x0;  // putfulldata
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	705a      	strb	r2, [r3, #1]
  tl->tx_frame.param   = 0;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	709a      	strb	r2, [r3, #2]
  tl->tx_frame.size    = 2;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2202      	movs	r2, #2
 8001b46:	70da      	strb	r2, [r3, #3]
  tl->tx_frame.source  = 0;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	711a      	strb	r2, [r3, #4]
  tl->tx_frame.address = address;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	609a      	str	r2, [r3, #8]
  tl->tx_frame.data    = data;
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b5a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  tl->tx_frame.corrupt = 0;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	761a      	strb	r2, [r3, #24]
  tl->tx_frame.mask    = 0b00001111;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	220f      	movs	r2, #15
 8001b68:	765a      	strb	r2, [r3, #25]
  tl->tx_frame.last    = 1;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	769a      	strb	r2, [r3, #26]
  TL_transmit(tl);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff ff78 	bl	8001a66 <TL_transmit>
  while (!tl->rx_finished) {}
 8001b76:	bf00      	nop
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0fa      	beq.n	8001b78 <TL_PUTFULLDATA+0x56>
  TL_deserialize(&tl->rx_frame);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fe27 	bl	80017dc <TL_deserialize>
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bb4:	4c0b      	ldr	r4, [pc, #44]	; (8001be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bc2:	f7ff fc6b 	bl	800149c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f003 f8a5 	bl	8004d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bca:	f7ff f8af 	bl	8000d2c <main>
  bx  lr    
 8001bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bdc:	08005808 	.word	0x08005808
  ldr r2, =_sbss
 8001be0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001be4:	2000044c 	.word	0x2000044c

08001be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_Init+0x40>)
 8001bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <HAL_Init+0x40>)
 8001c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <HAL_Init+0x40>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f000 f94f 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f000 f808 	bl	8001c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c20:	f7ff fab6 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x54>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_InitTick+0x58>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f967 	bl	8001f22 <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00e      	b.n	8001c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b0f      	cmp	r3, #15
 8001c62:	d80a      	bhi.n	8001c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c64:	2200      	movs	r2, #0
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f000 f92f 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_InitTick+0x5c>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_IncTick+0x20>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x24>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_IncTick+0x24>)
 8001ca2:	6013      	str	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000008 	.word	0x20000008
 8001cb4:	20000438 	.word	0x20000438

08001cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return uwTick;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_GetTick+0x14>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000438 	.word	0x20000438

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff ffee 	bl	8001cb8 <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffde 	bl	8001cb8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000008 	.word	0x20000008

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4a:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	60d3      	str	r3, [r2, #12]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4907      	ldr	r1, [pc, #28]	; (8001db4 <__NVIC_EnableIRQ+0x38>)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f7ff ff8e 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff29 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee0:	f7ff ff3e 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	6978      	ldr	r0, [r7, #20]
 8001eec:	f7ff ff8e 	bl	8001e0c <NVIC_EncodePriority>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff5d 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff31 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffa2 	bl	8001e74 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e165      	b.n	8002224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8154 	bne.w	800221e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80ae 	beq.w	800221e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_GPIO_Init+0x300>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a5c      	ldr	r2, [pc, #368]	; (800223c <HAL_GPIO_Init+0x300>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b5a      	ldr	r3, [pc, #360]	; (800223c <HAL_GPIO_Init+0x300>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_GPIO_Init+0x304>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4f      	ldr	r2, [pc, #316]	; (8002244 <HAL_GPIO_Init+0x308>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <HAL_GPIO_Init+0x30c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4d      	ldr	r2, [pc, #308]	; (800224c <HAL_GPIO_Init+0x310>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x212>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4c      	ldr	r2, [pc, #304]	; (8002250 <HAL_GPIO_Init+0x314>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4b      	ldr	r2, [pc, #300]	; (8002254 <HAL_GPIO_Init+0x318>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x20a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4a      	ldr	r2, [pc, #296]	; (8002258 <HAL_GPIO_Init+0x31c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x206>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <HAL_GPIO_Init+0x320>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x202>
 800213a:	2306      	movs	r3, #6
 800213c:	e00c      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800213e:	2307      	movs	r3, #7
 8002140:	e00a      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002142:	2305      	movs	r3, #5
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002146:	2304      	movs	r3, #4
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002156:	2300      	movs	r3, #0
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002168:	4935      	ldr	r1, [pc, #212]	; (8002240 <HAL_GPIO_Init+0x304>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_GPIO_Init+0x324>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219a:	4a31      	ldr	r2, [pc, #196]	; (8002260 <HAL_GPIO_Init+0x324>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_GPIO_Init+0x324>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	f67f ae96 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40013800 	.word	0x40013800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400
 800224c:	40020800 	.word	0x40020800
 8002250:	40020c00 	.word	0x40020c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40021400 	.word	0x40021400
 800225c:	40021800 	.word	0x40021800
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	4013      	ands	r3, r2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e001      	b.n	8002286 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	619a      	str	r2, [r3, #24]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cc      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d90c      	bls.n	8002304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b65      	ldr	r3, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d044      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e067      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4934      	ldr	r1, [pc, #208]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7ff fc7e 	bl	8001cb8 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7ff fc7a 	bl	8001cb8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e04f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20c      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f855 	bl	80024fc <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fbde 	bl	8001c30 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00
 8002484:	40023800 	.word	0x40023800
 8002488:	080057ac 	.word	0x080057ac
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	080057bc 	.word	0x080057bc

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffdc 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0b5b      	lsrs	r3, r3, #13
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	080057bc 	.word	0x080057bc

080024fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002500:	b0a6      	sub	sp, #152	; 0x98
 8002502:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002522:	4bc8      	ldr	r3, [pc, #800]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b0c      	cmp	r3, #12
 800252c:	f200 817e 	bhi.w	800282c <HAL_RCC_GetSysClockFreq+0x330>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	0800256d 	.word	0x0800256d
 800253c:	0800282d 	.word	0x0800282d
 8002540:	0800282d 	.word	0x0800282d
 8002544:	0800282d 	.word	0x0800282d
 8002548:	08002575 	.word	0x08002575
 800254c:	0800282d 	.word	0x0800282d
 8002550:	0800282d 	.word	0x0800282d
 8002554:	0800282d 	.word	0x0800282d
 8002558:	0800257d 	.word	0x0800257d
 800255c:	0800282d 	.word	0x0800282d
 8002560:	0800282d 	.word	0x0800282d
 8002564:	0800282d 	.word	0x0800282d
 8002568:	080026e7 	.word	0x080026e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4bb6      	ldr	r3, [pc, #728]	; (8002848 <HAL_RCC_GetSysClockFreq+0x34c>)
 800256e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002572:	e15f      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4bb5      	ldr	r3, [pc, #724]	; (800284c <HAL_RCC_GetSysClockFreq+0x350>)
 8002576:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800257a:	e15b      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4bb1      	ldr	r3, [pc, #708]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002588:	4bae      	ldr	r3, [pc, #696]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d031      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002594:	4bab      	ldr	r3, [pc, #684]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	2200      	movs	r2, #0
 800259c:	66bb      	str	r3, [r7, #104]	; 0x68
 800259e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80025a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a6:	663b      	str	r3, [r7, #96]	; 0x60
 80025a8:	2300      	movs	r3, #0
 80025aa:	667b      	str	r3, [r7, #100]	; 0x64
 80025ac:	4ba7      	ldr	r3, [pc, #668]	; (800284c <HAL_RCC_GetSysClockFreq+0x350>)
 80025ae:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80025b2:	462a      	mov	r2, r5
 80025b4:	fb03 f202 	mul.w	r2, r3, r2
 80025b8:	2300      	movs	r3, #0
 80025ba:	4621      	mov	r1, r4
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	4aa2      	ldr	r2, [pc, #648]	; (800284c <HAL_RCC_GetSysClockFreq+0x350>)
 80025c4:	4621      	mov	r1, r4
 80025c6:	fba1 1202 	umull	r1, r2, r1, r2
 80025ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025cc:	460a      	mov	r2, r1
 80025ce:	67ba      	str	r2, [r7, #120]	; 0x78
 80025d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025d2:	4413      	add	r3, r2
 80025d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025da:	2200      	movs	r2, #0
 80025dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80025de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80025e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80025e4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80025e8:	f7fd fe6a 	bl	80002c0 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025f6:	e064      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f8:	4b92      	ldr	r3, [pc, #584]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	2200      	movs	r2, #0
 8002600:	653b      	str	r3, [r7, #80]	; 0x50
 8002602:	657a      	str	r2, [r7, #84]	; 0x54
 8002604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260a:	64bb      	str	r3, [r7, #72]	; 0x48
 800260c:	2300      	movs	r3, #0
 800260e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002610:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002614:	4622      	mov	r2, r4
 8002616:	462b      	mov	r3, r5
 8002618:	f04f 0000 	mov.w	r0, #0
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	0159      	lsls	r1, r3, #5
 8002622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002626:	0150      	lsls	r0, r2, #5
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4621      	mov	r1, r4
 800262e:	1a51      	subs	r1, r2, r1
 8002630:	6139      	str	r1, [r7, #16]
 8002632:	4629      	mov	r1, r5
 8002634:	eb63 0301 	sbc.w	r3, r3, r1
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002646:	4659      	mov	r1, fp
 8002648:	018b      	lsls	r3, r1, #6
 800264a:	4651      	mov	r1, sl
 800264c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002650:	4651      	mov	r1, sl
 8002652:	018a      	lsls	r2, r1, #6
 8002654:	4651      	mov	r1, sl
 8002656:	ebb2 0801 	subs.w	r8, r2, r1
 800265a:	4659      	mov	r1, fp
 800265c:	eb63 0901 	sbc.w	r9, r3, r1
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800266c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002670:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002674:	4690      	mov	r8, r2
 8002676:	4699      	mov	r9, r3
 8002678:	4623      	mov	r3, r4
 800267a:	eb18 0303 	adds.w	r3, r8, r3
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	462b      	mov	r3, r5
 8002682:	eb49 0303 	adc.w	r3, r9, r3
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002694:	4629      	mov	r1, r5
 8002696:	028b      	lsls	r3, r1, #10
 8002698:	4621      	mov	r1, r4
 800269a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800269e:	4621      	mov	r1, r4
 80026a0:	028a      	lsls	r2, r1, #10
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026aa:	2200      	movs	r2, #0
 80026ac:	643b      	str	r3, [r7, #64]	; 0x40
 80026ae:	647a      	str	r2, [r7, #68]	; 0x44
 80026b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80026b4:	f7fd fe04 	bl	80002c0 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4613      	mov	r3, r2
 80026be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026c2:	4b60      	ldr	r3, [pc, #384]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	3301      	adds	r3, #1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80026d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80026e4:	e0a6      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e6:	4b57      	ldr	r3, [pc, #348]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f2:	4b54      	ldr	r3, [pc, #336]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d02a      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fe:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	099b      	lsrs	r3, r3, #6
 8002704:	2200      	movs	r2, #0
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38
 8002708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002710:	2100      	movs	r1, #0
 8002712:	4b4e      	ldr	r3, [pc, #312]	; (800284c <HAL_RCC_GetSysClockFreq+0x350>)
 8002714:	fb03 f201 	mul.w	r2, r3, r1
 8002718:	2300      	movs	r3, #0
 800271a:	fb00 f303 	mul.w	r3, r0, r3
 800271e:	4413      	add	r3, r2
 8002720:	4a4a      	ldr	r2, [pc, #296]	; (800284c <HAL_RCC_GetSysClockFreq+0x350>)
 8002722:	fba0 1202 	umull	r1, r2, r0, r2
 8002726:	677a      	str	r2, [r7, #116]	; 0x74
 8002728:	460a      	mov	r2, r1
 800272a:	673a      	str	r2, [r7, #112]	; 0x70
 800272c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800272e:	4413      	add	r3, r2
 8002730:	677b      	str	r3, [r7, #116]	; 0x74
 8002732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002736:	2200      	movs	r2, #0
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
 800273a:	637a      	str	r2, [r7, #52]	; 0x34
 800273c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002740:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002744:	f7fd fdbc 	bl	80002c0 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002752:	e05b      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002754:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	099b      	lsrs	r3, r3, #6
 800275a:	2200      	movs	r2, #0
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
 800275e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	623b      	str	r3, [r7, #32]
 8002768:	2300      	movs	r3, #0
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
 800276c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002770:	4642      	mov	r2, r8
 8002772:	464b      	mov	r3, r9
 8002774:	f04f 0000 	mov.w	r0, #0
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	0159      	lsls	r1, r3, #5
 800277e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002782:	0150      	lsls	r0, r2, #5
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4641      	mov	r1, r8
 800278a:	ebb2 0a01 	subs.w	sl, r2, r1
 800278e:	4649      	mov	r1, r9
 8002790:	eb63 0b01 	sbc.w	fp, r3, r1
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a8:	ebb2 040a 	subs.w	r4, r2, sl
 80027ac:	eb63 050b 	sbc.w	r5, r3, fp
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	00eb      	lsls	r3, r5, #3
 80027ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027be:	00e2      	lsls	r2, r4, #3
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
 80027c4:	4643      	mov	r3, r8
 80027c6:	18e3      	adds	r3, r4, r3
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	464b      	mov	r3, r9
 80027cc:	eb45 0303 	adc.w	r3, r5, r3
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027de:	4629      	mov	r1, r5
 80027e0:	028b      	lsls	r3, r1, #10
 80027e2:	4621      	mov	r1, r4
 80027e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e8:	4621      	mov	r1, r4
 80027ea:	028a      	lsls	r2, r1, #10
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f4:	2200      	movs	r2, #0
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	61fa      	str	r2, [r7, #28]
 80027fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027fe:	f7fd fd5f 	bl	80002c0 <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4613      	mov	r3, r2
 8002808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCC_GetSysClockFreq+0x348>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0f1b      	lsrs	r3, r3, #28
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800281a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800281e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800282a:	e003      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_GetSysClockFreq+0x34c>)
 800282e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002834:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002838:	4618      	mov	r0, r3
 800283a:	3798      	adds	r7, #152	; 0x98
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400
 800284c:	017d7840 	.word	0x017d7840

08002850 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e28d      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8083 	beq.w	8002976 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002870:	4b94      	ldr	r3, [pc, #592]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 030c 	and.w	r3, r3, #12
 8002878:	2b04      	cmp	r3, #4
 800287a:	d019      	beq.n	80028b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800287c:	4b91      	ldr	r3, [pc, #580]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002884:	2b08      	cmp	r3, #8
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002888:	4b8e      	ldr	r3, [pc, #568]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002894:	d00c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002896:	4b8b      	ldr	r3, [pc, #556]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d112      	bne.n	80028c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a2:	4b88      	ldr	r3, [pc, #544]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	4b84      	ldr	r3, [pc, #528]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05b      	beq.n	8002974 <HAL_RCC_OscConfig+0x124>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d157      	bne.n	8002974 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e25a      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x90>
 80028d2:	4b7c      	ldr	r3, [pc, #496]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a7b      	ldr	r2, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e01d      	b.n	800291c <HAL_RCC_OscConfig+0xcc>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0xb4>
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a75      	ldr	r2, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a72      	ldr	r2, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0xcc>
 8002904:	4b6f      	ldr	r3, [pc, #444]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a6e      	ldr	r2, [pc, #440]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b6c      	ldr	r3, [pc, #432]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a6b      	ldr	r2, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff f9c8 	bl	8001cb8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7ff f9c4 	bl	8001cb8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e21f      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b61      	ldr	r3, [pc, #388]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0xdc>
 800294a:	e014      	b.n	8002976 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7ff f9b4 	bl	8001cb8 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff f9b0 	bl	8001cb8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e20b      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x104>
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d06f      	beq.n	8002a62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002982:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b00      	cmp	r3, #0
 800298c:	d017      	beq.n	80029be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800298e:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002996:	2b08      	cmp	r3, #8
 8002998:	d105      	bne.n	80029a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800299a:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d11c      	bne.n	80029ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b2:	4b44      	ldr	r3, [pc, #272]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d116      	bne.n	80029ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_RCC_OscConfig+0x186>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d001      	beq.n	80029d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e1d3      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4937      	ldr	r1, [pc, #220]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ea:	e03a      	b.n	8002a62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d020      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_RCC_OscConfig+0x278>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7ff f95d 	bl	8001cb8 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7ff f959 	bl	8001cb8 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e1b4      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4925      	ldr	r1, [pc, #148]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <HAL_RCC_OscConfig+0x278>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f93c 	bl	8001cb8 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a44:	f7ff f938 	bl	8001cb8 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e193      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d036      	beq.n	8002adc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d016      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7ff f91c 	bl	8001cb8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a84:	f7ff f918 	bl	8001cb8 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e173      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x274>)
 8002a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x234>
 8002aa2:	e01b      	b.n	8002adc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <HAL_RCC_OscConfig+0x27c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7ff f905 	bl	8001cb8 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	e00e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7ff f901 	bl	8001cb8 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d907      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e15c      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	42470000 	.word	0x42470000
 8002acc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad0:	4b8a      	ldr	r3, [pc, #552]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ea      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 8097 	beq.w	8002c18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aee:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10f      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60bb      	str	r3, [r7, #8]
 8002afe:	4b7f      	ldr	r3, [pc, #508]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	4a7e      	ldr	r2, [pc, #504]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0a:	4b7c      	ldr	r3, [pc, #496]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b79      	ldr	r3, [pc, #484]	; (8002d00 <HAL_RCC_OscConfig+0x4b0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d118      	bne.n	8002b58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b26:	4b76      	ldr	r3, [pc, #472]	; (8002d00 <HAL_RCC_OscConfig+0x4b0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a75      	ldr	r2, [pc, #468]	; (8002d00 <HAL_RCC_OscConfig+0x4b0>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b32:	f7ff f8c1 	bl	8001cb8 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7ff f8bd 	bl	8001cb8 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e118      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <HAL_RCC_OscConfig+0x4b0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x31e>
 8002b60:	4b66      	ldr	r3, [pc, #408]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	4a65      	ldr	r2, [pc, #404]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6c:	e01c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x358>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b05      	cmp	r3, #5
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x340>
 8002b76:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a60      	ldr	r2, [pc, #384]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a5d      	ldr	r2, [pc, #372]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0x358>
 8002b90:	4b5a      	ldr	r3, [pc, #360]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a59      	ldr	r2, [pc, #356]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	4b57      	ldr	r3, [pc, #348]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	4a56      	ldr	r2, [pc, #344]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002ba2:	f023 0304 	bic.w	r3, r3, #4
 8002ba6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d015      	beq.n	8002bdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb0:	f7ff f882 	bl	8001cb8 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb8:	f7ff f87e 	bl	8001cb8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e0d7      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ee      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x368>
 8002bda:	e014      	b.n	8002c06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bdc:	f7ff f86c 	bl	8001cb8 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7ff f868 	bl	8001cb8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e0c1      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfa:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ee      	bne.n	8002be4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	4a3a      	ldr	r2, [pc, #232]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80ad 	beq.w	8002d7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d060      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d145      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b33      	ldr	r3, [pc, #204]	; (8002d04 <HAL_RCC_OscConfig+0x4b4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f83c 	bl	8001cb8 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7ff f838 	bl	8001cb8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e093      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	019b      	lsls	r3, r3, #6
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	071b      	lsls	r3, r3, #28
 8002c8e:	491b      	ldr	r1, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x4b4>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7ff f80d 	bl	8001cb8 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7ff f809 	bl	8001cb8 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e064      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x452>
 8002cc0:	e05c      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCC_OscConfig+0x4b4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fff6 	bl	8001cb8 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe fff2 	bl	8001cb8 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04d      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x4ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x480>
 8002cee:	e045      	b.n	8002d7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e040      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d08:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <HAL_RCC_OscConfig+0x538>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d030      	beq.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d129      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d122      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d119      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	3b01      	subs	r3, #1
 8002d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d10f      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d107      	bne.n	8002d78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800

08002d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e041      	b.n	8002e22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fa14 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f000 fe1c 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e041      	b.n	8002ec0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f839 	bl	8002ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f000 fdcd 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_TIM_PWM_Start+0x24>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e022      	b.n	8002f46 <HAL_TIM_PWM_Start+0x6a>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d109      	bne.n	8002f1a <HAL_TIM_PWM_Start+0x3e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	e015      	b.n	8002f46 <HAL_TIM_PWM_Start+0x6a>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d109      	bne.n	8002f34 <HAL_TIM_PWM_Start+0x58>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	bf14      	ite	ne
 8002f2c:	2301      	movne	r3, #1
 8002f2e:	2300      	moveq	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e008      	b.n	8002f46 <HAL_TIM_PWM_Start+0x6a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07c      	b.n	8003048 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <HAL_TIM_PWM_Start+0x82>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f5c:	e013      	b.n	8002f86 <HAL_TIM_PWM_Start+0xaa>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d104      	bne.n	8002f6e <HAL_TIM_PWM_Start+0x92>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f6c:	e00b      	b.n	8002f86 <HAL_TIM_PWM_Start+0xaa>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_PWM_Start+0xa2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f7c:	e003      	b.n	8002f86 <HAL_TIM_PWM_Start+0xaa>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 f94e 	bl	8004230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2d      	ldr	r2, [pc, #180]	; (8003050 <HAL_TIM_PWM_Start+0x174>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_TIM_PWM_Start+0xcc>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a2c      	ldr	r2, [pc, #176]	; (8003054 <HAL_TIM_PWM_Start+0x178>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_TIM_PWM_Start+0xd0>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_TIM_PWM_Start+0xd2>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a22      	ldr	r2, [pc, #136]	; (8003050 <HAL_TIM_PWM_Start+0x174>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <HAL_TIM_PWM_Start+0x136>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d01d      	beq.n	8003012 <HAL_TIM_PWM_Start+0x136>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1f      	ldr	r2, [pc, #124]	; (8003058 <HAL_TIM_PWM_Start+0x17c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d018      	beq.n	8003012 <HAL_TIM_PWM_Start+0x136>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_TIM_PWM_Start+0x180>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_TIM_PWM_Start+0x136>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_TIM_PWM_Start+0x184>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00e      	beq.n	8003012 <HAL_TIM_PWM_Start+0x136>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a16      	ldr	r2, [pc, #88]	; (8003054 <HAL_TIM_PWM_Start+0x178>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_TIM_PWM_Start+0x136>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a18      	ldr	r2, [pc, #96]	; (8003064 <HAL_TIM_PWM_Start+0x188>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_TIM_PWM_Start+0x136>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a16      	ldr	r2, [pc, #88]	; (8003068 <HAL_TIM_PWM_Start+0x18c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d111      	bne.n	8003036 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b06      	cmp	r3, #6
 8003022:	d010      	beq.n	8003046 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003034:	e007      	b.n	8003046 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0201 	orr.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40010000 	.word	0x40010000
 8003054:	40010400 	.word	0x40010400
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40014000 	.word	0x40014000
 8003068:	40001800 	.word	0x40001800

0800306c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e041      	b.n	8003102 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe f8c6 	bl	8001224 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f000 fcac 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d104      	bne.n	800312a <HAL_TIM_IC_Start_IT+0x1e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003126:	b2db      	uxtb	r3, r3
 8003128:	e013      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x46>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d104      	bne.n	800313a <HAL_TIM_IC_Start_IT+0x2e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e00b      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x46>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d104      	bne.n	800314a <HAL_TIM_IC_Start_IT+0x3e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e003      	b.n	8003152 <HAL_TIM_IC_Start_IT+0x46>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d104      	bne.n	8003164 <HAL_TIM_IC_Start_IT+0x58>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e013      	b.n	800318c <HAL_TIM_IC_Start_IT+0x80>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d104      	bne.n	8003174 <HAL_TIM_IC_Start_IT+0x68>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e00b      	b.n	800318c <HAL_TIM_IC_Start_IT+0x80>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d104      	bne.n	8003184 <HAL_TIM_IC_Start_IT+0x78>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e003      	b.n	800318c <HAL_TIM_IC_Start_IT+0x80>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800318a:	b2db      	uxtb	r3, r3
 800318c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800318e:	7bbb      	ldrb	r3, [r7, #14]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d102      	bne.n	800319a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003194:	7b7b      	ldrb	r3, [r7, #13]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d001      	beq.n	800319e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0cc      	b.n	8003338 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_IC_Start_IT+0xa2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2202      	movs	r2, #2
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ac:	e013      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0xca>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d104      	bne.n	80031be <HAL_TIM_IC_Start_IT+0xb2>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031bc:	e00b      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0xca>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_IC_Start_IT+0xc2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031cc:	e003      	b.n	80031d6 <HAL_TIM_IC_Start_IT+0xca>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d104      	bne.n	80031e6 <HAL_TIM_IC_Start_IT+0xda>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e4:	e013      	b.n	800320e <HAL_TIM_IC_Start_IT+0x102>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_IC_Start_IT+0xea>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f4:	e00b      	b.n	800320e <HAL_TIM_IC_Start_IT+0x102>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_IC_Start_IT+0xfa>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003204:	e003      	b.n	800320e <HAL_TIM_IC_Start_IT+0x102>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	d841      	bhi.n	8003298 <HAL_TIM_IC_Start_IT+0x18c>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_TIM_IC_Start_IT+0x110>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	08003251 	.word	0x08003251
 8003220:	08003299 	.word	0x08003299
 8003224:	08003299 	.word	0x08003299
 8003228:	08003299 	.word	0x08003299
 800322c:	08003263 	.word	0x08003263
 8003230:	08003299 	.word	0x08003299
 8003234:	08003299 	.word	0x08003299
 8003238:	08003299 	.word	0x08003299
 800323c:	08003275 	.word	0x08003275
 8003240:	08003299 	.word	0x08003299
 8003244:	08003299 	.word	0x08003299
 8003248:	08003299 	.word	0x08003299
 800324c:	08003287 	.word	0x08003287
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0202 	orr.w	r2, r2, #2
 800325e:	60da      	str	r2, [r3, #12]
      break;
 8003260:	e01d      	b.n	800329e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0204 	orr.w	r2, r2, #4
 8003270:	60da      	str	r2, [r3, #12]
      break;
 8003272:	e014      	b.n	800329e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0208 	orr.w	r2, r2, #8
 8003282:	60da      	str	r2, [r3, #12]
      break;
 8003284:	e00b      	b.n	800329e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0210 	orr.w	r2, r2, #16
 8003294:	60da      	str	r2, [r3, #12]
      break;
 8003296:	e002      	b.n	800329e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	bf00      	nop
  }

  if (status == HAL_OK)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d148      	bne.n	8003336 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2201      	movs	r2, #1
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 ffbf 	bl	8004230 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a22      	ldr	r2, [pc, #136]	; (8003340 <HAL_TIM_IC_Start_IT+0x234>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d022      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d01d      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <HAL_TIM_IC_Start_IT+0x238>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d018      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_TIM_IC_Start_IT+0x23c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d013      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1b      	ldr	r2, [pc, #108]	; (800334c <HAL_TIM_IC_Start_IT+0x240>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00e      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <HAL_TIM_IC_Start_IT+0x244>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d009      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a18      	ldr	r2, [pc, #96]	; (8003354 <HAL_TIM_IC_Start_IT+0x248>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d004      	beq.n	8003302 <HAL_TIM_IC_Start_IT+0x1f6>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a16      	ldr	r2, [pc, #88]	; (8003358 <HAL_TIM_IC_Start_IT+0x24c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d010      	beq.n	8003336 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003324:	e007      	b.n	8003336 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40010000 	.word	0x40010000
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	40010400 	.word	0x40010400
 8003354:	40014000 	.word	0x40014000
 8003358:	40001800 	.word	0x40001800

0800335c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0202 	mvn.w	r2, #2
 8003388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fd f910 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fb0f 	bl	80039ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fb16 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0204 	mvn.w	r2, #4
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd f8e6 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fae5 	bl	80039ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 faec 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0208 	mvn.w	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd f8bc 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fabb 	bl	80039ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fac2 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0210 	mvn.w	r2, #16
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2208      	movs	r2, #8
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd f892 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa91 	bl	80039ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 fa98 	bl	80039de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0201 	mvn.w	r2, #1
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa6b 	bl	80039b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 ff90 	bl	800442c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d107      	bne.n	8003538 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fa5d 	bl	80039f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d10e      	bne.n	8003564 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b20      	cmp	r3, #32
 8003552:	d107      	bne.n	8003564 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0220 	mvn.w	r2, #32
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 ff5a 	bl	8004418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003586:	2302      	movs	r3, #2
 8003588:	e088      	b.n	800369c <HAL_TIM_IC_ConfigChannel+0x130>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11b      	bne.n	80035d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	6819      	ldr	r1, [r3, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f000 fc7e 	bl	8003ea8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 020c 	bic.w	r2, r2, #12
 80035ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6999      	ldr	r1, [r3, #24]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	619a      	str	r2, [r3, #24]
 80035ce:	e060      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d11c      	bne.n	8003610 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6819      	ldr	r1, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f000 fd02 	bl	8003fee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6999      	ldr	r1, [r3, #24]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	619a      	str	r2, [r3, #24]
 800360e:	e040      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b08      	cmp	r3, #8
 8003614:	d11b      	bne.n	800364e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f000 fd4f 	bl	80040c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 020c 	bic.w	r2, r2, #12
 8003638:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69d9      	ldr	r1, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	61da      	str	r2, [r3, #28]
 800364c:	e021      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d11c      	bne.n	800368e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6819      	ldr	r1, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f000 fd6c 	bl	8004140 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003676:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69d9      	ldr	r1, [r3, #28]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	021a      	lsls	r2, r3, #8
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	61da      	str	r2, [r3, #28]
 800368c:	e001      	b.n	8003692 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0ae      	b.n	8003820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b0c      	cmp	r3, #12
 80036ce:	f200 809f 	bhi.w	8003810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	08003811 	.word	0x08003811
 80036e0:	08003811 	.word	0x08003811
 80036e4:	08003811 	.word	0x08003811
 80036e8:	0800374d 	.word	0x0800374d
 80036ec:	08003811 	.word	0x08003811
 80036f0:	08003811 	.word	0x08003811
 80036f4:	08003811 	.word	0x08003811
 80036f8:	0800378f 	.word	0x0800378f
 80036fc:	08003811 	.word	0x08003811
 8003700:	08003811 	.word	0x08003811
 8003704:	08003811 	.word	0x08003811
 8003708:	080037cf 	.word	0x080037cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fa18 	bl	8003b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0208 	orr.w	r2, r2, #8
 8003726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0204 	bic.w	r2, r2, #4
 8003736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6999      	ldr	r1, [r3, #24]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	619a      	str	r2, [r3, #24]
      break;
 800374a:	e064      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 fa68 	bl	8003c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6999      	ldr	r1, [r3, #24]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	021a      	lsls	r2, r3, #8
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	619a      	str	r2, [r3, #24]
      break;
 800378c:	e043      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fabd 	bl	8003d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0208 	orr.w	r2, r2, #8
 80037a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0204 	bic.w	r2, r2, #4
 80037b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69d9      	ldr	r1, [r3, #28]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	61da      	str	r2, [r3, #28]
      break;
 80037cc:	e023      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fb11 	bl	8003dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69d9      	ldr	r1, [r3, #28]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	021a      	lsls	r2, r3, #8
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	61da      	str	r2, [r3, #28]
      break;
 800380e:	e002      	b.n	8003816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_TIM_ConfigClockSource+0x1c>
 8003840:	2302      	movs	r3, #2
 8003842:	e0b4      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x186>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800386a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387c:	d03e      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0xd4>
 800387e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003882:	f200 8087 	bhi.w	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 8003886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388a:	f000 8086 	beq.w	800399a <HAL_TIM_ConfigClockSource+0x172>
 800388e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003892:	d87f      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b70      	cmp	r3, #112	; 0x70
 8003896:	d01a      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0xa6>
 8003898:	2b70      	cmp	r3, #112	; 0x70
 800389a:	d87b      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b60      	cmp	r3, #96	; 0x60
 800389e:	d050      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0x11a>
 80038a0:	2b60      	cmp	r3, #96	; 0x60
 80038a2:	d877      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b50      	cmp	r3, #80	; 0x50
 80038a6:	d03c      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0xfa>
 80038a8:	2b50      	cmp	r3, #80	; 0x50
 80038aa:	d873      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d058      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x13a>
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d86f      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b30      	cmp	r3, #48	; 0x30
 80038b6:	d064      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038b8:	2b30      	cmp	r3, #48	; 0x30
 80038ba:	d86b      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d060      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d867      	bhi.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d05c      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d05a      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x15a>
 80038cc:	e062      	b.n	8003994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6899      	ldr	r1, [r3, #8]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f000 fc87 	bl	80041f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
      break;
 80038fa:	e04f      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6899      	ldr	r1, [r3, #8]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f000 fc70 	bl	80041f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391e:	609a      	str	r2, [r3, #8]
      break;
 8003920:	e03c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6859      	ldr	r1, [r3, #4]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	461a      	mov	r2, r3
 8003930:	f000 fb2e 	bl	8003f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2150      	movs	r1, #80	; 0x50
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fc3d 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003940:	e02c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6859      	ldr	r1, [r3, #4]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	461a      	mov	r2, r3
 8003950:	f000 fb8a 	bl	8004068 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2160      	movs	r1, #96	; 0x60
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fc2d 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003960:	e01c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	461a      	mov	r2, r3
 8003970:	f000 fb0e 	bl	8003f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fc1d 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003980:	e00c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4619      	mov	r1, r3
 800398c:	4610      	mov	r0, r2
 800398e:	f000 fc14 	bl	80041ba <TIM_ITRx_SetConfig>
      break;
 8003992:	e003      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      break;
 8003998:	e000      	b.n	800399c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800399a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e6:	bf00      	nop
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a40      	ldr	r2, [pc, #256]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d00f      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3d      	ldr	r2, [pc, #244]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <TIM_Base_SetConfig+0x120>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a3a      	ldr	r2, [pc, #232]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d02b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d027      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d023      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <TIM_Base_SetConfig+0x120>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d017      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a28      	ldr	r2, [pc, #160]	; (8003b30 <TIM_Base_SetConfig+0x128>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a27      	ldr	r2, [pc, #156]	; (8003b34 <TIM_Base_SetConfig+0x12c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00f      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <TIM_Base_SetConfig+0x130>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <TIM_Base_SetConfig+0x134>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d007      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <TIM_Base_SetConfig+0x138>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d003      	beq.n	8003aba <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <TIM_Base_SetConfig+0x13c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d108      	bne.n	8003acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d003      	beq.n	8003b00 <TIM_Base_SetConfig+0xf8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <TIM_Base_SetConfig+0x124>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d103      	bne.n	8003b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	615a      	str	r2, [r3, #20]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010000 	.word	0x40010000
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40014000 	.word	0x40014000
 8003b34:	40014400 	.word	0x40014400
 8003b38:	40014800 	.word	0x40014800
 8003b3c:	40001800 	.word	0x40001800
 8003b40:	40001c00 	.word	0x40001c00
 8003b44:	40002000 	.word	0x40002000

08003b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f023 0302 	bic.w	r3, r3, #2
 8003b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <TIM_OC1_SetConfig+0xd8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_OC1_SetConfig+0x64>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <TIM_OC1_SetConfig+0xdc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d10c      	bne.n	8003bc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0308 	bic.w	r3, r3, #8
 8003bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f023 0304 	bic.w	r3, r3, #4
 8003bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <TIM_OC1_SetConfig+0xd8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <TIM_OC1_SetConfig+0x8e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <TIM_OC1_SetConfig+0xdc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d111      	bne.n	8003bfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	621a      	str	r2, [r3, #32]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40010000 	.word	0x40010000
 8003c24:	40010400 	.word	0x40010400

08003c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0210 	bic.w	r2, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0320 	bic.w	r3, r3, #32
 8003c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <TIM_OC2_SetConfig+0xe4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_OC2_SetConfig+0x68>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a21      	ldr	r2, [pc, #132]	; (8003d10 <TIM_OC2_SetConfig+0xe8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10d      	bne.n	8003cac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a17      	ldr	r2, [pc, #92]	; (8003d0c <TIM_OC2_SetConfig+0xe4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_OC2_SetConfig+0x94>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <TIM_OC2_SetConfig+0xe8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d113      	bne.n	8003ce4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40010400 	.word	0x40010400

08003d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <TIM_OC3_SetConfig+0xe0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_OC3_SetConfig+0x66>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <TIM_OC3_SetConfig+0xe4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10d      	bne.n	8003d96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <TIM_OC3_SetConfig+0xe0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_OC3_SetConfig+0x92>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <TIM_OC3_SetConfig+0xe4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d113      	bne.n	8003dce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40010400 	.word	0x40010400

08003dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <TIM_OC4_SetConfig+0xa4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_OC4_SetConfig+0x68>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a11      	ldr	r2, [pc, #68]	; (8003ea4 <TIM_OC4_SetConfig+0xa8>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d109      	bne.n	8003e78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <TIM_TI1_SetConfig+0xcc>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01b      	beq.n	8003f0e <TIM_TI1_SetConfig+0x66>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d017      	beq.n	8003f0e <TIM_TI1_SetConfig+0x66>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <TIM_TI1_SetConfig+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_TI1_SetConfig+0x66>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <TIM_TI1_SetConfig+0xd4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_TI1_SetConfig+0x66>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <TIM_TI1_SetConfig+0xd8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_TI1_SetConfig+0x66>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <TIM_TI1_SetConfig+0xdc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_TI1_SetConfig+0x66>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <TIM_TI1_SetConfig+0xe0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_TI1_SetConfig+0x66>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <TIM_TI1_SetConfig+0xe4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <TIM_TI1_SetConfig+0x6a>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <TIM_TI1_SetConfig+0x6c>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 0303 	bic.w	r3, r3, #3
 8003f1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e003      	b.n	8003f32 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f023 030a 	bic.w	r3, r3, #10
 8003f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	f003 030a 	and.w	r3, r3, #10
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40001800 	.word	0x40001800

08003f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 030a 	bic.w	r3, r3, #10
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b087      	sub	sp, #28
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f023 0210 	bic.w	r2, r3, #16
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800401a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800402c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	031b      	lsls	r3, r3, #12
 8004032:	b29b      	uxth	r3, r3
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004040:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	621a      	str	r2, [r3, #32]
}
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f023 0210 	bic.w	r2, r3, #16
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004092:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	031b      	lsls	r3, r3, #12
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f023 0303 	bic.w	r3, r3, #3
 80040f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004104:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	b2db      	uxtb	r3, r3
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004118:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	621a      	str	r2, [r3, #32]
}
 8004134:	bf00      	nop
 8004136:	371c      	adds	r7, #28
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800416c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800417e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	031b      	lsls	r3, r3, #12
 8004184:	b29b      	uxth	r3, r3
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004192:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	031b      	lsls	r3, r3, #12
 8004198:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f043 0307 	orr.w	r3, r3, #7
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	021a      	lsls	r2, r3, #8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	431a      	orrs	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	609a      	str	r2, [r3, #8]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	2201      	movs	r2, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
}
 800426e:	bf00      	nop
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d101      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004290:	2302      	movs	r3, #2
 8004292:	e05a      	b.n	800434a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a21      	ldr	r2, [pc, #132]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d022      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d01d      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1d      	ldr	r2, [pc, #116]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d018      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1b      	ldr	r2, [pc, #108]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1a      	ldr	r2, [pc, #104]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00e      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a18      	ldr	r2, [pc, #96]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d009      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a17      	ldr	r2, [pc, #92]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a15      	ldr	r2, [pc, #84]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d10c      	bne.n	8004338 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4313      	orrs	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40010000 	.word	0x40010000
 800435c:	40000400 	.word	0x40000400
 8004360:	40000800 	.word	0x40000800
 8004364:	40000c00 	.word	0x40000c00
 8004368:	40010400 	.word	0x40010400
 800436c:	40014000 	.word	0x40014000
 8004370:	40001800 	.word	0x40001800

08004374 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800438c:	2302      	movs	r3, #2
 800438e:	e03d      	b.n	800440c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e03f      	b.n	80044d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc ff66 	bl	8001338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f9cb 	bl	8004820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d17c      	bne.n	80045f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UART_Transmit+0x2c>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e075      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_UART_Transmit+0x3e>
 8004514:	2302      	movs	r3, #2
 8004516:	e06e      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2221      	movs	r2, #33	; 0x21
 800452a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452e:	f7fd fbc3 	bl	8001cb8 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	88fa      	ldrh	r2, [r7, #6]
 800453e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0x82>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800456c:	e02a      	b.n	80045c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f8e2 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3302      	adds	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e007      	b.n	80045b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1cf      	bne.n	800456e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2200      	movs	r2, #0
 80045d6:	2140      	movs	r1, #64	; 0x40
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f8b2 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e006      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08a      	sub	sp, #40	; 0x28
 8004602:	af02      	add	r7, sp, #8
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b20      	cmp	r3, #32
 800461c:	f040 808c 	bne.w	8004738 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_UART_Receive+0x2e>
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e084      	b.n	800473a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_UART_Receive+0x40>
 800463a:	2302      	movs	r3, #2
 800463c:	e07d      	b.n	800473a <HAL_UART_Receive+0x13c>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2222      	movs	r2, #34	; 0x22
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800465a:	f7fd fb2d 	bl	8001cb8 <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	88fa      	ldrh	r2, [r7, #6]
 8004664:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	88fa      	ldrh	r2, [r7, #6]
 800466a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d108      	bne.n	8004688 <HAL_UART_Receive+0x8a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d104      	bne.n	8004688 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e003      	b.n	8004690 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004698:	e043      	b.n	8004722 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	2120      	movs	r1, #32
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f84c 	bl	8004742 <UART_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e042      	b.n	800473a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10c      	bne.n	80046d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	3302      	adds	r3, #2
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	e01f      	b.n	8004714 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d007      	beq.n	80046ee <HAL_UART_Receive+0xf0>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_UART_Receive+0xfe>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e008      	b.n	800470e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004708:	b2da      	uxtb	r2, r3
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3301      	adds	r3, #1
 8004712:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004718:	b29b      	uxth	r3, r3
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1b6      	bne.n	800469a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b090      	sub	sp, #64	; 0x40
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	603b      	str	r3, [r7, #0]
 800474e:	4613      	mov	r3, r2
 8004750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004752:	e050      	b.n	80047f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d04c      	beq.n	80047f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <UART_WaitOnFlagUntilTimeout+0x30>
 8004762:	f7fd faa9 	bl	8001cb8 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800476e:	429a      	cmp	r2, r3
 8004770:	d241      	bcs.n	80047f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	330c      	adds	r3, #12
 8004790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004792:	637a      	str	r2, [r7, #52]	; 0x34
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e5      	bne.n	8004772 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	613b      	str	r3, [r7, #16]
   return(result);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3314      	adds	r3, #20
 80047c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047c6:	623a      	str	r2, [r7, #32]
 80047c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	69f9      	ldr	r1, [r7, #28]
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e00f      	b.n	8004816 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4013      	ands	r3, r2
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	429a      	cmp	r2, r3
 8004804:	bf0c      	ite	eq
 8004806:	2301      	moveq	r3, #1
 8004808:	2300      	movne	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	429a      	cmp	r2, r3
 8004812:	d09f      	beq.n	8004754 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3740      	adds	r7, #64	; 0x40
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004824:	b0c0      	sub	sp, #256	; 0x100
 8004826:	af00      	add	r7, sp, #0
 8004828:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	68d9      	ldr	r1, [r3, #12]
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	ea40 0301 	orr.w	r3, r0, r1
 8004848:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	431a      	orrs	r2, r3
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	431a      	orrs	r2, r3
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4313      	orrs	r3, r2
 8004868:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004878:	f021 010c 	bic.w	r1, r1, #12
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004886:	430b      	orrs	r3, r1
 8004888:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489a:	6999      	ldr	r1, [r3, #24]
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	ea40 0301 	orr.w	r3, r0, r1
 80048a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	4b8f      	ldr	r3, [pc, #572]	; (8004aec <UART_SetConfig+0x2cc>)
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d005      	beq.n	80048c0 <UART_SetConfig+0xa0>
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b8d      	ldr	r3, [pc, #564]	; (8004af0 <UART_SetConfig+0x2d0>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	d104      	bne.n	80048ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048c0:	f7fd fe08 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 80048c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80048c8:	e003      	b.n	80048d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ca:	f7fd fdef 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 80048ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048dc:	f040 810c 	bne.w	8004af8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e4:	2200      	movs	r2, #0
 80048e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048f2:	4622      	mov	r2, r4
 80048f4:	462b      	mov	r3, r5
 80048f6:	1891      	adds	r1, r2, r2
 80048f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048fa:	415b      	adcs	r3, r3
 80048fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004902:	4621      	mov	r1, r4
 8004904:	eb12 0801 	adds.w	r8, r2, r1
 8004908:	4629      	mov	r1, r5
 800490a:	eb43 0901 	adc.w	r9, r3, r1
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800491a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800491e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004922:	4690      	mov	r8, r2
 8004924:	4699      	mov	r9, r3
 8004926:	4623      	mov	r3, r4
 8004928:	eb18 0303 	adds.w	r3, r8, r3
 800492c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004930:	462b      	mov	r3, r5
 8004932:	eb49 0303 	adc.w	r3, r9, r3
 8004936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004946:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800494a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800494e:	460b      	mov	r3, r1
 8004950:	18db      	adds	r3, r3, r3
 8004952:	653b      	str	r3, [r7, #80]	; 0x50
 8004954:	4613      	mov	r3, r2
 8004956:	eb42 0303 	adc.w	r3, r2, r3
 800495a:	657b      	str	r3, [r7, #84]	; 0x54
 800495c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004960:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004964:	f7fb fcac 	bl	80002c0 <__aeabi_uldivmod>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4b61      	ldr	r3, [pc, #388]	; (8004af4 <UART_SetConfig+0x2d4>)
 800496e:	fba3 2302 	umull	r2, r3, r3, r2
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	011c      	lsls	r4, r3, #4
 8004976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497a:	2200      	movs	r2, #0
 800497c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004980:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004984:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	1891      	adds	r1, r2, r2
 800498e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004990:	415b      	adcs	r3, r3
 8004992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004994:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004998:	4641      	mov	r1, r8
 800499a:	eb12 0a01 	adds.w	sl, r2, r1
 800499e:	4649      	mov	r1, r9
 80049a0:	eb43 0b01 	adc.w	fp, r3, r1
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b8:	4692      	mov	sl, r2
 80049ba:	469b      	mov	fp, r3
 80049bc:	4643      	mov	r3, r8
 80049be:	eb1a 0303 	adds.w	r3, sl, r3
 80049c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c6:	464b      	mov	r3, r9
 80049c8:	eb4b 0303 	adc.w	r3, fp, r3
 80049cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049e4:	460b      	mov	r3, r1
 80049e6:	18db      	adds	r3, r3, r3
 80049e8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ea:	4613      	mov	r3, r2
 80049ec:	eb42 0303 	adc.w	r3, r2, r3
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
 80049f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049fa:	f7fb fc61 	bl	80002c0 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4611      	mov	r1, r2
 8004a04:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <UART_SetConfig+0x2d4>)
 8004a06:	fba3 2301 	umull	r2, r3, r3, r1
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	2264      	movs	r2, #100	; 0x64
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	1acb      	subs	r3, r1, r3
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a1a:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <UART_SetConfig+0x2d4>)
 8004a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a28:	441c      	add	r4, r3
 8004a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	1891      	adds	r1, r2, r2
 8004a42:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a44:	415b      	adcs	r3, r3
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a4c:	4641      	mov	r1, r8
 8004a4e:	1851      	adds	r1, r2, r1
 8004a50:	6339      	str	r1, [r7, #48]	; 0x30
 8004a52:	4649      	mov	r1, r9
 8004a54:	414b      	adcs	r3, r1
 8004a56:	637b      	str	r3, [r7, #52]	; 0x34
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a64:	4659      	mov	r1, fp
 8004a66:	00cb      	lsls	r3, r1, #3
 8004a68:	4651      	mov	r1, sl
 8004a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a6e:	4651      	mov	r1, sl
 8004a70:	00ca      	lsls	r2, r1, #3
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	4603      	mov	r3, r0
 8004a78:	4642      	mov	r2, r8
 8004a7a:	189b      	adds	r3, r3, r2
 8004a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a80:	464b      	mov	r3, r9
 8004a82:	460a      	mov	r2, r1
 8004a84:	eb42 0303 	adc.w	r3, r2, r3
 8004a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	18db      	adds	r3, r3, r3
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ab2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ab6:	f7fb fc03 	bl	80002c0 <__aeabi_uldivmod>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <UART_SetConfig+0x2d4>)
 8004ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ac4:	095b      	lsrs	r3, r3, #5
 8004ac6:	2164      	movs	r1, #100	; 0x64
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	3332      	adds	r3, #50	; 0x32
 8004ad2:	4a08      	ldr	r2, [pc, #32]	; (8004af4 <UART_SetConfig+0x2d4>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	f003 0207 	and.w	r2, r3, #7
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4422      	add	r2, r4
 8004ae6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ae8:	e105      	b.n	8004cf6 <UART_SetConfig+0x4d6>
 8004aea:	bf00      	nop
 8004aec:	40011000 	.word	0x40011000
 8004af0:	40011400 	.word	0x40011400
 8004af4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afc:	2200      	movs	r2, #0
 8004afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b0a:	4642      	mov	r2, r8
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	1891      	adds	r1, r2, r2
 8004b10:	6239      	str	r1, [r7, #32]
 8004b12:	415b      	adcs	r3, r3
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
 8004b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	1854      	adds	r4, r2, r1
 8004b1e:	4649      	mov	r1, r9
 8004b20:	eb43 0501 	adc.w	r5, r3, r1
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	00eb      	lsls	r3, r5, #3
 8004b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b32:	00e2      	lsls	r2, r4, #3
 8004b34:	4614      	mov	r4, r2
 8004b36:	461d      	mov	r5, r3
 8004b38:	4643      	mov	r3, r8
 8004b3a:	18e3      	adds	r3, r4, r3
 8004b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b40:	464b      	mov	r3, r9
 8004b42:	eb45 0303 	adc.w	r3, r5, r3
 8004b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b66:	4629      	mov	r1, r5
 8004b68:	008b      	lsls	r3, r1, #2
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b70:	4621      	mov	r1, r4
 8004b72:	008a      	lsls	r2, r1, #2
 8004b74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b78:	f7fb fba2 	bl	80002c0 <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4b60      	ldr	r3, [pc, #384]	; (8004d04 <UART_SetConfig+0x4e4>)
 8004b82:	fba3 2302 	umull	r2, r3, r3, r2
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	011c      	lsls	r4, r3, #4
 8004b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	1891      	adds	r1, r2, r2
 8004ba2:	61b9      	str	r1, [r7, #24]
 8004ba4:	415b      	adcs	r3, r3
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bac:	4641      	mov	r1, r8
 8004bae:	1851      	adds	r1, r2, r1
 8004bb0:	6139      	str	r1, [r7, #16]
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	414b      	adcs	r3, r1
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	00cb      	lsls	r3, r1, #3
 8004bc8:	4651      	mov	r1, sl
 8004bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bce:	4651      	mov	r1, sl
 8004bd0:	00ca      	lsls	r2, r1, #3
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	4642      	mov	r2, r8
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004be0:	464b      	mov	r3, r9
 8004be2:	460a      	mov	r2, r1
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c04:	4649      	mov	r1, r9
 8004c06:	008b      	lsls	r3, r1, #2
 8004c08:	4641      	mov	r1, r8
 8004c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c0e:	4641      	mov	r1, r8
 8004c10:	008a      	lsls	r2, r1, #2
 8004c12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c16:	f7fb fb53 	bl	80002c0 <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4b39      	ldr	r3, [pc, #228]	; (8004d04 <UART_SetConfig+0x4e4>)
 8004c20:	fba3 1302 	umull	r1, r3, r3, r2
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	2164      	movs	r1, #100	; 0x64
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	3332      	adds	r3, #50	; 0x32
 8004c32:	4a34      	ldr	r2, [pc, #208]	; (8004d04 <UART_SetConfig+0x4e4>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3e:	441c      	add	r4, r3
 8004c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c44:	2200      	movs	r2, #0
 8004c46:	673b      	str	r3, [r7, #112]	; 0x70
 8004c48:	677a      	str	r2, [r7, #116]	; 0x74
 8004c4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c4e:	4642      	mov	r2, r8
 8004c50:	464b      	mov	r3, r9
 8004c52:	1891      	adds	r1, r2, r2
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	415b      	adcs	r3, r3
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c5e:	4641      	mov	r1, r8
 8004c60:	1851      	adds	r1, r2, r1
 8004c62:	6039      	str	r1, [r7, #0]
 8004c64:	4649      	mov	r1, r9
 8004c66:	414b      	adcs	r3, r1
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c76:	4659      	mov	r1, fp
 8004c78:	00cb      	lsls	r3, r1, #3
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c80:	4651      	mov	r1, sl
 8004c82:	00ca      	lsls	r2, r1, #3
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4642      	mov	r2, r8
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c90:	464b      	mov	r3, r9
 8004c92:	460a      	mov	r2, r1
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8004ca4:	667a      	str	r2, [r7, #100]	; 0x64
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	008b      	lsls	r3, r1, #2
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	008a      	lsls	r2, r1, #2
 8004cc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cc4:	f7fb fafc 	bl	80002c0 <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <UART_SetConfig+0x4e4>)
 8004cce:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2164      	movs	r1, #100	; 0x64
 8004cd6:	fb01 f303 	mul.w	r3, r1, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	3332      	adds	r3, #50	; 0x32
 8004ce0:	4a08      	ldr	r2, [pc, #32]	; (8004d04 <UART_SetConfig+0x4e4>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 020f 	and.w	r2, r3, #15
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4422      	add	r2, r4
 8004cf4:	609a      	str	r2, [r3, #8]
}
 8004cf6:	bf00      	nop
 8004cf8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d02:	bf00      	nop
 8004d04:	51eb851f 	.word	0x51eb851f

08004d08 <__errno>:
 8004d08:	4b01      	ldr	r3, [pc, #4]	; (8004d10 <__errno+0x8>)
 8004d0a:	6818      	ldr	r0, [r3, #0]
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	2000000c 	.word	0x2000000c

08004d14 <__libc_init_array>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	4d0d      	ldr	r5, [pc, #52]	; (8004d4c <__libc_init_array+0x38>)
 8004d18:	4c0d      	ldr	r4, [pc, #52]	; (8004d50 <__libc_init_array+0x3c>)
 8004d1a:	1b64      	subs	r4, r4, r5
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	2600      	movs	r6, #0
 8004d20:	42a6      	cmp	r6, r4
 8004d22:	d109      	bne.n	8004d38 <__libc_init_array+0x24>
 8004d24:	4d0b      	ldr	r5, [pc, #44]	; (8004d54 <__libc_init_array+0x40>)
 8004d26:	4c0c      	ldr	r4, [pc, #48]	; (8004d58 <__libc_init_array+0x44>)
 8004d28:	f000 fc8e 	bl	8005648 <_init>
 8004d2c:	1b64      	subs	r4, r4, r5
 8004d2e:	10a4      	asrs	r4, r4, #2
 8004d30:	2600      	movs	r6, #0
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	d105      	bne.n	8004d42 <__libc_init_array+0x2e>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3c:	4798      	blx	r3
 8004d3e:	3601      	adds	r6, #1
 8004d40:	e7ee      	b.n	8004d20 <__libc_init_array+0xc>
 8004d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d46:	4798      	blx	r3
 8004d48:	3601      	adds	r6, #1
 8004d4a:	e7f2      	b.n	8004d32 <__libc_init_array+0x1e>
 8004d4c:	08005800 	.word	0x08005800
 8004d50:	08005800 	.word	0x08005800
 8004d54:	08005800 	.word	0x08005800
 8004d58:	08005804 	.word	0x08005804

08004d5c <memset>:
 8004d5c:	4402      	add	r2, r0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d100      	bne.n	8004d66 <memset+0xa>
 8004d64:	4770      	bx	lr
 8004d66:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6a:	e7f9      	b.n	8004d60 <memset+0x4>

08004d6c <siprintf>:
 8004d6c:	b40e      	push	{r1, r2, r3}
 8004d6e:	b500      	push	{lr}
 8004d70:	b09c      	sub	sp, #112	; 0x70
 8004d72:	ab1d      	add	r3, sp, #116	; 0x74
 8004d74:	9002      	str	r0, [sp, #8]
 8004d76:	9006      	str	r0, [sp, #24]
 8004d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d7c:	4809      	ldr	r0, [pc, #36]	; (8004da4 <siprintf+0x38>)
 8004d7e:	9107      	str	r1, [sp, #28]
 8004d80:	9104      	str	r1, [sp, #16]
 8004d82:	4909      	ldr	r1, [pc, #36]	; (8004da8 <siprintf+0x3c>)
 8004d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d88:	9105      	str	r1, [sp, #20]
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	a902      	add	r1, sp, #8
 8004d90:	f000 f868 	bl	8004e64 <_svfiprintf_r>
 8004d94:	9b02      	ldr	r3, [sp, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	b01c      	add	sp, #112	; 0x70
 8004d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da0:	b003      	add	sp, #12
 8004da2:	4770      	bx	lr
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	ffff0208 	.word	0xffff0208

08004dac <__ssputs_r>:
 8004dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db0:	688e      	ldr	r6, [r1, #8]
 8004db2:	429e      	cmp	r6, r3
 8004db4:	4682      	mov	sl, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4690      	mov	r8, r2
 8004dba:	461f      	mov	r7, r3
 8004dbc:	d838      	bhi.n	8004e30 <__ssputs_r+0x84>
 8004dbe:	898a      	ldrh	r2, [r1, #12]
 8004dc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dc4:	d032      	beq.n	8004e2c <__ssputs_r+0x80>
 8004dc6:	6825      	ldr	r5, [r4, #0]
 8004dc8:	6909      	ldr	r1, [r1, #16]
 8004dca:	eba5 0901 	sub.w	r9, r5, r1
 8004dce:	6965      	ldr	r5, [r4, #20]
 8004dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dd8:	3301      	adds	r3, #1
 8004dda:	444b      	add	r3, r9
 8004ddc:	106d      	asrs	r5, r5, #1
 8004dde:	429d      	cmp	r5, r3
 8004de0:	bf38      	it	cc
 8004de2:	461d      	movcc	r5, r3
 8004de4:	0553      	lsls	r3, r2, #21
 8004de6:	d531      	bpl.n	8004e4c <__ssputs_r+0xa0>
 8004de8:	4629      	mov	r1, r5
 8004dea:	f000 fb63 	bl	80054b4 <_malloc_r>
 8004dee:	4606      	mov	r6, r0
 8004df0:	b950      	cbnz	r0, 8004e08 <__ssputs_r+0x5c>
 8004df2:	230c      	movs	r3, #12
 8004df4:	f8ca 3000 	str.w	r3, [sl]
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dfe:	81a3      	strh	r3, [r4, #12]
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e08:	6921      	ldr	r1, [r4, #16]
 8004e0a:	464a      	mov	r2, r9
 8004e0c:	f000 fabe 	bl	800538c <memcpy>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	6126      	str	r6, [r4, #16]
 8004e1e:	6165      	str	r5, [r4, #20]
 8004e20:	444e      	add	r6, r9
 8004e22:	eba5 0509 	sub.w	r5, r5, r9
 8004e26:	6026      	str	r6, [r4, #0]
 8004e28:	60a5      	str	r5, [r4, #8]
 8004e2a:	463e      	mov	r6, r7
 8004e2c:	42be      	cmp	r6, r7
 8004e2e:	d900      	bls.n	8004e32 <__ssputs_r+0x86>
 8004e30:	463e      	mov	r6, r7
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	4632      	mov	r2, r6
 8004e36:	4641      	mov	r1, r8
 8004e38:	f000 fab6 	bl	80053a8 <memmove>
 8004e3c:	68a3      	ldr	r3, [r4, #8]
 8004e3e:	1b9b      	subs	r3, r3, r6
 8004e40:	60a3      	str	r3, [r4, #8]
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	4433      	add	r3, r6
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e7db      	b.n	8004e04 <__ssputs_r+0x58>
 8004e4c:	462a      	mov	r2, r5
 8004e4e:	f000 fba5 	bl	800559c <_realloc_r>
 8004e52:	4606      	mov	r6, r0
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d1e1      	bne.n	8004e1c <__ssputs_r+0x70>
 8004e58:	6921      	ldr	r1, [r4, #16]
 8004e5a:	4650      	mov	r0, sl
 8004e5c:	f000 fabe 	bl	80053dc <_free_r>
 8004e60:	e7c7      	b.n	8004df2 <__ssputs_r+0x46>
	...

08004e64 <_svfiprintf_r>:
 8004e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	4698      	mov	r8, r3
 8004e6a:	898b      	ldrh	r3, [r1, #12]
 8004e6c:	061b      	lsls	r3, r3, #24
 8004e6e:	b09d      	sub	sp, #116	; 0x74
 8004e70:	4607      	mov	r7, r0
 8004e72:	460d      	mov	r5, r1
 8004e74:	4614      	mov	r4, r2
 8004e76:	d50e      	bpl.n	8004e96 <_svfiprintf_r+0x32>
 8004e78:	690b      	ldr	r3, [r1, #16]
 8004e7a:	b963      	cbnz	r3, 8004e96 <_svfiprintf_r+0x32>
 8004e7c:	2140      	movs	r1, #64	; 0x40
 8004e7e:	f000 fb19 	bl	80054b4 <_malloc_r>
 8004e82:	6028      	str	r0, [r5, #0]
 8004e84:	6128      	str	r0, [r5, #16]
 8004e86:	b920      	cbnz	r0, 8004e92 <_svfiprintf_r+0x2e>
 8004e88:	230c      	movs	r3, #12
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	e0d1      	b.n	8005036 <_svfiprintf_r+0x1d2>
 8004e92:	2340      	movs	r3, #64	; 0x40
 8004e94:	616b      	str	r3, [r5, #20]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9a:	2320      	movs	r3, #32
 8004e9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ea4:	2330      	movs	r3, #48	; 0x30
 8004ea6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005050 <_svfiprintf_r+0x1ec>
 8004eaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eae:	f04f 0901 	mov.w	r9, #1
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	469a      	mov	sl, r3
 8004eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eba:	b10a      	cbz	r2, 8004ec0 <_svfiprintf_r+0x5c>
 8004ebc:	2a25      	cmp	r2, #37	; 0x25
 8004ebe:	d1f9      	bne.n	8004eb4 <_svfiprintf_r+0x50>
 8004ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec4:	d00b      	beq.n	8004ede <_svfiprintf_r+0x7a>
 8004ec6:	465b      	mov	r3, fp
 8004ec8:	4622      	mov	r2, r4
 8004eca:	4629      	mov	r1, r5
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f7ff ff6d 	bl	8004dac <__ssputs_r>
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f000 80aa 	beq.w	800502c <_svfiprintf_r+0x1c8>
 8004ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eda:	445a      	add	r2, fp
 8004edc:	9209      	str	r2, [sp, #36]	; 0x24
 8004ede:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80a2 	beq.w	800502c <_svfiprintf_r+0x1c8>
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f04f 32ff 	mov.w	r2, #4294967295
 8004eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ef2:	f10a 0a01 	add.w	sl, sl, #1
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	9307      	str	r3, [sp, #28]
 8004efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004efe:	931a      	str	r3, [sp, #104]	; 0x68
 8004f00:	4654      	mov	r4, sl
 8004f02:	2205      	movs	r2, #5
 8004f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f08:	4851      	ldr	r0, [pc, #324]	; (8005050 <_svfiprintf_r+0x1ec>)
 8004f0a:	f7fb f989 	bl	8000220 <memchr>
 8004f0e:	9a04      	ldr	r2, [sp, #16]
 8004f10:	b9d8      	cbnz	r0, 8004f4a <_svfiprintf_r+0xe6>
 8004f12:	06d0      	lsls	r0, r2, #27
 8004f14:	bf44      	itt	mi
 8004f16:	2320      	movmi	r3, #32
 8004f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f1c:	0711      	lsls	r1, r2, #28
 8004f1e:	bf44      	itt	mi
 8004f20:	232b      	movmi	r3, #43	; 0x2b
 8004f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f26:	f89a 3000 	ldrb.w	r3, [sl]
 8004f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f2c:	d015      	beq.n	8004f5a <_svfiprintf_r+0xf6>
 8004f2e:	9a07      	ldr	r2, [sp, #28]
 8004f30:	4654      	mov	r4, sl
 8004f32:	2000      	movs	r0, #0
 8004f34:	f04f 0c0a 	mov.w	ip, #10
 8004f38:	4621      	mov	r1, r4
 8004f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f3e:	3b30      	subs	r3, #48	; 0x30
 8004f40:	2b09      	cmp	r3, #9
 8004f42:	d94e      	bls.n	8004fe2 <_svfiprintf_r+0x17e>
 8004f44:	b1b0      	cbz	r0, 8004f74 <_svfiprintf_r+0x110>
 8004f46:	9207      	str	r2, [sp, #28]
 8004f48:	e014      	b.n	8004f74 <_svfiprintf_r+0x110>
 8004f4a:	eba0 0308 	sub.w	r3, r0, r8
 8004f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8004f52:	4313      	orrs	r3, r2
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	46a2      	mov	sl, r4
 8004f58:	e7d2      	b.n	8004f00 <_svfiprintf_r+0x9c>
 8004f5a:	9b03      	ldr	r3, [sp, #12]
 8004f5c:	1d19      	adds	r1, r3, #4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	9103      	str	r1, [sp, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfbb      	ittet	lt
 8004f66:	425b      	neglt	r3, r3
 8004f68:	f042 0202 	orrlt.w	r2, r2, #2
 8004f6c:	9307      	strge	r3, [sp, #28]
 8004f6e:	9307      	strlt	r3, [sp, #28]
 8004f70:	bfb8      	it	lt
 8004f72:	9204      	strlt	r2, [sp, #16]
 8004f74:	7823      	ldrb	r3, [r4, #0]
 8004f76:	2b2e      	cmp	r3, #46	; 0x2e
 8004f78:	d10c      	bne.n	8004f94 <_svfiprintf_r+0x130>
 8004f7a:	7863      	ldrb	r3, [r4, #1]
 8004f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7e:	d135      	bne.n	8004fec <_svfiprintf_r+0x188>
 8004f80:	9b03      	ldr	r3, [sp, #12]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	9203      	str	r2, [sp, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bfb8      	it	lt
 8004f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f90:	3402      	adds	r4, #2
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005060 <_svfiprintf_r+0x1fc>
 8004f98:	7821      	ldrb	r1, [r4, #0]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	4650      	mov	r0, sl
 8004f9e:	f7fb f93f 	bl	8000220 <memchr>
 8004fa2:	b140      	cbz	r0, 8004fb6 <_svfiprintf_r+0x152>
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	eba0 000a 	sub.w	r0, r0, sl
 8004faa:	fa03 f000 	lsl.w	r0, r3, r0
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	4303      	orrs	r3, r0
 8004fb2:	3401      	adds	r4, #1
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fba:	4826      	ldr	r0, [pc, #152]	; (8005054 <_svfiprintf_r+0x1f0>)
 8004fbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fc0:	2206      	movs	r2, #6
 8004fc2:	f7fb f92d 	bl	8000220 <memchr>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d038      	beq.n	800503c <_svfiprintf_r+0x1d8>
 8004fca:	4b23      	ldr	r3, [pc, #140]	; (8005058 <_svfiprintf_r+0x1f4>)
 8004fcc:	bb1b      	cbnz	r3, 8005016 <_svfiprintf_r+0x1b2>
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	3307      	adds	r3, #7
 8004fd2:	f023 0307 	bic.w	r3, r3, #7
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	9303      	str	r3, [sp, #12]
 8004fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fdc:	4433      	add	r3, r6
 8004fde:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe0:	e767      	b.n	8004eb2 <_svfiprintf_r+0x4e>
 8004fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	2001      	movs	r0, #1
 8004fea:	e7a5      	b.n	8004f38 <_svfiprintf_r+0xd4>
 8004fec:	2300      	movs	r3, #0
 8004fee:	3401      	adds	r4, #1
 8004ff0:	9305      	str	r3, [sp, #20]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f04f 0c0a 	mov.w	ip, #10
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ffe:	3a30      	subs	r2, #48	; 0x30
 8005000:	2a09      	cmp	r2, #9
 8005002:	d903      	bls.n	800500c <_svfiprintf_r+0x1a8>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0c5      	beq.n	8004f94 <_svfiprintf_r+0x130>
 8005008:	9105      	str	r1, [sp, #20]
 800500a:	e7c3      	b.n	8004f94 <_svfiprintf_r+0x130>
 800500c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005010:	4604      	mov	r4, r0
 8005012:	2301      	movs	r3, #1
 8005014:	e7f0      	b.n	8004ff8 <_svfiprintf_r+0x194>
 8005016:	ab03      	add	r3, sp, #12
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	462a      	mov	r2, r5
 800501c:	4b0f      	ldr	r3, [pc, #60]	; (800505c <_svfiprintf_r+0x1f8>)
 800501e:	a904      	add	r1, sp, #16
 8005020:	4638      	mov	r0, r7
 8005022:	f3af 8000 	nop.w
 8005026:	1c42      	adds	r2, r0, #1
 8005028:	4606      	mov	r6, r0
 800502a:	d1d6      	bne.n	8004fda <_svfiprintf_r+0x176>
 800502c:	89ab      	ldrh	r3, [r5, #12]
 800502e:	065b      	lsls	r3, r3, #25
 8005030:	f53f af2c 	bmi.w	8004e8c <_svfiprintf_r+0x28>
 8005034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005036:	b01d      	add	sp, #116	; 0x74
 8005038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503c:	ab03      	add	r3, sp, #12
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	462a      	mov	r2, r5
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <_svfiprintf_r+0x1f8>)
 8005044:	a904      	add	r1, sp, #16
 8005046:	4638      	mov	r0, r7
 8005048:	f000 f87a 	bl	8005140 <_printf_i>
 800504c:	e7eb      	b.n	8005026 <_svfiprintf_r+0x1c2>
 800504e:	bf00      	nop
 8005050:	080057c4 	.word	0x080057c4
 8005054:	080057ce 	.word	0x080057ce
 8005058:	00000000 	.word	0x00000000
 800505c:	08004dad 	.word	0x08004dad
 8005060:	080057ca 	.word	0x080057ca

08005064 <_printf_common>:
 8005064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005068:	4616      	mov	r6, r2
 800506a:	4699      	mov	r9, r3
 800506c:	688a      	ldr	r2, [r1, #8]
 800506e:	690b      	ldr	r3, [r1, #16]
 8005070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005074:	4293      	cmp	r3, r2
 8005076:	bfb8      	it	lt
 8005078:	4613      	movlt	r3, r2
 800507a:	6033      	str	r3, [r6, #0]
 800507c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005080:	4607      	mov	r7, r0
 8005082:	460c      	mov	r4, r1
 8005084:	b10a      	cbz	r2, 800508a <_printf_common+0x26>
 8005086:	3301      	adds	r3, #1
 8005088:	6033      	str	r3, [r6, #0]
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	0699      	lsls	r1, r3, #26
 800508e:	bf42      	ittt	mi
 8005090:	6833      	ldrmi	r3, [r6, #0]
 8005092:	3302      	addmi	r3, #2
 8005094:	6033      	strmi	r3, [r6, #0]
 8005096:	6825      	ldr	r5, [r4, #0]
 8005098:	f015 0506 	ands.w	r5, r5, #6
 800509c:	d106      	bne.n	80050ac <_printf_common+0x48>
 800509e:	f104 0a19 	add.w	sl, r4, #25
 80050a2:	68e3      	ldr	r3, [r4, #12]
 80050a4:	6832      	ldr	r2, [r6, #0]
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	42ab      	cmp	r3, r5
 80050aa:	dc26      	bgt.n	80050fa <_printf_common+0x96>
 80050ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b0:	1e13      	subs	r3, r2, #0
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	bf18      	it	ne
 80050b6:	2301      	movne	r3, #1
 80050b8:	0692      	lsls	r2, r2, #26
 80050ba:	d42b      	bmi.n	8005114 <_printf_common+0xb0>
 80050bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c0:	4649      	mov	r1, r9
 80050c2:	4638      	mov	r0, r7
 80050c4:	47c0      	blx	r8
 80050c6:	3001      	adds	r0, #1
 80050c8:	d01e      	beq.n	8005108 <_printf_common+0xa4>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	68e5      	ldr	r5, [r4, #12]
 80050ce:	6832      	ldr	r2, [r6, #0]
 80050d0:	f003 0306 	and.w	r3, r3, #6
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	bf08      	it	eq
 80050d8:	1aad      	subeq	r5, r5, r2
 80050da:	68a3      	ldr	r3, [r4, #8]
 80050dc:	6922      	ldr	r2, [r4, #16]
 80050de:	bf0c      	ite	eq
 80050e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e4:	2500      	movne	r5, #0
 80050e6:	4293      	cmp	r3, r2
 80050e8:	bfc4      	itt	gt
 80050ea:	1a9b      	subgt	r3, r3, r2
 80050ec:	18ed      	addgt	r5, r5, r3
 80050ee:	2600      	movs	r6, #0
 80050f0:	341a      	adds	r4, #26
 80050f2:	42b5      	cmp	r5, r6
 80050f4:	d11a      	bne.n	800512c <_printf_common+0xc8>
 80050f6:	2000      	movs	r0, #0
 80050f8:	e008      	b.n	800510c <_printf_common+0xa8>
 80050fa:	2301      	movs	r3, #1
 80050fc:	4652      	mov	r2, sl
 80050fe:	4649      	mov	r1, r9
 8005100:	4638      	mov	r0, r7
 8005102:	47c0      	blx	r8
 8005104:	3001      	adds	r0, #1
 8005106:	d103      	bne.n	8005110 <_printf_common+0xac>
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005110:	3501      	adds	r5, #1
 8005112:	e7c6      	b.n	80050a2 <_printf_common+0x3e>
 8005114:	18e1      	adds	r1, r4, r3
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	2030      	movs	r0, #48	; 0x30
 800511a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800511e:	4422      	add	r2, r4
 8005120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005128:	3302      	adds	r3, #2
 800512a:	e7c7      	b.n	80050bc <_printf_common+0x58>
 800512c:	2301      	movs	r3, #1
 800512e:	4622      	mov	r2, r4
 8005130:	4649      	mov	r1, r9
 8005132:	4638      	mov	r0, r7
 8005134:	47c0      	blx	r8
 8005136:	3001      	adds	r0, #1
 8005138:	d0e6      	beq.n	8005108 <_printf_common+0xa4>
 800513a:	3601      	adds	r6, #1
 800513c:	e7d9      	b.n	80050f2 <_printf_common+0x8e>
	...

08005140 <_printf_i>:
 8005140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005144:	7e0f      	ldrb	r7, [r1, #24]
 8005146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005148:	2f78      	cmp	r7, #120	; 0x78
 800514a:	4691      	mov	r9, r2
 800514c:	4680      	mov	r8, r0
 800514e:	460c      	mov	r4, r1
 8005150:	469a      	mov	sl, r3
 8005152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005156:	d807      	bhi.n	8005168 <_printf_i+0x28>
 8005158:	2f62      	cmp	r7, #98	; 0x62
 800515a:	d80a      	bhi.n	8005172 <_printf_i+0x32>
 800515c:	2f00      	cmp	r7, #0
 800515e:	f000 80d8 	beq.w	8005312 <_printf_i+0x1d2>
 8005162:	2f58      	cmp	r7, #88	; 0x58
 8005164:	f000 80a3 	beq.w	80052ae <_printf_i+0x16e>
 8005168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800516c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005170:	e03a      	b.n	80051e8 <_printf_i+0xa8>
 8005172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005176:	2b15      	cmp	r3, #21
 8005178:	d8f6      	bhi.n	8005168 <_printf_i+0x28>
 800517a:	a101      	add	r1, pc, #4	; (adr r1, 8005180 <_printf_i+0x40>)
 800517c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005180:	080051d9 	.word	0x080051d9
 8005184:	080051ed 	.word	0x080051ed
 8005188:	08005169 	.word	0x08005169
 800518c:	08005169 	.word	0x08005169
 8005190:	08005169 	.word	0x08005169
 8005194:	08005169 	.word	0x08005169
 8005198:	080051ed 	.word	0x080051ed
 800519c:	08005169 	.word	0x08005169
 80051a0:	08005169 	.word	0x08005169
 80051a4:	08005169 	.word	0x08005169
 80051a8:	08005169 	.word	0x08005169
 80051ac:	080052f9 	.word	0x080052f9
 80051b0:	0800521d 	.word	0x0800521d
 80051b4:	080052db 	.word	0x080052db
 80051b8:	08005169 	.word	0x08005169
 80051bc:	08005169 	.word	0x08005169
 80051c0:	0800531b 	.word	0x0800531b
 80051c4:	08005169 	.word	0x08005169
 80051c8:	0800521d 	.word	0x0800521d
 80051cc:	08005169 	.word	0x08005169
 80051d0:	08005169 	.word	0x08005169
 80051d4:	080052e3 	.word	0x080052e3
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	1d1a      	adds	r2, r3, #4
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	602a      	str	r2, [r5, #0]
 80051e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051e8:	2301      	movs	r3, #1
 80051ea:	e0a3      	b.n	8005334 <_printf_i+0x1f4>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	6829      	ldr	r1, [r5, #0]
 80051f0:	0606      	lsls	r6, r0, #24
 80051f2:	f101 0304 	add.w	r3, r1, #4
 80051f6:	d50a      	bpl.n	800520e <_printf_i+0xce>
 80051f8:	680e      	ldr	r6, [r1, #0]
 80051fa:	602b      	str	r3, [r5, #0]
 80051fc:	2e00      	cmp	r6, #0
 80051fe:	da03      	bge.n	8005208 <_printf_i+0xc8>
 8005200:	232d      	movs	r3, #45	; 0x2d
 8005202:	4276      	negs	r6, r6
 8005204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005208:	485e      	ldr	r0, [pc, #376]	; (8005384 <_printf_i+0x244>)
 800520a:	230a      	movs	r3, #10
 800520c:	e019      	b.n	8005242 <_printf_i+0x102>
 800520e:	680e      	ldr	r6, [r1, #0]
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005216:	bf18      	it	ne
 8005218:	b236      	sxthne	r6, r6
 800521a:	e7ef      	b.n	80051fc <_printf_i+0xbc>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	1d19      	adds	r1, r3, #4
 8005222:	6029      	str	r1, [r5, #0]
 8005224:	0601      	lsls	r1, r0, #24
 8005226:	d501      	bpl.n	800522c <_printf_i+0xec>
 8005228:	681e      	ldr	r6, [r3, #0]
 800522a:	e002      	b.n	8005232 <_printf_i+0xf2>
 800522c:	0646      	lsls	r6, r0, #25
 800522e:	d5fb      	bpl.n	8005228 <_printf_i+0xe8>
 8005230:	881e      	ldrh	r6, [r3, #0]
 8005232:	4854      	ldr	r0, [pc, #336]	; (8005384 <_printf_i+0x244>)
 8005234:	2f6f      	cmp	r7, #111	; 0x6f
 8005236:	bf0c      	ite	eq
 8005238:	2308      	moveq	r3, #8
 800523a:	230a      	movne	r3, #10
 800523c:	2100      	movs	r1, #0
 800523e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005242:	6865      	ldr	r5, [r4, #4]
 8005244:	60a5      	str	r5, [r4, #8]
 8005246:	2d00      	cmp	r5, #0
 8005248:	bfa2      	ittt	ge
 800524a:	6821      	ldrge	r1, [r4, #0]
 800524c:	f021 0104 	bicge.w	r1, r1, #4
 8005250:	6021      	strge	r1, [r4, #0]
 8005252:	b90e      	cbnz	r6, 8005258 <_printf_i+0x118>
 8005254:	2d00      	cmp	r5, #0
 8005256:	d04d      	beq.n	80052f4 <_printf_i+0x1b4>
 8005258:	4615      	mov	r5, r2
 800525a:	fbb6 f1f3 	udiv	r1, r6, r3
 800525e:	fb03 6711 	mls	r7, r3, r1, r6
 8005262:	5dc7      	ldrb	r7, [r0, r7]
 8005264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005268:	4637      	mov	r7, r6
 800526a:	42bb      	cmp	r3, r7
 800526c:	460e      	mov	r6, r1
 800526e:	d9f4      	bls.n	800525a <_printf_i+0x11a>
 8005270:	2b08      	cmp	r3, #8
 8005272:	d10b      	bne.n	800528c <_printf_i+0x14c>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	07de      	lsls	r6, r3, #31
 8005278:	d508      	bpl.n	800528c <_printf_i+0x14c>
 800527a:	6923      	ldr	r3, [r4, #16]
 800527c:	6861      	ldr	r1, [r4, #4]
 800527e:	4299      	cmp	r1, r3
 8005280:	bfde      	ittt	le
 8005282:	2330      	movle	r3, #48	; 0x30
 8005284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800528c:	1b52      	subs	r2, r2, r5
 800528e:	6122      	str	r2, [r4, #16]
 8005290:	f8cd a000 	str.w	sl, [sp]
 8005294:	464b      	mov	r3, r9
 8005296:	aa03      	add	r2, sp, #12
 8005298:	4621      	mov	r1, r4
 800529a:	4640      	mov	r0, r8
 800529c:	f7ff fee2 	bl	8005064 <_printf_common>
 80052a0:	3001      	adds	r0, #1
 80052a2:	d14c      	bne.n	800533e <_printf_i+0x1fe>
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	b004      	add	sp, #16
 80052aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ae:	4835      	ldr	r0, [pc, #212]	; (8005384 <_printf_i+0x244>)
 80052b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80052b4:	6829      	ldr	r1, [r5, #0]
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80052bc:	6029      	str	r1, [r5, #0]
 80052be:	061d      	lsls	r5, r3, #24
 80052c0:	d514      	bpl.n	80052ec <_printf_i+0x1ac>
 80052c2:	07df      	lsls	r7, r3, #31
 80052c4:	bf44      	itt	mi
 80052c6:	f043 0320 	orrmi.w	r3, r3, #32
 80052ca:	6023      	strmi	r3, [r4, #0]
 80052cc:	b91e      	cbnz	r6, 80052d6 <_printf_i+0x196>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	f023 0320 	bic.w	r3, r3, #32
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	2310      	movs	r3, #16
 80052d8:	e7b0      	b.n	800523c <_printf_i+0xfc>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	f043 0320 	orr.w	r3, r3, #32
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	2378      	movs	r3, #120	; 0x78
 80052e4:	4828      	ldr	r0, [pc, #160]	; (8005388 <_printf_i+0x248>)
 80052e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ea:	e7e3      	b.n	80052b4 <_printf_i+0x174>
 80052ec:	0659      	lsls	r1, r3, #25
 80052ee:	bf48      	it	mi
 80052f0:	b2b6      	uxthmi	r6, r6
 80052f2:	e7e6      	b.n	80052c2 <_printf_i+0x182>
 80052f4:	4615      	mov	r5, r2
 80052f6:	e7bb      	b.n	8005270 <_printf_i+0x130>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	6826      	ldr	r6, [r4, #0]
 80052fc:	6961      	ldr	r1, [r4, #20]
 80052fe:	1d18      	adds	r0, r3, #4
 8005300:	6028      	str	r0, [r5, #0]
 8005302:	0635      	lsls	r5, r6, #24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	d501      	bpl.n	800530c <_printf_i+0x1cc>
 8005308:	6019      	str	r1, [r3, #0]
 800530a:	e002      	b.n	8005312 <_printf_i+0x1d2>
 800530c:	0670      	lsls	r0, r6, #25
 800530e:	d5fb      	bpl.n	8005308 <_printf_i+0x1c8>
 8005310:	8019      	strh	r1, [r3, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	4615      	mov	r5, r2
 8005318:	e7ba      	b.n	8005290 <_printf_i+0x150>
 800531a:	682b      	ldr	r3, [r5, #0]
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	602a      	str	r2, [r5, #0]
 8005320:	681d      	ldr	r5, [r3, #0]
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	2100      	movs	r1, #0
 8005326:	4628      	mov	r0, r5
 8005328:	f7fa ff7a 	bl	8000220 <memchr>
 800532c:	b108      	cbz	r0, 8005332 <_printf_i+0x1f2>
 800532e:	1b40      	subs	r0, r0, r5
 8005330:	6060      	str	r0, [r4, #4]
 8005332:	6863      	ldr	r3, [r4, #4]
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	2300      	movs	r3, #0
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533c:	e7a8      	b.n	8005290 <_printf_i+0x150>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	462a      	mov	r2, r5
 8005342:	4649      	mov	r1, r9
 8005344:	4640      	mov	r0, r8
 8005346:	47d0      	blx	sl
 8005348:	3001      	adds	r0, #1
 800534a:	d0ab      	beq.n	80052a4 <_printf_i+0x164>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	079b      	lsls	r3, r3, #30
 8005350:	d413      	bmi.n	800537a <_printf_i+0x23a>
 8005352:	68e0      	ldr	r0, [r4, #12]
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	4298      	cmp	r0, r3
 8005358:	bfb8      	it	lt
 800535a:	4618      	movlt	r0, r3
 800535c:	e7a4      	b.n	80052a8 <_printf_i+0x168>
 800535e:	2301      	movs	r3, #1
 8005360:	4632      	mov	r2, r6
 8005362:	4649      	mov	r1, r9
 8005364:	4640      	mov	r0, r8
 8005366:	47d0      	blx	sl
 8005368:	3001      	adds	r0, #1
 800536a:	d09b      	beq.n	80052a4 <_printf_i+0x164>
 800536c:	3501      	adds	r5, #1
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	9903      	ldr	r1, [sp, #12]
 8005372:	1a5b      	subs	r3, r3, r1
 8005374:	42ab      	cmp	r3, r5
 8005376:	dcf2      	bgt.n	800535e <_printf_i+0x21e>
 8005378:	e7eb      	b.n	8005352 <_printf_i+0x212>
 800537a:	2500      	movs	r5, #0
 800537c:	f104 0619 	add.w	r6, r4, #25
 8005380:	e7f5      	b.n	800536e <_printf_i+0x22e>
 8005382:	bf00      	nop
 8005384:	080057d5 	.word	0x080057d5
 8005388:	080057e6 	.word	0x080057e6

0800538c <memcpy>:
 800538c:	440a      	add	r2, r1
 800538e:	4291      	cmp	r1, r2
 8005390:	f100 33ff 	add.w	r3, r0, #4294967295
 8005394:	d100      	bne.n	8005398 <memcpy+0xc>
 8005396:	4770      	bx	lr
 8005398:	b510      	push	{r4, lr}
 800539a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800539e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a2:	4291      	cmp	r1, r2
 80053a4:	d1f9      	bne.n	800539a <memcpy+0xe>
 80053a6:	bd10      	pop	{r4, pc}

080053a8 <memmove>:
 80053a8:	4288      	cmp	r0, r1
 80053aa:	b510      	push	{r4, lr}
 80053ac:	eb01 0402 	add.w	r4, r1, r2
 80053b0:	d902      	bls.n	80053b8 <memmove+0x10>
 80053b2:	4284      	cmp	r4, r0
 80053b4:	4623      	mov	r3, r4
 80053b6:	d807      	bhi.n	80053c8 <memmove+0x20>
 80053b8:	1e43      	subs	r3, r0, #1
 80053ba:	42a1      	cmp	r1, r4
 80053bc:	d008      	beq.n	80053d0 <memmove+0x28>
 80053be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053c6:	e7f8      	b.n	80053ba <memmove+0x12>
 80053c8:	4402      	add	r2, r0
 80053ca:	4601      	mov	r1, r0
 80053cc:	428a      	cmp	r2, r1
 80053ce:	d100      	bne.n	80053d2 <memmove+0x2a>
 80053d0:	bd10      	pop	{r4, pc}
 80053d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053da:	e7f7      	b.n	80053cc <memmove+0x24>

080053dc <_free_r>:
 80053dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053de:	2900      	cmp	r1, #0
 80053e0:	d044      	beq.n	800546c <_free_r+0x90>
 80053e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e6:	9001      	str	r0, [sp, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f1a1 0404 	sub.w	r4, r1, #4
 80053ee:	bfb8      	it	lt
 80053f0:	18e4      	addlt	r4, r4, r3
 80053f2:	f000 f913 	bl	800561c <__malloc_lock>
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <_free_r+0x94>)
 80053f8:	9801      	ldr	r0, [sp, #4]
 80053fa:	6813      	ldr	r3, [r2, #0]
 80053fc:	b933      	cbnz	r3, 800540c <_free_r+0x30>
 80053fe:	6063      	str	r3, [r4, #4]
 8005400:	6014      	str	r4, [r2, #0]
 8005402:	b003      	add	sp, #12
 8005404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005408:	f000 b90e 	b.w	8005628 <__malloc_unlock>
 800540c:	42a3      	cmp	r3, r4
 800540e:	d908      	bls.n	8005422 <_free_r+0x46>
 8005410:	6825      	ldr	r5, [r4, #0]
 8005412:	1961      	adds	r1, r4, r5
 8005414:	428b      	cmp	r3, r1
 8005416:	bf01      	itttt	eq
 8005418:	6819      	ldreq	r1, [r3, #0]
 800541a:	685b      	ldreq	r3, [r3, #4]
 800541c:	1949      	addeq	r1, r1, r5
 800541e:	6021      	streq	r1, [r4, #0]
 8005420:	e7ed      	b.n	80053fe <_free_r+0x22>
 8005422:	461a      	mov	r2, r3
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	b10b      	cbz	r3, 800542c <_free_r+0x50>
 8005428:	42a3      	cmp	r3, r4
 800542a:	d9fa      	bls.n	8005422 <_free_r+0x46>
 800542c:	6811      	ldr	r1, [r2, #0]
 800542e:	1855      	adds	r5, r2, r1
 8005430:	42a5      	cmp	r5, r4
 8005432:	d10b      	bne.n	800544c <_free_r+0x70>
 8005434:	6824      	ldr	r4, [r4, #0]
 8005436:	4421      	add	r1, r4
 8005438:	1854      	adds	r4, r2, r1
 800543a:	42a3      	cmp	r3, r4
 800543c:	6011      	str	r1, [r2, #0]
 800543e:	d1e0      	bne.n	8005402 <_free_r+0x26>
 8005440:	681c      	ldr	r4, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	6053      	str	r3, [r2, #4]
 8005446:	4421      	add	r1, r4
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	e7da      	b.n	8005402 <_free_r+0x26>
 800544c:	d902      	bls.n	8005454 <_free_r+0x78>
 800544e:	230c      	movs	r3, #12
 8005450:	6003      	str	r3, [r0, #0]
 8005452:	e7d6      	b.n	8005402 <_free_r+0x26>
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	1961      	adds	r1, r4, r5
 8005458:	428b      	cmp	r3, r1
 800545a:	bf04      	itt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	bf04      	itt	eq
 8005464:	1949      	addeq	r1, r1, r5
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	6054      	str	r4, [r2, #4]
 800546a:	e7ca      	b.n	8005402 <_free_r+0x26>
 800546c:	b003      	add	sp, #12
 800546e:	bd30      	pop	{r4, r5, pc}
 8005470:	2000043c 	.word	0x2000043c

08005474 <sbrk_aligned>:
 8005474:	b570      	push	{r4, r5, r6, lr}
 8005476:	4e0e      	ldr	r6, [pc, #56]	; (80054b0 <sbrk_aligned+0x3c>)
 8005478:	460c      	mov	r4, r1
 800547a:	6831      	ldr	r1, [r6, #0]
 800547c:	4605      	mov	r5, r0
 800547e:	b911      	cbnz	r1, 8005486 <sbrk_aligned+0x12>
 8005480:	f000 f8bc 	bl	80055fc <_sbrk_r>
 8005484:	6030      	str	r0, [r6, #0]
 8005486:	4621      	mov	r1, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f8b7 	bl	80055fc <_sbrk_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	d00a      	beq.n	80054a8 <sbrk_aligned+0x34>
 8005492:	1cc4      	adds	r4, r0, #3
 8005494:	f024 0403 	bic.w	r4, r4, #3
 8005498:	42a0      	cmp	r0, r4
 800549a:	d007      	beq.n	80054ac <sbrk_aligned+0x38>
 800549c:	1a21      	subs	r1, r4, r0
 800549e:	4628      	mov	r0, r5
 80054a0:	f000 f8ac 	bl	80055fc <_sbrk_r>
 80054a4:	3001      	adds	r0, #1
 80054a6:	d101      	bne.n	80054ac <sbrk_aligned+0x38>
 80054a8:	f04f 34ff 	mov.w	r4, #4294967295
 80054ac:	4620      	mov	r0, r4
 80054ae:	bd70      	pop	{r4, r5, r6, pc}
 80054b0:	20000440 	.word	0x20000440

080054b4 <_malloc_r>:
 80054b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b8:	1ccd      	adds	r5, r1, #3
 80054ba:	f025 0503 	bic.w	r5, r5, #3
 80054be:	3508      	adds	r5, #8
 80054c0:	2d0c      	cmp	r5, #12
 80054c2:	bf38      	it	cc
 80054c4:	250c      	movcc	r5, #12
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	4607      	mov	r7, r0
 80054ca:	db01      	blt.n	80054d0 <_malloc_r+0x1c>
 80054cc:	42a9      	cmp	r1, r5
 80054ce:	d905      	bls.n	80054dc <_malloc_r+0x28>
 80054d0:	230c      	movs	r3, #12
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	2600      	movs	r6, #0
 80054d6:	4630      	mov	r0, r6
 80054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054dc:	4e2e      	ldr	r6, [pc, #184]	; (8005598 <_malloc_r+0xe4>)
 80054de:	f000 f89d 	bl	800561c <__malloc_lock>
 80054e2:	6833      	ldr	r3, [r6, #0]
 80054e4:	461c      	mov	r4, r3
 80054e6:	bb34      	cbnz	r4, 8005536 <_malloc_r+0x82>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	f7ff ffc2 	bl	8005474 <sbrk_aligned>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	4604      	mov	r4, r0
 80054f4:	d14d      	bne.n	8005592 <_malloc_r+0xde>
 80054f6:	6834      	ldr	r4, [r6, #0]
 80054f8:	4626      	mov	r6, r4
 80054fa:	2e00      	cmp	r6, #0
 80054fc:	d140      	bne.n	8005580 <_malloc_r+0xcc>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	4631      	mov	r1, r6
 8005502:	4638      	mov	r0, r7
 8005504:	eb04 0803 	add.w	r8, r4, r3
 8005508:	f000 f878 	bl	80055fc <_sbrk_r>
 800550c:	4580      	cmp	r8, r0
 800550e:	d13a      	bne.n	8005586 <_malloc_r+0xd2>
 8005510:	6821      	ldr	r1, [r4, #0]
 8005512:	3503      	adds	r5, #3
 8005514:	1a6d      	subs	r5, r5, r1
 8005516:	f025 0503 	bic.w	r5, r5, #3
 800551a:	3508      	adds	r5, #8
 800551c:	2d0c      	cmp	r5, #12
 800551e:	bf38      	it	cc
 8005520:	250c      	movcc	r5, #12
 8005522:	4629      	mov	r1, r5
 8005524:	4638      	mov	r0, r7
 8005526:	f7ff ffa5 	bl	8005474 <sbrk_aligned>
 800552a:	3001      	adds	r0, #1
 800552c:	d02b      	beq.n	8005586 <_malloc_r+0xd2>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	442b      	add	r3, r5
 8005532:	6023      	str	r3, [r4, #0]
 8005534:	e00e      	b.n	8005554 <_malloc_r+0xa0>
 8005536:	6822      	ldr	r2, [r4, #0]
 8005538:	1b52      	subs	r2, r2, r5
 800553a:	d41e      	bmi.n	800557a <_malloc_r+0xc6>
 800553c:	2a0b      	cmp	r2, #11
 800553e:	d916      	bls.n	800556e <_malloc_r+0xba>
 8005540:	1961      	adds	r1, r4, r5
 8005542:	42a3      	cmp	r3, r4
 8005544:	6025      	str	r5, [r4, #0]
 8005546:	bf18      	it	ne
 8005548:	6059      	strne	r1, [r3, #4]
 800554a:	6863      	ldr	r3, [r4, #4]
 800554c:	bf08      	it	eq
 800554e:	6031      	streq	r1, [r6, #0]
 8005550:	5162      	str	r2, [r4, r5]
 8005552:	604b      	str	r3, [r1, #4]
 8005554:	4638      	mov	r0, r7
 8005556:	f104 060b 	add.w	r6, r4, #11
 800555a:	f000 f865 	bl	8005628 <__malloc_unlock>
 800555e:	f026 0607 	bic.w	r6, r6, #7
 8005562:	1d23      	adds	r3, r4, #4
 8005564:	1af2      	subs	r2, r6, r3
 8005566:	d0b6      	beq.n	80054d6 <_malloc_r+0x22>
 8005568:	1b9b      	subs	r3, r3, r6
 800556a:	50a3      	str	r3, [r4, r2]
 800556c:	e7b3      	b.n	80054d6 <_malloc_r+0x22>
 800556e:	6862      	ldr	r2, [r4, #4]
 8005570:	42a3      	cmp	r3, r4
 8005572:	bf0c      	ite	eq
 8005574:	6032      	streq	r2, [r6, #0]
 8005576:	605a      	strne	r2, [r3, #4]
 8005578:	e7ec      	b.n	8005554 <_malloc_r+0xa0>
 800557a:	4623      	mov	r3, r4
 800557c:	6864      	ldr	r4, [r4, #4]
 800557e:	e7b2      	b.n	80054e6 <_malloc_r+0x32>
 8005580:	4634      	mov	r4, r6
 8005582:	6876      	ldr	r6, [r6, #4]
 8005584:	e7b9      	b.n	80054fa <_malloc_r+0x46>
 8005586:	230c      	movs	r3, #12
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4638      	mov	r0, r7
 800558c:	f000 f84c 	bl	8005628 <__malloc_unlock>
 8005590:	e7a1      	b.n	80054d6 <_malloc_r+0x22>
 8005592:	6025      	str	r5, [r4, #0]
 8005594:	e7de      	b.n	8005554 <_malloc_r+0xa0>
 8005596:	bf00      	nop
 8005598:	2000043c 	.word	0x2000043c

0800559c <_realloc_r>:
 800559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	4680      	mov	r8, r0
 80055a2:	4614      	mov	r4, r2
 80055a4:	460e      	mov	r6, r1
 80055a6:	b921      	cbnz	r1, 80055b2 <_realloc_r+0x16>
 80055a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ac:	4611      	mov	r1, r2
 80055ae:	f7ff bf81 	b.w	80054b4 <_malloc_r>
 80055b2:	b92a      	cbnz	r2, 80055c0 <_realloc_r+0x24>
 80055b4:	f7ff ff12 	bl	80053dc <_free_r>
 80055b8:	4625      	mov	r5, r4
 80055ba:	4628      	mov	r0, r5
 80055bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055c0:	f000 f838 	bl	8005634 <_malloc_usable_size_r>
 80055c4:	4284      	cmp	r4, r0
 80055c6:	4607      	mov	r7, r0
 80055c8:	d802      	bhi.n	80055d0 <_realloc_r+0x34>
 80055ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055ce:	d812      	bhi.n	80055f6 <_realloc_r+0x5a>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4640      	mov	r0, r8
 80055d4:	f7ff ff6e 	bl	80054b4 <_malloc_r>
 80055d8:	4605      	mov	r5, r0
 80055da:	2800      	cmp	r0, #0
 80055dc:	d0ed      	beq.n	80055ba <_realloc_r+0x1e>
 80055de:	42bc      	cmp	r4, r7
 80055e0:	4622      	mov	r2, r4
 80055e2:	4631      	mov	r1, r6
 80055e4:	bf28      	it	cs
 80055e6:	463a      	movcs	r2, r7
 80055e8:	f7ff fed0 	bl	800538c <memcpy>
 80055ec:	4631      	mov	r1, r6
 80055ee:	4640      	mov	r0, r8
 80055f0:	f7ff fef4 	bl	80053dc <_free_r>
 80055f4:	e7e1      	b.n	80055ba <_realloc_r+0x1e>
 80055f6:	4635      	mov	r5, r6
 80055f8:	e7df      	b.n	80055ba <_realloc_r+0x1e>
	...

080055fc <_sbrk_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4d06      	ldr	r5, [pc, #24]	; (8005618 <_sbrk_r+0x1c>)
 8005600:	2300      	movs	r3, #0
 8005602:	4604      	mov	r4, r0
 8005604:	4608      	mov	r0, r1
 8005606:	602b      	str	r3, [r5, #0]
 8005608:	f7fb ff12 	bl	8001430 <_sbrk>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_sbrk_r+0x1a>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_sbrk_r+0x1a>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	20000444 	.word	0x20000444

0800561c <__malloc_lock>:
 800561c:	4801      	ldr	r0, [pc, #4]	; (8005624 <__malloc_lock+0x8>)
 800561e:	f000 b811 	b.w	8005644 <__retarget_lock_acquire_recursive>
 8005622:	bf00      	nop
 8005624:	20000448 	.word	0x20000448

08005628 <__malloc_unlock>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__malloc_unlock+0x8>)
 800562a:	f000 b80c 	b.w	8005646 <__retarget_lock_release_recursive>
 800562e:	bf00      	nop
 8005630:	20000448 	.word	0x20000448

08005634 <_malloc_usable_size_r>:
 8005634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005638:	1f18      	subs	r0, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	bfbc      	itt	lt
 800563e:	580b      	ldrlt	r3, [r1, r0]
 8005640:	18c0      	addlt	r0, r0, r3
 8005642:	4770      	bx	lr

08005644 <__retarget_lock_acquire_recursive>:
 8005644:	4770      	bx	lr

08005646 <__retarget_lock_release_recursive>:
 8005646:	4770      	bx	lr

08005648 <_init>:
 8005648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564a:	bf00      	nop
 800564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564e:	bc08      	pop	{r3}
 8005650:	469e      	mov	lr, r3
 8005652:	4770      	bx	lr

08005654 <_fini>:
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005656:	bf00      	nop
 8005658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565a:	bc08      	pop	{r3}
 800565c:	469e      	mov	lr, r3
 800565e:	4770      	bx	lr
