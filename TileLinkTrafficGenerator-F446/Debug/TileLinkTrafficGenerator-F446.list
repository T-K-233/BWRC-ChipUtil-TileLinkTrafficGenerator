
TileLinkTrafficGenerator-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080040b4  080040b4  000140b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004140  08004140  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004148  08004148  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  080041c0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080041c0  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5b3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dda  00000000  00000000  0002e653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00031090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228d9  00000000  00000000  00031c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4a8  00000000  00000000  00054529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1280  00000000  00000000  000639d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134c51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003804  00000000  00000000  00134ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800409c 	.word	0x0800409c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800409c 	.word	0x0800409c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <TL_serialize>:

uint8_t rx_finished = 0;
uint8_t rx_pending = 0;


uint8_t TL_serialize(TileLinkFrame *frame, uint16_t offset) {
 80005c4:	b4f0      	push	{r4, r5, r6, r7}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	8079      	strh	r1, [r7, #2]
  if (offset < TL_SERDES_LAST_OFFSET) {
 80005ce:	8879      	ldrh	r1, [r7, #2]
 80005d0:	2900      	cmp	r1, #0
 80005d2:	d10a      	bne.n	80005ea <TL_serialize+0x26>
    return (tx_frame.last >> (offset)) & 0b1;
 80005d4:	4b51      	ldr	r3, [pc, #324]	; (800071c <TL_serialize+0x158>)
 80005d6:	7e9b      	ldrb	r3, [r3, #26]
 80005d8:	461a      	mov	r2, r3
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	e092      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_CORRUPT_OFFSET) {
 80005ea:	8879      	ldrh	r1, [r7, #2]
 80005ec:	2901      	cmp	r1, #1
 80005ee:	d80b      	bhi.n	8000608 <TL_serialize+0x44>
    return (tx_frame.corrupt >> (offset - TL_SERDES_LAST_OFFSET)) & 0b1;
 80005f0:	4b4a      	ldr	r3, [pc, #296]	; (800071c <TL_serialize+0x158>)
 80005f2:	7e1b      	ldrb	r3, [r3, #24]
 80005f4:	461a      	mov	r2, r3
 80005f6:	887b      	ldrh	r3, [r7, #2]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	fa42 f303 	asr.w	r3, r2, r3
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	e083      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_DATA_OFFSET) {
 8000608:	8879      	ldrh	r1, [r7, #2]
 800060a:	2941      	cmp	r1, #65	; 0x41
 800060c:	d817      	bhi.n	800063e <TL_serialize+0x7a>
    return (tx_frame.data >> (offset - TL_SERDES_CORRUPT_OFFSET)) & 0b1;
 800060e:	4943      	ldr	r1, [pc, #268]	; (800071c <TL_serialize+0x158>)
 8000610:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8000614:	887c      	ldrh	r4, [r7, #2]
 8000616:	3c02      	subs	r4, #2
 8000618:	f1c4 0620 	rsb	r6, r4, #32
 800061c:	f1a4 0520 	sub.w	r5, r4, #32
 8000620:	fa20 f204 	lsr.w	r2, r0, r4
 8000624:	fa01 f606 	lsl.w	r6, r1, r6
 8000628:	4332      	orrs	r2, r6
 800062a:	fa21 f505 	lsr.w	r5, r1, r5
 800062e:	432a      	orrs	r2, r5
 8000630:	fa21 f304 	lsr.w	r3, r1, r4
 8000634:	b2d3      	uxtb	r3, r2
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	e068      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_MASK_OFFSET) {
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	2b49      	cmp	r3, #73	; 0x49
 8000642:	d80b      	bhi.n	800065c <TL_serialize+0x98>
    return (tx_frame.mask >> (offset - TL_SERDES_DATA_OFFSET)) & 0b1;
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <TL_serialize+0x158>)
 8000646:	7e5b      	ldrb	r3, [r3, #25]
 8000648:	461a      	mov	r2, r3
 800064a:	887b      	ldrh	r3, [r7, #2]
 800064c:	3b42      	subs	r3, #66	; 0x42
 800064e:	fa42 f303 	asr.w	r3, r2, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	e059      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_ADDRESS_OFFSET) {
 800065c:	887b      	ldrh	r3, [r7, #2]
 800065e:	2b69      	cmp	r3, #105	; 0x69
 8000660:	d80a      	bhi.n	8000678 <TL_serialize+0xb4>
    return (tx_frame.address >> (offset - TL_SERDES_MASK_OFFSET)) & 0b1;
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <TL_serialize+0x158>)
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	3b4a      	subs	r3, #74	; 0x4a
 800066a:	fa22 f303 	lsr.w	r3, r2, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	e04b      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_SOURCE_OFFSET) {
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	2b6d      	cmp	r3, #109	; 0x6d
 800067c:	d80b      	bhi.n	8000696 <TL_serialize+0xd2>
    return (tx_frame.source >> (offset - TL_SERDES_ADDRESS_OFFSET)) & 0b1;
 800067e:	4b27      	ldr	r3, [pc, #156]	; (800071c <TL_serialize+0x158>)
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	461a      	mov	r2, r3
 8000684:	887b      	ldrh	r3, [r7, #2]
 8000686:	3b6a      	subs	r3, #106	; 0x6a
 8000688:	fa42 f303 	asr.w	r3, r2, r3
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	e03c      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_SIZE_OFFSET) {
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	2b71      	cmp	r3, #113	; 0x71
 800069a:	d80b      	bhi.n	80006b4 <TL_serialize+0xf0>
    return (tx_frame.size >> (offset - TL_SERDES_SOURCE_OFFSET)) & 0b1;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <TL_serialize+0x158>)
 800069e:	78db      	ldrb	r3, [r3, #3]
 80006a0:	461a      	mov	r2, r3
 80006a2:	887b      	ldrh	r3, [r7, #2]
 80006a4:	3b6e      	subs	r3, #110	; 0x6e
 80006a6:	fa42 f303 	asr.w	r3, r2, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	e02d      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_PARAM_OFFSET) {
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	2b74      	cmp	r3, #116	; 0x74
 80006b8:	d80b      	bhi.n	80006d2 <TL_serialize+0x10e>
    return (tx_frame.param >> (offset - TL_SERDES_SIZE_OFFSET)) & 0b1;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <TL_serialize+0x158>)
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	461a      	mov	r2, r3
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	3b72      	subs	r3, #114	; 0x72
 80006c4:	fa42 f303 	asr.w	r3, r2, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	e01e      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_OPCODE_OFFSET) {
 80006d2:	887b      	ldrh	r3, [r7, #2]
 80006d4:	2b77      	cmp	r3, #119	; 0x77
 80006d6:	d80b      	bhi.n	80006f0 <TL_serialize+0x12c>
    return (tx_frame.opcode >> (offset - TL_SERDES_PARAM_OFFSET)) & 0b1;
 80006d8:	4b10      	ldr	r3, [pc, #64]	; (800071c <TL_serialize+0x158>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	461a      	mov	r2, r3
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	3b75      	subs	r3, #117	; 0x75
 80006e2:	fa42 f303 	asr.w	r3, r2, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	e00f      	b.n	8000710 <TL_serialize+0x14c>
  }
  if (offset < TL_SERDES_CHANID_OFFSET) {
 80006f0:	887b      	ldrh	r3, [r7, #2]
 80006f2:	2b7a      	cmp	r3, #122	; 0x7a
 80006f4:	d80b      	bhi.n	800070e <TL_serialize+0x14a>
    return (tx_frame.chanid >> (offset - TL_SERDES_OPCODE_OFFSET)) & 0b1;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <TL_serialize+0x158>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	887b      	ldrh	r3, [r7, #2]
 80006fe:	3b78      	subs	r3, #120	; 0x78
 8000700:	fa42 f303 	asr.w	r3, r2, r3
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	e000      	b.n	8000710 <TL_serialize+0x14c>
  }
  return 0;
 800070e:	2300      	movs	r3, #0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bcf0      	pop	{r4, r5, r6, r7}
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000098 	.word	0x20000098

08000720 <TL_deserialize>:

uint8_t TL_deserialize(TileLinkFrame *frame, uint16_t offset, uint8_t val) {
 8000720:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000724:	b083      	sub	sp, #12
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	807b      	strh	r3, [r7, #2]
 800072e:	4613      	mov	r3, r2
 8000730:	707b      	strb	r3, [r7, #1]
  if (offset < TL_SERDES_LAST_OFFSET) {
 8000732:	887b      	ldrh	r3, [r7, #2]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10e      	bne.n	8000756 <TL_deserialize+0x36>
    rx_frame.last |= (val << (offset));
 8000738:	4b62      	ldr	r3, [pc, #392]	; (80008c4 <TL_deserialize+0x1a4>)
 800073a:	7e9b      	ldrb	r3, [r3, #26]
 800073c:	b25a      	sxtb	r2, r3
 800073e:	7879      	ldrb	r1, [r7, #1]
 8000740:	887b      	ldrh	r3, [r7, #2]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	b25b      	sxtb	r3, r3
 8000748:	4313      	orrs	r3, r2
 800074a:	b25b      	sxtb	r3, r3
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b5d      	ldr	r3, [pc, #372]	; (80008c4 <TL_deserialize+0x1a4>)
 8000750:	769a      	strb	r2, [r3, #26]
    return 0;
 8000752:	2300      	movs	r3, #0
 8000754:	e0b0      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_CORRUPT_OFFSET) {
 8000756:	887b      	ldrh	r3, [r7, #2]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d80f      	bhi.n	800077c <TL_deserialize+0x5c>
    rx_frame.corrupt |= (val << (offset - TL_SERDES_LAST_OFFSET));
 800075c:	4b59      	ldr	r3, [pc, #356]	; (80008c4 <TL_deserialize+0x1a4>)
 800075e:	7e1b      	ldrb	r3, [r3, #24]
 8000760:	b25a      	sxtb	r2, r3
 8000762:	7879      	ldrb	r1, [r7, #1]
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	3b01      	subs	r3, #1
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	b25b      	sxtb	r3, r3
 800076e:	4313      	orrs	r3, r2
 8000770:	b25b      	sxtb	r3, r3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b53      	ldr	r3, [pc, #332]	; (80008c4 <TL_deserialize+0x1a4>)
 8000776:	761a      	strb	r2, [r3, #24]
    return 0;
 8000778:	2300      	movs	r3, #0
 800077a:	e09d      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_DATA_OFFSET) {
 800077c:	887b      	ldrh	r3, [r7, #2]
 800077e:	2b41      	cmp	r3, #65	; 0x41
 8000780:	d813      	bhi.n	80007aa <TL_deserialize+0x8a>
    rx_frame.data |= (val << (offset - TL_SERDES_CORRUPT_OFFSET));
 8000782:	4b50      	ldr	r3, [pc, #320]	; (80008c4 <TL_deserialize+0x1a4>)
 8000784:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000788:	7878      	ldrb	r0, [r7, #1]
 800078a:	8879      	ldrh	r1, [r7, #2]
 800078c:	3902      	subs	r1, #2
 800078e:	fa00 f101 	lsl.w	r1, r0, r1
 8000792:	17c8      	asrs	r0, r1, #31
 8000794:	460c      	mov	r4, r1
 8000796:	4605      	mov	r5, r0
 8000798:	ea42 0804 	orr.w	r8, r2, r4
 800079c:	ea43 0905 	orr.w	r9, r3, r5
 80007a0:	4b48      	ldr	r3, [pc, #288]	; (80008c4 <TL_deserialize+0x1a4>)
 80007a2:	e9c3 8904 	strd	r8, r9, [r3, #16]
    return 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e086      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_MASK_OFFSET) {
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	2b49      	cmp	r3, #73	; 0x49
 80007ae:	d80f      	bhi.n	80007d0 <TL_deserialize+0xb0>
    rx_frame.mask |= (val << (offset - TL_SERDES_DATA_OFFSET));
 80007b0:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <TL_deserialize+0x1a4>)
 80007b2:	7e5b      	ldrb	r3, [r3, #25]
 80007b4:	b25a      	sxtb	r2, r3
 80007b6:	7879      	ldrb	r1, [r7, #1]
 80007b8:	887b      	ldrh	r3, [r7, #2]
 80007ba:	3b42      	subs	r3, #66	; 0x42
 80007bc:	fa01 f303 	lsl.w	r3, r1, r3
 80007c0:	b25b      	sxtb	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b25b      	sxtb	r3, r3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b3e      	ldr	r3, [pc, #248]	; (80008c4 <TL_deserialize+0x1a4>)
 80007ca:	765a      	strb	r2, [r3, #25]
    return 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	e073      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_ADDRESS_OFFSET) {
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	2b69      	cmp	r3, #105	; 0x69
 80007d4:	d80b      	bhi.n	80007ee <TL_deserialize+0xce>
    rx_frame.address |= (val << (offset - TL_SERDES_MASK_OFFSET));
 80007d6:	4b3b      	ldr	r3, [pc, #236]	; (80008c4 <TL_deserialize+0x1a4>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	7879      	ldrb	r1, [r7, #1]
 80007dc:	887a      	ldrh	r2, [r7, #2]
 80007de:	3a4a      	subs	r2, #74	; 0x4a
 80007e0:	fa01 f202 	lsl.w	r2, r1, r2
 80007e4:	4313      	orrs	r3, r2
 80007e6:	4a37      	ldr	r2, [pc, #220]	; (80008c4 <TL_deserialize+0x1a4>)
 80007e8:	6093      	str	r3, [r2, #8]
    return 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e064      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_SOURCE_OFFSET) {
 80007ee:	887b      	ldrh	r3, [r7, #2]
 80007f0:	2b6d      	cmp	r3, #109	; 0x6d
 80007f2:	d80f      	bhi.n	8000814 <TL_deserialize+0xf4>
    rx_frame.source |= (val << (offset - TL_SERDES_ADDRESS_OFFSET));
 80007f4:	4b33      	ldr	r3, [pc, #204]	; (80008c4 <TL_deserialize+0x1a4>)
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	b25a      	sxtb	r2, r3
 80007fa:	7879      	ldrb	r1, [r7, #1]
 80007fc:	887b      	ldrh	r3, [r7, #2]
 80007fe:	3b6a      	subs	r3, #106	; 0x6a
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	b25b      	sxtb	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b25b      	sxtb	r3, r3
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <TL_deserialize+0x1a4>)
 800080e:	711a      	strb	r2, [r3, #4]
    return 0;
 8000810:	2300      	movs	r3, #0
 8000812:	e051      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_SIZE_OFFSET) {
 8000814:	887b      	ldrh	r3, [r7, #2]
 8000816:	2b71      	cmp	r3, #113	; 0x71
 8000818:	d80f      	bhi.n	800083a <TL_deserialize+0x11a>
    rx_frame.size |= (val << (offset - TL_SERDES_SOURCE_OFFSET));
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <TL_deserialize+0x1a4>)
 800081c:	78db      	ldrb	r3, [r3, #3]
 800081e:	b25a      	sxtb	r2, r3
 8000820:	7879      	ldrb	r1, [r7, #1]
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	3b6e      	subs	r3, #110	; 0x6e
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	b25b      	sxtb	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b25b      	sxtb	r3, r3
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <TL_deserialize+0x1a4>)
 8000834:	70da      	strb	r2, [r3, #3]
    return 0;
 8000836:	2300      	movs	r3, #0
 8000838:	e03e      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_PARAM_OFFSET) {
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	2b74      	cmp	r3, #116	; 0x74
 800083e:	d80f      	bhi.n	8000860 <TL_deserialize+0x140>
    rx_frame.param |= (val << (offset - TL_SERDES_SIZE_OFFSET));
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <TL_deserialize+0x1a4>)
 8000842:	789b      	ldrb	r3, [r3, #2]
 8000844:	b25a      	sxtb	r2, r3
 8000846:	7879      	ldrb	r1, [r7, #1]
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	3b72      	subs	r3, #114	; 0x72
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25b      	sxtb	r3, r3
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <TL_deserialize+0x1a4>)
 800085a:	709a      	strb	r2, [r3, #2]
    return 0;
 800085c:	2300      	movs	r3, #0
 800085e:	e02b      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_OPCODE_OFFSET) {
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	2b77      	cmp	r3, #119	; 0x77
 8000864:	d80f      	bhi.n	8000886 <TL_deserialize+0x166>
    rx_frame.opcode |= (val << (offset - TL_SERDES_PARAM_OFFSET));
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <TL_deserialize+0x1a4>)
 8000868:	785b      	ldrb	r3, [r3, #1]
 800086a:	b25a      	sxtb	r2, r3
 800086c:	7879      	ldrb	r1, [r7, #1]
 800086e:	887b      	ldrh	r3, [r7, #2]
 8000870:	3b75      	subs	r3, #117	; 0x75
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	b25b      	sxtb	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b25b      	sxtb	r3, r3
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <TL_deserialize+0x1a4>)
 8000880:	705a      	strb	r2, [r3, #1]
    return 0;
 8000882:	2300      	movs	r3, #0
 8000884:	e018      	b.n	80008b8 <TL_deserialize+0x198>
  }
  if (offset < TL_SERDES_CHANID_OFFSET) {
 8000886:	887b      	ldrh	r3, [r7, #2]
 8000888:	2b7a      	cmp	r3, #122	; 0x7a
 800088a:	d814      	bhi.n	80008b6 <TL_deserialize+0x196>
    rx_frame.chanid |= (val << (offset - TL_SERDES_OPCODE_OFFSET));
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <TL_deserialize+0x1a4>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b25a      	sxtb	r2, r3
 8000892:	7879      	ldrb	r1, [r7, #1]
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	3b78      	subs	r3, #120	; 0x78
 8000898:	fa01 f303 	lsl.w	r3, r1, r3
 800089c:	b25b      	sxtb	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <TL_deserialize+0x1a4>)
 80008a6:	701a      	strb	r2, [r3, #0]

    return offset == TL_SERDES_CHANID_OFFSET-1;
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	2b7a      	cmp	r3, #122	; 0x7a
 80008ac:	bf0c      	ite	eq
 80008ae:	2301      	moveq	r3, #1
 80008b0:	2300      	movne	r3, #0
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	e000      	b.n	80008b8 <TL_deserialize+0x198>
//    return 0;
  };
  return 1;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80008c2:	4770      	bx	lr
 80008c4:	200000b8 	.word	0x200000b8

080008c8 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if (tx_enabled) {
 80008d0:	4b46      	ldr	r3, [pc, #280]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x124>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d034      	beq.n	8000942 <HAL_TIM_IC_CaptureCallback+0x7a>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, TL_serialize(&tx_frame, tx_bit_offset));
 80008d8:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	4845      	ldr	r0, [pc, #276]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80008e0:	f7ff fe70 	bl	80005c4 <TL_serialize>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	2101      	movs	r1, #1
 80008ea:	4843      	ldr	r0, [pc, #268]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 80008ec:	f000 ff92 	bl	8001814 <HAL_GPIO_WritePin>

    if (tx_bit_offset == 0) {
 80008f0:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d109      	bne.n	800090c <HAL_TIM_IC_CaptureCallback+0x44>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	483f      	ldr	r0, [pc, #252]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x134>)
 80008fe:	f000 ff89 	bl	8001814 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 8000902:	2201      	movs	r2, #1
 8000904:	2102      	movs	r1, #2
 8000906:	483c      	ldr	r0, [pc, #240]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000908:	f000 ff84 	bl	8001814 <HAL_GPIO_WritePin>
    }

    if (tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	2b7b      	cmp	r3, #123	; 0x7b
 8000912:	d110      	bne.n	8000936 <HAL_TIM_IC_CaptureCallback+0x6e>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2102      	movs	r1, #2
 8000918:	4837      	ldr	r0, [pc, #220]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 800091a:	f000 ff7b 	bl	8001814 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	4835      	ldr	r0, [pc, #212]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000924:	f000 ff76 	bl	8001814 <HAL_GPIO_WritePin>
      tx_enabled = 0;
 8000928:	4b30      	ldr	r3, [pc, #192]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x124>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
      tx_bit_offset = 0;
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000930:	2200      	movs	r2, #0
 8000932:	801a      	strh	r2, [r3, #0]
 8000934:	e005      	b.n	8000942 <HAL_TIM_IC_CaptureCallback+0x7a>
    }
    else {
      tx_bit_offset += 1;
 8000936:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	b29a      	uxth	r2, r3
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000940:	801a      	strh	r2, [r3, #0]
    }
  }

  if (HAL_GPIO_ReadPin(TL_MISO_Valid_GPIO_Port, TL_MISO_Valid_Pin) == GPIO_PIN_SET) {
 8000942:	2102      	movs	r1, #2
 8000944:	482d      	ldr	r0, [pc, #180]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000946:	f000 ff4d 	bl	80017e4 <HAL_GPIO_ReadPin>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d148      	bne.n	80009e2 <HAL_TIM_IC_CaptureCallback+0x11a>
    if (!rx_pending) {
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d127      	bne.n	80009a8 <HAL_TIM_IC_CaptureCallback+0xe0>
      rx_bit_offset = 0;
 8000958:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800095a:	2200      	movs	r2, #0
 800095c:	801a      	strh	r2, [r3, #0]
      rx_pending = 1;
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]

      rx_frame.chanid  = 0;
 8000964:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
      rx_frame.opcode  = 0;
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 800096c:	2200      	movs	r2, #0
 800096e:	705a      	strb	r2, [r3, #1]
      rx_frame.param   = 0;
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000972:	2200      	movs	r2, #0
 8000974:	709a      	strb	r2, [r3, #2]
      rx_frame.size    = 0;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000978:	2200      	movs	r2, #0
 800097a:	70da      	strb	r2, [r3, #3]
      rx_frame.source  = 0;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 800097e:	2200      	movs	r2, #0
 8000980:	711a      	strb	r2, [r3, #4]
      rx_frame.address = 0;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
      rx_frame.data    = 0;
 8000988:	491f      	ldr	r1, [pc, #124]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 800098a:	f04f 0200 	mov.w	r2, #0
 800098e:	f04f 0300 	mov.w	r3, #0
 8000992:	e9c1 2304 	strd	r2, r3, [r1, #16]
      rx_frame.corrupt = 0;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000998:	2200      	movs	r2, #0
 800099a:	761a      	strb	r2, [r3, #24]
      rx_frame.mask    = 0;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 800099e:	2200      	movs	r2, #0
 80009a0:	765a      	strb	r2, [r3, #25]
      rx_frame.last    = 0;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	769a      	strb	r2, [r3, #26]
    }

    uint8_t val = HAL_GPIO_ReadPin(TL_MISO_Data_GPIO_Port, TL_MISO_Data_Pin);
 80009a8:	2110      	movs	r1, #16
 80009aa:	4814      	ldr	r0, [pc, #80]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x134>)
 80009ac:	f000 ff1a 	bl	80017e4 <HAL_GPIO_ReadPin>
 80009b0:	4603      	mov	r3, r0
 80009b2:	73fb      	strb	r3, [r7, #15]
    if (TL_deserialize(&rx_frame, rx_bit_offset, val)) {
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	4619      	mov	r1, r3
 80009bc:	4812      	ldr	r0, [pc, #72]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x140>)
 80009be:	f7ff feaf 	bl	8000720 <TL_deserialize>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d006      	beq.n	80009d6 <HAL_TIM_IC_CaptureCallback+0x10e>
      rx_bit_offset = 0;
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	801a      	strh	r2, [r3, #0]
      rx_finished = 1;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_TIM_IC_CaptureCallback+0x144>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
    }
    else {
      rx_bit_offset += 1;
    }
  }
}
 80009d4:	e005      	b.n	80009e2 <HAL_TIM_IC_CaptureCallback+0x11a>
      rx_bit_offset += 1;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 80009e0:	801a      	strh	r2, [r3, #0]
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000090 	.word	0x20000090
 80009f0:	2000008c 	.word	0x2000008c
 80009f4:	20000098 	.word	0x20000098
 80009f8:	40020800 	.word	0x40020800
 80009fc:	40020000 	.word	0x40020000
 8000a00:	200000d9 	.word	0x200000d9
 8000a04:	2000008e 	.word	0x2000008e
 8000a08:	200000b8 	.word	0x200000b8
 8000a0c:	200000d8 	.word	0x200000d8

08000a10 <APP_init>:
  HAL_Delay(1);
  HAL_GPIO_WritePin(TL_Clk_GPIO_Port, TL_Clk_Pin, 0);
  HAL_Delay(1);
}

void APP_init() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000a14:	2100      	movs	r1, #0
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <APP_init+0x10>)
 8000a18:	f001 fcc8 	bl	80023ac <HAL_TIM_IC_Start_IT>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000dc 	.word	0x200000dc

08000a24 <APP_main>:

void APP_main() {
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	b0a7      	sub	sp, #156	; 0x9c
 8000a28:	af04      	add	r7, sp, #16
  uint8_t cmd;
  if (HAL_UART_Receive(&huart2, &cmd, 1, 1000) == HAL_OK) {
 8000a2a:	f107 0187 	add.w	r1, r7, #135	; 0x87
 8000a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a32:	2201      	movs	r2, #1
 8000a34:	484b      	ldr	r0, [pc, #300]	; (8000b64 <APP_main+0x140>)
 8000a36:	f002 fb0c 	bl	8003052 <HAL_UART_Receive>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d15f      	bne.n	8000b00 <APP_main+0xdc>
    if (cmd == 'w') {
 8000a40:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000a44:	2b77      	cmp	r3, #119	; 0x77
 8000a46:	d12b      	bne.n	8000aa0 <APP_main+0x7c>
      tx_frame.chanid  = 0;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <APP_main+0x144>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
      tx_frame.opcode  = 0;// get  //0;// putfull
 8000a4e:	4b46      	ldr	r3, [pc, #280]	; (8000b68 <APP_main+0x144>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	705a      	strb	r2, [r3, #1]
      tx_frame.param   = 0;
 8000a54:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <APP_main+0x144>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	709a      	strb	r2, [r3, #2]
      tx_frame.size    = 2;
 8000a5a:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <APP_main+0x144>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	70da      	strb	r2, [r3, #3]
      tx_frame.source  = 0;
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <APP_main+0x144>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	711a      	strb	r2, [r3, #4]
      tx_frame.address = 0x80000000;//0x54000008; //0x80000000;
 8000a66:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <APP_main+0x144>)
 8000a68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a6c:	609a      	str	r2, [r3, #8]
      tx_frame.data    = 0x0000000000000001;
 8000a6e:	493e      	ldr	r1, [pc, #248]	; (8000b68 <APP_main+0x144>)
 8000a70:	f04f 0201 	mov.w	r2, #1
 8000a74:	f04f 0300 	mov.w	r3, #0
 8000a78:	e9c1 2304 	strd	r2, r3, [r1, #16]
      tx_frame.corrupt = 0;
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <APP_main+0x144>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	761a      	strb	r2, [r3, #24]
      tx_frame.mask    = 0b00001111;
 8000a82:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <APP_main+0x144>)
 8000a84:	220f      	movs	r2, #15
 8000a86:	765a      	strb	r2, [r3, #25]
      tx_frame.last    = 1;
 8000a88:	4b37      	ldr	r3, [pc, #220]	; (8000b68 <APP_main+0x144>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	769a      	strb	r2, [r3, #26]

      tx_bit_offset = 0;
 8000a8e:	4b37      	ldr	r3, [pc, #220]	; (8000b6c <APP_main+0x148>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	801a      	strh	r2, [r3, #0]
      tx_enabled = 1;
 8000a94:	4b36      	ldr	r3, [pc, #216]	; (8000b70 <APP_main+0x14c>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
      HAL_Delay(50);
 8000a9a:	2032      	movs	r0, #50	; 0x32
 8000a9c:	f000 fbd8 	bl	8001250 <HAL_Delay>
    }
    if (cmd == 'r') {
 8000aa0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000aa4:	2b72      	cmp	r3, #114	; 0x72
 8000aa6:	d12b      	bne.n	8000b00 <APP_main+0xdc>
      tx_frame.chanid  = 0;
 8000aa8:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <APP_main+0x144>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
      tx_frame.opcode  = 4;// get  //0;// putfull
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <APP_main+0x144>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	705a      	strb	r2, [r3, #1]
      tx_frame.param   = 0;
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <APP_main+0x144>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	709a      	strb	r2, [r3, #2]
      tx_frame.size    = 2;
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <APP_main+0x144>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	70da      	strb	r2, [r3, #3]
      tx_frame.source  = 0;
 8000ac0:	4b29      	ldr	r3, [pc, #164]	; (8000b68 <APP_main+0x144>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	711a      	strb	r2, [r3, #4]
      tx_frame.address = 0x80000000;//0x54000008;//;
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <APP_main+0x144>)
 8000ac8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000acc:	609a      	str	r2, [r3, #8]
      tx_frame.data    = 0x0000000000000001;
 8000ace:	4926      	ldr	r1, [pc, #152]	; (8000b68 <APP_main+0x144>)
 8000ad0:	f04f 0201 	mov.w	r2, #1
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e9c1 2304 	strd	r2, r3, [r1, #16]
      tx_frame.corrupt = 0;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <APP_main+0x144>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	761a      	strb	r2, [r3, #24]
      tx_frame.mask    = 0b00001111;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <APP_main+0x144>)
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	765a      	strb	r2, [r3, #25]
      tx_frame.last    = 1;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <APP_main+0x144>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	769a      	strb	r2, [r3, #26]

      tx_bit_offset = 0;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	; (8000b6c <APP_main+0x148>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	801a      	strh	r2, [r3, #0]
      tx_enabled = 1;
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <APP_main+0x14c>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
      HAL_Delay(50);
 8000afa:	2032      	movs	r0, #50	; 0x32
 8000afc:	f000 fba8 	bl	8001250 <HAL_Delay>
    }
  }

  if (rx_finished) {
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <APP_main+0x150>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d026      	beq.n	8000b56 <APP_main+0x132>
    char str[128];

    sprintf(str, "[RX] chanid: %d opcode: %d size: %d address: %hu data: %hu\r\n", rx_frame.chanid, rx_frame.opcode, rx_frame.size, rx_frame.address, rx_frame.data);
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <APP_main+0x154>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461d      	mov	r5, r3
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <APP_main+0x154>)
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	461e      	mov	r6, r3
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <APP_main+0x154>)
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	461c      	mov	r4, r3
 8000b1a:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <APP_main+0x154>)
 8000b1c:	6899      	ldr	r1, [r3, #8]
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <APP_main+0x154>)
 8000b20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000b24:	1d38      	adds	r0, r7, #4
 8000b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b2a:	9101      	str	r1, [sp, #4]
 8000b2c:	9400      	str	r4, [sp, #0]
 8000b2e:	4633      	mov	r3, r6
 8000b30:	462a      	mov	r2, r5
 8000b32:	4912      	ldr	r1, [pc, #72]	; (8000b7c <APP_main+0x158>)
 8000b34:	f002 fe44 	bl	80037c0 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb68 	bl	8000210 <strlen>
 8000b40:	4603      	mov	r3, r0
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	1d39      	adds	r1, r7, #4
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <APP_main+0x140>)
 8000b4c:	f002 f9ef 	bl	8002f2e <HAL_UART_Transmit>
    rx_finished = 0;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <APP_main+0x150>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
  }

  HAL_Delay(50);
 8000b56:	2032      	movs	r0, #50	; 0x32
 8000b58:	f000 fb7a 	bl	8001250 <HAL_Delay>
}
 8000b5c:	bf00      	nop
 8000b5e:	378c      	adds	r7, #140	; 0x8c
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b64:	20000124 	.word	0x20000124
 8000b68:	20000098 	.word	0x20000098
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	20000090 	.word	0x20000090
 8000b74:	200000d8 	.word	0x200000d8
 8000b78:	200000b8 	.word	0x200000b8
 8000b7c:	080040b4 	.word	0x080040b4

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f000 faf2 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f80c 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f000 f8f4 	bl	8000d78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b90:	f000 f8c8 	bl	8000d24 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000b94:	f000 f872 	bl	8000c7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8000b98:	f7ff ff3a 	bl	8000a10 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000b9c:	f7ff ff42 	bl	8000a24 <APP_main>
 8000ba0:	e7fc      	b.n	8000b9c <main+0x1c>
	...

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b094      	sub	sp, #80	; 0x50
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	2234      	movs	r2, #52	; 0x34
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fdfc 	bl	80037b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <SystemClock_Config+0xd0>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <SystemClock_Config+0xd4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <SystemClock_Config+0xd4>)
 8000bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <SystemClock_Config+0xd4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c10:	2300      	movs	r3, #0
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c14:	2308      	movs	r3, #8
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c18:	23a0      	movs	r3, #160	; 0xa0
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 f8cf 	bl	8001dd0 <HAL_RCC_OscConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c38:	f000 f92c 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c40:	2302      	movs	r3, #2
 8000c42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2105      	movs	r1, #5
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fdf4 	bl	8001848 <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c66:	f000 f915 	bl	8000e94 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3750      	adds	r7, #80	; 0x50
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <MX_TIM4_Init+0xa4>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000cbe:	4817      	ldr	r0, [pc, #92]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000cc0:	f001 fb24 	bl	800230c <HAL_TIM_IC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000cca:	f000 f8e3 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000cde:	f002 f849 	bl	8002d74 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ce8:	f000 f8d4 	bl	8000e94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cec:	2300      	movs	r3, #0
 8000cee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_TIM4_Init+0xa0>)
 8000d04:	f001 fd82 	bl	800280c <HAL_TIM_IC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000d0e:	f000 f8c1 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200000dc 	.word	0x200000dc
 8000d20:	40000800 	.word	0x40000800

08000d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_USART2_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f002 f89a 	bl	8002e94 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f000 f895 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000124 	.word	0x20000124
 8000d74:	40004400 	.word	0x40004400

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a3b      	ldr	r2, [pc, #236]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <MX_GPIO_Init+0x10c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2103      	movs	r1, #3
 8000de6:	4828      	ldr	r0, [pc, #160]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000de8:	f000 fd14 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5|TL_Clk_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f240 1121 	movw	r1, #289	; 0x121
 8000df2:	4826      	ldr	r0, [pc, #152]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000df4:	f000 fd0e 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481e      	ldr	r0, [pc, #120]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000e0e:	f000 fb55 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 8000e12:	2303      	movs	r3, #3
 8000e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	4817      	ldr	r0, [pc, #92]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000e2a:	f000 fb47 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 TL_Clk_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5|TL_Clk_Pin;
 8000e2e:	f240 1321 	movw	r3, #289	; 0x121
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4811      	ldr	r0, [pc, #68]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000e48:	f000 fb38 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480b      	ldr	r0, [pc, #44]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000e60:	f000 fb2c 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8000e64:	2301      	movs	r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e78:	f000 fb20 	bl	80014bc <HAL_GPIO_Init>

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020800 	.word	0x40020800
 8000e8c:	40020000 	.word	0x40020000
 8000e90:	40020400 	.word	0x40020400

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_MspInit+0x4c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_MspInit+0x4c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_MspInit+0x4c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_MspInit+0x4c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_TIM_IC_MspInit+0x94>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d133      	bne.n	8000f7a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_TIM_IC_MspInit+0x98>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_TIM_IC_MspInit+0x98>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_TIM_IC_MspInit+0x98>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_TIM_IC_MspInit+0x98>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_TIM_IC_MspInit+0x98>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_TIM_IC_MspInit+0x98>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f4a:	2340      	movs	r3, #64	; 0x40
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <HAL_TIM_IC_MspInit+0x9c>)
 8000f66:	f000 faa9 	bl	80014bc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	201e      	movs	r0, #30
 8000f70:	f000 fa6d 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f74:	201e      	movs	r0, #30
 8000f76:	f000 fa86 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40000800 	.word	0x40000800
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a19      	ldr	r2, [pc, #100]	; (8001014 <HAL_UART_MspInit+0x84>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12b      	bne.n	800100a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_MspInit+0x88>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fea:	230c      	movs	r3, #12
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_UART_MspInit+0x8c>)
 8001006:	f000 fa59 	bl	80014bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40004400 	.word	0x40004400
 8001018:	40023800 	.word	0x40023800
 800101c:	40020000 	.word	0x40020000

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 f8d0 	bl	8001210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <TIM4_IRQHandler+0x10>)
 800107a:	f001 fabf 	bl	80025fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200000dc 	.word	0x200000dc

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	; (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f002 fb50 	bl	800375c <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20020000 	.word	0x20020000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	20000168 	.word	0x20000168
 80010f0:	20000180 	.word	0x20000180

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800111e:	490e      	ldr	r1, [pc, #56]	; (8001158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001134:	4c0b      	ldr	r4, [pc, #44]	; (8001164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001142:	f7ff ffd7 	bl	80010f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f002 fb0f 	bl	8003768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fd19 	bl	8000b80 <main>
  bx  lr    
 800114e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800115c:	08004150 	.word	0x08004150
  ldr r2, =_sbss
 8001160:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001164:	20000180 	.word	0x20000180

08001168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	; (80011ac <HAL_Init+0x40>)
 8001176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_Init+0x40>)
 8001182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_Init+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_Init+0x40>)
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f94f 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119a:	200f      	movs	r0, #15
 800119c:	f000 f808 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a0:	f7ff fe7e 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x54>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x58>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f967 	bl	80014a2 <HAL_SYSTICK_Config>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e00e      	b.n	80011fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d80a      	bhi.n	80011fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e4:	2200      	movs	r2, #0
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ec:	f000 f92f 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <HAL_InitTick+0x5c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000000 	.word	0x20000000
 8001208:	20000008 	.word	0x20000008
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x20>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x24>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_IncTick+0x24>)
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008
 8001234:	2000016c 	.word	0x2000016c

08001238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <HAL_GetTick+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000016c 	.word	0x2000016c

08001250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff ffee 	bl	8001238 <HAL_GetTick>
 800125c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001268:	d005      	beq.n	8001276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_Delay+0x44>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001276:	bf00      	nop
 8001278:	f7ff ffde 	bl	8001238 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d8f7      	bhi.n	8001278 <HAL_Delay+0x28>
  {
  }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008

08001298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b4:	4013      	ands	r3, r2
 80012b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ca:	4a04      	ldr	r2, [pc, #16]	; (80012dc <__NVIC_SetPriorityGrouping+0x44>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60d3      	str	r3, [r2, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e4:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <__NVIC_GetPriorityGrouping+0x18>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f003 0307 	and.w	r3, r3, #7
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	2b00      	cmp	r3, #0
 800130c:	db0b      	blt.n	8001326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f003 021f 	and.w	r2, r3, #31
 8001314:	4907      	ldr	r1, [pc, #28]	; (8001334 <__NVIC_EnableIRQ+0x38>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	095b      	lsrs	r3, r3, #5
 800131c:	2001      	movs	r0, #1
 800131e:	fa00 f202 	lsl.w	r2, r0, r2
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff8e 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff29 	bl	8001298 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff3e 	bl	80012e0 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff8e 	bl	800138c <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff31 	bl	80012fc <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e165      	b.n	80017a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d8:	2201      	movs	r2, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4013      	ands	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	f040 8154 	bne.w	800179e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d005      	beq.n	800150e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150a:	2b02      	cmp	r3, #2
 800150c:	d130      	bne.n	8001570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 0201 	and.w	r2, r3, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b03      	cmp	r3, #3
 800157a:	d017      	beq.n	80015ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	2203      	movs	r2, #3
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d123      	bne.n	8001600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	08da      	lsrs	r2, r3, #3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3208      	adds	r2, #8
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	220f      	movs	r2, #15
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	691a      	ldr	r2, [r3, #16]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	08da      	lsrs	r2, r3, #3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3208      	adds	r2, #8
 80015fa:	69b9      	ldr	r1, [r7, #24]
 80015fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0203 	and.w	r2, r3, #3
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80ae 	beq.w	800179e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b5d      	ldr	r3, [pc, #372]	; (80017bc <HAL_GPIO_Init+0x300>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a5c      	ldr	r2, [pc, #368]	; (80017bc <HAL_GPIO_Init+0x300>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b5a      	ldr	r3, [pc, #360]	; (80017bc <HAL_GPIO_Init+0x300>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165e:	4a58      	ldr	r2, [pc, #352]	; (80017c0 <HAL_GPIO_Init+0x304>)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3302      	adds	r3, #2
 8001666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	220f      	movs	r2, #15
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	; (80017c4 <HAL_GPIO_Init+0x308>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d025      	beq.n	80016d6 <HAL_GPIO_Init+0x21a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4e      	ldr	r2, [pc, #312]	; (80017c8 <HAL_GPIO_Init+0x30c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d01f      	beq.n	80016d2 <HAL_GPIO_Init+0x216>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4d      	ldr	r2, [pc, #308]	; (80017cc <HAL_GPIO_Init+0x310>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d019      	beq.n	80016ce <HAL_GPIO_Init+0x212>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4c      	ldr	r2, [pc, #304]	; (80017d0 <HAL_GPIO_Init+0x314>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d013      	beq.n	80016ca <HAL_GPIO_Init+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4b      	ldr	r2, [pc, #300]	; (80017d4 <HAL_GPIO_Init+0x318>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00d      	beq.n	80016c6 <HAL_GPIO_Init+0x20a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4a      	ldr	r2, [pc, #296]	; (80017d8 <HAL_GPIO_Init+0x31c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d007      	beq.n	80016c2 <HAL_GPIO_Init+0x206>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a49      	ldr	r2, [pc, #292]	; (80017dc <HAL_GPIO_Init+0x320>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d101      	bne.n	80016be <HAL_GPIO_Init+0x202>
 80016ba:	2306      	movs	r3, #6
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_Init+0x21c>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00a      	b.n	80016d8 <HAL_GPIO_Init+0x21c>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x21c>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x21c>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x21c>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x21c>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x21c>
 80016d6:	2300      	movs	r3, #0
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e8:	4935      	ldr	r1, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x304>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f6:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <HAL_GPIO_Init+0x324>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171a:	4a31      	ldr	r2, [pc, #196]	; (80017e0 <HAL_GPIO_Init+0x324>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_GPIO_Init+0x324>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001744:	4a26      	ldr	r2, [pc, #152]	; (80017e0 <HAL_GPIO_Init+0x324>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_GPIO_Init+0x324>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <HAL_GPIO_Init+0x324>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_GPIO_Init+0x324>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_GPIO_Init+0x324>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	f67f ae96 	bls.w	80014d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e001      	b.n	8001806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001830:	e003      	b.n	800183a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	619a      	str	r2, [r3, #24]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0cc      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 030f 	and.w	r3, r3, #15
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d90c      	bls.n	8001884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494d      	ldr	r1, [pc, #308]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d044      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e067      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4934      	ldr	r1, [pc, #208]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff fc7e 	bl	8001238 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff fc7a 	bl	8001238 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d20c      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e032      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4916      	ldr	r1, [pc, #88]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 f855 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490a      	ldr	r1, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fbde 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	080040f4 	.word	0x080040f4
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff0 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	08004104 	.word	0x08004104

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffdc 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0b5b      	lsrs	r3, r3, #13
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	08004104 	.word	0x08004104

08001a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a80:	b0a6      	sub	sp, #152	; 0x98
 8001a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa2:	4bc8      	ldr	r3, [pc, #800]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	f200 817e 	bhi.w	8001dac <HAL_RCC_GetSysClockFreq+0x330>
 8001ab0:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab6:	bf00      	nop
 8001ab8:	08001aed 	.word	0x08001aed
 8001abc:	08001dad 	.word	0x08001dad
 8001ac0:	08001dad 	.word	0x08001dad
 8001ac4:	08001dad 	.word	0x08001dad
 8001ac8:	08001af5 	.word	0x08001af5
 8001acc:	08001dad 	.word	0x08001dad
 8001ad0:	08001dad 	.word	0x08001dad
 8001ad4:	08001dad 	.word	0x08001dad
 8001ad8:	08001afd 	.word	0x08001afd
 8001adc:	08001dad 	.word	0x08001dad
 8001ae0:	08001dad 	.word	0x08001dad
 8001ae4:	08001dad 	.word	0x08001dad
 8001ae8:	08001c67 	.word	0x08001c67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4bb6      	ldr	r3, [pc, #728]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001af2:	e15f      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001af4:	4bb5      	ldr	r3, [pc, #724]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001afa:	e15b      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001afc:	4bb1      	ldr	r3, [pc, #708]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b08:	4bae      	ldr	r3, [pc, #696]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d031      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b14:	4bab      	ldr	r3, [pc, #684]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001b1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b26:	663b      	str	r3, [r7, #96]	; 0x60
 8001b28:	2300      	movs	r3, #0
 8001b2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001b2c:	4ba7      	ldr	r3, [pc, #668]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001b2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001b32:	462a      	mov	r2, r5
 8001b34:	fb03 f202 	mul.w	r2, r3, r2
 8001b38:	2300      	movs	r3, #0
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	4aa2      	ldr	r2, [pc, #648]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001b44:	4621      	mov	r1, r4
 8001b46:	fba1 1202 	umull	r1, r2, r1, r2
 8001b4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001b50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b52:	4413      	add	r3, r2
 8001b54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b64:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b68:	f7fe fbaa 	bl	80002c0 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b76:	e064      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b78:	4b92      	ldr	r3, [pc, #584]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	2200      	movs	r2, #0
 8001b80:	653b      	str	r3, [r7, #80]	; 0x50
 8001b82:	657a      	str	r2, [r7, #84]	; 0x54
 8001b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b90:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001b94:	4622      	mov	r2, r4
 8001b96:	462b      	mov	r3, r5
 8001b98:	f04f 0000 	mov.w	r0, #0
 8001b9c:	f04f 0100 	mov.w	r1, #0
 8001ba0:	0159      	lsls	r1, r3, #5
 8001ba2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba6:	0150      	lsls	r0, r2, #5
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4621      	mov	r1, r4
 8001bae:	1a51      	subs	r1, r2, r1
 8001bb0:	6139      	str	r1, [r7, #16]
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	eb63 0301 	sbc.w	r3, r3, r1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	018b      	lsls	r3, r1, #6
 8001bca:	4651      	mov	r1, sl
 8001bcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bd0:	4651      	mov	r1, sl
 8001bd2:	018a      	lsls	r2, r1, #6
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	ebb2 0801 	subs.w	r8, r2, r1
 8001bda:	4659      	mov	r1, fp
 8001bdc:	eb63 0901 	sbc.w	r9, r3, r1
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bf4:	4690      	mov	r8, r2
 8001bf6:	4699      	mov	r9, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	eb18 0303 	adds.w	r3, r8, r3
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	462b      	mov	r3, r5
 8001c02:	eb49 0303 	adc.w	r3, r9, r3
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c14:	4629      	mov	r1, r5
 8001c16:	028b      	lsls	r3, r1, #10
 8001c18:	4621      	mov	r1, r4
 8001c1a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c1e:	4621      	mov	r1, r4
 8001c20:	028a      	lsls	r2, r1, #10
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c2e:	647a      	str	r2, [r7, #68]	; 0x44
 8001c30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c34:	f7fe fb44 	bl	80002c0 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c42:	4b60      	ldr	r3, [pc, #384]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001c54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001c64:	e0a6      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c66:	4b57      	ldr	r3, [pc, #348]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c72:	4b54      	ldr	r3, [pc, #336]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02a      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	4b51      	ldr	r3, [pc, #324]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	099b      	lsrs	r3, r3, #6
 8001c84:	2200      	movs	r2, #0
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c90:	2100      	movs	r1, #0
 8001c92:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001c94:	fb03 f201 	mul.w	r2, r3, r1
 8001c98:	2300      	movs	r3, #0
 8001c9a:	fb00 f303 	mul.w	r3, r0, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	4a4a      	ldr	r2, [pc, #296]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x350>)
 8001ca2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ca6:	677a      	str	r2, [r7, #116]	; 0x74
 8001ca8:	460a      	mov	r2, r1
 8001caa:	673a      	str	r2, [r7, #112]	; 0x70
 8001cac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001cae:	4413      	add	r3, r2
 8001cb0:	677b      	str	r3, [r7, #116]	; 0x74
 8001cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cba:	637a      	str	r2, [r7, #52]	; 0x34
 8001cbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cc0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001cc4:	f7fe fafc 	bl	80002c0 <__aeabi_uldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4613      	mov	r3, r2
 8001cce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cd2:	e05b      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	2200      	movs	r2, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce6:	623b      	str	r3, [r7, #32]
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
 8001cec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cf0:	4642      	mov	r2, r8
 8001cf2:	464b      	mov	r3, r9
 8001cf4:	f04f 0000 	mov.w	r0, #0
 8001cf8:	f04f 0100 	mov.w	r1, #0
 8001cfc:	0159      	lsls	r1, r3, #5
 8001cfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d02:	0150      	lsls	r0, r2, #5
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4641      	mov	r1, r8
 8001d0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d0e:	4649      	mov	r1, r9
 8001d10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d28:	ebb2 040a 	subs.w	r4, r2, sl
 8001d2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	00eb      	lsls	r3, r5, #3
 8001d3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d3e:	00e2      	lsls	r2, r4, #3
 8001d40:	4614      	mov	r4, r2
 8001d42:	461d      	mov	r5, r3
 8001d44:	4643      	mov	r3, r8
 8001d46:	18e3      	adds	r3, r4, r3
 8001d48:	603b      	str	r3, [r7, #0]
 8001d4a:	464b      	mov	r3, r9
 8001d4c:	eb45 0303 	adc.w	r3, r5, r3
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d5e:	4629      	mov	r1, r5
 8001d60:	028b      	lsls	r3, r1, #10
 8001d62:	4621      	mov	r1, r4
 8001d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d68:	4621      	mov	r1, r4
 8001d6a:	028a      	lsls	r2, r1, #10
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d74:	2200      	movs	r2, #0
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	61fa      	str	r2, [r7, #28]
 8001d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d7e:	f7fe fa9f 	bl	80002c0 <__aeabi_uldivmod>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4613      	mov	r3, r2
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0f1b      	lsrs	r3, r3, #28
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001d9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001daa:	e003      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001db2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3798      	adds	r7, #152	; 0x98
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	00f42400 	.word	0x00f42400
 8001dcc:	017d7840 	.word	0x017d7840

08001dd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e28d      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8083 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001df0:	4b94      	ldr	r3, [pc, #592]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d019      	beq.n	8001e30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dfc:	4b91      	ldr	r3, [pc, #580]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e08:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e14:	d00c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e16:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d112      	bne.n	8001e48 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e2e:	d10b      	bne.n	8001e48 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	4b84      	ldr	r3, [pc, #528]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d05b      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x124>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d157      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e25a      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d106      	bne.n	8001e60 <HAL_RCC_OscConfig+0x90>
 8001e52:	4b7c      	ldr	r3, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7b      	ldr	r2, [pc, #492]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e01d      	b.n	8001e9c <HAL_RCC_OscConfig+0xcc>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0xb4>
 8001e6a:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a75      	ldr	r2, [pc, #468]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b73      	ldr	r3, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a72      	ldr	r2, [pc, #456]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0xcc>
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6e      	ldr	r2, [pc, #440]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b6c      	ldr	r3, [pc, #432]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6b      	ldr	r2, [pc, #428]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f9c8 	bl	8001238 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f9c4 	bl	8001238 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e21f      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	4b61      	ldr	r3, [pc, #388]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0xdc>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f9b4 	bl	8001238 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f9b0 	bl	8001238 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e20b      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	4b57      	ldr	r3, [pc, #348]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x104>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d06f      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f02:	4b50      	ldr	r3, [pc, #320]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d017      	beq.n	8001f3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f0e:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d105      	bne.n	8001f26 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f1a:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f26:	4b47      	ldr	r3, [pc, #284]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d11c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f32:	4b44      	ldr	r3, [pc, #272]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d116      	bne.n	8001f6c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x186>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d001      	beq.n	8001f56 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e1d3      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f56:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4937      	ldr	r1, [pc, #220]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6a:	e03a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_OscConfig+0x278>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff f95d 	bl	8001238 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f82:	f7ff f959 	bl	8001238 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e1b4      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4925      	ldr	r1, [pc, #148]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
 8001fb4:	e015      	b.n	8001fe2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_OscConfig+0x278>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f93c 	bl	8001238 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f938 	bl	8001238 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e193      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd6:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d036      	beq.n	800205c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff f91c 	bl	8001238 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7ff f918 	bl	8001238 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e173      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_OscConfig+0x274>)
 8002018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x234>
 8002022:	e01b      	b.n	800205c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_OscConfig+0x27c>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7ff f905 	bl	8001238 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	e00e      	b.n	8002050 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002032:	f7ff f901 	bl	8001238 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d907      	bls.n	8002050 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e15c      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
 8002044:	40023800 	.word	0x40023800
 8002048:	42470000 	.word	0x42470000
 800204c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	4b8a      	ldr	r3, [pc, #552]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ea      	bne.n	8002032 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8097 	beq.w	8002198 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10f      	bne.n	800209a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b7f      	ldr	r3, [pc, #508]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a7e      	ldr	r2, [pc, #504]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b7c      	ldr	r3, [pc, #496]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209a:	4b79      	ldr	r3, [pc, #484]	; (8002280 <HAL_RCC_OscConfig+0x4b0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020a6:	4b76      	ldr	r3, [pc, #472]	; (8002280 <HAL_RCC_OscConfig+0x4b0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a75      	ldr	r2, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x4b0>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff f8c1 	bl	8001238 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7ff f8bd 	bl	8001238 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e118      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	4b6c      	ldr	r3, [pc, #432]	; (8002280 <HAL_RCC_OscConfig+0x4b0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x31e>
 80020e0:	4b66      	ldr	r3, [pc, #408]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6713      	str	r3, [r2, #112]	; 0x70
 80020ec:	e01c      	b.n	8002128 <HAL_RCC_OscConfig+0x358>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x340>
 80020f6:	4b61      	ldr	r3, [pc, #388]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fa:	4a60      	ldr	r2, [pc, #384]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6713      	str	r3, [r2, #112]	; 0x70
 8002102:	4b5e      	ldr	r3, [pc, #376]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a5d      	ldr	r2, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0x358>
 8002110:	4b5a      	ldr	r3, [pc, #360]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a59      	ldr	r2, [pc, #356]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	4b57      	ldr	r3, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a56      	ldr	r2, [pc, #344]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002122:	f023 0304 	bic.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d015      	beq.n	800215c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff f882 	bl	8001238 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff f87e 	bl	8001238 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0d7      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214e:	4b4b      	ldr	r3, [pc, #300]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ee      	beq.n	8002138 <HAL_RCC_OscConfig+0x368>
 800215a:	e014      	b.n	8002186 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7ff f86c 	bl	8001238 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002162:	e00a      	b.n	800217a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7ff f868 	bl	8001238 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0c1      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ee      	bne.n	8002164 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d105      	bne.n	8002198 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218c:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a3a      	ldr	r2, [pc, #232]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002192:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 80ad 	beq.w	80022fc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d060      	beq.n	8002270 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d145      	bne.n	8002242 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_RCC_OscConfig+0x4b4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff f83c 	bl	8001238 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff f838 	bl	8001238 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e093      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	019b      	lsls	r3, r3, #6
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	085b      	lsrs	r3, r3, #1
 80021fa:	3b01      	subs	r3, #1
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	061b      	lsls	r3, r3, #24
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	071b      	lsls	r3, r3, #28
 800220e:	491b      	ldr	r1, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002214:	4b1b      	ldr	r3, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x4b4>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff f80d 	bl	8001238 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f809 	bl	8001238 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e064      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x452>
 8002240:	e05c      	b.n	80022fc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_OscConfig+0x4b4>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fff6 	bl	8001238 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fff2 	bl	8001238 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e04d      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_OscConfig+0x4ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x480>
 800226e:	e045      	b.n	80022fc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d107      	bne.n	8002288 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e040      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
 800227c:	40023800 	.word	0x40023800
 8002280:	40007000 	.word	0x40007000
 8002284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_RCC_OscConfig+0x538>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d129      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d122      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d119      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d10f      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e041      	b.n	80023a2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fddc 	bl	8000ef0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3304      	adds	r3, #4
 8002348:	4619      	mov	r1, r3
 800234a:	4610      	mov	r0, r2
 800234c:	f000 fb22 	bl	8002994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_TIM_IC_Start_IT+0x1e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	e013      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x46>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d104      	bne.n	80023da <HAL_TIM_IC_Start_IT+0x2e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	e00b      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x46>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d104      	bne.n	80023ea <HAL_TIM_IC_Start_IT+0x3e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	e003      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x46>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d104      	bne.n	8002404 <HAL_TIM_IC_Start_IT+0x58>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e013      	b.n	800242c <HAL_TIM_IC_Start_IT+0x80>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b04      	cmp	r3, #4
 8002408:	d104      	bne.n	8002414 <HAL_TIM_IC_Start_IT+0x68>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002410:	b2db      	uxtb	r3, r3
 8002412:	e00b      	b.n	800242c <HAL_TIM_IC_Start_IT+0x80>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d104      	bne.n	8002424 <HAL_TIM_IC_Start_IT+0x78>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e003      	b.n	800242c <HAL_TIM_IC_Start_IT+0x80>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800242a:	b2db      	uxtb	r3, r3
 800242c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800242e:	7bbb      	ldrb	r3, [r7, #14]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d102      	bne.n	800243a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002434:	7b7b      	ldrb	r3, [r7, #13]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e0cc      	b.n	80025d8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <HAL_TIM_IC_Start_IT+0xa2>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800244c:	e013      	b.n	8002476 <HAL_TIM_IC_Start_IT+0xca>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d104      	bne.n	800245e <HAL_TIM_IC_Start_IT+0xb2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245c:	e00b      	b.n	8002476 <HAL_TIM_IC_Start_IT+0xca>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d104      	bne.n	800246e <HAL_TIM_IC_Start_IT+0xc2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800246c:	e003      	b.n	8002476 <HAL_TIM_IC_Start_IT+0xca>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d104      	bne.n	8002486 <HAL_TIM_IC_Start_IT+0xda>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002484:	e013      	b.n	80024ae <HAL_TIM_IC_Start_IT+0x102>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b04      	cmp	r3, #4
 800248a:	d104      	bne.n	8002496 <HAL_TIM_IC_Start_IT+0xea>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002494:	e00b      	b.n	80024ae <HAL_TIM_IC_Start_IT+0x102>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d104      	bne.n	80024a6 <HAL_TIM_IC_Start_IT+0xfa>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024a4:	e003      	b.n	80024ae <HAL_TIM_IC_Start_IT+0x102>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d841      	bhi.n	8002538 <HAL_TIM_IC_Start_IT+0x18c>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_TIM_IC_Start_IT+0x110>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	08002539 	.word	0x08002539
 80024c4:	08002539 	.word	0x08002539
 80024c8:	08002539 	.word	0x08002539
 80024cc:	08002503 	.word	0x08002503
 80024d0:	08002539 	.word	0x08002539
 80024d4:	08002539 	.word	0x08002539
 80024d8:	08002539 	.word	0x08002539
 80024dc:	08002515 	.word	0x08002515
 80024e0:	08002539 	.word	0x08002539
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002539 	.word	0x08002539
 80024ec:	08002527 	.word	0x08002527
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0202 	orr.w	r2, r2, #2
 80024fe:	60da      	str	r2, [r3, #12]
      break;
 8002500:	e01d      	b.n	800253e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0204 	orr.w	r2, r2, #4
 8002510:	60da      	str	r2, [r3, #12]
      break;
 8002512:	e014      	b.n	800253e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0208 	orr.w	r2, r2, #8
 8002522:	60da      	str	r2, [r3, #12]
      break;
 8002524:	e00b      	b.n	800253e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0210 	orr.w	r2, r2, #16
 8002534:	60da      	str	r2, [r3, #12]
      break;
 8002536:	e002      	b.n	800253e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	bf00      	nop
  }

  if (status == HAL_OK)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d148      	bne.n	80025d6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fbeb 	bl	8002d28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <HAL_TIM_IC_Start_IT+0x234>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d022      	beq.n	80025a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002564:	d01d      	beq.n	80025a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_TIM_IC_Start_IT+0x238>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d018      	beq.n	80025a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_TIM_IC_Start_IT+0x23c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_TIM_IC_Start_IT+0x240>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d00e      	beq.n	80025a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a19      	ldr	r2, [pc, #100]	; (80025f0 <HAL_TIM_IC_Start_IT+0x244>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_TIM_IC_Start_IT+0x1f6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_TIM_IC_Start_IT+0x248>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d004      	beq.n	80025a2 <HAL_TIM_IC_Start_IT+0x1f6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <HAL_TIM_IC_Start_IT+0x24c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d111      	bne.n	80025c6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	d010      	beq.n	80025d6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c4:	e007      	b.n	80025d6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40010000 	.word	0x40010000
 80025e4:	40000400 	.word	0x40000400
 80025e8:	40000800 	.word	0x40000800
 80025ec:	40000c00 	.word	0x40000c00
 80025f0:	40010400 	.word	0x40010400
 80025f4:	40014000 	.word	0x40014000
 80025f8:	40001800 	.word	0x40001800

080025fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b02      	cmp	r3, #2
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0202 	mvn.w	r2, #2
 8002628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe f942 	bl	80008c8 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f986 	bl	8002958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f98d 	bl	800296c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b04      	cmp	r3, #4
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b04      	cmp	r3, #4
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0204 	mvn.w	r2, #4
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2202      	movs	r2, #2
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe f918 	bl	80008c8 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f95c 	bl	8002958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f963 	bl	800296c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0208 	mvn.w	r2, #8
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2204      	movs	r2, #4
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f8ee 	bl	80008c8 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f932 	bl	8002958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f939 	bl	800296c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b10      	cmp	r3, #16
 800270c:	d122      	bne.n	8002754 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b10      	cmp	r3, #16
 800271a:	d11b      	bne.n	8002754 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0210 	mvn.w	r2, #16
 8002724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2208      	movs	r2, #8
 800272a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe f8c4 	bl	80008c8 <HAL_TIM_IC_CaptureCallback>
 8002740:	e005      	b.n	800274e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f908 	bl	8002958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f90f 	bl	800296c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d10e      	bne.n	8002780 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d107      	bne.n	8002780 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f06f 0201 	mvn.w	r2, #1
 8002778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8e2 	bl	8002944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278a:	2b80      	cmp	r3, #128	; 0x80
 800278c:	d10e      	bne.n	80027ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b80      	cmp	r3, #128	; 0x80
 800279a:	d107      	bne.n	80027ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fb6a 	bl	8002e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8d4 	bl	8002980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0220 	mvn.w	r2, #32
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fb34 	bl	8002e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_TIM_IC_ConfigChannel+0x1e>
 8002826:	2302      	movs	r3, #2
 8002828:	e088      	b.n	800293c <HAL_TIM_IC_ConfigChannel+0x130>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11b      	bne.n	8002870 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f000 f944 	bl	8002ad4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020c 	bic.w	r2, r2, #12
 800285a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6999      	ldr	r1, [r3, #24]
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	619a      	str	r2, [r3, #24]
 800286e:	e060      	b.n	8002932 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d11c      	bne.n	80028b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	6819      	ldr	r1, [r3, #0]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f000 f999 	bl	8002bbc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002898:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6999      	ldr	r1, [r3, #24]
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	021a      	lsls	r2, r3, #8
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	619a      	str	r2, [r3, #24]
 80028ae:	e040      	b.n	8002932 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d11b      	bne.n	80028ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6819      	ldr	r1, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f000 f9b6 	bl	8002c36 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 020c 	bic.w	r2, r2, #12
 80028d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69d9      	ldr	r1, [r3, #28]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	61da      	str	r2, [r3, #28]
 80028ec:	e021      	b.n	8002932 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0c      	cmp	r3, #12
 80028f2:	d11c      	bne.n	800292e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f000 f9d3 	bl	8002cae <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002916:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69d9      	ldr	r1, [r3, #28]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	021a      	lsls	r2, r3, #8
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	61da      	str	r2, [r3, #28]
 800292c:	e001      	b.n	8002932 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a40      	ldr	r2, [pc, #256]	; (8002aa8 <TIM_Base_SetConfig+0x114>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d013      	beq.n	80029d4 <TIM_Base_SetConfig+0x40>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b2:	d00f      	beq.n	80029d4 <TIM_Base_SetConfig+0x40>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3d      	ldr	r2, [pc, #244]	; (8002aac <TIM_Base_SetConfig+0x118>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00b      	beq.n	80029d4 <TIM_Base_SetConfig+0x40>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <TIM_Base_SetConfig+0x11c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d007      	beq.n	80029d4 <TIM_Base_SetConfig+0x40>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3b      	ldr	r2, [pc, #236]	; (8002ab4 <TIM_Base_SetConfig+0x120>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d003      	beq.n	80029d4 <TIM_Base_SetConfig+0x40>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3a      	ldr	r2, [pc, #232]	; (8002ab8 <TIM_Base_SetConfig+0x124>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d108      	bne.n	80029e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a2f      	ldr	r2, [pc, #188]	; (8002aa8 <TIM_Base_SetConfig+0x114>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02b      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d027      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a2c      	ldr	r2, [pc, #176]	; (8002aac <TIM_Base_SetConfig+0x118>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d023      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a2b      	ldr	r2, [pc, #172]	; (8002ab0 <TIM_Base_SetConfig+0x11c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d01f      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a2a      	ldr	r2, [pc, #168]	; (8002ab4 <TIM_Base_SetConfig+0x120>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01b      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a29      	ldr	r2, [pc, #164]	; (8002ab8 <TIM_Base_SetConfig+0x124>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d017      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a28      	ldr	r2, [pc, #160]	; (8002abc <TIM_Base_SetConfig+0x128>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <TIM_Base_SetConfig+0x12c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00f      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <TIM_Base_SetConfig+0x130>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00b      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a25      	ldr	r2, [pc, #148]	; (8002ac8 <TIM_Base_SetConfig+0x134>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <TIM_Base_SetConfig+0x138>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d003      	beq.n	8002a46 <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <TIM_Base_SetConfig+0x13c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d108      	bne.n	8002a58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <TIM_Base_SetConfig+0x114>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d003      	beq.n	8002a8c <TIM_Base_SetConfig+0xf8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	; (8002ab8 <TIM_Base_SetConfig+0x124>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	615a      	str	r2, [r3, #20]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40010400 	.word	0x40010400
 8002abc:	40014000 	.word	0x40014000
 8002ac0:	40014400 	.word	0x40014400
 8002ac4:	40014800 	.word	0x40014800
 8002ac8:	40001800 	.word	0x40001800
 8002acc:	40001c00 	.word	0x40001c00
 8002ad0:	40002000 	.word	0x40002000

08002ad4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f023 0201 	bic.w	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4a28      	ldr	r2, [pc, #160]	; (8002ba0 <TIM_TI1_SetConfig+0xcc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01b      	beq.n	8002b3a <TIM_TI1_SetConfig+0x66>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d017      	beq.n	8002b3a <TIM_TI1_SetConfig+0x66>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <TIM_TI1_SetConfig+0xd0>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <TIM_TI1_SetConfig+0x66>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <TIM_TI1_SetConfig+0xd4>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00f      	beq.n	8002b3a <TIM_TI1_SetConfig+0x66>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a23      	ldr	r2, [pc, #140]	; (8002bac <TIM_TI1_SetConfig+0xd8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_TI1_SetConfig+0x66>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a22      	ldr	r2, [pc, #136]	; (8002bb0 <TIM_TI1_SetConfig+0xdc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_TI1_SetConfig+0x66>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <TIM_TI1_SetConfig+0xe0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_TI1_SetConfig+0x66>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <TIM_TI1_SetConfig+0xe4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <TIM_TI1_SetConfig+0x6a>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <TIM_TI1_SetConfig+0x6c>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e003      	b.n	8002b5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f023 030a 	bic.w	r3, r3, #10
 8002b78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f003 030a 	and.w	r3, r3, #10
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	621a      	str	r2, [r3, #32]
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40010000 	.word	0x40010000
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40000c00 	.word	0x40000c00
 8002bb0:	40010400 	.word	0x40010400
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40001800 	.word	0x40001800

08002bbc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f023 0210 	bic.w	r2, r3, #16
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bfa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	031b      	lsls	r3, r3, #12
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b087      	sub	sp, #28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002c86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	021b      	lsls	r3, r3, #8
 8002c8c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b087      	sub	sp, #28
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	031b      	lsls	r3, r3, #12
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002d00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	031b      	lsls	r3, r3, #12
 8002d06:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1a      	ldr	r2, [r3, #32]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
}
 8002d66:	bf00      	nop
 8002d68:	371c      	adds	r7, #28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e05a      	b.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd8:	d01d      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d018      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1b      	ldr	r2, [pc, #108]	; (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00e      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10c      	bne.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40010400 	.word	0x40010400
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40001800 	.word	0x40001800

08002e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e03f      	b.n	8002f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe f868 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	; 0x24
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f9cb 	bl	8003274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b08a      	sub	sp, #40	; 0x28
 8002f32:	af02      	add	r7, sp, #8
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d17c      	bne.n	8003048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_UART_Transmit+0x2c>
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e075      	b.n	800304a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_UART_Transmit+0x3e>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e06e      	b.n	800304a <HAL_UART_Transmit+0x11c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f82:	f7fe f959 	bl	8001238 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9c:	d108      	bne.n	8002fb0 <HAL_UART_Transmit+0x82>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d104      	bne.n	8002fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	e003      	b.n	8002fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fc0:	e02a      	b.n	8003018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f8e2 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e036      	b.n	800304a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e007      	b.n	800300a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1cf      	bne.n	8002fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f8b2 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e006      	b.n	800304a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b08a      	sub	sp, #40	; 0x28
 8003056:	af02      	add	r7, sp, #8
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	f040 808c 	bne.w	800318c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Receive+0x2e>
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e084      	b.n	800318e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_UART_Receive+0x40>
 800308e:	2302      	movs	r3, #2
 8003090:	e07d      	b.n	800318e <HAL_UART_Receive+0x13c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2222      	movs	r2, #34	; 0x22
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ae:	f7fe f8c3 	bl	8001238 <HAL_GetTick>
 80030b2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c8:	d108      	bne.n	80030dc <HAL_UART_Receive+0x8a>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d104      	bne.n	80030dc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	e003      	b.n	80030e4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030ec:	e043      	b.n	8003176 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2200      	movs	r2, #0
 80030f6:	2120      	movs	r1, #32
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f84c 	bl	8003196 <UART_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e042      	b.n	800318e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10c      	bne.n	8003128 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	b29b      	uxth	r3, r3
 8003116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311a:	b29a      	uxth	r2, r3
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	3302      	adds	r3, #2
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	e01f      	b.n	8003168 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003130:	d007      	beq.n	8003142 <HAL_UART_Receive+0xf0>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <HAL_UART_Receive+0xfe>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e008      	b.n	8003162 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800315c:	b2da      	uxtb	r2, r3
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3301      	adds	r3, #1
 8003166:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1b6      	bne.n	80030ee <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b090      	sub	sp, #64	; 0x40
 800319a:	af00      	add	r7, sp, #0
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	4613      	mov	r3, r2
 80031a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a6:	e050      	b.n	800324a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d04c      	beq.n	800324a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031b6:	f7fe f83f 	bl	8001238 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d241      	bcs.n	800324a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330c      	adds	r3, #12
 80031e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031e6:	637a      	str	r2, [r7, #52]	; 0x34
 80031e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ee:	e841 2300 	strex	r3, r2, [r1]
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e5      	bne.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3314      	adds	r3, #20
 8003200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	e853 3f00 	ldrex	r3, [r3]
 8003208:	613b      	str	r3, [r7, #16]
   return(result);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	63bb      	str	r3, [r7, #56]	; 0x38
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3314      	adds	r3, #20
 8003218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800321a:	623a      	str	r2, [r7, #32]
 800321c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	69f9      	ldr	r1, [r7, #28]
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	e841 2300 	strex	r3, r2, [r1]
 8003226:	61bb      	str	r3, [r7, #24]
   return(result);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1e5      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e00f      	b.n	800326a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	429a      	cmp	r2, r3
 8003266:	d09f      	beq.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3740      	adds	r7, #64	; 0x40
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003278:	b0c0      	sub	sp, #256	; 0x100
 800327a:	af00      	add	r7, sp, #0
 800327c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003290:	68d9      	ldr	r1, [r3, #12]
 8003292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	ea40 0301 	orr.w	r3, r0, r1
 800329c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800329e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032cc:	f021 010c 	bic.w	r1, r1, #12
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032da:	430b      	orrs	r3, r1
 80032dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	6999      	ldr	r1, [r3, #24]
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	ea40 0301 	orr.w	r3, r0, r1
 80032fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b8f      	ldr	r3, [pc, #572]	; (8003540 <UART_SetConfig+0x2cc>)
 8003304:	429a      	cmp	r2, r3
 8003306:	d005      	beq.n	8003314 <UART_SetConfig+0xa0>
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b8d      	ldr	r3, [pc, #564]	; (8003544 <UART_SetConfig+0x2d0>)
 8003310:	429a      	cmp	r2, r3
 8003312:	d104      	bne.n	800331e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003314:	f7fe fb9e 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 8003318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800331c:	e003      	b.n	8003326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800331e:	f7fe fb85 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8003322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003330:	f040 810c 	bne.w	800354c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003338:	2200      	movs	r2, #0
 800333a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800333e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003346:	4622      	mov	r2, r4
 8003348:	462b      	mov	r3, r5
 800334a:	1891      	adds	r1, r2, r2
 800334c:	65b9      	str	r1, [r7, #88]	; 0x58
 800334e:	415b      	adcs	r3, r3
 8003350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003356:	4621      	mov	r1, r4
 8003358:	eb12 0801 	adds.w	r8, r2, r1
 800335c:	4629      	mov	r1, r5
 800335e:	eb43 0901 	adc.w	r9, r3, r1
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800336e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003376:	4690      	mov	r8, r2
 8003378:	4699      	mov	r9, r3
 800337a:	4623      	mov	r3, r4
 800337c:	eb18 0303 	adds.w	r3, r8, r3
 8003380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003384:	462b      	mov	r3, r5
 8003386:	eb49 0303 	adc.w	r3, r9, r3
 800338a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800339a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800339e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033a2:	460b      	mov	r3, r1
 80033a4:	18db      	adds	r3, r3, r3
 80033a6:	653b      	str	r3, [r7, #80]	; 0x50
 80033a8:	4613      	mov	r3, r2
 80033aa:	eb42 0303 	adc.w	r3, r2, r3
 80033ae:	657b      	str	r3, [r7, #84]	; 0x54
 80033b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033b8:	f7fc ff82 	bl	80002c0 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <UART_SetConfig+0x2d4>)
 80033c2:	fba3 2302 	umull	r2, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	011c      	lsls	r4, r3, #4
 80033ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033dc:	4642      	mov	r2, r8
 80033de:	464b      	mov	r3, r9
 80033e0:	1891      	adds	r1, r2, r2
 80033e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80033e4:	415b      	adcs	r3, r3
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033ec:	4641      	mov	r1, r8
 80033ee:	eb12 0a01 	adds.w	sl, r2, r1
 80033f2:	4649      	mov	r1, r9
 80033f4:	eb43 0b01 	adc.w	fp, r3, r1
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800340c:	4692      	mov	sl, r2
 800340e:	469b      	mov	fp, r3
 8003410:	4643      	mov	r3, r8
 8003412:	eb1a 0303 	adds.w	r3, sl, r3
 8003416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800341a:	464b      	mov	r3, r9
 800341c:	eb4b 0303 	adc.w	r3, fp, r3
 8003420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003438:	460b      	mov	r3, r1
 800343a:	18db      	adds	r3, r3, r3
 800343c:	643b      	str	r3, [r7, #64]	; 0x40
 800343e:	4613      	mov	r3, r2
 8003440:	eb42 0303 	adc.w	r3, r2, r3
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
 8003446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800344a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800344e:	f7fc ff37 	bl	80002c0 <__aeabi_uldivmod>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4611      	mov	r1, r2
 8003458:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <UART_SetConfig+0x2d4>)
 800345a:	fba3 2301 	umull	r2, r3, r3, r1
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2264      	movs	r2, #100	; 0x64
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	1acb      	subs	r3, r1, r3
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800346e:	4b36      	ldr	r3, [pc, #216]	; (8003548 <UART_SetConfig+0x2d4>)
 8003470:	fba3 2302 	umull	r2, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800347c:	441c      	add	r4, r3
 800347e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003482:	2200      	movs	r2, #0
 8003484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800348c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	1891      	adds	r1, r2, r2
 8003496:	63b9      	str	r1, [r7, #56]	; 0x38
 8003498:	415b      	adcs	r3, r3
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800349c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034a0:	4641      	mov	r1, r8
 80034a2:	1851      	adds	r1, r2, r1
 80034a4:	6339      	str	r1, [r7, #48]	; 0x30
 80034a6:	4649      	mov	r1, r9
 80034a8:	414b      	adcs	r3, r1
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034b8:	4659      	mov	r1, fp
 80034ba:	00cb      	lsls	r3, r1, #3
 80034bc:	4651      	mov	r1, sl
 80034be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c2:	4651      	mov	r1, sl
 80034c4:	00ca      	lsls	r2, r1, #3
 80034c6:	4610      	mov	r0, r2
 80034c8:	4619      	mov	r1, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	4642      	mov	r2, r8
 80034ce:	189b      	adds	r3, r3, r2
 80034d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034d4:	464b      	mov	r3, r9
 80034d6:	460a      	mov	r2, r1
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034f4:	460b      	mov	r3, r1
 80034f6:	18db      	adds	r3, r3, r3
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fa:	4613      	mov	r3, r2
 80034fc:	eb42 0303 	adc.w	r3, r2, r3
 8003500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800350a:	f7fc fed9 	bl	80002c0 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <UART_SetConfig+0x2d4>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a08      	ldr	r2, [pc, #32]	; (8003548 <UART_SetConfig+0x2d4>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 0207 	and.w	r2, r3, #7
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4422      	add	r2, r4
 800353a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800353c:	e105      	b.n	800374a <UART_SetConfig+0x4d6>
 800353e:	bf00      	nop
 8003540:	40011000 	.word	0x40011000
 8003544:	40011400 	.word	0x40011400
 8003548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800354c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003550:	2200      	movs	r2, #0
 8003552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800355a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800355e:	4642      	mov	r2, r8
 8003560:	464b      	mov	r3, r9
 8003562:	1891      	adds	r1, r2, r2
 8003564:	6239      	str	r1, [r7, #32]
 8003566:	415b      	adcs	r3, r3
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800356e:	4641      	mov	r1, r8
 8003570:	1854      	adds	r4, r2, r1
 8003572:	4649      	mov	r1, r9
 8003574:	eb43 0501 	adc.w	r5, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	00eb      	lsls	r3, r5, #3
 8003582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003586:	00e2      	lsls	r2, r4, #3
 8003588:	4614      	mov	r4, r2
 800358a:	461d      	mov	r5, r3
 800358c:	4643      	mov	r3, r8
 800358e:	18e3      	adds	r3, r4, r3
 8003590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003594:	464b      	mov	r3, r9
 8003596:	eb45 0303 	adc.w	r3, r5, r3
 800359a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800359e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035ba:	4629      	mov	r1, r5
 80035bc:	008b      	lsls	r3, r1, #2
 80035be:	4621      	mov	r1, r4
 80035c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c4:	4621      	mov	r1, r4
 80035c6:	008a      	lsls	r2, r1, #2
 80035c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035cc:	f7fc fe78 	bl	80002c0 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4b60      	ldr	r3, [pc, #384]	; (8003758 <UART_SetConfig+0x4e4>)
 80035d6:	fba3 2302 	umull	r2, r3, r3, r2
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	011c      	lsls	r4, r3, #4
 80035de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e2:	2200      	movs	r2, #0
 80035e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035f0:	4642      	mov	r2, r8
 80035f2:	464b      	mov	r3, r9
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	61b9      	str	r1, [r7, #24]
 80035f8:	415b      	adcs	r3, r3
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003600:	4641      	mov	r1, r8
 8003602:	1851      	adds	r1, r2, r1
 8003604:	6139      	str	r1, [r7, #16]
 8003606:	4649      	mov	r1, r9
 8003608:	414b      	adcs	r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	00cb      	lsls	r3, r1, #3
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003622:	4651      	mov	r1, sl
 8003624:	00ca      	lsls	r2, r1, #3
 8003626:	4610      	mov	r0, r2
 8003628:	4619      	mov	r1, r3
 800362a:	4603      	mov	r3, r0
 800362c:	4642      	mov	r2, r8
 800362e:	189b      	adds	r3, r3, r2
 8003630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003634:	464b      	mov	r3, r9
 8003636:	460a      	mov	r2, r1
 8003638:	eb42 0303 	adc.w	r3, r2, r3
 800363c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	67bb      	str	r3, [r7, #120]	; 0x78
 800364a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003658:	4649      	mov	r1, r9
 800365a:	008b      	lsls	r3, r1, #2
 800365c:	4641      	mov	r1, r8
 800365e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003662:	4641      	mov	r1, r8
 8003664:	008a      	lsls	r2, r1, #2
 8003666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800366a:	f7fc fe29 	bl	80002c0 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <UART_SetConfig+0x4e4>)
 8003674:	fba3 1302 	umull	r1, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	2164      	movs	r1, #100	; 0x64
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	3332      	adds	r3, #50	; 0x32
 8003686:	4a34      	ldr	r2, [pc, #208]	; (8003758 <UART_SetConfig+0x4e4>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003692:	441c      	add	r4, r3
 8003694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003698:	2200      	movs	r2, #0
 800369a:	673b      	str	r3, [r7, #112]	; 0x70
 800369c:	677a      	str	r2, [r7, #116]	; 0x74
 800369e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036a2:	4642      	mov	r2, r8
 80036a4:	464b      	mov	r3, r9
 80036a6:	1891      	adds	r1, r2, r2
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	415b      	adcs	r3, r3
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b2:	4641      	mov	r1, r8
 80036b4:	1851      	adds	r1, r2, r1
 80036b6:	6039      	str	r1, [r7, #0]
 80036b8:	4649      	mov	r1, r9
 80036ba:	414b      	adcs	r3, r1
 80036bc:	607b      	str	r3, [r7, #4]
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036ca:	4659      	mov	r1, fp
 80036cc:	00cb      	lsls	r3, r1, #3
 80036ce:	4651      	mov	r1, sl
 80036d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d4:	4651      	mov	r1, sl
 80036d6:	00ca      	lsls	r2, r1, #3
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	4603      	mov	r3, r0
 80036de:	4642      	mov	r2, r8
 80036e0:	189b      	adds	r3, r3, r2
 80036e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e4:	464b      	mov	r3, r9
 80036e6:	460a      	mov	r2, r1
 80036e8:	eb42 0303 	adc.w	r3, r2, r3
 80036ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	663b      	str	r3, [r7, #96]	; 0x60
 80036f8:	667a      	str	r2, [r7, #100]	; 0x64
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	f04f 0300 	mov.w	r3, #0
 8003702:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003706:	4649      	mov	r1, r9
 8003708:	008b      	lsls	r3, r1, #2
 800370a:	4641      	mov	r1, r8
 800370c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003710:	4641      	mov	r1, r8
 8003712:	008a      	lsls	r2, r1, #2
 8003714:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003718:	f7fc fdd2 	bl	80002c0 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <UART_SetConfig+0x4e4>)
 8003722:	fba3 1302 	umull	r1, r3, r3, r2
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2164      	movs	r1, #100	; 0x64
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	3332      	adds	r3, #50	; 0x32
 8003734:	4a08      	ldr	r2, [pc, #32]	; (8003758 <UART_SetConfig+0x4e4>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4422      	add	r2, r4
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	bf00      	nop
 800374c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003756:	bf00      	nop
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <__errno>:
 800375c:	4b01      	ldr	r3, [pc, #4]	; (8003764 <__errno+0x8>)
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000000c 	.word	0x2000000c

08003768 <__libc_init_array>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	4d0d      	ldr	r5, [pc, #52]	; (80037a0 <__libc_init_array+0x38>)
 800376c:	4c0d      	ldr	r4, [pc, #52]	; (80037a4 <__libc_init_array+0x3c>)
 800376e:	1b64      	subs	r4, r4, r5
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	2600      	movs	r6, #0
 8003774:	42a6      	cmp	r6, r4
 8003776:	d109      	bne.n	800378c <__libc_init_array+0x24>
 8003778:	4d0b      	ldr	r5, [pc, #44]	; (80037a8 <__libc_init_array+0x40>)
 800377a:	4c0c      	ldr	r4, [pc, #48]	; (80037ac <__libc_init_array+0x44>)
 800377c:	f000 fc8e 	bl	800409c <_init>
 8003780:	1b64      	subs	r4, r4, r5
 8003782:	10a4      	asrs	r4, r4, #2
 8003784:	2600      	movs	r6, #0
 8003786:	42a6      	cmp	r6, r4
 8003788:	d105      	bne.n	8003796 <__libc_init_array+0x2e>
 800378a:	bd70      	pop	{r4, r5, r6, pc}
 800378c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003790:	4798      	blx	r3
 8003792:	3601      	adds	r6, #1
 8003794:	e7ee      	b.n	8003774 <__libc_init_array+0xc>
 8003796:	f855 3b04 	ldr.w	r3, [r5], #4
 800379a:	4798      	blx	r3
 800379c:	3601      	adds	r6, #1
 800379e:	e7f2      	b.n	8003786 <__libc_init_array+0x1e>
 80037a0:	08004148 	.word	0x08004148
 80037a4:	08004148 	.word	0x08004148
 80037a8:	08004148 	.word	0x08004148
 80037ac:	0800414c 	.word	0x0800414c

080037b0 <memset>:
 80037b0:	4402      	add	r2, r0
 80037b2:	4603      	mov	r3, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <memset+0xa>
 80037b8:	4770      	bx	lr
 80037ba:	f803 1b01 	strb.w	r1, [r3], #1
 80037be:	e7f9      	b.n	80037b4 <memset+0x4>

080037c0 <siprintf>:
 80037c0:	b40e      	push	{r1, r2, r3}
 80037c2:	b500      	push	{lr}
 80037c4:	b09c      	sub	sp, #112	; 0x70
 80037c6:	ab1d      	add	r3, sp, #116	; 0x74
 80037c8:	9002      	str	r0, [sp, #8]
 80037ca:	9006      	str	r0, [sp, #24]
 80037cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037d0:	4809      	ldr	r0, [pc, #36]	; (80037f8 <siprintf+0x38>)
 80037d2:	9107      	str	r1, [sp, #28]
 80037d4:	9104      	str	r1, [sp, #16]
 80037d6:	4909      	ldr	r1, [pc, #36]	; (80037fc <siprintf+0x3c>)
 80037d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80037dc:	9105      	str	r1, [sp, #20]
 80037de:	6800      	ldr	r0, [r0, #0]
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	a902      	add	r1, sp, #8
 80037e4:	f000 f868 	bl	80038b8 <_svfiprintf_r>
 80037e8:	9b02      	ldr	r3, [sp, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	b01c      	add	sp, #112	; 0x70
 80037f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037f4:	b003      	add	sp, #12
 80037f6:	4770      	bx	lr
 80037f8:	2000000c 	.word	0x2000000c
 80037fc:	ffff0208 	.word	0xffff0208

08003800 <__ssputs_r>:
 8003800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003804:	688e      	ldr	r6, [r1, #8]
 8003806:	429e      	cmp	r6, r3
 8003808:	4682      	mov	sl, r0
 800380a:	460c      	mov	r4, r1
 800380c:	4690      	mov	r8, r2
 800380e:	461f      	mov	r7, r3
 8003810:	d838      	bhi.n	8003884 <__ssputs_r+0x84>
 8003812:	898a      	ldrh	r2, [r1, #12]
 8003814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003818:	d032      	beq.n	8003880 <__ssputs_r+0x80>
 800381a:	6825      	ldr	r5, [r4, #0]
 800381c:	6909      	ldr	r1, [r1, #16]
 800381e:	eba5 0901 	sub.w	r9, r5, r1
 8003822:	6965      	ldr	r5, [r4, #20]
 8003824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800382c:	3301      	adds	r3, #1
 800382e:	444b      	add	r3, r9
 8003830:	106d      	asrs	r5, r5, #1
 8003832:	429d      	cmp	r5, r3
 8003834:	bf38      	it	cc
 8003836:	461d      	movcc	r5, r3
 8003838:	0553      	lsls	r3, r2, #21
 800383a:	d531      	bpl.n	80038a0 <__ssputs_r+0xa0>
 800383c:	4629      	mov	r1, r5
 800383e:	f000 fb63 	bl	8003f08 <_malloc_r>
 8003842:	4606      	mov	r6, r0
 8003844:	b950      	cbnz	r0, 800385c <__ssputs_r+0x5c>
 8003846:	230c      	movs	r3, #12
 8003848:	f8ca 3000 	str.w	r3, [sl]
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385c:	6921      	ldr	r1, [r4, #16]
 800385e:	464a      	mov	r2, r9
 8003860:	f000 fabe 	bl	8003de0 <memcpy>
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800386a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386e:	81a3      	strh	r3, [r4, #12]
 8003870:	6126      	str	r6, [r4, #16]
 8003872:	6165      	str	r5, [r4, #20]
 8003874:	444e      	add	r6, r9
 8003876:	eba5 0509 	sub.w	r5, r5, r9
 800387a:	6026      	str	r6, [r4, #0]
 800387c:	60a5      	str	r5, [r4, #8]
 800387e:	463e      	mov	r6, r7
 8003880:	42be      	cmp	r6, r7
 8003882:	d900      	bls.n	8003886 <__ssputs_r+0x86>
 8003884:	463e      	mov	r6, r7
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	4632      	mov	r2, r6
 800388a:	4641      	mov	r1, r8
 800388c:	f000 fab6 	bl	8003dfc <memmove>
 8003890:	68a3      	ldr	r3, [r4, #8]
 8003892:	1b9b      	subs	r3, r3, r6
 8003894:	60a3      	str	r3, [r4, #8]
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	4433      	add	r3, r6
 800389a:	6023      	str	r3, [r4, #0]
 800389c:	2000      	movs	r0, #0
 800389e:	e7db      	b.n	8003858 <__ssputs_r+0x58>
 80038a0:	462a      	mov	r2, r5
 80038a2:	f000 fba5 	bl	8003ff0 <_realloc_r>
 80038a6:	4606      	mov	r6, r0
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d1e1      	bne.n	8003870 <__ssputs_r+0x70>
 80038ac:	6921      	ldr	r1, [r4, #16]
 80038ae:	4650      	mov	r0, sl
 80038b0:	f000 fabe 	bl	8003e30 <_free_r>
 80038b4:	e7c7      	b.n	8003846 <__ssputs_r+0x46>
	...

080038b8 <_svfiprintf_r>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	4698      	mov	r8, r3
 80038be:	898b      	ldrh	r3, [r1, #12]
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	b09d      	sub	sp, #116	; 0x74
 80038c4:	4607      	mov	r7, r0
 80038c6:	460d      	mov	r5, r1
 80038c8:	4614      	mov	r4, r2
 80038ca:	d50e      	bpl.n	80038ea <_svfiprintf_r+0x32>
 80038cc:	690b      	ldr	r3, [r1, #16]
 80038ce:	b963      	cbnz	r3, 80038ea <_svfiprintf_r+0x32>
 80038d0:	2140      	movs	r1, #64	; 0x40
 80038d2:	f000 fb19 	bl	8003f08 <_malloc_r>
 80038d6:	6028      	str	r0, [r5, #0]
 80038d8:	6128      	str	r0, [r5, #16]
 80038da:	b920      	cbnz	r0, 80038e6 <_svfiprintf_r+0x2e>
 80038dc:	230c      	movs	r3, #12
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	e0d1      	b.n	8003a8a <_svfiprintf_r+0x1d2>
 80038e6:	2340      	movs	r3, #64	; 0x40
 80038e8:	616b      	str	r3, [r5, #20]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9309      	str	r3, [sp, #36]	; 0x24
 80038ee:	2320      	movs	r3, #32
 80038f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80038f8:	2330      	movs	r3, #48	; 0x30
 80038fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003aa4 <_svfiprintf_r+0x1ec>
 80038fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003902:	f04f 0901 	mov.w	r9, #1
 8003906:	4623      	mov	r3, r4
 8003908:	469a      	mov	sl, r3
 800390a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800390e:	b10a      	cbz	r2, 8003914 <_svfiprintf_r+0x5c>
 8003910:	2a25      	cmp	r2, #37	; 0x25
 8003912:	d1f9      	bne.n	8003908 <_svfiprintf_r+0x50>
 8003914:	ebba 0b04 	subs.w	fp, sl, r4
 8003918:	d00b      	beq.n	8003932 <_svfiprintf_r+0x7a>
 800391a:	465b      	mov	r3, fp
 800391c:	4622      	mov	r2, r4
 800391e:	4629      	mov	r1, r5
 8003920:	4638      	mov	r0, r7
 8003922:	f7ff ff6d 	bl	8003800 <__ssputs_r>
 8003926:	3001      	adds	r0, #1
 8003928:	f000 80aa 	beq.w	8003a80 <_svfiprintf_r+0x1c8>
 800392c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800392e:	445a      	add	r2, fp
 8003930:	9209      	str	r2, [sp, #36]	; 0x24
 8003932:	f89a 3000 	ldrb.w	r3, [sl]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a2 	beq.w	8003a80 <_svfiprintf_r+0x1c8>
 800393c:	2300      	movs	r3, #0
 800393e:	f04f 32ff 	mov.w	r2, #4294967295
 8003942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003946:	f10a 0a01 	add.w	sl, sl, #1
 800394a:	9304      	str	r3, [sp, #16]
 800394c:	9307      	str	r3, [sp, #28]
 800394e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003952:	931a      	str	r3, [sp, #104]	; 0x68
 8003954:	4654      	mov	r4, sl
 8003956:	2205      	movs	r2, #5
 8003958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800395c:	4851      	ldr	r0, [pc, #324]	; (8003aa4 <_svfiprintf_r+0x1ec>)
 800395e:	f7fc fc5f 	bl	8000220 <memchr>
 8003962:	9a04      	ldr	r2, [sp, #16]
 8003964:	b9d8      	cbnz	r0, 800399e <_svfiprintf_r+0xe6>
 8003966:	06d0      	lsls	r0, r2, #27
 8003968:	bf44      	itt	mi
 800396a:	2320      	movmi	r3, #32
 800396c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003970:	0711      	lsls	r1, r2, #28
 8003972:	bf44      	itt	mi
 8003974:	232b      	movmi	r3, #43	; 0x2b
 8003976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397a:	f89a 3000 	ldrb.w	r3, [sl]
 800397e:	2b2a      	cmp	r3, #42	; 0x2a
 8003980:	d015      	beq.n	80039ae <_svfiprintf_r+0xf6>
 8003982:	9a07      	ldr	r2, [sp, #28]
 8003984:	4654      	mov	r4, sl
 8003986:	2000      	movs	r0, #0
 8003988:	f04f 0c0a 	mov.w	ip, #10
 800398c:	4621      	mov	r1, r4
 800398e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003992:	3b30      	subs	r3, #48	; 0x30
 8003994:	2b09      	cmp	r3, #9
 8003996:	d94e      	bls.n	8003a36 <_svfiprintf_r+0x17e>
 8003998:	b1b0      	cbz	r0, 80039c8 <_svfiprintf_r+0x110>
 800399a:	9207      	str	r2, [sp, #28]
 800399c:	e014      	b.n	80039c8 <_svfiprintf_r+0x110>
 800399e:	eba0 0308 	sub.w	r3, r0, r8
 80039a2:	fa09 f303 	lsl.w	r3, r9, r3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	46a2      	mov	sl, r4
 80039ac:	e7d2      	b.n	8003954 <_svfiprintf_r+0x9c>
 80039ae:	9b03      	ldr	r3, [sp, #12]
 80039b0:	1d19      	adds	r1, r3, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	9103      	str	r1, [sp, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bfbb      	ittet	lt
 80039ba:	425b      	neglt	r3, r3
 80039bc:	f042 0202 	orrlt.w	r2, r2, #2
 80039c0:	9307      	strge	r3, [sp, #28]
 80039c2:	9307      	strlt	r3, [sp, #28]
 80039c4:	bfb8      	it	lt
 80039c6:	9204      	strlt	r2, [sp, #16]
 80039c8:	7823      	ldrb	r3, [r4, #0]
 80039ca:	2b2e      	cmp	r3, #46	; 0x2e
 80039cc:	d10c      	bne.n	80039e8 <_svfiprintf_r+0x130>
 80039ce:	7863      	ldrb	r3, [r4, #1]
 80039d0:	2b2a      	cmp	r3, #42	; 0x2a
 80039d2:	d135      	bne.n	8003a40 <_svfiprintf_r+0x188>
 80039d4:	9b03      	ldr	r3, [sp, #12]
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	9203      	str	r2, [sp, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bfb8      	it	lt
 80039e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80039e4:	3402      	adds	r4, #2
 80039e6:	9305      	str	r3, [sp, #20]
 80039e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ab4 <_svfiprintf_r+0x1fc>
 80039ec:	7821      	ldrb	r1, [r4, #0]
 80039ee:	2203      	movs	r2, #3
 80039f0:	4650      	mov	r0, sl
 80039f2:	f7fc fc15 	bl	8000220 <memchr>
 80039f6:	b140      	cbz	r0, 8003a0a <_svfiprintf_r+0x152>
 80039f8:	2340      	movs	r3, #64	; 0x40
 80039fa:	eba0 000a 	sub.w	r0, r0, sl
 80039fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003a02:	9b04      	ldr	r3, [sp, #16]
 8003a04:	4303      	orrs	r3, r0
 8003a06:	3401      	adds	r4, #1
 8003a08:	9304      	str	r3, [sp, #16]
 8003a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0e:	4826      	ldr	r0, [pc, #152]	; (8003aa8 <_svfiprintf_r+0x1f0>)
 8003a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a14:	2206      	movs	r2, #6
 8003a16:	f7fc fc03 	bl	8000220 <memchr>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d038      	beq.n	8003a90 <_svfiprintf_r+0x1d8>
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <_svfiprintf_r+0x1f4>)
 8003a20:	bb1b      	cbnz	r3, 8003a6a <_svfiprintf_r+0x1b2>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	3307      	adds	r3, #7
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	9303      	str	r3, [sp, #12]
 8003a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a30:	4433      	add	r3, r6
 8003a32:	9309      	str	r3, [sp, #36]	; 0x24
 8003a34:	e767      	b.n	8003906 <_svfiprintf_r+0x4e>
 8003a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	e7a5      	b.n	800398c <_svfiprintf_r+0xd4>
 8003a40:	2300      	movs	r3, #0
 8003a42:	3401      	adds	r4, #1
 8003a44:	9305      	str	r3, [sp, #20]
 8003a46:	4619      	mov	r1, r3
 8003a48:	f04f 0c0a 	mov.w	ip, #10
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a52:	3a30      	subs	r2, #48	; 0x30
 8003a54:	2a09      	cmp	r2, #9
 8003a56:	d903      	bls.n	8003a60 <_svfiprintf_r+0x1a8>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0c5      	beq.n	80039e8 <_svfiprintf_r+0x130>
 8003a5c:	9105      	str	r1, [sp, #20]
 8003a5e:	e7c3      	b.n	80039e8 <_svfiprintf_r+0x130>
 8003a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a64:	4604      	mov	r4, r0
 8003a66:	2301      	movs	r3, #1
 8003a68:	e7f0      	b.n	8003a4c <_svfiprintf_r+0x194>
 8003a6a:	ab03      	add	r3, sp, #12
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	462a      	mov	r2, r5
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <_svfiprintf_r+0x1f8>)
 8003a72:	a904      	add	r1, sp, #16
 8003a74:	4638      	mov	r0, r7
 8003a76:	f3af 8000 	nop.w
 8003a7a:	1c42      	adds	r2, r0, #1
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	d1d6      	bne.n	8003a2e <_svfiprintf_r+0x176>
 8003a80:	89ab      	ldrh	r3, [r5, #12]
 8003a82:	065b      	lsls	r3, r3, #25
 8003a84:	f53f af2c 	bmi.w	80038e0 <_svfiprintf_r+0x28>
 8003a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a8a:	b01d      	add	sp, #116	; 0x74
 8003a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a90:	ab03      	add	r3, sp, #12
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	462a      	mov	r2, r5
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <_svfiprintf_r+0x1f8>)
 8003a98:	a904      	add	r1, sp, #16
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f000 f87a 	bl	8003b94 <_printf_i>
 8003aa0:	e7eb      	b.n	8003a7a <_svfiprintf_r+0x1c2>
 8003aa2:	bf00      	nop
 8003aa4:	0800410c 	.word	0x0800410c
 8003aa8:	08004116 	.word	0x08004116
 8003aac:	00000000 	.word	0x00000000
 8003ab0:	08003801 	.word	0x08003801
 8003ab4:	08004112 	.word	0x08004112

08003ab8 <_printf_common>:
 8003ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003abc:	4616      	mov	r6, r2
 8003abe:	4699      	mov	r9, r3
 8003ac0:	688a      	ldr	r2, [r1, #8]
 8003ac2:	690b      	ldr	r3, [r1, #16]
 8003ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bfb8      	it	lt
 8003acc:	4613      	movlt	r3, r2
 8003ace:	6033      	str	r3, [r6, #0]
 8003ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	b10a      	cbz	r2, 8003ade <_printf_common+0x26>
 8003ada:	3301      	adds	r3, #1
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	0699      	lsls	r1, r3, #26
 8003ae2:	bf42      	ittt	mi
 8003ae4:	6833      	ldrmi	r3, [r6, #0]
 8003ae6:	3302      	addmi	r3, #2
 8003ae8:	6033      	strmi	r3, [r6, #0]
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	f015 0506 	ands.w	r5, r5, #6
 8003af0:	d106      	bne.n	8003b00 <_printf_common+0x48>
 8003af2:	f104 0a19 	add.w	sl, r4, #25
 8003af6:	68e3      	ldr	r3, [r4, #12]
 8003af8:	6832      	ldr	r2, [r6, #0]
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	42ab      	cmp	r3, r5
 8003afe:	dc26      	bgt.n	8003b4e <_printf_common+0x96>
 8003b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b04:	1e13      	subs	r3, r2, #0
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	bf18      	it	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	0692      	lsls	r2, r2, #26
 8003b0e:	d42b      	bmi.n	8003b68 <_printf_common+0xb0>
 8003b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b14:	4649      	mov	r1, r9
 8003b16:	4638      	mov	r0, r7
 8003b18:	47c0      	blx	r8
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d01e      	beq.n	8003b5c <_printf_common+0xa4>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	68e5      	ldr	r5, [r4, #12]
 8003b22:	6832      	ldr	r2, [r6, #0]
 8003b24:	f003 0306 	and.w	r3, r3, #6
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	bf08      	it	eq
 8003b2c:	1aad      	subeq	r5, r5, r2
 8003b2e:	68a3      	ldr	r3, [r4, #8]
 8003b30:	6922      	ldr	r2, [r4, #16]
 8003b32:	bf0c      	ite	eq
 8003b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b38:	2500      	movne	r5, #0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfc4      	itt	gt
 8003b3e:	1a9b      	subgt	r3, r3, r2
 8003b40:	18ed      	addgt	r5, r5, r3
 8003b42:	2600      	movs	r6, #0
 8003b44:	341a      	adds	r4, #26
 8003b46:	42b5      	cmp	r5, r6
 8003b48:	d11a      	bne.n	8003b80 <_printf_common+0xc8>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e008      	b.n	8003b60 <_printf_common+0xa8>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4652      	mov	r2, sl
 8003b52:	4649      	mov	r1, r9
 8003b54:	4638      	mov	r0, r7
 8003b56:	47c0      	blx	r8
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d103      	bne.n	8003b64 <_printf_common+0xac>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	3501      	adds	r5, #1
 8003b66:	e7c6      	b.n	8003af6 <_printf_common+0x3e>
 8003b68:	18e1      	adds	r1, r4, r3
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	2030      	movs	r0, #48	; 0x30
 8003b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b72:	4422      	add	r2, r4
 8003b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	e7c7      	b.n	8003b10 <_printf_common+0x58>
 8003b80:	2301      	movs	r3, #1
 8003b82:	4622      	mov	r2, r4
 8003b84:	4649      	mov	r1, r9
 8003b86:	4638      	mov	r0, r7
 8003b88:	47c0      	blx	r8
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d0e6      	beq.n	8003b5c <_printf_common+0xa4>
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7d9      	b.n	8003b46 <_printf_common+0x8e>
	...

08003b94 <_printf_i>:
 8003b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	7e0f      	ldrb	r7, [r1, #24]
 8003b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b9c:	2f78      	cmp	r7, #120	; 0x78
 8003b9e:	4691      	mov	r9, r2
 8003ba0:	4680      	mov	r8, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003baa:	d807      	bhi.n	8003bbc <_printf_i+0x28>
 8003bac:	2f62      	cmp	r7, #98	; 0x62
 8003bae:	d80a      	bhi.n	8003bc6 <_printf_i+0x32>
 8003bb0:	2f00      	cmp	r7, #0
 8003bb2:	f000 80d8 	beq.w	8003d66 <_printf_i+0x1d2>
 8003bb6:	2f58      	cmp	r7, #88	; 0x58
 8003bb8:	f000 80a3 	beq.w	8003d02 <_printf_i+0x16e>
 8003bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bc4:	e03a      	b.n	8003c3c <_printf_i+0xa8>
 8003bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bca:	2b15      	cmp	r3, #21
 8003bcc:	d8f6      	bhi.n	8003bbc <_printf_i+0x28>
 8003bce:	a101      	add	r1, pc, #4	; (adr r1, 8003bd4 <_printf_i+0x40>)
 8003bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c41 	.word	0x08003c41
 8003bdc:	08003bbd 	.word	0x08003bbd
 8003be0:	08003bbd 	.word	0x08003bbd
 8003be4:	08003bbd 	.word	0x08003bbd
 8003be8:	08003bbd 	.word	0x08003bbd
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003bbd 	.word	0x08003bbd
 8003bf4:	08003bbd 	.word	0x08003bbd
 8003bf8:	08003bbd 	.word	0x08003bbd
 8003bfc:	08003bbd 	.word	0x08003bbd
 8003c00:	08003d4d 	.word	0x08003d4d
 8003c04:	08003c71 	.word	0x08003c71
 8003c08:	08003d2f 	.word	0x08003d2f
 8003c0c:	08003bbd 	.word	0x08003bbd
 8003c10:	08003bbd 	.word	0x08003bbd
 8003c14:	08003d6f 	.word	0x08003d6f
 8003c18:	08003bbd 	.word	0x08003bbd
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003bbd 	.word	0x08003bbd
 8003c24:	08003bbd 	.word	0x08003bbd
 8003c28:	08003d37 	.word	0x08003d37
 8003c2c:	682b      	ldr	r3, [r5, #0]
 8003c2e:	1d1a      	adds	r2, r3, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	602a      	str	r2, [r5, #0]
 8003c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0a3      	b.n	8003d88 <_printf_i+0x1f4>
 8003c40:	6820      	ldr	r0, [r4, #0]
 8003c42:	6829      	ldr	r1, [r5, #0]
 8003c44:	0606      	lsls	r6, r0, #24
 8003c46:	f101 0304 	add.w	r3, r1, #4
 8003c4a:	d50a      	bpl.n	8003c62 <_printf_i+0xce>
 8003c4c:	680e      	ldr	r6, [r1, #0]
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	2e00      	cmp	r6, #0
 8003c52:	da03      	bge.n	8003c5c <_printf_i+0xc8>
 8003c54:	232d      	movs	r3, #45	; 0x2d
 8003c56:	4276      	negs	r6, r6
 8003c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5c:	485e      	ldr	r0, [pc, #376]	; (8003dd8 <_printf_i+0x244>)
 8003c5e:	230a      	movs	r3, #10
 8003c60:	e019      	b.n	8003c96 <_printf_i+0x102>
 8003c62:	680e      	ldr	r6, [r1, #0]
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c6a:	bf18      	it	ne
 8003c6c:	b236      	sxthne	r6, r6
 8003c6e:	e7ef      	b.n	8003c50 <_printf_i+0xbc>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	1d19      	adds	r1, r3, #4
 8003c76:	6029      	str	r1, [r5, #0]
 8003c78:	0601      	lsls	r1, r0, #24
 8003c7a:	d501      	bpl.n	8003c80 <_printf_i+0xec>
 8003c7c:	681e      	ldr	r6, [r3, #0]
 8003c7e:	e002      	b.n	8003c86 <_printf_i+0xf2>
 8003c80:	0646      	lsls	r6, r0, #25
 8003c82:	d5fb      	bpl.n	8003c7c <_printf_i+0xe8>
 8003c84:	881e      	ldrh	r6, [r3, #0]
 8003c86:	4854      	ldr	r0, [pc, #336]	; (8003dd8 <_printf_i+0x244>)
 8003c88:	2f6f      	cmp	r7, #111	; 0x6f
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2308      	moveq	r3, #8
 8003c8e:	230a      	movne	r3, #10
 8003c90:	2100      	movs	r1, #0
 8003c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c96:	6865      	ldr	r5, [r4, #4]
 8003c98:	60a5      	str	r5, [r4, #8]
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	bfa2      	ittt	ge
 8003c9e:	6821      	ldrge	r1, [r4, #0]
 8003ca0:	f021 0104 	bicge.w	r1, r1, #4
 8003ca4:	6021      	strge	r1, [r4, #0]
 8003ca6:	b90e      	cbnz	r6, 8003cac <_printf_i+0x118>
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	d04d      	beq.n	8003d48 <_printf_i+0x1b4>
 8003cac:	4615      	mov	r5, r2
 8003cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8003cb6:	5dc7      	ldrb	r7, [r0, r7]
 8003cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cbc:	4637      	mov	r7, r6
 8003cbe:	42bb      	cmp	r3, r7
 8003cc0:	460e      	mov	r6, r1
 8003cc2:	d9f4      	bls.n	8003cae <_printf_i+0x11a>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d10b      	bne.n	8003ce0 <_printf_i+0x14c>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	07de      	lsls	r6, r3, #31
 8003ccc:	d508      	bpl.n	8003ce0 <_printf_i+0x14c>
 8003cce:	6923      	ldr	r3, [r4, #16]
 8003cd0:	6861      	ldr	r1, [r4, #4]
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	bfde      	ittt	le
 8003cd6:	2330      	movle	r3, #48	; 0x30
 8003cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ce0:	1b52      	subs	r2, r2, r5
 8003ce2:	6122      	str	r2, [r4, #16]
 8003ce4:	f8cd a000 	str.w	sl, [sp]
 8003ce8:	464b      	mov	r3, r9
 8003cea:	aa03      	add	r2, sp, #12
 8003cec:	4621      	mov	r1, r4
 8003cee:	4640      	mov	r0, r8
 8003cf0:	f7ff fee2 	bl	8003ab8 <_printf_common>
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d14c      	bne.n	8003d92 <_printf_i+0x1fe>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	b004      	add	sp, #16
 8003cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d02:	4835      	ldr	r0, [pc, #212]	; (8003dd8 <_printf_i+0x244>)
 8003d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d08:	6829      	ldr	r1, [r5, #0]
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d10:	6029      	str	r1, [r5, #0]
 8003d12:	061d      	lsls	r5, r3, #24
 8003d14:	d514      	bpl.n	8003d40 <_printf_i+0x1ac>
 8003d16:	07df      	lsls	r7, r3, #31
 8003d18:	bf44      	itt	mi
 8003d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d1e:	6023      	strmi	r3, [r4, #0]
 8003d20:	b91e      	cbnz	r6, 8003d2a <_printf_i+0x196>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	f023 0320 	bic.w	r3, r3, #32
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	e7b0      	b.n	8003c90 <_printf_i+0xfc>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	f043 0320 	orr.w	r3, r3, #32
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	2378      	movs	r3, #120	; 0x78
 8003d38:	4828      	ldr	r0, [pc, #160]	; (8003ddc <_printf_i+0x248>)
 8003d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d3e:	e7e3      	b.n	8003d08 <_printf_i+0x174>
 8003d40:	0659      	lsls	r1, r3, #25
 8003d42:	bf48      	it	mi
 8003d44:	b2b6      	uxthmi	r6, r6
 8003d46:	e7e6      	b.n	8003d16 <_printf_i+0x182>
 8003d48:	4615      	mov	r5, r2
 8003d4a:	e7bb      	b.n	8003cc4 <_printf_i+0x130>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	6826      	ldr	r6, [r4, #0]
 8003d50:	6961      	ldr	r1, [r4, #20]
 8003d52:	1d18      	adds	r0, r3, #4
 8003d54:	6028      	str	r0, [r5, #0]
 8003d56:	0635      	lsls	r5, r6, #24
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	d501      	bpl.n	8003d60 <_printf_i+0x1cc>
 8003d5c:	6019      	str	r1, [r3, #0]
 8003d5e:	e002      	b.n	8003d66 <_printf_i+0x1d2>
 8003d60:	0670      	lsls	r0, r6, #25
 8003d62:	d5fb      	bpl.n	8003d5c <_printf_i+0x1c8>
 8003d64:	8019      	strh	r1, [r3, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	6123      	str	r3, [r4, #16]
 8003d6a:	4615      	mov	r5, r2
 8003d6c:	e7ba      	b.n	8003ce4 <_printf_i+0x150>
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	1d1a      	adds	r2, r3, #4
 8003d72:	602a      	str	r2, [r5, #0]
 8003d74:	681d      	ldr	r5, [r3, #0]
 8003d76:	6862      	ldr	r2, [r4, #4]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f7fc fa50 	bl	8000220 <memchr>
 8003d80:	b108      	cbz	r0, 8003d86 <_printf_i+0x1f2>
 8003d82:	1b40      	subs	r0, r0, r5
 8003d84:	6060      	str	r0, [r4, #4]
 8003d86:	6863      	ldr	r3, [r4, #4]
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d90:	e7a8      	b.n	8003ce4 <_printf_i+0x150>
 8003d92:	6923      	ldr	r3, [r4, #16]
 8003d94:	462a      	mov	r2, r5
 8003d96:	4649      	mov	r1, r9
 8003d98:	4640      	mov	r0, r8
 8003d9a:	47d0      	blx	sl
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d0ab      	beq.n	8003cf8 <_printf_i+0x164>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	079b      	lsls	r3, r3, #30
 8003da4:	d413      	bmi.n	8003dce <_printf_i+0x23a>
 8003da6:	68e0      	ldr	r0, [r4, #12]
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	4298      	cmp	r0, r3
 8003dac:	bfb8      	it	lt
 8003dae:	4618      	movlt	r0, r3
 8003db0:	e7a4      	b.n	8003cfc <_printf_i+0x168>
 8003db2:	2301      	movs	r3, #1
 8003db4:	4632      	mov	r2, r6
 8003db6:	4649      	mov	r1, r9
 8003db8:	4640      	mov	r0, r8
 8003dba:	47d0      	blx	sl
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d09b      	beq.n	8003cf8 <_printf_i+0x164>
 8003dc0:	3501      	adds	r5, #1
 8003dc2:	68e3      	ldr	r3, [r4, #12]
 8003dc4:	9903      	ldr	r1, [sp, #12]
 8003dc6:	1a5b      	subs	r3, r3, r1
 8003dc8:	42ab      	cmp	r3, r5
 8003dca:	dcf2      	bgt.n	8003db2 <_printf_i+0x21e>
 8003dcc:	e7eb      	b.n	8003da6 <_printf_i+0x212>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	f104 0619 	add.w	r6, r4, #25
 8003dd4:	e7f5      	b.n	8003dc2 <_printf_i+0x22e>
 8003dd6:	bf00      	nop
 8003dd8:	0800411d 	.word	0x0800411d
 8003ddc:	0800412e 	.word	0x0800412e

08003de0 <memcpy>:
 8003de0:	440a      	add	r2, r1
 8003de2:	4291      	cmp	r1, r2
 8003de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003de8:	d100      	bne.n	8003dec <memcpy+0xc>
 8003dea:	4770      	bx	lr
 8003dec:	b510      	push	{r4, lr}
 8003dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003df6:	4291      	cmp	r1, r2
 8003df8:	d1f9      	bne.n	8003dee <memcpy+0xe>
 8003dfa:	bd10      	pop	{r4, pc}

08003dfc <memmove>:
 8003dfc:	4288      	cmp	r0, r1
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	eb01 0402 	add.w	r4, r1, r2
 8003e04:	d902      	bls.n	8003e0c <memmove+0x10>
 8003e06:	4284      	cmp	r4, r0
 8003e08:	4623      	mov	r3, r4
 8003e0a:	d807      	bhi.n	8003e1c <memmove+0x20>
 8003e0c:	1e43      	subs	r3, r0, #1
 8003e0e:	42a1      	cmp	r1, r4
 8003e10:	d008      	beq.n	8003e24 <memmove+0x28>
 8003e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e1a:	e7f8      	b.n	8003e0e <memmove+0x12>
 8003e1c:	4402      	add	r2, r0
 8003e1e:	4601      	mov	r1, r0
 8003e20:	428a      	cmp	r2, r1
 8003e22:	d100      	bne.n	8003e26 <memmove+0x2a>
 8003e24:	bd10      	pop	{r4, pc}
 8003e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e2e:	e7f7      	b.n	8003e20 <memmove+0x24>

08003e30 <_free_r>:
 8003e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e32:	2900      	cmp	r1, #0
 8003e34:	d044      	beq.n	8003ec0 <_free_r+0x90>
 8003e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e3a:	9001      	str	r0, [sp, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e42:	bfb8      	it	lt
 8003e44:	18e4      	addlt	r4, r4, r3
 8003e46:	f000 f913 	bl	8004070 <__malloc_lock>
 8003e4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ec4 <_free_r+0x94>)
 8003e4c:	9801      	ldr	r0, [sp, #4]
 8003e4e:	6813      	ldr	r3, [r2, #0]
 8003e50:	b933      	cbnz	r3, 8003e60 <_free_r+0x30>
 8003e52:	6063      	str	r3, [r4, #4]
 8003e54:	6014      	str	r4, [r2, #0]
 8003e56:	b003      	add	sp, #12
 8003e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e5c:	f000 b90e 	b.w	800407c <__malloc_unlock>
 8003e60:	42a3      	cmp	r3, r4
 8003e62:	d908      	bls.n	8003e76 <_free_r+0x46>
 8003e64:	6825      	ldr	r5, [r4, #0]
 8003e66:	1961      	adds	r1, r4, r5
 8003e68:	428b      	cmp	r3, r1
 8003e6a:	bf01      	itttt	eq
 8003e6c:	6819      	ldreq	r1, [r3, #0]
 8003e6e:	685b      	ldreq	r3, [r3, #4]
 8003e70:	1949      	addeq	r1, r1, r5
 8003e72:	6021      	streq	r1, [r4, #0]
 8003e74:	e7ed      	b.n	8003e52 <_free_r+0x22>
 8003e76:	461a      	mov	r2, r3
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	b10b      	cbz	r3, 8003e80 <_free_r+0x50>
 8003e7c:	42a3      	cmp	r3, r4
 8003e7e:	d9fa      	bls.n	8003e76 <_free_r+0x46>
 8003e80:	6811      	ldr	r1, [r2, #0]
 8003e82:	1855      	adds	r5, r2, r1
 8003e84:	42a5      	cmp	r5, r4
 8003e86:	d10b      	bne.n	8003ea0 <_free_r+0x70>
 8003e88:	6824      	ldr	r4, [r4, #0]
 8003e8a:	4421      	add	r1, r4
 8003e8c:	1854      	adds	r4, r2, r1
 8003e8e:	42a3      	cmp	r3, r4
 8003e90:	6011      	str	r1, [r2, #0]
 8003e92:	d1e0      	bne.n	8003e56 <_free_r+0x26>
 8003e94:	681c      	ldr	r4, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	6053      	str	r3, [r2, #4]
 8003e9a:	4421      	add	r1, r4
 8003e9c:	6011      	str	r1, [r2, #0]
 8003e9e:	e7da      	b.n	8003e56 <_free_r+0x26>
 8003ea0:	d902      	bls.n	8003ea8 <_free_r+0x78>
 8003ea2:	230c      	movs	r3, #12
 8003ea4:	6003      	str	r3, [r0, #0]
 8003ea6:	e7d6      	b.n	8003e56 <_free_r+0x26>
 8003ea8:	6825      	ldr	r5, [r4, #0]
 8003eaa:	1961      	adds	r1, r4, r5
 8003eac:	428b      	cmp	r3, r1
 8003eae:	bf04      	itt	eq
 8003eb0:	6819      	ldreq	r1, [r3, #0]
 8003eb2:	685b      	ldreq	r3, [r3, #4]
 8003eb4:	6063      	str	r3, [r4, #4]
 8003eb6:	bf04      	itt	eq
 8003eb8:	1949      	addeq	r1, r1, r5
 8003eba:	6021      	streq	r1, [r4, #0]
 8003ebc:	6054      	str	r4, [r2, #4]
 8003ebe:	e7ca      	b.n	8003e56 <_free_r+0x26>
 8003ec0:	b003      	add	sp, #12
 8003ec2:	bd30      	pop	{r4, r5, pc}
 8003ec4:	20000170 	.word	0x20000170

08003ec8 <sbrk_aligned>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	4e0e      	ldr	r6, [pc, #56]	; (8003f04 <sbrk_aligned+0x3c>)
 8003ecc:	460c      	mov	r4, r1
 8003ece:	6831      	ldr	r1, [r6, #0]
 8003ed0:	4605      	mov	r5, r0
 8003ed2:	b911      	cbnz	r1, 8003eda <sbrk_aligned+0x12>
 8003ed4:	f000 f8bc 	bl	8004050 <_sbrk_r>
 8003ed8:	6030      	str	r0, [r6, #0]
 8003eda:	4621      	mov	r1, r4
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f8b7 	bl	8004050 <_sbrk_r>
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	d00a      	beq.n	8003efc <sbrk_aligned+0x34>
 8003ee6:	1cc4      	adds	r4, r0, #3
 8003ee8:	f024 0403 	bic.w	r4, r4, #3
 8003eec:	42a0      	cmp	r0, r4
 8003eee:	d007      	beq.n	8003f00 <sbrk_aligned+0x38>
 8003ef0:	1a21      	subs	r1, r4, r0
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 f8ac 	bl	8004050 <_sbrk_r>
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d101      	bne.n	8003f00 <sbrk_aligned+0x38>
 8003efc:	f04f 34ff 	mov.w	r4, #4294967295
 8003f00:	4620      	mov	r0, r4
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	20000174 	.word	0x20000174

08003f08 <_malloc_r>:
 8003f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0c:	1ccd      	adds	r5, r1, #3
 8003f0e:	f025 0503 	bic.w	r5, r5, #3
 8003f12:	3508      	adds	r5, #8
 8003f14:	2d0c      	cmp	r5, #12
 8003f16:	bf38      	it	cc
 8003f18:	250c      	movcc	r5, #12
 8003f1a:	2d00      	cmp	r5, #0
 8003f1c:	4607      	mov	r7, r0
 8003f1e:	db01      	blt.n	8003f24 <_malloc_r+0x1c>
 8003f20:	42a9      	cmp	r1, r5
 8003f22:	d905      	bls.n	8003f30 <_malloc_r+0x28>
 8003f24:	230c      	movs	r3, #12
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	2600      	movs	r6, #0
 8003f2a:	4630      	mov	r0, r6
 8003f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f30:	4e2e      	ldr	r6, [pc, #184]	; (8003fec <_malloc_r+0xe4>)
 8003f32:	f000 f89d 	bl	8004070 <__malloc_lock>
 8003f36:	6833      	ldr	r3, [r6, #0]
 8003f38:	461c      	mov	r4, r3
 8003f3a:	bb34      	cbnz	r4, 8003f8a <_malloc_r+0x82>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f7ff ffc2 	bl	8003ec8 <sbrk_aligned>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	4604      	mov	r4, r0
 8003f48:	d14d      	bne.n	8003fe6 <_malloc_r+0xde>
 8003f4a:	6834      	ldr	r4, [r6, #0]
 8003f4c:	4626      	mov	r6, r4
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	d140      	bne.n	8003fd4 <_malloc_r+0xcc>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	4631      	mov	r1, r6
 8003f56:	4638      	mov	r0, r7
 8003f58:	eb04 0803 	add.w	r8, r4, r3
 8003f5c:	f000 f878 	bl	8004050 <_sbrk_r>
 8003f60:	4580      	cmp	r8, r0
 8003f62:	d13a      	bne.n	8003fda <_malloc_r+0xd2>
 8003f64:	6821      	ldr	r1, [r4, #0]
 8003f66:	3503      	adds	r5, #3
 8003f68:	1a6d      	subs	r5, r5, r1
 8003f6a:	f025 0503 	bic.w	r5, r5, #3
 8003f6e:	3508      	adds	r5, #8
 8003f70:	2d0c      	cmp	r5, #12
 8003f72:	bf38      	it	cc
 8003f74:	250c      	movcc	r5, #12
 8003f76:	4629      	mov	r1, r5
 8003f78:	4638      	mov	r0, r7
 8003f7a:	f7ff ffa5 	bl	8003ec8 <sbrk_aligned>
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d02b      	beq.n	8003fda <_malloc_r+0xd2>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	442b      	add	r3, r5
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	e00e      	b.n	8003fa8 <_malloc_r+0xa0>
 8003f8a:	6822      	ldr	r2, [r4, #0]
 8003f8c:	1b52      	subs	r2, r2, r5
 8003f8e:	d41e      	bmi.n	8003fce <_malloc_r+0xc6>
 8003f90:	2a0b      	cmp	r2, #11
 8003f92:	d916      	bls.n	8003fc2 <_malloc_r+0xba>
 8003f94:	1961      	adds	r1, r4, r5
 8003f96:	42a3      	cmp	r3, r4
 8003f98:	6025      	str	r5, [r4, #0]
 8003f9a:	bf18      	it	ne
 8003f9c:	6059      	strne	r1, [r3, #4]
 8003f9e:	6863      	ldr	r3, [r4, #4]
 8003fa0:	bf08      	it	eq
 8003fa2:	6031      	streq	r1, [r6, #0]
 8003fa4:	5162      	str	r2, [r4, r5]
 8003fa6:	604b      	str	r3, [r1, #4]
 8003fa8:	4638      	mov	r0, r7
 8003faa:	f104 060b 	add.w	r6, r4, #11
 8003fae:	f000 f865 	bl	800407c <__malloc_unlock>
 8003fb2:	f026 0607 	bic.w	r6, r6, #7
 8003fb6:	1d23      	adds	r3, r4, #4
 8003fb8:	1af2      	subs	r2, r6, r3
 8003fba:	d0b6      	beq.n	8003f2a <_malloc_r+0x22>
 8003fbc:	1b9b      	subs	r3, r3, r6
 8003fbe:	50a3      	str	r3, [r4, r2]
 8003fc0:	e7b3      	b.n	8003f2a <_malloc_r+0x22>
 8003fc2:	6862      	ldr	r2, [r4, #4]
 8003fc4:	42a3      	cmp	r3, r4
 8003fc6:	bf0c      	ite	eq
 8003fc8:	6032      	streq	r2, [r6, #0]
 8003fca:	605a      	strne	r2, [r3, #4]
 8003fcc:	e7ec      	b.n	8003fa8 <_malloc_r+0xa0>
 8003fce:	4623      	mov	r3, r4
 8003fd0:	6864      	ldr	r4, [r4, #4]
 8003fd2:	e7b2      	b.n	8003f3a <_malloc_r+0x32>
 8003fd4:	4634      	mov	r4, r6
 8003fd6:	6876      	ldr	r6, [r6, #4]
 8003fd8:	e7b9      	b.n	8003f4e <_malloc_r+0x46>
 8003fda:	230c      	movs	r3, #12
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f000 f84c 	bl	800407c <__malloc_unlock>
 8003fe4:	e7a1      	b.n	8003f2a <_malloc_r+0x22>
 8003fe6:	6025      	str	r5, [r4, #0]
 8003fe8:	e7de      	b.n	8003fa8 <_malloc_r+0xa0>
 8003fea:	bf00      	nop
 8003fec:	20000170 	.word	0x20000170

08003ff0 <_realloc_r>:
 8003ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	4614      	mov	r4, r2
 8003ff8:	460e      	mov	r6, r1
 8003ffa:	b921      	cbnz	r1, 8004006 <_realloc_r+0x16>
 8003ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004000:	4611      	mov	r1, r2
 8004002:	f7ff bf81 	b.w	8003f08 <_malloc_r>
 8004006:	b92a      	cbnz	r2, 8004014 <_realloc_r+0x24>
 8004008:	f7ff ff12 	bl	8003e30 <_free_r>
 800400c:	4625      	mov	r5, r4
 800400e:	4628      	mov	r0, r5
 8004010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004014:	f000 f838 	bl	8004088 <_malloc_usable_size_r>
 8004018:	4284      	cmp	r4, r0
 800401a:	4607      	mov	r7, r0
 800401c:	d802      	bhi.n	8004024 <_realloc_r+0x34>
 800401e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004022:	d812      	bhi.n	800404a <_realloc_r+0x5a>
 8004024:	4621      	mov	r1, r4
 8004026:	4640      	mov	r0, r8
 8004028:	f7ff ff6e 	bl	8003f08 <_malloc_r>
 800402c:	4605      	mov	r5, r0
 800402e:	2800      	cmp	r0, #0
 8004030:	d0ed      	beq.n	800400e <_realloc_r+0x1e>
 8004032:	42bc      	cmp	r4, r7
 8004034:	4622      	mov	r2, r4
 8004036:	4631      	mov	r1, r6
 8004038:	bf28      	it	cs
 800403a:	463a      	movcs	r2, r7
 800403c:	f7ff fed0 	bl	8003de0 <memcpy>
 8004040:	4631      	mov	r1, r6
 8004042:	4640      	mov	r0, r8
 8004044:	f7ff fef4 	bl	8003e30 <_free_r>
 8004048:	e7e1      	b.n	800400e <_realloc_r+0x1e>
 800404a:	4635      	mov	r5, r6
 800404c:	e7df      	b.n	800400e <_realloc_r+0x1e>
	...

08004050 <_sbrk_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	4d06      	ldr	r5, [pc, #24]	; (800406c <_sbrk_r+0x1c>)
 8004054:	2300      	movs	r3, #0
 8004056:	4604      	mov	r4, r0
 8004058:	4608      	mov	r0, r1
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	f7fd f814 	bl	8001088 <_sbrk>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d102      	bne.n	800406a <_sbrk_r+0x1a>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	b103      	cbz	r3, 800406a <_sbrk_r+0x1a>
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	20000178 	.word	0x20000178

08004070 <__malloc_lock>:
 8004070:	4801      	ldr	r0, [pc, #4]	; (8004078 <__malloc_lock+0x8>)
 8004072:	f000 b811 	b.w	8004098 <__retarget_lock_acquire_recursive>
 8004076:	bf00      	nop
 8004078:	2000017c 	.word	0x2000017c

0800407c <__malloc_unlock>:
 800407c:	4801      	ldr	r0, [pc, #4]	; (8004084 <__malloc_unlock+0x8>)
 800407e:	f000 b80c 	b.w	800409a <__retarget_lock_release_recursive>
 8004082:	bf00      	nop
 8004084:	2000017c 	.word	0x2000017c

08004088 <_malloc_usable_size_r>:
 8004088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800408c:	1f18      	subs	r0, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	bfbc      	itt	lt
 8004092:	580b      	ldrlt	r3, [r1, r0]
 8004094:	18c0      	addlt	r0, r0, r3
 8004096:	4770      	bx	lr

08004098 <__retarget_lock_acquire_recursive>:
 8004098:	4770      	bx	lr

0800409a <__retarget_lock_release_recursive>:
 800409a:	4770      	bx	lr

0800409c <_init>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr

080040a8 <_fini>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr
