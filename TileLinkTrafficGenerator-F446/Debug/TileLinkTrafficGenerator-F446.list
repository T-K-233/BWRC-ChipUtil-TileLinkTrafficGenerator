
TileLinkTrafficGenerator-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000761c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007990  08007990  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007998  08007998  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080079a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000070  08007a10  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08007a10  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa28  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224b  00000000  00000000  0002fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00032a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235ef  00000000  00000000  000336e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011225  00000000  00000000  00056ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d266a  00000000  00000000  00067ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a55e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b98  00000000  00000000  0013a5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080077d4 	.word	0x080077d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080077d4 	.word	0x080077d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_TIM_IC_CaptureCallback>:

TileLinkController tl;

char str[128];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  TL_update(&tl);
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <HAL_TIM_IC_CaptureCallback+0x18>)
 80005ce:	f002 fd53 	bl	8003078 <TL_update>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090

080005e0 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e4:	2100      	movs	r1, #0
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <APP_init+0x18>)
 80005e8:	f004 fd3e 	bl	8005068 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <APP_init+0x1c>)
 80005f0:	f004 fe52 	bl	8005298 <HAL_TIM_IC_Start_IT>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000360 	.word	0x20000360
 80005fc:	200003a8 	.word	0x200003a8

08000600 <GET>:

void GET(uint32_t address) {
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	b08b      	sub	sp, #44	; 0x2c
 8000604:	af08      	add	r7, sp, #32
 8000606:	6078      	str	r0, [r7, #4]
  TL_GET(&tl, address);
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	482e      	ldr	r0, [pc, #184]	; (80006c4 <GET+0xc4>)
 800060c:	f003 f82b 	bl	8003666 <TL_GET>
  sprintf(str, "[TL Get] <address: 0x%08lx, size: %d>\r\n", tl.tx_frame.address, tl.tx_frame.size);
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <GET+0xc4>)
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <GET+0xc4>)
 8000616:	78db      	ldrb	r3, [r3, #3]
 8000618:	492b      	ldr	r1, [pc, #172]	; (80006c8 <GET+0xc8>)
 800061a:	482c      	ldr	r0, [pc, #176]	; (80006cc <GET+0xcc>)
 800061c:	f006 fc6c 	bl	8006ef8 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000620:	482a      	ldr	r0, [pc, #168]	; (80006cc <GET+0xcc>)
 8000622:	f7ff fdf5 	bl	8000210 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	4927      	ldr	r1, [pc, #156]	; (80006cc <GET+0xcc>)
 8000630:	4827      	ldr	r0, [pc, #156]	; (80006d0 <GET+0xd0>)
 8000632:	f006 f818 	bl	8006666 <HAL_UART_Transmit>
  sprintf(str, "[TL AccessAckData] <chanid: %d, opcode: %d, size: %d, source: 0x%08lx, denied: %d, corrupt: %d, data: 0x%08lx%08lx %d>\r\n", tl.rx_frame.chanid, tl.rx_frame.opcode, tl.rx_frame.size, tl.rx_frame.address, tl.rx_frame.mask, tl.rx_frame.corrupt, (uint32_t)(tl.rx_frame.data >> 32), (uint32_t)tl.rx_frame.data, tl.rx_frame.data);
 8000636:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <GET+0xc4>)
 8000638:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800063c:	469c      	mov	ip, r3
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <GET+0xc4>)
 8000640:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8000644:	469e      	mov	lr, r3
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <GET+0xc4>)
 8000648:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800064c:	461d      	mov	r5, r3
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <GET+0xc4>)
 8000650:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <GET+0xc4>)
 8000656:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800065a:	461e      	mov	r6, r3
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <GET+0xc4>)
 800065e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <GET+0xc4>)
 8000666:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	000a      	movs	r2, r1
 8000674:	2300      	movs	r3, #0
 8000676:	4611      	mov	r1, r2
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <GET+0xc4>)
 800067a:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800067e:	4610      	mov	r0, r2
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <GET+0xc4>)
 8000682:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8000686:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800068a:	9005      	str	r0, [sp, #20]
 800068c:	9104      	str	r1, [sp, #16]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	9303      	str	r3, [sp, #12]
 8000692:	9602      	str	r6, [sp, #8]
 8000694:	9401      	str	r4, [sp, #4]
 8000696:	9500      	str	r5, [sp, #0]
 8000698:	4673      	mov	r3, lr
 800069a:	4662      	mov	r2, ip
 800069c:	490d      	ldr	r1, [pc, #52]	; (80006d4 <GET+0xd4>)
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <GET+0xcc>)
 80006a0:	f006 fc2a 	bl	8006ef8 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80006a4:	4809      	ldr	r0, [pc, #36]	; (80006cc <GET+0xcc>)
 80006a6:	f7ff fdb3 	bl	8000210 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b2:	4906      	ldr	r1, [pc, #24]	; (80006cc <GET+0xcc>)
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <GET+0xd0>)
 80006b6:	f005 ffd6 	bl	8006666 <HAL_UART_Transmit>
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000090 	.word	0x20000090
 80006c8:	080077ec 	.word	0x080077ec
 80006cc:	200002e0 	.word	0x200002e0
 80006d0:	200003f0 	.word	0x200003f0
 80006d4:	08007814 	.word	0x08007814

080006d8 <PUTFULL>:

void PUTFULL(uint32_t address, uint64_t data) {
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af04      	add	r7, sp, #16
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	e9c7 2300 	strd	r2, r3, [r7]
  TL_PUTFULLDATA(&tl, address, data);
 80006e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006e8:	68f9      	ldr	r1, [r7, #12]
 80006ea:	482c      	ldr	r0, [pc, #176]	; (800079c <PUTFULL+0xc4>)
 80006ec:	f002 fff5 	bl	80036da <TL_PUTFULLDATA>
  sprintf(str, "[TL PutFullData] <address: 0x%08lx, size: %d, data: data: 0x%08lx%08lx>\r\n", tl.tx_frame.address, tl.tx_frame.size, (uint32_t)(tl.tx_frame.data >> 32), (uint32_t)tl.tx_frame.data);
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <PUTFULL+0xc4>)
 80006f2:	689c      	ldr	r4, [r3, #8]
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <PUTFULL+0xc4>)
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	461d      	mov	r5, r3
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <PUTFULL+0xc4>)
 80006fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000700:	f04f 0200 	mov.w	r2, #0
 8000704:	f04f 0300 	mov.w	r3, #0
 8000708:	000a      	movs	r2, r1
 800070a:	2300      	movs	r3, #0
 800070c:	4611      	mov	r1, r2
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <PUTFULL+0xc4>)
 8000710:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000714:	4613      	mov	r3, r2
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	9100      	str	r1, [sp, #0]
 800071a:	462b      	mov	r3, r5
 800071c:	4622      	mov	r2, r4
 800071e:	4920      	ldr	r1, [pc, #128]	; (80007a0 <PUTFULL+0xc8>)
 8000720:	4820      	ldr	r0, [pc, #128]	; (80007a4 <PUTFULL+0xcc>)
 8000722:	f006 fbe9 	bl	8006ef8 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000726:	481f      	ldr	r0, [pc, #124]	; (80007a4 <PUTFULL+0xcc>)
 8000728:	f7ff fd72 	bl	8000210 <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	491b      	ldr	r1, [pc, #108]	; (80007a4 <PUTFULL+0xcc>)
 8000736:	481c      	ldr	r0, [pc, #112]	; (80007a8 <PUTFULL+0xd0>)
 8000738:	f005 ff95 	bl	8006666 <HAL_UART_Transmit>
  sprintf(str, "[TL AccessAck] <chanid: %d, opcode: %d, size: %d, source: 0x%08lx, denied: %d, corrupt: %d>\r\n", tl.rx_frame.chanid, tl.rx_frame.opcode, tl.rx_frame.size, tl.rx_frame.address, tl.rx_frame.mask, tl.rx_frame.corrupt);
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <PUTFULL+0xc4>)
 800073e:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000742:	461c      	mov	r4, r3
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <PUTFULL+0xc4>)
 8000746:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800074a:	461d      	mov	r5, r3
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <PUTFULL+0xc4>)
 800074e:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8000752:	4619      	mov	r1, r3
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <PUTFULL+0xc4>)
 8000756:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <PUTFULL+0xc4>)
 800075c:	f892 2139 	ldrb.w	r2, [r2, #313]	; 0x139
 8000760:	4610      	mov	r0, r2
 8000762:	4a0e      	ldr	r2, [pc, #56]	; (800079c <PUTFULL+0xc4>)
 8000764:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
 8000768:	9203      	str	r2, [sp, #12]
 800076a:	9002      	str	r0, [sp, #8]
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	9100      	str	r1, [sp, #0]
 8000770:	462b      	mov	r3, r5
 8000772:	4622      	mov	r2, r4
 8000774:	490d      	ldr	r1, [pc, #52]	; (80007ac <PUTFULL+0xd4>)
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <PUTFULL+0xcc>)
 8000778:	f006 fbbe 	bl	8006ef8 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800077c:	4809      	ldr	r0, [pc, #36]	; (80007a4 <PUTFULL+0xcc>)
 800077e:	f7ff fd47 	bl	8000210 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	4906      	ldr	r1, [pc, #24]	; (80007a4 <PUTFULL+0xcc>)
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <PUTFULL+0xd0>)
 800078e:	f005 ff6a 	bl	8006666 <HAL_UART_Transmit>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bdb0      	pop	{r4, r5, r7, pc}
 800079a:	bf00      	nop
 800079c:	20000090 	.word	0x20000090
 80007a0:	08007890 	.word	0x08007890
 80007a4:	200002e0 	.word	0x200002e0
 80007a8:	200003f0 	.word	0x200003f0
 80007ac:	080078dc 	.word	0x080078dc

080007b0 <APP_main>:

void APP_main() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  uint8_t cmd;
  if (HAL_UART_Receive(&huart2, &cmd, 1, 1000) == HAL_OK) {
 80007b6:	1c79      	adds	r1, r7, #1
 80007b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007bc:	2201      	movs	r2, #1
 80007be:	4876      	ldr	r0, [pc, #472]	; (8000998 <APP_main+0x1e8>)
 80007c0:	f005 ffe3 	bl	800678a <HAL_UART_Receive>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	f042 8013 	bne.w	80027f2 <APP_main+0x2042>
    switch (cmd) {
 80007cc:	787b      	ldrb	r3, [r7, #1]
 80007ce:	3b30      	subs	r3, #48	; 0x30
 80007d0:	2b45      	cmp	r3, #69	; 0x45
 80007d2:	f202 800f 	bhi.w	80027f4 <APP_main+0x2044>
 80007d6:	a201      	add	r2, pc, #4	; (adr r2, 80007dc <APP_main+0x2c>)
 80007d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007dc:	08002771 	.word	0x08002771
 80007e0:	08002795 	.word	0x08002795
 80007e4:	080027b3 	.word	0x080027b3
 80007e8:	080027f5 	.word	0x080027f5
 80007ec:	080027f5 	.word	0x080027f5
 80007f0:	080027f5 	.word	0x080027f5
 80007f4:	080027f5 	.word	0x080027f5
 80007f8:	080027f5 	.word	0x080027f5
 80007fc:	080027f5 	.word	0x080027f5
 8000800:	080027f5 	.word	0x080027f5
 8000804:	080027f5 	.word	0x080027f5
 8000808:	080027f5 	.word	0x080027f5
 800080c:	080027f5 	.word	0x080027f5
 8000810:	080027f5 	.word	0x080027f5
 8000814:	080027f5 	.word	0x080027f5
 8000818:	080027f5 	.word	0x080027f5
 800081c:	080027f5 	.word	0x080027f5
 8000820:	080027f5 	.word	0x080027f5
 8000824:	08000901 	.word	0x08000901
 8000828:	080027f5 	.word	0x080027f5
 800082c:	08000981 	.word	0x08000981
 8000830:	080027f5 	.word	0x080027f5
 8000834:	080027f5 	.word	0x080027f5
 8000838:	080027f5 	.word	0x080027f5
 800083c:	080027f5 	.word	0x080027f5
 8000840:	080027f5 	.word	0x080027f5
 8000844:	080027f5 	.word	0x080027f5
 8000848:	080027f5 	.word	0x080027f5
 800084c:	080027f5 	.word	0x080027f5
 8000850:	080027f5 	.word	0x080027f5
 8000854:	080027f5 	.word	0x080027f5
 8000858:	080027f5 	.word	0x080027f5
 800085c:	080009a5 	.word	0x080009a5
 8000860:	080027f5 	.word	0x080027f5
 8000864:	080027f5 	.word	0x080027f5
 8000868:	080027f5 	.word	0x080027f5
 800086c:	080027f5 	.word	0x080027f5
 8000870:	0800093f 	.word	0x0800093f
 8000874:	080027f5 	.word	0x080027f5
 8000878:	080027f5 	.word	0x080027f5
 800087c:	080027f5 	.word	0x080027f5
 8000880:	080027f5 	.word	0x080027f5
 8000884:	080027f5 	.word	0x080027f5
 8000888:	080027f5 	.word	0x080027f5
 800088c:	080027f5 	.word	0x080027f5
 8000890:	080027f5 	.word	0x080027f5
 8000894:	080027f5 	.word	0x080027f5
 8000898:	080027f5 	.word	0x080027f5
 800089c:	080027f5 	.word	0x080027f5
 80008a0:	080027f5 	.word	0x080027f5
 80008a4:	080008f5 	.word	0x080008f5
 80008a8:	080027f5 	.word	0x080027f5
 80008ac:	0800095f 	.word	0x0800095f
 80008b0:	080027f5 	.word	0x080027f5
 80008b4:	080027f5 	.word	0x080027f5
 80008b8:	080027f5 	.word	0x080027f5
 80008bc:	080027f5 	.word	0x080027f5
 80008c0:	08000923 	.word	0x08000923
 80008c4:	080027f5 	.word	0x080027f5
 80008c8:	080027f5 	.word	0x080027f5
 80008cc:	080027f5 	.word	0x080027f5
 80008d0:	080027f5 	.word	0x080027f5
 80008d4:	080027f5 	.word	0x080027f5
 80008d8:	080027f5 	.word	0x080027f5
 80008dc:	080027f5 	.word	0x080027f5
 80008e0:	080027f5 	.word	0x080027f5
 80008e4:	080027f5 	.word	0x080027f5
 80008e8:	080027f5 	.word	0x080027f5
 80008ec:	0800092f 	.word	0x0800092f
 80008f0:	080027d1 	.word	0x080027d1
      case 'b':
        GET(BOOT_SELECT_ADDR);
 80008f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008f8:	f7ff fe82 	bl	8000600 <GET>
        break;
 80008fc:	f001 bf7a 	b.w	80027f4 <APP_main+0x2044>
      case 'B':
        for (uint8_t i=0; i<0x40; i+=4) {
 8000900:	2300      	movs	r3, #0
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	e008      	b.n	8000918 <APP_main+0x168>
          GET(BOOTROM_BASE_ADDR+i);
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe77 	bl	8000600 <GET>
        for (uint8_t i=0; i<0x40; i+=4) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	3304      	adds	r3, #4
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b3f      	cmp	r3, #63	; 0x3f
 800091c:	d9f3      	bls.n	8000906 <APP_main+0x156>
        }
        break;
 800091e:	f001 bf69 	b.w	80027f4 <APP_main+0x2044>

      case 'i':
        GET(CLINT_MSIP_ADDR);
 8000922:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000926:	f7ff fe6b 	bl	8000600 <GET>
        break;
 800092a:	f001 bf63 	b.w	80027f4 <APP_main+0x2044>

      case 't':
        while (1) {
          GET(CLINT_MTIME_ADDR);
 800092e:	481b      	ldr	r0, [pc, #108]	; (800099c <APP_main+0x1ec>)
 8000930:	f7ff fe66 	bl	8000600 <GET>
          HAL_Delay(1000);
 8000934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000938:	f002 ffa6 	bl	8003888 <HAL_Delay>
          GET(CLINT_MTIME_ADDR);
 800093c:	e7f7      	b.n	800092e <APP_main+0x17e>
        }
        break;

      case 'U':
        PUTFULL(UART_TXCTRL_ADDR, 0x1);
 800093e:	f04f 0201 	mov.w	r2, #1
 8000942:	f04f 0300 	mov.w	r3, #0
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <APP_main+0x1f0>)
 8000948:	f7ff fec6 	bl	80006d8 <PUTFULL>
        PUTFULL(UART_TXDATA_ADDR, 0xDEADBEEF);
 800094c:	a310      	add	r3, pc, #64	; (adr r3, 8000990 <APP_main+0x1e0>)
 800094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000952:	f04f 40a8 	mov.w	r0, #1409286144	; 0x54000000
 8000956:	f7ff febf 	bl	80006d8 <PUTFULL>
        break;
 800095a:	f001 bf4b 	b.w	80027f4 <APP_main+0x2044>


      case 'd':
        for (uint16_t i=0; i<0x40; i+=4) {
 800095e:	2300      	movs	r3, #0
 8000960:	80bb      	strh	r3, [r7, #4]
 8000962:	e008      	b.n	8000976 <APP_main+0x1c6>
          GET(DTIM_BASE_ADDR+i);
 8000964:	88bb      	ldrh	r3, [r7, #4]
 8000966:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fe48 	bl	8000600 <GET>
        for (uint16_t i=0; i<0x40; i+=4) {
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	3304      	adds	r3, #4
 8000974:	80bb      	strh	r3, [r7, #4]
 8000976:	88bb      	ldrh	r3, [r7, #4]
 8000978:	2b3f      	cmp	r3, #63	; 0x3f
 800097a:	d9f3      	bls.n	8000964 <APP_main+0x1b4>
        }
        break;
 800097c:	f001 bf3a 	b.w	80027f4 <APP_main+0x2044>
      case 'D':
        GET(DTIM_BASE_ADDR);
 8000980:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000984:	f7ff fe3c 	bl	8000600 <GET>
        break;
 8000988:	f001 bf34 	b.w	80027f4 <APP_main+0x2044>
 800098c:	f3af 8000 	nop.w
 8000990:	deadbeef 	.word	0xdeadbeef
 8000994:	00000000 	.word	0x00000000
 8000998:	200003f0 	.word	0x200003f0
 800099c:	0200bff8 	.word	0x0200bff8
 80009a0:	54000008 	.word	0x54000008

      case 'P':

        PUTFULL(DTIM_BASE_ADDR + 0, 0x93);
 80009a4:	f04f 0293 	mov.w	r2, #147	; 0x93
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80009b0:	f7ff fe92 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 4, 0x113);
 80009b4:	f240 1213 	movw	r2, #275	; 0x113
 80009b8:	f04f 0300 	mov.w	r3, #0
 80009bc:	48d4      	ldr	r0, [pc, #848]	; (8000d10 <APP_main+0x560>)
 80009be:	f7ff fe8b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 8, 0x193);
 80009c2:	f240 1293 	movw	r2, #403	; 0x193
 80009c6:	f04f 0300 	mov.w	r3, #0
 80009ca:	48d2      	ldr	r0, [pc, #840]	; (8000d14 <APP_main+0x564>)
 80009cc:	f7ff fe84 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 12, 0x213);
 80009d0:	f240 2213 	movw	r2, #531	; 0x213
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	48cf      	ldr	r0, [pc, #828]	; (8000d18 <APP_main+0x568>)
 80009da:	f7ff fe7d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 16, 0x293);
 80009de:	f240 2293 	movw	r2, #659	; 0x293
 80009e2:	f04f 0300 	mov.w	r3, #0
 80009e6:	48cd      	ldr	r0, [pc, #820]	; (8000d1c <APP_main+0x56c>)
 80009e8:	f7ff fe76 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 20, 0x313);
 80009ec:	f240 3213 	movw	r2, #787	; 0x313
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	48ca      	ldr	r0, [pc, #808]	; (8000d20 <APP_main+0x570>)
 80009f6:	f7ff fe6f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 24, 0x393);
 80009fa:	f240 3293 	movw	r2, #915	; 0x393
 80009fe:	f04f 0300 	mov.w	r3, #0
 8000a02:	48c8      	ldr	r0, [pc, #800]	; (8000d24 <APP_main+0x574>)
 8000a04:	f7ff fe68 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 28, 0x413);
 8000a08:	f240 4213 	movw	r2, #1043	; 0x413
 8000a0c:	f04f 0300 	mov.w	r3, #0
 8000a10:	48c5      	ldr	r0, [pc, #788]	; (8000d28 <APP_main+0x578>)
 8000a12:	f7ff fe61 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 32, 0x493);
 8000a16:	f240 4293 	movw	r2, #1171	; 0x493
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	48c3      	ldr	r0, [pc, #780]	; (8000d2c <APP_main+0x57c>)
 8000a20:	f7ff fe5a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 36, 0x513);
 8000a24:	f240 5213 	movw	r2, #1299	; 0x513
 8000a28:	f04f 0300 	mov.w	r3, #0
 8000a2c:	48c0      	ldr	r0, [pc, #768]	; (8000d30 <APP_main+0x580>)
 8000a2e:	f7ff fe53 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 40, 0x593);
 8000a32:	f240 5293 	movw	r2, #1427	; 0x593
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	48be      	ldr	r0, [pc, #760]	; (8000d34 <APP_main+0x584>)
 8000a3c:	f7ff fe4c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 44, 0x613);
 8000a40:	f240 6213 	movw	r2, #1555	; 0x613
 8000a44:	f04f 0300 	mov.w	r3, #0
 8000a48:	48bb      	ldr	r0, [pc, #748]	; (8000d38 <APP_main+0x588>)
 8000a4a:	f7ff fe45 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 48, 0x693);
 8000a4e:	f240 6293 	movw	r2, #1683	; 0x693
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	48b9      	ldr	r0, [pc, #740]	; (8000d3c <APP_main+0x58c>)
 8000a58:	f7ff fe3e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 52, 0x713);
 8000a5c:	f240 7213 	movw	r2, #1811	; 0x713
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	48b6      	ldr	r0, [pc, #728]	; (8000d40 <APP_main+0x590>)
 8000a66:	f7ff fe37 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 56, 0x793);
 8000a6a:	f240 7293 	movw	r2, #1939	; 0x793
 8000a6e:	f04f 0300 	mov.w	r3, #0
 8000a72:	48b4      	ldr	r0, [pc, #720]	; (8000d44 <APP_main+0x594>)
 8000a74:	f7ff fe30 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 60, 0x813);
 8000a78:	f640 0213 	movw	r2, #2067	; 0x813
 8000a7c:	f04f 0300 	mov.w	r3, #0
 8000a80:	48b1      	ldr	r0, [pc, #708]	; (8000d48 <APP_main+0x598>)
 8000a82:	f7ff fe29 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 64, 0x893);
 8000a86:	f640 0293 	movw	r2, #2195	; 0x893
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	48af      	ldr	r0, [pc, #700]	; (8000d4c <APP_main+0x59c>)
 8000a90:	f7ff fe22 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 68, 0x913);
 8000a94:	f640 1213 	movw	r2, #2323	; 0x913
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	48ac      	ldr	r0, [pc, #688]	; (8000d50 <APP_main+0x5a0>)
 8000a9e:	f7ff fe1b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 72, 0x993);
 8000aa2:	f640 1293 	movw	r2, #2451	; 0x993
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	48aa      	ldr	r0, [pc, #680]	; (8000d54 <APP_main+0x5a4>)
 8000aac:	f7ff fe14 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 76, 0xa13);
 8000ab0:	f640 2213 	movw	r2, #2579	; 0xa13
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	48a7      	ldr	r0, [pc, #668]	; (8000d58 <APP_main+0x5a8>)
 8000aba:	f7ff fe0d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 80, 0xa93);
 8000abe:	f640 2293 	movw	r2, #2707	; 0xa93
 8000ac2:	f04f 0300 	mov.w	r3, #0
 8000ac6:	48a5      	ldr	r0, [pc, #660]	; (8000d5c <APP_main+0x5ac>)
 8000ac8:	f7ff fe06 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 84, 0xb13);
 8000acc:	f640 3213 	movw	r2, #2835	; 0xb13
 8000ad0:	f04f 0300 	mov.w	r3, #0
 8000ad4:	48a2      	ldr	r0, [pc, #648]	; (8000d60 <APP_main+0x5b0>)
 8000ad6:	f7ff fdff 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 88, 0xb93);
 8000ada:	f640 3293 	movw	r2, #2963	; 0xb93
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	48a0      	ldr	r0, [pc, #640]	; (8000d64 <APP_main+0x5b4>)
 8000ae4:	f7ff fdf8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 92, 0xc13);
 8000ae8:	f640 4213 	movw	r2, #3091	; 0xc13
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	489d      	ldr	r0, [pc, #628]	; (8000d68 <APP_main+0x5b8>)
 8000af2:	f7ff fdf1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 96, 0xc93);
 8000af6:	f640 4293 	movw	r2, #3219	; 0xc93
 8000afa:	f04f 0300 	mov.w	r3, #0
 8000afe:	489b      	ldr	r0, [pc, #620]	; (8000d6c <APP_main+0x5bc>)
 8000b00:	f7ff fdea 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 100, 0xd13);
 8000b04:	f640 5213 	movw	r2, #3347	; 0xd13
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	4898      	ldr	r0, [pc, #608]	; (8000d70 <APP_main+0x5c0>)
 8000b0e:	f7ff fde3 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 104, 0xd93);
 8000b12:	f640 5293 	movw	r2, #3475	; 0xd93
 8000b16:	f04f 0300 	mov.w	r3, #0
 8000b1a:	4896      	ldr	r0, [pc, #600]	; (8000d74 <APP_main+0x5c4>)
 8000b1c:	f7ff fddc 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 108, 0xe13);
 8000b20:	f640 6213 	movw	r2, #3603	; 0xe13
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	4893      	ldr	r0, [pc, #588]	; (8000d78 <APP_main+0x5c8>)
 8000b2a:	f7ff fdd5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 112, 0xe93);
 8000b2e:	f640 6293 	movw	r2, #3731	; 0xe93
 8000b32:	f04f 0300 	mov.w	r3, #0
 8000b36:	4891      	ldr	r0, [pc, #580]	; (8000d7c <APP_main+0x5cc>)
 8000b38:	f7ff fdce 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 116, 0xf13);
 8000b3c:	f640 7213 	movw	r2, #3859	; 0xf13
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	488e      	ldr	r0, [pc, #568]	; (8000d80 <APP_main+0x5d0>)
 8000b46:	f7ff fdc7 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 120, 0xf93);
 8000b4a:	f640 7293 	movw	r2, #3987	; 0xf93
 8000b4e:	f04f 0300 	mov.w	r3, #0
 8000b52:	488c      	ldr	r0, [pc, #560]	; (8000d84 <APP_main+0x5d4>)
 8000b54:	f7ff fdc0 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 124, 0x800002b7);
 8000b58:	4a8b      	ldr	r2, [pc, #556]	; (8000d88 <APP_main+0x5d8>)
 8000b5a:	f04f 0300 	mov.w	r3, #0
 8000b5e:	488b      	ldr	r0, [pc, #556]	; (8000d8c <APP_main+0x5dc>)
 8000b60:	f7ff fdba 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 128, 0x30529073);
 8000b64:	a34e      	add	r3, pc, #312	; (adr r3, 8000ca0 <APP_main+0x4f0>)
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	4889      	ldr	r0, [pc, #548]	; (8000d90 <APP_main+0x5e0>)
 8000b6c:	f7ff fdb4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 132, 0x1197);
 8000b70:	f241 1297 	movw	r2, #4503	; 0x1197
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	4886      	ldr	r0, [pc, #536]	; (8000d94 <APP_main+0x5e4>)
 8000b7a:	f7ff fdad 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 136, 0xd3818193);
 8000b7e:	a34a      	add	r3, pc, #296	; (adr r3, 8000ca8 <APP_main+0x4f8>)
 8000b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b84:	4884      	ldr	r0, [pc, #528]	; (8000d98 <APP_main+0x5e8>)
 8000b86:	f7ff fda7 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 140, 0x80004137);
 8000b8a:	a349      	add	r3, pc, #292	; (adr r3, 8000cb0 <APP_main+0x500>)
 8000b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b90:	4882      	ldr	r0, [pc, #520]	; (8000d9c <APP_main+0x5ec>)
 8000b92:	f7ff fda1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 144, 0xf1402573);
 8000b96:	a348      	add	r3, pc, #288	; (adr r3, 8000cb8 <APP_main+0x508>)
 8000b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9c:	4880      	ldr	r0, [pc, #512]	; (8000da0 <APP_main+0x5f0>)
 8000b9e:	f7ff fd9b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 148, 0x100593);
 8000ba2:	4a80      	ldr	r2, [pc, #512]	; (8000da4 <APP_main+0x5f4>)
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	487f      	ldr	r0, [pc, #508]	; (8000da8 <APP_main+0x5f8>)
 8000baa:	f7ff fd95 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 152, 0x8000ef);
 8000bae:	4a7f      	ldr	r2, [pc, #508]	; (8000dac <APP_main+0x5fc>)
 8000bb0:	f04f 0300 	mov.w	r3, #0
 8000bb4:	487e      	ldr	r0, [pc, #504]	; (8000db0 <APP_main+0x600>)
 8000bb6:	f7ff fd8f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 156, 0x6f);
 8000bba:	f04f 026f 	mov.w	r2, #111	; 0x6f
 8000bbe:	f04f 0300 	mov.w	r3, #0
 8000bc2:	487c      	ldr	r0, [pc, #496]	; (8000db4 <APP_main+0x604>)
 8000bc4:	f7ff fd88 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 160, 0xfe010113);
 8000bc8:	a33d      	add	r3, pc, #244	; (adr r3, 8000cc0 <APP_main+0x510>)
 8000bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bce:	487a      	ldr	r0, [pc, #488]	; (8000db8 <APP_main+0x608>)
 8000bd0:	f7ff fd82 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 164, 0x112e23);
 8000bd4:	4a79      	ldr	r2, [pc, #484]	; (8000dbc <APP_main+0x60c>)
 8000bd6:	f04f 0300 	mov.w	r3, #0
 8000bda:	4879      	ldr	r0, [pc, #484]	; (8000dc0 <APP_main+0x610>)
 8000bdc:	f7ff fd7c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 168, 0x812c23);
 8000be0:	a339      	add	r3, pc, #228	; (adr r3, 8000cc8 <APP_main+0x518>)
 8000be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be6:	4877      	ldr	r0, [pc, #476]	; (8000dc4 <APP_main+0x614>)
 8000be8:	f7ff fd76 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 172, 0x2010413);
 8000bec:	a338      	add	r3, pc, #224	; (adr r3, 8000cd0 <APP_main+0x520>)
 8000bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf2:	4875      	ldr	r0, [pc, #468]	; (8000dc8 <APP_main+0x618>)
 8000bf4:	f7ff fd70 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 176, 0xe0000ef);
 8000bf8:	4a74      	ldr	r2, [pc, #464]	; (8000dcc <APP_main+0x61c>)
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	4874      	ldr	r0, [pc, #464]	; (8000dd0 <APP_main+0x620>)
 8000c00:	f7ff fd6a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 180, 0x54000537);
 8000c04:	4a73      	ldr	r2, [pc, #460]	; (8000dd4 <APP_main+0x624>)
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	4873      	ldr	r0, [pc, #460]	; (8000dd8 <APP_main+0x628>)
 8000c0c:	f7ff fd64 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 184, 0x33c000ef);
 8000c10:	4a72      	ldr	r2, [pc, #456]	; (8000ddc <APP_main+0x62c>)
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	4872      	ldr	r0, [pc, #456]	; (8000de0 <APP_main+0x630>)
 8000c18:	f7ff fd5e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 188, 0x100593);
 8000c1c:	4a61      	ldr	r2, [pc, #388]	; (8000da4 <APP_main+0x5f4>)
 8000c1e:	f04f 0300 	mov.w	r3, #0
 8000c22:	4870      	ldr	r0, [pc, #448]	; (8000de4 <APP_main+0x634>)
 8000c24:	f7ff fd58 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 192, 0x10012537);
 8000c28:	a32b      	add	r3, pc, #172	; (adr r3, 8000cd8 <APP_main+0x528>)
 8000c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2e:	486e      	ldr	r0, [pc, #440]	; (8000de8 <APP_main+0x638>)
 8000c30:	f7ff fd52 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 196, 0xe8000ef);
 8000c34:	4a6d      	ldr	r2, [pc, #436]	; (8000dec <APP_main+0x63c>)
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	486d      	ldr	r0, [pc, #436]	; (8000df0 <APP_main+0x640>)
 8000c3c:	f7ff fd4c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 200, 0x797);
 8000c40:	f240 7297 	movw	r2, #1943	; 0x797
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	486a      	ldr	r0, [pc, #424]	; (8000df4 <APP_main+0x644>)
 8000c4a:	f7ff fd45 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 204, 0x4f478793);
 8000c4e:	a324      	add	r3, pc, #144	; (adr r3, 8000ce0 <APP_main+0x530>)
 8000c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c54:	4868      	ldr	r0, [pc, #416]	; (8000df8 <APP_main+0x648>)
 8000c56:	f7ff fd3f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 208, 0x7a603);
 8000c5a:	4a68      	ldr	r2, [pc, #416]	; (8000dfc <APP_main+0x64c>)
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	4867      	ldr	r0, [pc, #412]	; (8000e00 <APP_main+0x650>)
 8000c62:	f7ff fd39 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 212, 0x47a683);
 8000c66:	a320      	add	r3, pc, #128	; (adr r3, 8000ce8 <APP_main+0x538>)
 8000c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6c:	4865      	ldr	r0, [pc, #404]	; (8000e04 <APP_main+0x654>)
 8000c6e:	f7ff fd33 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 216, 0x87a703);
 8000c72:	a31f      	add	r3, pc, #124	; (adr r3, 8000cf0 <APP_main+0x540>)
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	4863      	ldr	r0, [pc, #396]	; (8000e08 <APP_main+0x658>)
 8000c7a:	f7ff fd2d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 220, 0xfec42023);
 8000c7e:	a31e      	add	r3, pc, #120	; (adr r3, 8000cf8 <APP_main+0x548>)
 8000c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c84:	4861      	ldr	r0, [pc, #388]	; (8000e0c <APP_main+0x65c>)
 8000c86:	f7ff fd27 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 224, 0xfed42223);
 8000c8a:	a31d      	add	r3, pc, #116	; (adr r3, 8000d00 <APP_main+0x550>)
 8000c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c90:	485f      	ldr	r0, [pc, #380]	; (8000e10 <APP_main+0x660>)
 8000c92:	f7ff fd21 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 228, 0xfee42423);
 8000c96:	a31c      	add	r3, pc, #112	; (adr r3, 8000d08 <APP_main+0x558>)
 8000c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9c:	e0ba      	b.n	8000e14 <APP_main+0x664>
 8000c9e:	bf00      	nop
 8000ca0:	30529073 	.word	0x30529073
 8000ca4:	00000000 	.word	0x00000000
 8000ca8:	d3818193 	.word	0xd3818193
 8000cac:	00000000 	.word	0x00000000
 8000cb0:	80004137 	.word	0x80004137
 8000cb4:	00000000 	.word	0x00000000
 8000cb8:	f1402573 	.word	0xf1402573
 8000cbc:	00000000 	.word	0x00000000
 8000cc0:	fe010113 	.word	0xfe010113
 8000cc4:	00000000 	.word	0x00000000
 8000cc8:	00812c23 	.word	0x00812c23
 8000ccc:	00000000 	.word	0x00000000
 8000cd0:	02010413 	.word	0x02010413
 8000cd4:	00000000 	.word	0x00000000
 8000cd8:	10012537 	.word	0x10012537
 8000cdc:	00000000 	.word	0x00000000
 8000ce0:	4f478793 	.word	0x4f478793
 8000ce4:	00000000 	.word	0x00000000
 8000ce8:	0047a683 	.word	0x0047a683
 8000cec:	00000000 	.word	0x00000000
 8000cf0:	0087a703 	.word	0x0087a703
 8000cf4:	00000000 	.word	0x00000000
 8000cf8:	fec42023 	.word	0xfec42023
 8000cfc:	00000000 	.word	0x00000000
 8000d00:	fed42223 	.word	0xfed42223
 8000d04:	00000000 	.word	0x00000000
 8000d08:	fee42423 	.word	0xfee42423
 8000d0c:	00000000 	.word	0x00000000
 8000d10:	80000004 	.word	0x80000004
 8000d14:	80000008 	.word	0x80000008
 8000d18:	8000000c 	.word	0x8000000c
 8000d1c:	80000010 	.word	0x80000010
 8000d20:	80000014 	.word	0x80000014
 8000d24:	80000018 	.word	0x80000018
 8000d28:	8000001c 	.word	0x8000001c
 8000d2c:	80000020 	.word	0x80000020
 8000d30:	80000024 	.word	0x80000024
 8000d34:	80000028 	.word	0x80000028
 8000d38:	8000002c 	.word	0x8000002c
 8000d3c:	80000030 	.word	0x80000030
 8000d40:	80000034 	.word	0x80000034
 8000d44:	80000038 	.word	0x80000038
 8000d48:	8000003c 	.word	0x8000003c
 8000d4c:	80000040 	.word	0x80000040
 8000d50:	80000044 	.word	0x80000044
 8000d54:	80000048 	.word	0x80000048
 8000d58:	8000004c 	.word	0x8000004c
 8000d5c:	80000050 	.word	0x80000050
 8000d60:	80000054 	.word	0x80000054
 8000d64:	80000058 	.word	0x80000058
 8000d68:	8000005c 	.word	0x8000005c
 8000d6c:	80000060 	.word	0x80000060
 8000d70:	80000064 	.word	0x80000064
 8000d74:	80000068 	.word	0x80000068
 8000d78:	8000006c 	.word	0x8000006c
 8000d7c:	80000070 	.word	0x80000070
 8000d80:	80000074 	.word	0x80000074
 8000d84:	80000078 	.word	0x80000078
 8000d88:	800002b7 	.word	0x800002b7
 8000d8c:	8000007c 	.word	0x8000007c
 8000d90:	80000080 	.word	0x80000080
 8000d94:	80000084 	.word	0x80000084
 8000d98:	80000088 	.word	0x80000088
 8000d9c:	8000008c 	.word	0x8000008c
 8000da0:	80000090 	.word	0x80000090
 8000da4:	00100593 	.word	0x00100593
 8000da8:	80000094 	.word	0x80000094
 8000dac:	008000ef 	.word	0x008000ef
 8000db0:	80000098 	.word	0x80000098
 8000db4:	8000009c 	.word	0x8000009c
 8000db8:	800000a0 	.word	0x800000a0
 8000dbc:	00112e23 	.word	0x00112e23
 8000dc0:	800000a4 	.word	0x800000a4
 8000dc4:	800000a8 	.word	0x800000a8
 8000dc8:	800000ac 	.word	0x800000ac
 8000dcc:	0e0000ef 	.word	0x0e0000ef
 8000dd0:	800000b0 	.word	0x800000b0
 8000dd4:	54000537 	.word	0x54000537
 8000dd8:	800000b4 	.word	0x800000b4
 8000ddc:	33c000ef 	.word	0x33c000ef
 8000de0:	800000b8 	.word	0x800000b8
 8000de4:	800000bc 	.word	0x800000bc
 8000de8:	800000c0 	.word	0x800000c0
 8000dec:	0e8000ef 	.word	0x0e8000ef
 8000df0:	800000c4 	.word	0x800000c4
 8000df4:	800000c8 	.word	0x800000c8
 8000df8:	800000cc 	.word	0x800000cc
 8000dfc:	0007a603 	.word	0x0007a603
 8000e00:	800000d0 	.word	0x800000d0
 8000e04:	800000d4 	.word	0x800000d4
 8000e08:	800000d8 	.word	0x800000d8
 8000e0c:	800000dc 	.word	0x800000dc
 8000e10:	800000e0 	.word	0x800000e0
 8000e14:	48ca      	ldr	r0, [pc, #808]	; (8001140 <APP_main+0x990>)
 8000e16:	f7ff fc5f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 232, 0xc7c783);
 8000e1a:	a3a9      	add	r3, pc, #676	; (adr r3, 80010c0 <APP_main+0x910>)
 8000e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e20:	48c8      	ldr	r0, [pc, #800]	; (8001144 <APP_main+0x994>)
 8000e22:	f7ff fc59 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 236, 0xfef40623);
 8000e26:	a3a8      	add	r3, pc, #672	; (adr r3, 80010c8 <APP_main+0x918>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	48c6      	ldr	r0, [pc, #792]	; (8001148 <APP_main+0x998>)
 8000e2e:	f7ff fc53 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 240, 0xfe040793);
 8000e32:	a3a7      	add	r3, pc, #668	; (adr r3, 80010d0 <APP_main+0x920>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	48c4      	ldr	r0, [pc, #784]	; (800114c <APP_main+0x99c>)
 8000e3a:	f7ff fc4d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 244, 0x693);
 8000e3e:	f240 6293 	movw	r2, #1683	; 0x693
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	48c2      	ldr	r0, [pc, #776]	; (8001150 <APP_main+0x9a0>)
 8000e48:	f7ff fc46 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 248, 0xc00613);
 8000e4c:	4ac1      	ldr	r2, [pc, #772]	; (8001154 <APP_main+0x9a4>)
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	48c1      	ldr	r0, [pc, #772]	; (8001158 <APP_main+0x9a8>)
 8000e54:	f7ff fc40 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 252, 0x78593);
 8000e58:	4ac0      	ldr	r2, [pc, #768]	; (800115c <APP_main+0x9ac>)
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	48c0      	ldr	r0, [pc, #768]	; (8001160 <APP_main+0x9b0>)
 8000e60:	f7ff fc3a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 256, 0x54000537);
 8000e64:	4abf      	ldr	r2, [pc, #764]	; (8001164 <APP_main+0x9b4>)
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	48bf      	ldr	r0, [pc, #764]	; (8001168 <APP_main+0x9b8>)
 8000e6c:	f7ff fc34 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 260, 0x430000ef);
 8000e70:	4abe      	ldr	r2, [pc, #760]	; (800116c <APP_main+0x9bc>)
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	48be      	ldr	r0, [pc, #760]	; (8001170 <APP_main+0x9c0>)
 8000e78:	f7ff fc2e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 264, 0x100613);
 8000e7c:	4abd      	ldr	r2, [pc, #756]	; (8001174 <APP_main+0x9c4>)
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	48bd      	ldr	r0, [pc, #756]	; (8001178 <APP_main+0x9c8>)
 8000e84:	f7ff fc28 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 268, 0x100593);
 8000e88:	4abc      	ldr	r2, [pc, #752]	; (800117c <APP_main+0x9cc>)
 8000e8a:	f04f 0300 	mov.w	r3, #0
 8000e8e:	48bc      	ldr	r0, [pc, #752]	; (8001180 <APP_main+0x9d0>)
 8000e90:	f7ff fc22 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 272, 0x10012537);
 8000e94:	a390      	add	r3, pc, #576	; (adr r3, 80010d8 <APP_main+0x928>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	48ba      	ldr	r0, [pc, #744]	; (8001184 <APP_main+0x9d4>)
 8000e9c:	f7ff fc1c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 276, 0x110000ef);
 8000ea0:	4ab9      	ldr	r2, [pc, #740]	; (8001188 <APP_main+0x9d8>)
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	48b9      	ldr	r0, [pc, #740]	; (800118c <APP_main+0x9dc>)
 8000ea8:	f7ff fc16 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 280, 0xfa00513);
 8000eac:	4ab8      	ldr	r2, [pc, #736]	; (8001190 <APP_main+0x9e0>)
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	48b8      	ldr	r0, [pc, #736]	; (8001194 <APP_main+0x9e4>)
 8000eb4:	f7ff fc10 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 284, 0x593);
 8000eb8:	f240 5293 	movw	r2, #1427	; 0x593
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	48b5      	ldr	r0, [pc, #724]	; (8001198 <APP_main+0x9e8>)
 8000ec2:	f7ff fc09 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 288, 0x1c0000ef);
 8000ec6:	4ab5      	ldr	r2, [pc, #724]	; (800119c <APP_main+0x9ec>)
 8000ec8:	f04f 0300 	mov.w	r3, #0
 8000ecc:	48b4      	ldr	r0, [pc, #720]	; (80011a0 <APP_main+0x9f0>)
 8000ece:	f7ff fc03 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 292, 0x613);
 8000ed2:	f240 6213 	movw	r2, #1555	; 0x613
 8000ed6:	f04f 0300 	mov.w	r3, #0
 8000eda:	48b2      	ldr	r0, [pc, #712]	; (80011a4 <APP_main+0x9f4>)
 8000edc:	f7ff fbfc 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 296, 0x100593);
 8000ee0:	4aa6      	ldr	r2, [pc, #664]	; (800117c <APP_main+0x9cc>)
 8000ee2:	f04f 0300 	mov.w	r3, #0
 8000ee6:	48b0      	ldr	r0, [pc, #704]	; (80011a8 <APP_main+0x9f8>)
 8000ee8:	f7ff fbf6 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 300, 0x10012537);
 8000eec:	a37a      	add	r3, pc, #488	; (adr r3, 80010d8 <APP_main+0x928>)
 8000eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef2:	48ae      	ldr	r0, [pc, #696]	; (80011ac <APP_main+0x9fc>)
 8000ef4:	f7ff fbf0 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 304, 0xf4000ef);
 8000ef8:	4aad      	ldr	r2, [pc, #692]	; (80011b0 <APP_main+0xa00>)
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	48ad      	ldr	r0, [pc, #692]	; (80011b4 <APP_main+0xa04>)
 8000f00:	f7ff fbea 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 308, 0xfa00513);
 8000f04:	4aa2      	ldr	r2, [pc, #648]	; (8001190 <APP_main+0x9e0>)
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	48ab      	ldr	r0, [pc, #684]	; (80011b8 <APP_main+0xa08>)
 8000f0c:	f7ff fbe4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 312, 0x593);
 8000f10:	f240 5293 	movw	r2, #1427	; 0x593
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	48a8      	ldr	r0, [pc, #672]	; (80011bc <APP_main+0xa0c>)
 8000f1a:	f7ff fbdd 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 316, 0x1a4000ef);
 8000f1e:	4aa8      	ldr	r2, [pc, #672]	; (80011c0 <APP_main+0xa10>)
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	48a7      	ldr	r0, [pc, #668]	; (80011c4 <APP_main+0xa14>)
 8000f26:	f7ff fbd7 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 320, 0x13);
 8000f2a:	f04f 0213 	mov.w	r2, #19
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	48a5      	ldr	r0, [pc, #660]	; (80011c8 <APP_main+0xa18>)
 8000f34:	f7ff fbd0 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 324, 0xf85ff06f);
 8000f38:	4aa4      	ldr	r2, [pc, #656]	; (80011cc <APP_main+0xa1c>)
 8000f3a:	f04f 0300 	mov.w	r3, #0
 8000f3e:	48a4      	ldr	r0, [pc, #656]	; (80011d0 <APP_main+0xa20>)
 8000f40:	f7ff fbca 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 328, 0xff010113);
 8000f44:	a366      	add	r3, pc, #408	; (adr r3, 80010e0 <APP_main+0x930>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	48a2      	ldr	r0, [pc, #648]	; (80011d4 <APP_main+0xa24>)
 8000f4c:	f7ff fbc4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 332, 0x812623);
 8000f50:	a365      	add	r3, pc, #404	; (adr r3, 80010e8 <APP_main+0x938>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	48a0      	ldr	r0, [pc, #640]	; (80011d8 <APP_main+0xa28>)
 8000f58:	f7ff fbbe 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 336, 0x1010413);
 8000f5c:	a364      	add	r3, pc, #400	; (adr r3, 80010f0 <APP_main+0x940>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	489e      	ldr	r0, [pc, #632]	; (80011dc <APP_main+0xa2c>)
 8000f64:	f7ff fbb8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 340, 0x13);
 8000f68:	f04f 0213 	mov.w	r2, #19
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	489b      	ldr	r0, [pc, #620]	; (80011e0 <APP_main+0xa30>)
 8000f72:	f7ff fbb1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 344, 0xc12403);
 8000f76:	a360      	add	r3, pc, #384	; (adr r3, 80010f8 <APP_main+0x948>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	4899      	ldr	r0, [pc, #612]	; (80011e4 <APP_main+0xa34>)
 8000f7e:	f7ff fbab 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 348, 0x1010113);
 8000f82:	4a99      	ldr	r2, [pc, #612]	; (80011e8 <APP_main+0xa38>)
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	4898      	ldr	r0, [pc, #608]	; (80011ec <APP_main+0xa3c>)
 8000f8a:	f7ff fba5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 352, 0x8067);
 8000f8e:	f248 0267 	movw	r2, #32871	; 0x8067
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	4896      	ldr	r0, [pc, #600]	; (80011f0 <APP_main+0xa40>)
 8000f98:	f7ff fb9e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 356, 0xfe010113);
 8000f9c:	a358      	add	r3, pc, #352	; (adr r3, 8001100 <APP_main+0x950>)
 8000f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa2:	4894      	ldr	r0, [pc, #592]	; (80011f4 <APP_main+0xa44>)
 8000fa4:	f7ff fb98 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 360, 0x812e23);
 8000fa8:	a357      	add	r3, pc, #348	; (adr r3, 8001108 <APP_main+0x958>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	4892      	ldr	r0, [pc, #584]	; (80011f8 <APP_main+0xa48>)
 8000fb0:	f7ff fb92 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 364, 0x2010413);
 8000fb4:	a356      	add	r3, pc, #344	; (adr r3, 8001110 <APP_main+0x960>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	4890      	ldr	r0, [pc, #576]	; (80011fc <APP_main+0xa4c>)
 8000fbc:	f7ff fb8c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 368, 0xfea42623);
 8000fc0:	a355      	add	r3, pc, #340	; (adr r3, 8001118 <APP_main+0x968>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	488e      	ldr	r0, [pc, #568]	; (8001200 <APP_main+0xa50>)
 8000fc8:	f7ff fb86 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 372, 0xfeb42423);
 8000fcc:	a354      	add	r3, pc, #336	; (adr r3, 8001120 <APP_main+0x970>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	488c      	ldr	r0, [pc, #560]	; (8001204 <APP_main+0xa54>)
 8000fd4:	f7ff fb80 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 376, 0xfec42223);
 8000fd8:	a353      	add	r3, pc, #332	; (adr r3, 8001128 <APP_main+0x978>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	488a      	ldr	r0, [pc, #552]	; (8001208 <APP_main+0xa58>)
 8000fe0:	f7ff fb7a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 380, 0x13);
 8000fe4:	f04f 0213 	mov.w	r2, #19
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	4887      	ldr	r0, [pc, #540]	; (800120c <APP_main+0xa5c>)
 8000fee:	f7ff fb73 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 384, 0x78513);
 8000ff2:	4a87      	ldr	r2, [pc, #540]	; (8001210 <APP_main+0xa60>)
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	4886      	ldr	r0, [pc, #536]	; (8001214 <APP_main+0xa64>)
 8000ffa:	f7ff fb6d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 388, 0x1c12403);
 8000ffe:	a34c      	add	r3, pc, #304	; (adr r3, 8001130 <APP_main+0x980>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	4884      	ldr	r0, [pc, #528]	; (8001218 <APP_main+0xa68>)
 8001006:	f7ff fb67 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 392, 0x2010113);
 800100a:	a34b      	add	r3, pc, #300	; (adr r3, 8001138 <APP_main+0x988>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	4882      	ldr	r0, [pc, #520]	; (800121c <APP_main+0xa6c>)
 8001012:	f7ff fb61 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 396, 0x8067);
 8001016:	f248 0267 	movw	r2, #32871	; 0x8067
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	4880      	ldr	r0, [pc, #512]	; (8001220 <APP_main+0xa70>)
 8001020:	f7ff fb5a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 400, 0xff010113);
 8001024:	a32e      	add	r3, pc, #184	; (adr r3, 80010e0 <APP_main+0x930>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	487e      	ldr	r0, [pc, #504]	; (8001224 <APP_main+0xa74>)
 800102c:	f7ff fb54 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 404, 0x812623);
 8001030:	a32d      	add	r3, pc, #180	; (adr r3, 80010e8 <APP_main+0x938>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	487c      	ldr	r0, [pc, #496]	; (8001228 <APP_main+0xa78>)
 8001038:	f7ff fb4e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 408, 0x1010413);
 800103c:	a32c      	add	r3, pc, #176	; (adr r3, 80010f0 <APP_main+0x940>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	487a      	ldr	r0, [pc, #488]	; (800122c <APP_main+0xa7c>)
 8001044:	f7ff fb48 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 412, 0x13);
 8001048:	f04f 0213 	mov.w	r2, #19
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	4877      	ldr	r0, [pc, #476]	; (8001230 <APP_main+0xa80>)
 8001052:	f7ff fb41 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 416, 0xc12403);
 8001056:	a328      	add	r3, pc, #160	; (adr r3, 80010f8 <APP_main+0x948>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	4875      	ldr	r0, [pc, #468]	; (8001234 <APP_main+0xa84>)
 800105e:	f7ff fb3b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 420, 0x1010113);
 8001062:	4a61      	ldr	r2, [pc, #388]	; (80011e8 <APP_main+0xa38>)
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	4873      	ldr	r0, [pc, #460]	; (8001238 <APP_main+0xa88>)
 800106a:	f7ff fb35 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 424, 0x8067);
 800106e:	f248 0267 	movw	r2, #32871	; 0x8067
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	4871      	ldr	r0, [pc, #452]	; (800123c <APP_main+0xa8c>)
 8001078:	f7ff fb2e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 428, 0xfe010113);
 800107c:	a320      	add	r3, pc, #128	; (adr r3, 8001100 <APP_main+0x950>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	486f      	ldr	r0, [pc, #444]	; (8001240 <APP_main+0xa90>)
 8001084:	f7ff fb28 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 432, 0x812e23);
 8001088:	a31f      	add	r3, pc, #124	; (adr r3, 8001108 <APP_main+0x958>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	486d      	ldr	r0, [pc, #436]	; (8001244 <APP_main+0xa94>)
 8001090:	f7ff fb22 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 436, 0x2010413);
 8001094:	a31e      	add	r3, pc, #120	; (adr r3, 8001110 <APP_main+0x960>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	486b      	ldr	r0, [pc, #428]	; (8001248 <APP_main+0xa98>)
 800109c:	f7ff fb1c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 440, 0xfea42623);
 80010a0:	a31d      	add	r3, pc, #116	; (adr r3, 8001118 <APP_main+0x968>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	4869      	ldr	r0, [pc, #420]	; (800124c <APP_main+0xa9c>)
 80010a8:	f7ff fb16 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 444, 0xfeb42423);
 80010ac:	a31c      	add	r3, pc, #112	; (adr r3, 8001120 <APP_main+0x970>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	4867      	ldr	r0, [pc, #412]	; (8001250 <APP_main+0xaa0>)
 80010b4:	f7ff fb10 	bl	80006d8 <PUTFULL>
 80010b8:	e0cc      	b.n	8001254 <APP_main+0xaa4>
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	00c7c783 	.word	0x00c7c783
 80010c4:	00000000 	.word	0x00000000
 80010c8:	fef40623 	.word	0xfef40623
 80010cc:	00000000 	.word	0x00000000
 80010d0:	fe040793 	.word	0xfe040793
 80010d4:	00000000 	.word	0x00000000
 80010d8:	10012537 	.word	0x10012537
 80010dc:	00000000 	.word	0x00000000
 80010e0:	ff010113 	.word	0xff010113
 80010e4:	00000000 	.word	0x00000000
 80010e8:	00812623 	.word	0x00812623
 80010ec:	00000000 	.word	0x00000000
 80010f0:	01010413 	.word	0x01010413
 80010f4:	00000000 	.word	0x00000000
 80010f8:	00c12403 	.word	0x00c12403
 80010fc:	00000000 	.word	0x00000000
 8001100:	fe010113 	.word	0xfe010113
 8001104:	00000000 	.word	0x00000000
 8001108:	00812e23 	.word	0x00812e23
 800110c:	00000000 	.word	0x00000000
 8001110:	02010413 	.word	0x02010413
 8001114:	00000000 	.word	0x00000000
 8001118:	fea42623 	.word	0xfea42623
 800111c:	00000000 	.word	0x00000000
 8001120:	feb42423 	.word	0xfeb42423
 8001124:	00000000 	.word	0x00000000
 8001128:	fec42223 	.word	0xfec42223
 800112c:	00000000 	.word	0x00000000
 8001130:	01c12403 	.word	0x01c12403
 8001134:	00000000 	.word	0x00000000
 8001138:	02010113 	.word	0x02010113
 800113c:	00000000 	.word	0x00000000
 8001140:	800000e4 	.word	0x800000e4
 8001144:	800000e8 	.word	0x800000e8
 8001148:	800000ec 	.word	0x800000ec
 800114c:	800000f0 	.word	0x800000f0
 8001150:	800000f4 	.word	0x800000f4
 8001154:	00c00613 	.word	0x00c00613
 8001158:	800000f8 	.word	0x800000f8
 800115c:	00078593 	.word	0x00078593
 8001160:	800000fc 	.word	0x800000fc
 8001164:	54000537 	.word	0x54000537
 8001168:	80000100 	.word	0x80000100
 800116c:	430000ef 	.word	0x430000ef
 8001170:	80000104 	.word	0x80000104
 8001174:	00100613 	.word	0x00100613
 8001178:	80000108 	.word	0x80000108
 800117c:	00100593 	.word	0x00100593
 8001180:	8000010c 	.word	0x8000010c
 8001184:	80000110 	.word	0x80000110
 8001188:	110000ef 	.word	0x110000ef
 800118c:	80000114 	.word	0x80000114
 8001190:	0fa00513 	.word	0x0fa00513
 8001194:	80000118 	.word	0x80000118
 8001198:	8000011c 	.word	0x8000011c
 800119c:	1c0000ef 	.word	0x1c0000ef
 80011a0:	80000120 	.word	0x80000120
 80011a4:	80000124 	.word	0x80000124
 80011a8:	80000128 	.word	0x80000128
 80011ac:	8000012c 	.word	0x8000012c
 80011b0:	0f4000ef 	.word	0x0f4000ef
 80011b4:	80000130 	.word	0x80000130
 80011b8:	80000134 	.word	0x80000134
 80011bc:	80000138 	.word	0x80000138
 80011c0:	1a4000ef 	.word	0x1a4000ef
 80011c4:	8000013c 	.word	0x8000013c
 80011c8:	80000140 	.word	0x80000140
 80011cc:	f85ff06f 	.word	0xf85ff06f
 80011d0:	80000144 	.word	0x80000144
 80011d4:	80000148 	.word	0x80000148
 80011d8:	8000014c 	.word	0x8000014c
 80011dc:	80000150 	.word	0x80000150
 80011e0:	80000154 	.word	0x80000154
 80011e4:	80000158 	.word	0x80000158
 80011e8:	01010113 	.word	0x01010113
 80011ec:	8000015c 	.word	0x8000015c
 80011f0:	80000160 	.word	0x80000160
 80011f4:	80000164 	.word	0x80000164
 80011f8:	80000168 	.word	0x80000168
 80011fc:	8000016c 	.word	0x8000016c
 8001200:	80000170 	.word	0x80000170
 8001204:	80000174 	.word	0x80000174
 8001208:	80000178 	.word	0x80000178
 800120c:	8000017c 	.word	0x8000017c
 8001210:	00078513 	.word	0x00078513
 8001214:	80000180 	.word	0x80000180
 8001218:	80000184 	.word	0x80000184
 800121c:	80000188 	.word	0x80000188
 8001220:	8000018c 	.word	0x8000018c
 8001224:	80000190 	.word	0x80000190
 8001228:	80000194 	.word	0x80000194
 800122c:	80000198 	.word	0x80000198
 8001230:	8000019c 	.word	0x8000019c
 8001234:	800001a0 	.word	0x800001a0
 8001238:	800001a4 	.word	0x800001a4
 800123c:	800001a8 	.word	0x800001a8
 8001240:	800001ac 	.word	0x800001ac
 8001244:	800001b0 	.word	0x800001b0
 8001248:	800001b4 	.word	0x800001b4
 800124c:	800001b8 	.word	0x800001b8
 8001250:	800001bc 	.word	0x800001bc
        PUTFULL(DTIM_BASE_ADDR + 448, 0xfec42783);
 8001254:	a3a6      	add	r3, pc, #664	; (adr r3, 80014f0 <APP_main+0xd40>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	48cb      	ldr	r0, [pc, #812]	; (8001588 <APP_main+0xdd8>)
 800125c:	f7ff fa3c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 452, 0x87a703);
 8001260:	a39d      	add	r3, pc, #628	; (adr r3, 80014d8 <APP_main+0xd28>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	48c9      	ldr	r0, [pc, #804]	; (800158c <APP_main+0xddc>)
 8001268:	f7ff fa36 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 456, 0xfe842783);
 800126c:	a39c      	add	r3, pc, #624	; (adr r3, 80014e0 <APP_main+0xd30>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	48c7      	ldr	r0, [pc, #796]	; (8001590 <APP_main+0xde0>)
 8001274:	f7ff fa30 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 460, 0xf76733);
 8001278:	a39b      	add	r3, pc, #620	; (adr r3, 80014e8 <APP_main+0xd38>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	48c5      	ldr	r0, [pc, #788]	; (8001594 <APP_main+0xde4>)
 8001280:	f7ff fa2a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 464, 0xfec42783);
 8001284:	a39a      	add	r3, pc, #616	; (adr r3, 80014f0 <APP_main+0xd40>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	48c3      	ldr	r0, [pc, #780]	; (8001598 <APP_main+0xde8>)
 800128c:	f7ff fa24 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 468, 0xe7a423);
 8001290:	a399      	add	r3, pc, #612	; (adr r3, 80014f8 <APP_main+0xd48>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	48c1      	ldr	r0, [pc, #772]	; (800159c <APP_main+0xdec>)
 8001298:	f7ff fa1e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 472, 0x13);
 800129c:	f04f 0213 	mov.w	r2, #19
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	48be      	ldr	r0, [pc, #760]	; (80015a0 <APP_main+0xdf0>)
 80012a6:	f7ff fa17 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 476, 0x1c12403);
 80012aa:	a395      	add	r3, pc, #596	; (adr r3, 8001500 <APP_main+0xd50>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	48bc      	ldr	r0, [pc, #752]	; (80015a4 <APP_main+0xdf4>)
 80012b2:	f7ff fa11 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 480, 0x2010113);
 80012b6:	a394      	add	r3, pc, #592	; (adr r3, 8001508 <APP_main+0xd58>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	48ba      	ldr	r0, [pc, #744]	; (80015a8 <APP_main+0xdf8>)
 80012be:	f7ff fa0b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 484, 0x8067);
 80012c2:	f248 0267 	movw	r2, #32871	; 0x8067
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	48b8      	ldr	r0, [pc, #736]	; (80015ac <APP_main+0xdfc>)
 80012cc:	f7ff fa04 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 488, 0xfe010113);
 80012d0:	a38f      	add	r3, pc, #572	; (adr r3, 8001510 <APP_main+0xd60>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	48b6      	ldr	r0, [pc, #728]	; (80015b0 <APP_main+0xe00>)
 80012d8:	f7ff f9fe 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 492, 0x812e23);
 80012dc:	a38e      	add	r3, pc, #568	; (adr r3, 8001518 <APP_main+0xd68>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	48b4      	ldr	r0, [pc, #720]	; (80015b4 <APP_main+0xe04>)
 80012e4:	f7ff f9f8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 496, 0x2010413);
 80012e8:	a38d      	add	r3, pc, #564	; (adr r3, 8001520 <APP_main+0xd70>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	48b2      	ldr	r0, [pc, #712]	; (80015b8 <APP_main+0xe08>)
 80012f0:	f7ff f9f2 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 500, 0xfea42623);
 80012f4:	a38c      	add	r3, pc, #560	; (adr r3, 8001528 <APP_main+0xd78>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	48b0      	ldr	r0, [pc, #704]	; (80015bc <APP_main+0xe0c>)
 80012fc:	f7ff f9ec 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 504, 0xfeb42423);
 8001300:	a38b      	add	r3, pc, #556	; (adr r3, 8001530 <APP_main+0xd80>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	48ae      	ldr	r0, [pc, #696]	; (80015c0 <APP_main+0xe10>)
 8001308:	f7ff f9e6 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 508, 0xfec42783);
 800130c:	a378      	add	r3, pc, #480	; (adr r3, 80014f0 <APP_main+0xd40>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	48ac      	ldr	r0, [pc, #688]	; (80015c4 <APP_main+0xe14>)
 8001314:	f7ff f9e0 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 512, 0x7a703);
 8001318:	4aab      	ldr	r2, [pc, #684]	; (80015c8 <APP_main+0xe18>)
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	48ab      	ldr	r0, [pc, #684]	; (80015cc <APP_main+0xe1c>)
 8001320:	f7ff f9da 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 516, 0xfe842783);
 8001324:	a36e      	add	r3, pc, #440	; (adr r3, 80014e0 <APP_main+0xd30>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	48a9      	ldr	r0, [pc, #676]	; (80015d0 <APP_main+0xe20>)
 800132c:	f7ff f9d4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 520, 0xf777b3);
 8001330:	a381      	add	r3, pc, #516	; (adr r3, 8001538 <APP_main+0xd88>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	48a7      	ldr	r0, [pc, #668]	; (80015d4 <APP_main+0xe24>)
 8001338:	f7ff f9ce 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 524, 0xf037b3);
 800133c:	a380      	add	r3, pc, #512	; (adr r3, 8001540 <APP_main+0xd90>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	48a5      	ldr	r0, [pc, #660]	; (80015d8 <APP_main+0xe28>)
 8001344:	f7ff f9c8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 528, 0xff7f793);
 8001348:	a37f      	add	r3, pc, #508	; (adr r3, 8001548 <APP_main+0xd98>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	48a3      	ldr	r0, [pc, #652]	; (80015dc <APP_main+0xe2c>)
 8001350:	f7ff f9c2 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 532, 0x78513);
 8001354:	4aa2      	ldr	r2, [pc, #648]	; (80015e0 <APP_main+0xe30>)
 8001356:	f04f 0300 	mov.w	r3, #0
 800135a:	48a2      	ldr	r0, [pc, #648]	; (80015e4 <APP_main+0xe34>)
 800135c:	f7ff f9bc 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 536, 0x1c12403);
 8001360:	a367      	add	r3, pc, #412	; (adr r3, 8001500 <APP_main+0xd50>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	48a0      	ldr	r0, [pc, #640]	; (80015e8 <APP_main+0xe38>)
 8001368:	f7ff f9b6 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 540, 0x2010113);
 800136c:	a366      	add	r3, pc, #408	; (adr r3, 8001508 <APP_main+0xd58>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	489e      	ldr	r0, [pc, #632]	; (80015ec <APP_main+0xe3c>)
 8001374:	f7ff f9b0 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 544, 0x8067);
 8001378:	f248 0267 	movw	r2, #32871	; 0x8067
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	489b      	ldr	r0, [pc, #620]	; (80015f0 <APP_main+0xe40>)
 8001382:	f7ff f9a9 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 548, 0xfe010113);
 8001386:	a362      	add	r3, pc, #392	; (adr r3, 8001510 <APP_main+0xd60>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	4899      	ldr	r0, [pc, #612]	; (80015f4 <APP_main+0xe44>)
 800138e:	f7ff f9a3 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 552, 0x812e23);
 8001392:	a361      	add	r3, pc, #388	; (adr r3, 8001518 <APP_main+0xd68>)
 8001394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001398:	4897      	ldr	r0, [pc, #604]	; (80015f8 <APP_main+0xe48>)
 800139a:	f7ff f99d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 556, 0x2010413);
 800139e:	a360      	add	r3, pc, #384	; (adr r3, 8001520 <APP_main+0xd70>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	4895      	ldr	r0, [pc, #596]	; (80015fc <APP_main+0xe4c>)
 80013a6:	f7ff f997 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 560, 0xfea42623);
 80013aa:	a35f      	add	r3, pc, #380	; (adr r3, 8001528 <APP_main+0xd78>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	4893      	ldr	r0, [pc, #588]	; (8001600 <APP_main+0xe50>)
 80013b2:	f7ff f991 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 564, 0xfeb42423);
 80013b6:	a35e      	add	r3, pc, #376	; (adr r3, 8001530 <APP_main+0xd80>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	4891      	ldr	r0, [pc, #580]	; (8001604 <APP_main+0xe54>)
 80013be:	f7ff f98b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 568, 0x60793);
 80013c2:	4a91      	ldr	r2, [pc, #580]	; (8001608 <APP_main+0xe58>)
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	4890      	ldr	r0, [pc, #576]	; (800160c <APP_main+0xe5c>)
 80013ca:	f7ff f985 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 572, 0xfef403a3);
 80013ce:	a360      	add	r3, pc, #384	; (adr r3, 8001550 <APP_main+0xda0>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	488e      	ldr	r0, [pc, #568]	; (8001610 <APP_main+0xe60>)
 80013d6:	f7ff f97f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 576, 0xfe744783);
 80013da:	a35f      	add	r3, pc, #380	; (adr r3, 8001558 <APP_main+0xda8>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	488c      	ldr	r0, [pc, #560]	; (8001614 <APP_main+0xe64>)
 80013e2:	f7ff f979 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 580, 0x2078063);
 80013e6:	a35e      	add	r3, pc, #376	; (adr r3, 8001560 <APP_main+0xdb0>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	488a      	ldr	r0, [pc, #552]	; (8001618 <APP_main+0xe68>)
 80013ee:	f7ff f973 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 584, 0xfec42783);
 80013f2:	a33f      	add	r3, pc, #252	; (adr r3, 80014f0 <APP_main+0xd40>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	4888      	ldr	r0, [pc, #544]	; (800161c <APP_main+0xe6c>)
 80013fa:	f7ff f96d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 588, 0xc7a703);
 80013fe:	a35a      	add	r3, pc, #360	; (adr r3, 8001568 <APP_main+0xdb8>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	4886      	ldr	r0, [pc, #536]	; (8001620 <APP_main+0xe70>)
 8001406:	f7ff f967 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 592, 0xfe842783);
 800140a:	a335      	add	r3, pc, #212	; (adr r3, 80014e0 <APP_main+0xd30>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	4884      	ldr	r0, [pc, #528]	; (8001624 <APP_main+0xe74>)
 8001412:	f7ff f961 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 596, 0xf76733);
 8001416:	a334      	add	r3, pc, #208	; (adr r3, 80014e8 <APP_main+0xd38>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	4882      	ldr	r0, [pc, #520]	; (8001628 <APP_main+0xe78>)
 800141e:	f7ff f95b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 600, 0xfec42783);
 8001422:	a333      	add	r3, pc, #204	; (adr r3, 80014f0 <APP_main+0xd40>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	4880      	ldr	r0, [pc, #512]	; (800162c <APP_main+0xe7c>)
 800142a:	f7ff f955 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 604, 0xe7a623);
 800142e:	a350      	add	r3, pc, #320	; (adr r3, 8001570 <APP_main+0xdc0>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	487e      	ldr	r0, [pc, #504]	; (8001630 <APP_main+0xe80>)
 8001436:	f7ff f94f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 608, 0x200006f);
 800143a:	4a7e      	ldr	r2, [pc, #504]	; (8001634 <APP_main+0xe84>)
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	487d      	ldr	r0, [pc, #500]	; (8001638 <APP_main+0xe88>)
 8001442:	f7ff f949 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 612, 0xfec42783);
 8001446:	a32a      	add	r3, pc, #168	; (adr r3, 80014f0 <APP_main+0xd40>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	487b      	ldr	r0, [pc, #492]	; (800163c <APP_main+0xe8c>)
 800144e:	f7ff f943 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 616, 0xc7a703);
 8001452:	a345      	add	r3, pc, #276	; (adr r3, 8001568 <APP_main+0xdb8>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	4879      	ldr	r0, [pc, #484]	; (8001640 <APP_main+0xe90>)
 800145a:	f7ff f93d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 620, 0xfe842783);
 800145e:	a320      	add	r3, pc, #128	; (adr r3, 80014e0 <APP_main+0xd30>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	4877      	ldr	r0, [pc, #476]	; (8001644 <APP_main+0xe94>)
 8001466:	f7ff f937 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 624, 0xfff7c793);
 800146a:	4a77      	ldr	r2, [pc, #476]	; (8001648 <APP_main+0xe98>)
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	4876      	ldr	r0, [pc, #472]	; (800164c <APP_main+0xe9c>)
 8001472:	f7ff f931 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 628, 0xf77733);
 8001476:	a340      	add	r3, pc, #256	; (adr r3, 8001578 <APP_main+0xdc8>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	4874      	ldr	r0, [pc, #464]	; (8001650 <APP_main+0xea0>)
 800147e:	f7ff f92b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 632, 0xfec42783);
 8001482:	a31b      	add	r3, pc, #108	; (adr r3, 80014f0 <APP_main+0xd40>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	4872      	ldr	r0, [pc, #456]	; (8001654 <APP_main+0xea4>)
 800148a:	f7ff f925 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 636, 0xe7a623);
 800148e:	a338      	add	r3, pc, #224	; (adr r3, 8001570 <APP_main+0xdc0>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	4870      	ldr	r0, [pc, #448]	; (8001658 <APP_main+0xea8>)
 8001496:	f7ff f91f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 640, 0x13);
 800149a:	f04f 0213 	mov.w	r2, #19
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	486e      	ldr	r0, [pc, #440]	; (800165c <APP_main+0xeac>)
 80014a4:	f7ff f918 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 644, 0x1c12403);
 80014a8:	a315      	add	r3, pc, #84	; (adr r3, 8001500 <APP_main+0xd50>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	486c      	ldr	r0, [pc, #432]	; (8001660 <APP_main+0xeb0>)
 80014b0:	f7ff f912 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 648, 0x2010113);
 80014b4:	a314      	add	r3, pc, #80	; (adr r3, 8001508 <APP_main+0xd58>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	486a      	ldr	r0, [pc, #424]	; (8001664 <APP_main+0xeb4>)
 80014bc:	f7ff f90c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 652, 0x8067);
 80014c0:	f248 0267 	movw	r2, #32871	; 0x8067
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	4867      	ldr	r0, [pc, #412]	; (8001668 <APP_main+0xeb8>)
 80014ca:	f7ff f905 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 656, 0xff010113);
 80014ce:	a32c      	add	r3, pc, #176	; (adr r3, 8001580 <APP_main+0xdd0>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	e0ca      	b.n	800166c <APP_main+0xebc>
 80014d6:	bf00      	nop
 80014d8:	0087a703 	.word	0x0087a703
 80014dc:	00000000 	.word	0x00000000
 80014e0:	fe842783 	.word	0xfe842783
 80014e4:	00000000 	.word	0x00000000
 80014e8:	00f76733 	.word	0x00f76733
 80014ec:	00000000 	.word	0x00000000
 80014f0:	fec42783 	.word	0xfec42783
 80014f4:	00000000 	.word	0x00000000
 80014f8:	00e7a423 	.word	0x00e7a423
 80014fc:	00000000 	.word	0x00000000
 8001500:	01c12403 	.word	0x01c12403
 8001504:	00000000 	.word	0x00000000
 8001508:	02010113 	.word	0x02010113
 800150c:	00000000 	.word	0x00000000
 8001510:	fe010113 	.word	0xfe010113
 8001514:	00000000 	.word	0x00000000
 8001518:	00812e23 	.word	0x00812e23
 800151c:	00000000 	.word	0x00000000
 8001520:	02010413 	.word	0x02010413
 8001524:	00000000 	.word	0x00000000
 8001528:	fea42623 	.word	0xfea42623
 800152c:	00000000 	.word	0x00000000
 8001530:	feb42423 	.word	0xfeb42423
 8001534:	00000000 	.word	0x00000000
 8001538:	00f777b3 	.word	0x00f777b3
 800153c:	00000000 	.word	0x00000000
 8001540:	00f037b3 	.word	0x00f037b3
 8001544:	00000000 	.word	0x00000000
 8001548:	0ff7f793 	.word	0x0ff7f793
 800154c:	00000000 	.word	0x00000000
 8001550:	fef403a3 	.word	0xfef403a3
 8001554:	00000000 	.word	0x00000000
 8001558:	fe744783 	.word	0xfe744783
 800155c:	00000000 	.word	0x00000000
 8001560:	02078063 	.word	0x02078063
 8001564:	00000000 	.word	0x00000000
 8001568:	00c7a703 	.word	0x00c7a703
 800156c:	00000000 	.word	0x00000000
 8001570:	00e7a623 	.word	0x00e7a623
 8001574:	00000000 	.word	0x00000000
 8001578:	00f77733 	.word	0x00f77733
 800157c:	00000000 	.word	0x00000000
 8001580:	ff010113 	.word	0xff010113
 8001584:	00000000 	.word	0x00000000
 8001588:	800001c0 	.word	0x800001c0
 800158c:	800001c4 	.word	0x800001c4
 8001590:	800001c8 	.word	0x800001c8
 8001594:	800001cc 	.word	0x800001cc
 8001598:	800001d0 	.word	0x800001d0
 800159c:	800001d4 	.word	0x800001d4
 80015a0:	800001d8 	.word	0x800001d8
 80015a4:	800001dc 	.word	0x800001dc
 80015a8:	800001e0 	.word	0x800001e0
 80015ac:	800001e4 	.word	0x800001e4
 80015b0:	800001e8 	.word	0x800001e8
 80015b4:	800001ec 	.word	0x800001ec
 80015b8:	800001f0 	.word	0x800001f0
 80015bc:	800001f4 	.word	0x800001f4
 80015c0:	800001f8 	.word	0x800001f8
 80015c4:	800001fc 	.word	0x800001fc
 80015c8:	0007a703 	.word	0x0007a703
 80015cc:	80000200 	.word	0x80000200
 80015d0:	80000204 	.word	0x80000204
 80015d4:	80000208 	.word	0x80000208
 80015d8:	8000020c 	.word	0x8000020c
 80015dc:	80000210 	.word	0x80000210
 80015e0:	00078513 	.word	0x00078513
 80015e4:	80000214 	.word	0x80000214
 80015e8:	80000218 	.word	0x80000218
 80015ec:	8000021c 	.word	0x8000021c
 80015f0:	80000220 	.word	0x80000220
 80015f4:	80000224 	.word	0x80000224
 80015f8:	80000228 	.word	0x80000228
 80015fc:	8000022c 	.word	0x8000022c
 8001600:	80000230 	.word	0x80000230
 8001604:	80000234 	.word	0x80000234
 8001608:	00060793 	.word	0x00060793
 800160c:	80000238 	.word	0x80000238
 8001610:	8000023c 	.word	0x8000023c
 8001614:	80000240 	.word	0x80000240
 8001618:	80000244 	.word	0x80000244
 800161c:	80000248 	.word	0x80000248
 8001620:	8000024c 	.word	0x8000024c
 8001624:	80000250 	.word	0x80000250
 8001628:	80000254 	.word	0x80000254
 800162c:	80000258 	.word	0x80000258
 8001630:	8000025c 	.word	0x8000025c
 8001634:	0200006f 	.word	0x0200006f
 8001638:	80000260 	.word	0x80000260
 800163c:	80000264 	.word	0x80000264
 8001640:	80000268 	.word	0x80000268
 8001644:	8000026c 	.word	0x8000026c
 8001648:	fff7c793 	.word	0xfff7c793
 800164c:	80000270 	.word	0x80000270
 8001650:	80000274 	.word	0x80000274
 8001654:	80000278 	.word	0x80000278
 8001658:	8000027c 	.word	0x8000027c
 800165c:	80000280 	.word	0x80000280
 8001660:	80000284 	.word	0x80000284
 8001664:	80000288 	.word	0x80000288
 8001668:	8000028c 	.word	0x8000028c
 800166c:	48cc      	ldr	r0, [pc, #816]	; (80019a0 <APP_main+0x11f0>)
 800166e:	f7ff f833 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 660, 0x812623);
 8001672:	a399      	add	r3, pc, #612	; (adr r3, 80018d8 <APP_main+0x1128>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	48ca      	ldr	r0, [pc, #808]	; (80019a4 <APP_main+0x11f4>)
 800167a:	f7ff f82d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 664, 0x1010413);
 800167e:	a398      	add	r3, pc, #608	; (adr r3, 80018e0 <APP_main+0x1130>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	48c8      	ldr	r0, [pc, #800]	; (80019a8 <APP_main+0x11f8>)
 8001686:	f7ff f827 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 668, 0x13);
 800168a:	f04f 0213 	mov.w	r2, #19
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	48c6      	ldr	r0, [pc, #792]	; (80019ac <APP_main+0x11fc>)
 8001694:	f7ff f820 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 672, 0xc12403);
 8001698:	a393      	add	r3, pc, #588	; (adr r3, 80018e8 <APP_main+0x1138>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	48c4      	ldr	r0, [pc, #784]	; (80019b0 <APP_main+0x1200>)
 80016a0:	f7ff f81a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 676, 0x1010113);
 80016a4:	4ac3      	ldr	r2, [pc, #780]	; (80019b4 <APP_main+0x1204>)
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	48c3      	ldr	r0, [pc, #780]	; (80019b8 <APP_main+0x1208>)
 80016ac:	f7ff f814 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 680, 0x8067);
 80016b0:	f248 0267 	movw	r2, #32871	; 0x8067
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	48c0      	ldr	r0, [pc, #768]	; (80019bc <APP_main+0x120c>)
 80016ba:	f7ff f80d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 684, 0xff010113);
 80016be:	a38c      	add	r3, pc, #560	; (adr r3, 80018f0 <APP_main+0x1140>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	48be      	ldr	r0, [pc, #760]	; (80019c0 <APP_main+0x1210>)
 80016c6:	f7ff f807 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 688, 0x812623);
 80016ca:	a383      	add	r3, pc, #524	; (adr r3, 80018d8 <APP_main+0x1128>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	48bc      	ldr	r0, [pc, #752]	; (80019c4 <APP_main+0x1214>)
 80016d2:	f7ff f801 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 692, 0x1010413);
 80016d6:	a382      	add	r3, pc, #520	; (adr r3, 80018e0 <APP_main+0x1130>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	48ba      	ldr	r0, [pc, #744]	; (80019c8 <APP_main+0x1218>)
 80016de:	f7fe fffb 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 696, 0x2000737);
 80016e2:	4aba      	ldr	r2, [pc, #744]	; (80019cc <APP_main+0x121c>)
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	48b9      	ldr	r0, [pc, #740]	; (80019d0 <APP_main+0x1220>)
 80016ea:	f7fe fff5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 700, 0xc7b7);
 80016ee:	f24c 72b7 	movw	r2, #51127	; 0xc7b7
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	48b7      	ldr	r0, [pc, #732]	; (80019d4 <APP_main+0x1224>)
 80016f8:	f7fe ffee 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 704, 0xf707b3);
 80016fc:	4ab6      	ldr	r2, [pc, #728]	; (80019d8 <APP_main+0x1228>)
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	48b6      	ldr	r0, [pc, #728]	; (80019dc <APP_main+0x122c>)
 8001704:	f7fe ffe8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 708, 0xff87a703);
 8001708:	a37b      	add	r3, pc, #492	; (adr r3, 80018f8 <APP_main+0x1148>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	48b4      	ldr	r0, [pc, #720]	; (80019e0 <APP_main+0x1230>)
 8001710:	f7fe ffe2 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 712, 0xffc7a783);
 8001714:	a37a      	add	r3, pc, #488	; (adr r3, 8001900 <APP_main+0x1150>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	48b2      	ldr	r0, [pc, #712]	; (80019e4 <APP_main+0x1234>)
 800171c:	f7fe ffdc 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 716, 0x70513);
 8001720:	4ab1      	ldr	r2, [pc, #708]	; (80019e8 <APP_main+0x1238>)
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	48b1      	ldr	r0, [pc, #708]	; (80019ec <APP_main+0x123c>)
 8001728:	f7fe ffd6 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 720, 0x78593);
 800172c:	4ab0      	ldr	r2, [pc, #704]	; (80019f0 <APP_main+0x1240>)
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	48b0      	ldr	r0, [pc, #704]	; (80019f4 <APP_main+0x1244>)
 8001734:	f7fe ffd0 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 724, 0xc12403);
 8001738:	a36b      	add	r3, pc, #428	; (adr r3, 80018e8 <APP_main+0x1138>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	48ae      	ldr	r0, [pc, #696]	; (80019f8 <APP_main+0x1248>)
 8001740:	f7fe ffca 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 728, 0x1010113);
 8001744:	4a9b      	ldr	r2, [pc, #620]	; (80019b4 <APP_main+0x1204>)
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	48ac      	ldr	r0, [pc, #688]	; (80019fc <APP_main+0x124c>)
 800174c:	f7fe ffc4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 732, 0x8067);
 8001750:	f248 0267 	movw	r2, #32871	; 0x8067
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	48a9      	ldr	r0, [pc, #676]	; (8001a00 <APP_main+0x1250>)
 800175a:	f7fe ffbd 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 736, 0xfc010113);
 800175e:	a36a      	add	r3, pc, #424	; (adr r3, 8001908 <APP_main+0x1158>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	48a7      	ldr	r0, [pc, #668]	; (8001a04 <APP_main+0x1254>)
 8001766:	f7fe ffb7 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 740, 0x2112e23);
 800176a:	a369      	add	r3, pc, #420	; (adr r3, 8001910 <APP_main+0x1160>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	48a5      	ldr	r0, [pc, #660]	; (8001a08 <APP_main+0x1258>)
 8001772:	f7fe ffb1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 744, 0x2812c23);
 8001776:	a368      	add	r3, pc, #416	; (adr r3, 8001918 <APP_main+0x1168>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	48a3      	ldr	r0, [pc, #652]	; (8001a0c <APP_main+0x125c>)
 800177e:	f7fe ffab 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 748, 0x3212a23);
 8001782:	a367      	add	r3, pc, #412	; (adr r3, 8001920 <APP_main+0x1170>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	48a1      	ldr	r0, [pc, #644]	; (8001a10 <APP_main+0x1260>)
 800178a:	f7fe ffa5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 752, 0x3312823);
 800178e:	a366      	add	r3, pc, #408	; (adr r3, 8001928 <APP_main+0x1178>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	489f      	ldr	r0, [pc, #636]	; (8001a14 <APP_main+0x1264>)
 8001796:	f7fe ff9f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 756, 0x3412623);
 800179a:	a365      	add	r3, pc, #404	; (adr r3, 8001930 <APP_main+0x1180>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	489d      	ldr	r0, [pc, #628]	; (8001a18 <APP_main+0x1268>)
 80017a2:	f7fe ff99 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 760, 0x3512423);
 80017a6:	a364      	add	r3, pc, #400	; (adr r3, 8001938 <APP_main+0x1188>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	489b      	ldr	r0, [pc, #620]	; (8001a1c <APP_main+0x126c>)
 80017ae:	f7fe ff93 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 764, 0x4010413);
 80017b2:	a363      	add	r3, pc, #396	; (adr r3, 8001940 <APP_main+0x1190>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	4899      	ldr	r0, [pc, #612]	; (8001a20 <APP_main+0x1270>)
 80017ba:	f7fe ff8d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 768, 0xfca42423);
 80017be:	a362      	add	r3, pc, #392	; (adr r3, 8001948 <APP_main+0x1198>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	4897      	ldr	r0, [pc, #604]	; (8001a24 <APP_main+0x1274>)
 80017c6:	f7fe ff87 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 772, 0xfcb42623);
 80017ca:	a361      	add	r3, pc, #388	; (adr r3, 8001950 <APP_main+0x11a0>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	4895      	ldr	r0, [pc, #596]	; (8001a28 <APP_main+0x1278>)
 80017d2:	f7fe ff81 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 776, 0xfa5ff0ef);
 80017d6:	4a95      	ldr	r2, [pc, #596]	; (8001a2c <APP_main+0x127c>)
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	4894      	ldr	r0, [pc, #592]	; (8001a30 <APP_main+0x1280>)
 80017de:	f7fe ff7b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 780, 0x50613);
 80017e2:	4a94      	ldr	r2, [pc, #592]	; (8001a34 <APP_main+0x1284>)
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	4893      	ldr	r0, [pc, #588]	; (8001a38 <APP_main+0x1288>)
 80017ea:	f7fe ff75 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 784, 0x58693);
 80017ee:	4a93      	ldr	r2, [pc, #588]	; (8001a3c <APP_main+0x128c>)
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	4892      	ldr	r0, [pc, #584]	; (8001a40 <APP_main+0x1290>)
 80017f6:	f7fe ff6f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 788, 0xfc842803);
 80017fa:	a357      	add	r3, pc, #348	; (adr r3, 8001958 <APP_main+0x11a8>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	4890      	ldr	r0, [pc, #576]	; (8001a44 <APP_main+0x1294>)
 8001802:	f7fe ff69 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 792, 0xfcc42883);
 8001806:	a356      	add	r3, pc, #344	; (adr r3, 8001960 <APP_main+0x11b0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	488e      	ldr	r0, [pc, #568]	; (8001a48 <APP_main+0x1298>)
 800180e:	f7fe ff63 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 796, 0x80713);
 8001812:	4a8e      	ldr	r2, [pc, #568]	; (8001a4c <APP_main+0x129c>)
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	488d      	ldr	r0, [pc, #564]	; (8001a50 <APP_main+0x12a0>)
 800181a:	f7fe ff5d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 800, 0x88793);
 800181e:	4a8d      	ldr	r2, [pc, #564]	; (8001a54 <APP_main+0x12a4>)
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	488c      	ldr	r0, [pc, #560]	; (8001a58 <APP_main+0x12a8>)
 8001826:	f7fe ff57 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 804, 0x1f75593);
 800182a:	a34f      	add	r3, pc, #316	; (adr r3, 8001968 <APP_main+0x11b8>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	488a      	ldr	r0, [pc, #552]	; (8001a5c <APP_main+0x12ac>)
 8001832:	f7fe ff51 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 808, 0x179a93);
 8001836:	a34e      	add	r3, pc, #312	; (adr r3, 8001970 <APP_main+0x11c0>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	4888      	ldr	r0, [pc, #544]	; (8001a60 <APP_main+0x12b0>)
 800183e:	f7fe ff4b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 812, 0x155eab3);
 8001842:	a34d      	add	r3, pc, #308	; (adr r3, 8001978 <APP_main+0x11c8>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	4886      	ldr	r0, [pc, #536]	; (8001a64 <APP_main+0x12b4>)
 800184a:	f7fe ff45 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 816, 0x171a13);
 800184e:	a34c      	add	r3, pc, #304	; (adr r3, 8001980 <APP_main+0x11d0>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	4884      	ldr	r0, [pc, #528]	; (8001a68 <APP_main+0x12b8>)
 8001856:	f7fe ff3f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 820, 0xa0713);
 800185a:	4a84      	ldr	r2, [pc, #528]	; (8001a6c <APP_main+0x12bc>)
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	4883      	ldr	r0, [pc, #524]	; (8001a70 <APP_main+0x12c0>)
 8001862:	f7fe ff39 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 824, 0xa8793);
 8001866:	4a83      	ldr	r2, [pc, #524]	; (8001a74 <APP_main+0x12c4>)
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	4882      	ldr	r0, [pc, #520]	; (8001a78 <APP_main+0x12c8>)
 800186e:	f7fe ff33 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 828, 0x1070533);
 8001872:	a345      	add	r3, pc, #276	; (adr r3, 8001988 <APP_main+0x11d8>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	4880      	ldr	r0, [pc, #512]	; (8001a7c <APP_main+0x12cc>)
 800187a:	f7fe ff2d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 832, 0x50313);
 800187e:	4a80      	ldr	r2, [pc, #512]	; (8001a80 <APP_main+0x12d0>)
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	487f      	ldr	r0, [pc, #508]	; (8001a84 <APP_main+0x12d4>)
 8001886:	f7fe ff27 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 836, 0xe33333);
 800188a:	a341      	add	r3, pc, #260	; (adr r3, 8001990 <APP_main+0x11e0>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	487d      	ldr	r0, [pc, #500]	; (8001a88 <APP_main+0x12d8>)
 8001892:	f7fe ff21 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 840, 0x11785b3);
 8001896:	a340      	add	r3, pc, #256	; (adr r3, 8001998 <APP_main+0x11e8>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	487b      	ldr	r0, [pc, #492]	; (8001a8c <APP_main+0x12dc>)
 800189e:	f7fe ff1b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 844, 0xb307b3);
 80018a2:	4a7b      	ldr	r2, [pc, #492]	; (8001a90 <APP_main+0x12e0>)
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	487a      	ldr	r0, [pc, #488]	; (8001a94 <APP_main+0x12e4>)
 80018aa:	f7fe ff15 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 848, 0x78593);
 80018ae:	4a50      	ldr	r2, [pc, #320]	; (80019f0 <APP_main+0x1240>)
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	4878      	ldr	r0, [pc, #480]	; (8001a98 <APP_main+0x12e8>)
 80018b6:	f7fe ff0f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 852, 0x50713);
 80018ba:	4a78      	ldr	r2, [pc, #480]	; (8001a9c <APP_main+0x12ec>)
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	4877      	ldr	r0, [pc, #476]	; (8001aa0 <APP_main+0x12f0>)
 80018c2:	f7fe ff09 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 856, 0x58793);
 80018c6:	4a77      	ldr	r2, [pc, #476]	; (8001aa4 <APP_main+0x12f4>)
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	4876      	ldr	r0, [pc, #472]	; (8001aa8 <APP_main+0x12f8>)
 80018ce:	f7fe ff03 	bl	80006d8 <PUTFULL>
 80018d2:	e0eb      	b.n	8001aac <APP_main+0x12fc>
 80018d4:	f3af 8000 	nop.w
 80018d8:	00812623 	.word	0x00812623
 80018dc:	00000000 	.word	0x00000000
 80018e0:	01010413 	.word	0x01010413
 80018e4:	00000000 	.word	0x00000000
 80018e8:	00c12403 	.word	0x00c12403
 80018ec:	00000000 	.word	0x00000000
 80018f0:	ff010113 	.word	0xff010113
 80018f4:	00000000 	.word	0x00000000
 80018f8:	ff87a703 	.word	0xff87a703
 80018fc:	00000000 	.word	0x00000000
 8001900:	ffc7a783 	.word	0xffc7a783
 8001904:	00000000 	.word	0x00000000
 8001908:	fc010113 	.word	0xfc010113
 800190c:	00000000 	.word	0x00000000
 8001910:	02112e23 	.word	0x02112e23
 8001914:	00000000 	.word	0x00000000
 8001918:	02812c23 	.word	0x02812c23
 800191c:	00000000 	.word	0x00000000
 8001920:	03212a23 	.word	0x03212a23
 8001924:	00000000 	.word	0x00000000
 8001928:	03312823 	.word	0x03312823
 800192c:	00000000 	.word	0x00000000
 8001930:	03412623 	.word	0x03412623
 8001934:	00000000 	.word	0x00000000
 8001938:	03512423 	.word	0x03512423
 800193c:	00000000 	.word	0x00000000
 8001940:	04010413 	.word	0x04010413
 8001944:	00000000 	.word	0x00000000
 8001948:	fca42423 	.word	0xfca42423
 800194c:	00000000 	.word	0x00000000
 8001950:	fcb42623 	.word	0xfcb42623
 8001954:	00000000 	.word	0x00000000
 8001958:	fc842803 	.word	0xfc842803
 800195c:	00000000 	.word	0x00000000
 8001960:	fcc42883 	.word	0xfcc42883
 8001964:	00000000 	.word	0x00000000
 8001968:	01f75593 	.word	0x01f75593
 800196c:	00000000 	.word	0x00000000
 8001970:	00179a93 	.word	0x00179a93
 8001974:	00000000 	.word	0x00000000
 8001978:	0155eab3 	.word	0x0155eab3
 800197c:	00000000 	.word	0x00000000
 8001980:	00171a13 	.word	0x00171a13
 8001984:	00000000 	.word	0x00000000
 8001988:	01070533 	.word	0x01070533
 800198c:	00000000 	.word	0x00000000
 8001990:	00e33333 	.word	0x00e33333
 8001994:	00000000 	.word	0x00000000
 8001998:	011785b3 	.word	0x011785b3
 800199c:	00000000 	.word	0x00000000
 80019a0:	80000290 	.word	0x80000290
 80019a4:	80000294 	.word	0x80000294
 80019a8:	80000298 	.word	0x80000298
 80019ac:	8000029c 	.word	0x8000029c
 80019b0:	800002a0 	.word	0x800002a0
 80019b4:	01010113 	.word	0x01010113
 80019b8:	800002a4 	.word	0x800002a4
 80019bc:	800002a8 	.word	0x800002a8
 80019c0:	800002ac 	.word	0x800002ac
 80019c4:	800002b0 	.word	0x800002b0
 80019c8:	800002b4 	.word	0x800002b4
 80019cc:	02000737 	.word	0x02000737
 80019d0:	800002b8 	.word	0x800002b8
 80019d4:	800002bc 	.word	0x800002bc
 80019d8:	00f707b3 	.word	0x00f707b3
 80019dc:	800002c0 	.word	0x800002c0
 80019e0:	800002c4 	.word	0x800002c4
 80019e4:	800002c8 	.word	0x800002c8
 80019e8:	00070513 	.word	0x00070513
 80019ec:	800002cc 	.word	0x800002cc
 80019f0:	00078593 	.word	0x00078593
 80019f4:	800002d0 	.word	0x800002d0
 80019f8:	800002d4 	.word	0x800002d4
 80019fc:	800002d8 	.word	0x800002d8
 8001a00:	800002dc 	.word	0x800002dc
 8001a04:	800002e0 	.word	0x800002e0
 8001a08:	800002e4 	.word	0x800002e4
 8001a0c:	800002e8 	.word	0x800002e8
 8001a10:	800002ec 	.word	0x800002ec
 8001a14:	800002f0 	.word	0x800002f0
 8001a18:	800002f4 	.word	0x800002f4
 8001a1c:	800002f8 	.word	0x800002f8
 8001a20:	800002fc 	.word	0x800002fc
 8001a24:	80000300 	.word	0x80000300
 8001a28:	80000304 	.word	0x80000304
 8001a2c:	fa5ff0ef 	.word	0xfa5ff0ef
 8001a30:	80000308 	.word	0x80000308
 8001a34:	00050613 	.word	0x00050613
 8001a38:	8000030c 	.word	0x8000030c
 8001a3c:	00058693 	.word	0x00058693
 8001a40:	80000310 	.word	0x80000310
 8001a44:	80000314 	.word	0x80000314
 8001a48:	80000318 	.word	0x80000318
 8001a4c:	00080713 	.word	0x00080713
 8001a50:	8000031c 	.word	0x8000031c
 8001a54:	00088793 	.word	0x00088793
 8001a58:	80000320 	.word	0x80000320
 8001a5c:	80000324 	.word	0x80000324
 8001a60:	80000328 	.word	0x80000328
 8001a64:	8000032c 	.word	0x8000032c
 8001a68:	80000330 	.word	0x80000330
 8001a6c:	000a0713 	.word	0x000a0713
 8001a70:	80000334 	.word	0x80000334
 8001a74:	000a8793 	.word	0x000a8793
 8001a78:	80000338 	.word	0x80000338
 8001a7c:	8000033c 	.word	0x8000033c
 8001a80:	00050313 	.word	0x00050313
 8001a84:	80000340 	.word	0x80000340
 8001a88:	80000344 	.word	0x80000344
 8001a8c:	80000348 	.word	0x80000348
 8001a90:	00b307b3 	.word	0x00b307b3
 8001a94:	8000034c 	.word	0x8000034c
 8001a98:	80000350 	.word	0x80000350
 8001a9c:	00050713 	.word	0x00050713
 8001aa0:	80000354 	.word	0x80000354
 8001aa4:	00058793 	.word	0x00058793
 8001aa8:	80000358 	.word	0x80000358
        PUTFULL(DTIM_BASE_ADDR + 860, 0x1e75593);
 8001aac:	f20f 4338 	addw	r3, pc, #1080	; 0x438
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	48cc      	ldr	r0, [pc, #816]	; (8001de8 <APP_main+0x1638>)
 8001ab6:	f7fe fe0f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 864, 0x279993);
 8001aba:	a395      	add	r3, pc, #596	; (adr r3, 8001d10 <APP_main+0x1560>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	48ca      	ldr	r0, [pc, #808]	; (8001dec <APP_main+0x163c>)
 8001ac2:	f7fe fe09 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 868, 0x135e9b3);
 8001ac6:	a394      	add	r3, pc, #592	; (adr r3, 8001d18 <APP_main+0x1568>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	48c8      	ldr	r0, [pc, #800]	; (8001df0 <APP_main+0x1640>)
 8001ace:	f7fe fe03 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 872, 0x271913);
 8001ad2:	a393      	add	r3, pc, #588	; (adr r3, 8001d20 <APP_main+0x1570>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	48c6      	ldr	r0, [pc, #792]	; (8001df4 <APP_main+0x1644>)
 8001ada:	f7fe fdfd 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 876, 0x90713);
 8001ade:	4ac6      	ldr	r2, [pc, #792]	; (8001df8 <APP_main+0x1648>)
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	48c5      	ldr	r0, [pc, #788]	; (8001dfc <APP_main+0x164c>)
 8001ae6:	f7fe fdf7 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 880, 0x98793);
 8001aea:	4ac5      	ldr	r2, [pc, #788]	; (8001e00 <APP_main+0x1650>)
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	48c4      	ldr	r0, [pc, #784]	; (8001e04 <APP_main+0x1654>)
 8001af2:	f7fe fdf1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 884, 0x70513);
 8001af6:	4ac4      	ldr	r2, [pc, #784]	; (8001e08 <APP_main+0x1658>)
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	48c3      	ldr	r0, [pc, #780]	; (8001e0c <APP_main+0x165c>)
 8001afe:	f7fe fdeb 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 888, 0x78593);
 8001b02:	4ac3      	ldr	r2, [pc, #780]	; (8001e10 <APP_main+0x1660>)
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	48c2      	ldr	r0, [pc, #776]	; (8001e14 <APP_main+0x1664>)
 8001b0a:	f7fe fde5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 892, 0xa60733);
 8001b0e:	4ac2      	ldr	r2, [pc, #776]	; (8001e18 <APP_main+0x1668>)
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	48c1      	ldr	r0, [pc, #772]	; (8001e1c <APP_main+0x166c>)
 8001b16:	f7fe fddf 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 896, 0x70813);
 8001b1a:	4ac1      	ldr	r2, [pc, #772]	; (8001e20 <APP_main+0x1670>)
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	48c0      	ldr	r0, [pc, #768]	; (8001e24 <APP_main+0x1674>)
 8001b22:	f7fe fdd9 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 900, 0xc83833);
 8001b26:	a380      	add	r3, pc, #512	; (adr r3, 8001d28 <APP_main+0x1578>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	48be      	ldr	r0, [pc, #760]	; (8001e28 <APP_main+0x1678>)
 8001b2e:	f7fe fdd3 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 904, 0xb687b3);
 8001b32:	a37f      	add	r3, pc, #508	; (adr r3, 8001d30 <APP_main+0x1580>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	48bc      	ldr	r0, [pc, #752]	; (8001e2c <APP_main+0x167c>)
 8001b3a:	f7fe fdcd 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 908, 0xf806b3);
 8001b3e:	4abc      	ldr	r2, [pc, #752]	; (8001e30 <APP_main+0x1680>)
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	48bb      	ldr	r0, [pc, #748]	; (8001e34 <APP_main+0x1684>)
 8001b46:	f7fe fdc7 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 912, 0x68793);
 8001b4a:	4abb      	ldr	r2, [pc, #748]	; (8001e38 <APP_main+0x1688>)
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	48ba      	ldr	r0, [pc, #744]	; (8001e3c <APP_main+0x168c>)
 8001b52:	f7fe fdc1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 916, 0xfce42c23);
 8001b56:	a378      	add	r3, pc, #480	; (adr r3, 8001d38 <APP_main+0x1588>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	48b8      	ldr	r0, [pc, #736]	; (8001e40 <APP_main+0x1690>)
 8001b5e:	f7fe fdbb 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 920, 0xfcf42e23);
 8001b62:	a377      	add	r3, pc, #476	; (adr r3, 8001d40 <APP_main+0x1590>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	48b6      	ldr	r0, [pc, #728]	; (8001e44 <APP_main+0x1694>)
 8001b6a:	f7fe fdb5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 924, 0x13);
 8001b6e:	f04f 0213 	mov.w	r2, #19
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	48b4      	ldr	r0, [pc, #720]	; (8001e48 <APP_main+0x1698>)
 8001b78:	f7fe fdae 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 928, 0xf0dff0ef);
 8001b7c:	4ab3      	ldr	r2, [pc, #716]	; (8001e4c <APP_main+0x169c>)
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	48b3      	ldr	r0, [pc, #716]	; (8001e50 <APP_main+0x16a0>)
 8001b84:	f7fe fda8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 932, 0x50713);
 8001b88:	4ab2      	ldr	r2, [pc, #712]	; (8001e54 <APP_main+0x16a4>)
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	48b2      	ldr	r0, [pc, #712]	; (8001e58 <APP_main+0x16a8>)
 8001b90:	f7fe fda2 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 936, 0x58793);
 8001b94:	4ab1      	ldr	r2, [pc, #708]	; (8001e5c <APP_main+0x16ac>)
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	48b1      	ldr	r0, [pc, #708]	; (8001e60 <APP_main+0x16b0>)
 8001b9c:	f7fe fd9c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 940, 0xfdc42683);
 8001ba0:	a369      	add	r3, pc, #420	; (adr r3, 8001d48 <APP_main+0x1598>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	48af      	ldr	r0, [pc, #700]	; (8001e64 <APP_main+0x16b4>)
 8001ba8:	f7fe fd96 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 944, 0x78613);
 8001bac:	4aae      	ldr	r2, [pc, #696]	; (8001e68 <APP_main+0x16b8>)
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	48ae      	ldr	r0, [pc, #696]	; (8001e6c <APP_main+0x16bc>)
 8001bb4:	f7fe fd90 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 948, 0xfed666e3);
 8001bb8:	a365      	add	r3, pc, #404	; (adr r3, 8001d50 <APP_main+0x15a0>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	48ac      	ldr	r0, [pc, #688]	; (8001e70 <APP_main+0x16c0>)
 8001bc0:	f7fe fd8a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 952, 0xfdc42683);
 8001bc4:	a360      	add	r3, pc, #384	; (adr r3, 8001d48 <APP_main+0x1598>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	48aa      	ldr	r0, [pc, #680]	; (8001e74 <APP_main+0x16c4>)
 8001bcc:	f7fe fd84 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 956, 0x78613);
 8001bd0:	4aa5      	ldr	r2, [pc, #660]	; (8001e68 <APP_main+0x16b8>)
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	48a8      	ldr	r0, [pc, #672]	; (8001e78 <APP_main+0x16c8>)
 8001bd8:	f7fe fd7e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 960, 0xc69863);
 8001bdc:	a35e      	add	r3, pc, #376	; (adr r3, 8001d58 <APP_main+0x15a8>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	48a6      	ldr	r0, [pc, #664]	; (8001e7c <APP_main+0x16cc>)
 8001be4:	f7fe fd78 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 964, 0xfd842683);
 8001be8:	a35d      	add	r3, pc, #372	; (adr r3, 8001d60 <APP_main+0x15b0>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	48a4      	ldr	r0, [pc, #656]	; (8001e80 <APP_main+0x16d0>)
 8001bf0:	f7fe fd72 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 968, 0x70793);
 8001bf4:	4aa3      	ldr	r2, [pc, #652]	; (8001e84 <APP_main+0x16d4>)
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	48a3      	ldr	r0, [pc, #652]	; (8001e88 <APP_main+0x16d8>)
 8001bfc:	f7fe fd6c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 972, 0xfcd7eae3);
 8001c00:	a359      	add	r3, pc, #356	; (adr r3, 8001d68 <APP_main+0x15b8>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	48a1      	ldr	r0, [pc, #644]	; (8001e8c <APP_main+0x16dc>)
 8001c08:	f7fe fd66 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 976, 0x13);
 8001c0c:	f04f 0213 	mov.w	r2, #19
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	489e      	ldr	r0, [pc, #632]	; (8001e90 <APP_main+0x16e0>)
 8001c16:	f7fe fd5f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 980, 0x3c12083);
 8001c1a:	a355      	add	r3, pc, #340	; (adr r3, 8001d70 <APP_main+0x15c0>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	489c      	ldr	r0, [pc, #624]	; (8001e94 <APP_main+0x16e4>)
 8001c22:	f7fe fd59 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 984, 0x3812403);
 8001c26:	a354      	add	r3, pc, #336	; (adr r3, 8001d78 <APP_main+0x15c8>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	489a      	ldr	r0, [pc, #616]	; (8001e98 <APP_main+0x16e8>)
 8001c2e:	f7fe fd53 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 988, 0x3412903);
 8001c32:	a353      	add	r3, pc, #332	; (adr r3, 8001d80 <APP_main+0x15d0>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	4898      	ldr	r0, [pc, #608]	; (8001e9c <APP_main+0x16ec>)
 8001c3a:	f7fe fd4d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 992, 0x3012983);
 8001c3e:	a352      	add	r3, pc, #328	; (adr r3, 8001d88 <APP_main+0x15d8>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	4896      	ldr	r0, [pc, #600]	; (8001ea0 <APP_main+0x16f0>)
 8001c46:	f7fe fd47 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 996, 0x2c12a03);
 8001c4a:	a351      	add	r3, pc, #324	; (adr r3, 8001d90 <APP_main+0x15e0>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	4894      	ldr	r0, [pc, #592]	; (8001ea4 <APP_main+0x16f4>)
 8001c52:	f7fe fd41 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1000, 0x2812a83);
 8001c56:	a350      	add	r3, pc, #320	; (adr r3, 8001d98 <APP_main+0x15e8>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	4892      	ldr	r0, [pc, #584]	; (8001ea8 <APP_main+0x16f8>)
 8001c5e:	f7fe fd3b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1004, 0x4010113);
 8001c62:	a34f      	add	r3, pc, #316	; (adr r3, 8001da0 <APP_main+0x15f0>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	4890      	ldr	r0, [pc, #576]	; (8001eac <APP_main+0x16fc>)
 8001c6a:	f7fe fd35 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1008, 0x8067);
 8001c6e:	f248 0267 	movw	r2, #32871	; 0x8067
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	488e      	ldr	r0, [pc, #568]	; (8001eb0 <APP_main+0x1700>)
 8001c78:	f7fe fd2e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1012, 0xfe010113);
 8001c7c:	a34a      	add	r3, pc, #296	; (adr r3, 8001da8 <APP_main+0x15f8>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	488c      	ldr	r0, [pc, #560]	; (8001eb4 <APP_main+0x1704>)
 8001c84:	f7fe fd28 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1016, 0x812e23);
 8001c88:	a349      	add	r3, pc, #292	; (adr r3, 8001db0 <APP_main+0x1600>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	488a      	ldr	r0, [pc, #552]	; (8001eb8 <APP_main+0x1708>)
 8001c90:	f7fe fd22 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1020, 0x2010413);
 8001c94:	a348      	add	r3, pc, #288	; (adr r3, 8001db8 <APP_main+0x1608>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	4888      	ldr	r0, [pc, #544]	; (8001ebc <APP_main+0x170c>)
 8001c9c:	f7fe fd1c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1024, 0xfea42623);
 8001ca0:	a347      	add	r3, pc, #284	; (adr r3, 8001dc0 <APP_main+0x1610>)
 8001ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca6:	4886      	ldr	r0, [pc, #536]	; (8001ec0 <APP_main+0x1710>)
 8001ca8:	f7fe fd16 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1028, 0xfec42783);
 8001cac:	a346      	add	r3, pc, #280	; (adr r3, 8001dc8 <APP_main+0x1618>)
 8001cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb2:	4884      	ldr	r0, [pc, #528]	; (8001ec4 <APP_main+0x1714>)
 8001cb4:	f7fe fd10 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1032, 0xc7a783);
 8001cb8:	a345      	add	r3, pc, #276	; (adr r3, 8001dd0 <APP_main+0x1620>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	4882      	ldr	r0, [pc, #520]	; (8001ec8 <APP_main+0x1718>)
 8001cc0:	f7fe fd0a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1036, 0x17e713);
 8001cc4:	4a81      	ldr	r2, [pc, #516]	; (8001ecc <APP_main+0x171c>)
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	4881      	ldr	r0, [pc, #516]	; (8001ed0 <APP_main+0x1720>)
 8001ccc:	f7fe fd04 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1040, 0xfec42783);
 8001cd0:	a33d      	add	r3, pc, #244	; (adr r3, 8001dc8 <APP_main+0x1618>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	487f      	ldr	r0, [pc, #508]	; (8001ed4 <APP_main+0x1724>)
 8001cd8:	f7fe fcfe 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1044, 0xe7a623);
 8001cdc:	a33e      	add	r3, pc, #248	; (adr r3, 8001dd8 <APP_main+0x1628>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	487d      	ldr	r0, [pc, #500]	; (8001ed8 <APP_main+0x1728>)
 8001ce4:	f7fe fcf8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1048, 0xfec42783);
 8001ce8:	a337      	add	r3, pc, #220	; (adr r3, 8001dc8 <APP_main+0x1618>)
 8001cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cee:	487b      	ldr	r0, [pc, #492]	; (8001edc <APP_main+0x172c>)
 8001cf0:	f7fe fcf2 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1052, 0x87a783);
 8001cf4:	a33a      	add	r3, pc, #232	; (adr r3, 8001de0 <APP_main+0x1630>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	4879      	ldr	r0, [pc, #484]	; (8001ee0 <APP_main+0x1730>)
 8001cfc:	f7fe fcec 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1056, 0x17e713);
 8001d00:	4a72      	ldr	r2, [pc, #456]	; (8001ecc <APP_main+0x171c>)
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	4877      	ldr	r0, [pc, #476]	; (8001ee4 <APP_main+0x1734>)
 8001d08:	f7fe fce6 	bl	80006d8 <PUTFULL>
 8001d0c:	e0f0      	b.n	8001ef0 <APP_main+0x1740>
 8001d0e:	bf00      	nop
 8001d10:	00279993 	.word	0x00279993
 8001d14:	00000000 	.word	0x00000000
 8001d18:	0135e9b3 	.word	0x0135e9b3
 8001d1c:	00000000 	.word	0x00000000
 8001d20:	00271913 	.word	0x00271913
 8001d24:	00000000 	.word	0x00000000
 8001d28:	00c83833 	.word	0x00c83833
 8001d2c:	00000000 	.word	0x00000000
 8001d30:	00b687b3 	.word	0x00b687b3
 8001d34:	00000000 	.word	0x00000000
 8001d38:	fce42c23 	.word	0xfce42c23
 8001d3c:	00000000 	.word	0x00000000
 8001d40:	fcf42e23 	.word	0xfcf42e23
 8001d44:	00000000 	.word	0x00000000
 8001d48:	fdc42683 	.word	0xfdc42683
 8001d4c:	00000000 	.word	0x00000000
 8001d50:	fed666e3 	.word	0xfed666e3
 8001d54:	00000000 	.word	0x00000000
 8001d58:	00c69863 	.word	0x00c69863
 8001d5c:	00000000 	.word	0x00000000
 8001d60:	fd842683 	.word	0xfd842683
 8001d64:	00000000 	.word	0x00000000
 8001d68:	fcd7eae3 	.word	0xfcd7eae3
 8001d6c:	00000000 	.word	0x00000000
 8001d70:	03c12083 	.word	0x03c12083
 8001d74:	00000000 	.word	0x00000000
 8001d78:	03812403 	.word	0x03812403
 8001d7c:	00000000 	.word	0x00000000
 8001d80:	03412903 	.word	0x03412903
 8001d84:	00000000 	.word	0x00000000
 8001d88:	03012983 	.word	0x03012983
 8001d8c:	00000000 	.word	0x00000000
 8001d90:	02c12a03 	.word	0x02c12a03
 8001d94:	00000000 	.word	0x00000000
 8001d98:	02812a83 	.word	0x02812a83
 8001d9c:	00000000 	.word	0x00000000
 8001da0:	04010113 	.word	0x04010113
 8001da4:	00000000 	.word	0x00000000
 8001da8:	fe010113 	.word	0xfe010113
 8001dac:	00000000 	.word	0x00000000
 8001db0:	00812e23 	.word	0x00812e23
 8001db4:	00000000 	.word	0x00000000
 8001db8:	02010413 	.word	0x02010413
 8001dbc:	00000000 	.word	0x00000000
 8001dc0:	fea42623 	.word	0xfea42623
 8001dc4:	00000000 	.word	0x00000000
 8001dc8:	fec42783 	.word	0xfec42783
 8001dcc:	00000000 	.word	0x00000000
 8001dd0:	00c7a783 	.word	0x00c7a783
 8001dd4:	00000000 	.word	0x00000000
 8001dd8:	00e7a623 	.word	0x00e7a623
 8001ddc:	00000000 	.word	0x00000000
 8001de0:	0087a783 	.word	0x0087a783
 8001de4:	00000000 	.word	0x00000000
 8001de8:	8000035c 	.word	0x8000035c
 8001dec:	80000360 	.word	0x80000360
 8001df0:	80000364 	.word	0x80000364
 8001df4:	80000368 	.word	0x80000368
 8001df8:	00090713 	.word	0x00090713
 8001dfc:	8000036c 	.word	0x8000036c
 8001e00:	00098793 	.word	0x00098793
 8001e04:	80000370 	.word	0x80000370
 8001e08:	00070513 	.word	0x00070513
 8001e0c:	80000374 	.word	0x80000374
 8001e10:	00078593 	.word	0x00078593
 8001e14:	80000378 	.word	0x80000378
 8001e18:	00a60733 	.word	0x00a60733
 8001e1c:	8000037c 	.word	0x8000037c
 8001e20:	00070813 	.word	0x00070813
 8001e24:	80000380 	.word	0x80000380
 8001e28:	80000384 	.word	0x80000384
 8001e2c:	80000388 	.word	0x80000388
 8001e30:	00f806b3 	.word	0x00f806b3
 8001e34:	8000038c 	.word	0x8000038c
 8001e38:	00068793 	.word	0x00068793
 8001e3c:	80000390 	.word	0x80000390
 8001e40:	80000394 	.word	0x80000394
 8001e44:	80000398 	.word	0x80000398
 8001e48:	8000039c 	.word	0x8000039c
 8001e4c:	f0dff0ef 	.word	0xf0dff0ef
 8001e50:	800003a0 	.word	0x800003a0
 8001e54:	00050713 	.word	0x00050713
 8001e58:	800003a4 	.word	0x800003a4
 8001e5c:	00058793 	.word	0x00058793
 8001e60:	800003a8 	.word	0x800003a8
 8001e64:	800003ac 	.word	0x800003ac
 8001e68:	00078613 	.word	0x00078613
 8001e6c:	800003b0 	.word	0x800003b0
 8001e70:	800003b4 	.word	0x800003b4
 8001e74:	800003b8 	.word	0x800003b8
 8001e78:	800003bc 	.word	0x800003bc
 8001e7c:	800003c0 	.word	0x800003c0
 8001e80:	800003c4 	.word	0x800003c4
 8001e84:	00070793 	.word	0x00070793
 8001e88:	800003c8 	.word	0x800003c8
 8001e8c:	800003cc 	.word	0x800003cc
 8001e90:	800003d0 	.word	0x800003d0
 8001e94:	800003d4 	.word	0x800003d4
 8001e98:	800003d8 	.word	0x800003d8
 8001e9c:	800003dc 	.word	0x800003dc
 8001ea0:	800003e0 	.word	0x800003e0
 8001ea4:	800003e4 	.word	0x800003e4
 8001ea8:	800003e8 	.word	0x800003e8
 8001eac:	800003ec 	.word	0x800003ec
 8001eb0:	800003f0 	.word	0x800003f0
 8001eb4:	800003f4 	.word	0x800003f4
 8001eb8:	800003f8 	.word	0x800003f8
 8001ebc:	800003fc 	.word	0x800003fc
 8001ec0:	80000400 	.word	0x80000400
 8001ec4:	80000404 	.word	0x80000404
 8001ec8:	80000408 	.word	0x80000408
 8001ecc:	0017e713 	.word	0x0017e713
 8001ed0:	8000040c 	.word	0x8000040c
 8001ed4:	80000410 	.word	0x80000410
 8001ed8:	80000414 	.word	0x80000414
 8001edc:	80000418 	.word	0x80000418
 8001ee0:	8000041c 	.word	0x8000041c
 8001ee4:	80000420 	.word	0x80000420
 8001ee8:	01e75593 	.word	0x01e75593
 8001eec:	00000000 	.word	0x00000000
        PUTFULL(DTIM_BASE_ADDR + 1060, 0xfec42783);
 8001ef0:	a3af      	add	r3, pc, #700	; (adr r3, 80021b0 <APP_main+0x1a00>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	48cc      	ldr	r0, [pc, #816]	; (8002228 <APP_main+0x1a78>)
 8001ef8:	f7fe fbee 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1064, 0xe7a423);
 8001efc:	a39e      	add	r3, pc, #632	; (adr r3, 8002178 <APP_main+0x19c8>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	48ca      	ldr	r0, [pc, #808]	; (800222c <APP_main+0x1a7c>)
 8001f04:	f7fe fbe8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1068, 0x13);
 8001f08:	f04f 0213 	mov.w	r2, #19
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	48c7      	ldr	r0, [pc, #796]	; (8002230 <APP_main+0x1a80>)
 8001f12:	f7fe fbe1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1072, 0x1c12403);
 8001f16:	a39a      	add	r3, pc, #616	; (adr r3, 8002180 <APP_main+0x19d0>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	48c5      	ldr	r0, [pc, #788]	; (8002234 <APP_main+0x1a84>)
 8001f1e:	f7fe fbdb 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1076, 0x2010113);
 8001f22:	a399      	add	r3, pc, #612	; (adr r3, 8002188 <APP_main+0x19d8>)
 8001f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f28:	48c3      	ldr	r0, [pc, #780]	; (8002238 <APP_main+0x1a88>)
 8001f2a:	f7fe fbd5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1080, 0x8067);
 8001f2e:	f248 0267 	movw	r2, #32871	; 0x8067
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	48c1      	ldr	r0, [pc, #772]	; (800223c <APP_main+0x1a8c>)
 8001f38:	f7fe fbce 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1084, 0xfe010113);
 8001f3c:	a394      	add	r3, pc, #592	; (adr r3, 8002190 <APP_main+0x19e0>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	48bf      	ldr	r0, [pc, #764]	; (8002240 <APP_main+0x1a90>)
 8001f44:	f7fe fbc8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1088, 0x812e23);
 8001f48:	a393      	add	r3, pc, #588	; (adr r3, 8002198 <APP_main+0x19e8>)
 8001f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4e:	48bd      	ldr	r0, [pc, #756]	; (8002244 <APP_main+0x1a94>)
 8001f50:	f7fe fbc2 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1092, 0x2010413);
 8001f54:	a392      	add	r3, pc, #584	; (adr r3, 80021a0 <APP_main+0x19f0>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	48bb      	ldr	r0, [pc, #748]	; (8002248 <APP_main+0x1a98>)
 8001f5c:	f7fe fbbc 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1096, 0xfea42623);
 8001f60:	a391      	add	r3, pc, #580	; (adr r3, 80021a8 <APP_main+0x19f8>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	48b9      	ldr	r0, [pc, #740]	; (800224c <APP_main+0x1a9c>)
 8001f68:	f7fe fbb6 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1100, 0xfec42783);
 8001f6c:	a390      	add	r3, pc, #576	; (adr r3, 80021b0 <APP_main+0x1a00>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	48b7      	ldr	r0, [pc, #732]	; (8002250 <APP_main+0x1aa0>)
 8001f74:	f7fe fbb0 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1104, 0xc7a783);
 8001f78:	a38f      	add	r3, pc, #572	; (adr r3, 80021b8 <APP_main+0x1a08>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	48b5      	ldr	r0, [pc, #724]	; (8002254 <APP_main+0x1aa4>)
 8001f80:	f7fe fbaa 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1108, 0x107d793);
 8001f84:	a38e      	add	r3, pc, #568	; (adr r3, 80021c0 <APP_main+0x1a10>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	48b3      	ldr	r0, [pc, #716]	; (8002258 <APP_main+0x1aa8>)
 8001f8c:	f7fe fba4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1112, 0xff7f793);
 8001f90:	a38d      	add	r3, pc, #564	; (adr r3, 80021c8 <APP_main+0x1a18>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	48b1      	ldr	r0, [pc, #708]	; (800225c <APP_main+0x1aac>)
 8001f98:	f7fe fb9e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1116, 0x77f793);
 8001f9c:	a38c      	add	r3, pc, #560	; (adr r3, 80021d0 <APP_main+0x1a20>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	48af      	ldr	r0, [pc, #700]	; (8002260 <APP_main+0x1ab0>)
 8001fa4:	f7fe fb98 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1120, 0xff7f793);
 8001fa8:	a387      	add	r3, pc, #540	; (adr r3, 80021c8 <APP_main+0x1a18>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	48ad      	ldr	r0, [pc, #692]	; (8002264 <APP_main+0x1ab4>)
 8001fb0:	f7fe fb92 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1124, 0x78513);
 8001fb4:	4aac      	ldr	r2, [pc, #688]	; (8002268 <APP_main+0x1ab8>)
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	48ac      	ldr	r0, [pc, #688]	; (800226c <APP_main+0x1abc>)
 8001fbc:	f7fe fb8c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1128, 0x1c12403);
 8001fc0:	a36f      	add	r3, pc, #444	; (adr r3, 8002180 <APP_main+0x19d0>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	48aa      	ldr	r0, [pc, #680]	; (8002270 <APP_main+0x1ac0>)
 8001fc8:	f7fe fb86 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1132, 0x2010113);
 8001fcc:	a36e      	add	r3, pc, #440	; (adr r3, 8002188 <APP_main+0x19d8>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	48a8      	ldr	r0, [pc, #672]	; (8002274 <APP_main+0x1ac4>)
 8001fd4:	f7fe fb80 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1136, 0x8067);
 8001fd8:	f248 0267 	movw	r2, #32871	; 0x8067
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	48a5      	ldr	r0, [pc, #660]	; (8002278 <APP_main+0x1ac8>)
 8001fe2:	f7fe fb79 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1140, 0xfe010113);
 8001fe6:	a36a      	add	r3, pc, #424	; (adr r3, 8002190 <APP_main+0x19e0>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	48a3      	ldr	r0, [pc, #652]	; (800227c <APP_main+0x1acc>)
 8001fee:	f7fe fb73 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1144, 0x812e23);
 8001ff2:	a369      	add	r3, pc, #420	; (adr r3, 8002198 <APP_main+0x19e8>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	48a1      	ldr	r0, [pc, #644]	; (8002280 <APP_main+0x1ad0>)
 8001ffa:	f7fe fb6d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1148, 0x2010413);
 8001ffe:	a368      	add	r3, pc, #416	; (adr r3, 80021a0 <APP_main+0x19f0>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	489f      	ldr	r0, [pc, #636]	; (8002284 <APP_main+0x1ad4>)
 8002006:	f7fe fb67 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1152, 0xfea42623);
 800200a:	a367      	add	r3, pc, #412	; (adr r3, 80021a8 <APP_main+0x19f8>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	489d      	ldr	r0, [pc, #628]	; (8002288 <APP_main+0x1ad8>)
 8002012:	f7fe fb61 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1156, 0xfec42783);
 8002016:	a366      	add	r3, pc, #408	; (adr r3, 80021b0 <APP_main+0x1a00>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	489b      	ldr	r0, [pc, #620]	; (800228c <APP_main+0x1adc>)
 800201e:	f7fe fb5b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1160, 0x87a783);
 8002022:	a36d      	add	r3, pc, #436	; (adr r3, 80021d8 <APP_main+0x1a28>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	4899      	ldr	r0, [pc, #612]	; (8002290 <APP_main+0x1ae0>)
 800202a:	f7fe fb55 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1164, 0x107d793);
 800202e:	a364      	add	r3, pc, #400	; (adr r3, 80021c0 <APP_main+0x1a10>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	4897      	ldr	r0, [pc, #604]	; (8002294 <APP_main+0x1ae4>)
 8002036:	f7fe fb4f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1168, 0xff7f793);
 800203a:	a363      	add	r3, pc, #396	; (adr r3, 80021c8 <APP_main+0x1a18>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	4895      	ldr	r0, [pc, #596]	; (8002298 <APP_main+0x1ae8>)
 8002042:	f7fe fb49 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1172, 0x77f793);
 8002046:	a362      	add	r3, pc, #392	; (adr r3, 80021d0 <APP_main+0x1a20>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	4893      	ldr	r0, [pc, #588]	; (800229c <APP_main+0x1aec>)
 800204e:	f7fe fb43 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1176, 0xff7f793);
 8002052:	a35d      	add	r3, pc, #372	; (adr r3, 80021c8 <APP_main+0x1a18>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	4891      	ldr	r0, [pc, #580]	; (80022a0 <APP_main+0x1af0>)
 800205a:	f7fe fb3d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1180, 0x78513);
 800205e:	4a82      	ldr	r2, [pc, #520]	; (8002268 <APP_main+0x1ab8>)
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	488f      	ldr	r0, [pc, #572]	; (80022a4 <APP_main+0x1af4>)
 8002066:	f7fe fb37 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1184, 0x1c12403);
 800206a:	a345      	add	r3, pc, #276	; (adr r3, 8002180 <APP_main+0x19d0>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	488d      	ldr	r0, [pc, #564]	; (80022a8 <APP_main+0x1af8>)
 8002072:	f7fe fb31 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1188, 0x2010113);
 8002076:	a344      	add	r3, pc, #272	; (adr r3, 8002188 <APP_main+0x19d8>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	488b      	ldr	r0, [pc, #556]	; (80022ac <APP_main+0x1afc>)
 800207e:	f7fe fb2b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1192, 0x8067);
 8002082:	f248 0267 	movw	r2, #32871	; 0x8067
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	4889      	ldr	r0, [pc, #548]	; (80022b0 <APP_main+0x1b00>)
 800208c:	f7fe fb24 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1196, 0xfe010113);
 8002090:	a33f      	add	r3, pc, #252	; (adr r3, 8002190 <APP_main+0x19e0>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	4887      	ldr	r0, [pc, #540]	; (80022b4 <APP_main+0x1b04>)
 8002098:	f7fe fb1e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1200, 0x112e23);
 800209c:	4a86      	ldr	r2, [pc, #536]	; (80022b8 <APP_main+0x1b08>)
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	4886      	ldr	r0, [pc, #536]	; (80022bc <APP_main+0x1b0c>)
 80020a4:	f7fe fb18 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1204, 0x812c23);
 80020a8:	a34d      	add	r3, pc, #308	; (adr r3, 80021e0 <APP_main+0x1a30>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	4884      	ldr	r0, [pc, #528]	; (80022c0 <APP_main+0x1b10>)
 80020b0:	f7fe fb12 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1208, 0x2010413);
 80020b4:	a33a      	add	r3, pc, #232	; (adr r3, 80021a0 <APP_main+0x19f0>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	4882      	ldr	r0, [pc, #520]	; (80022c4 <APP_main+0x1b14>)
 80020bc:	f7fe fb0c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1212, 0xfea42623);
 80020c0:	a339      	add	r3, pc, #228	; (adr r3, 80021a8 <APP_main+0x19f8>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	4880      	ldr	r0, [pc, #512]	; (80022c8 <APP_main+0x1b18>)
 80020c8:	f7fe fb06 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1216, 0xfeb42423);
 80020cc:	a346      	add	r3, pc, #280	; (adr r3, 80021e8 <APP_main+0x1a38>)
 80020ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d2:	487e      	ldr	r0, [pc, #504]	; (80022cc <APP_main+0x1b1c>)
 80020d4:	f7fe fb00 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1220, 0x60793);
 80020d8:	4a7d      	ldr	r2, [pc, #500]	; (80022d0 <APP_main+0x1b20>)
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	487d      	ldr	r0, [pc, #500]	; (80022d4 <APP_main+0x1b24>)
 80020e0:	f7fe fafa 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1224, 0xfed42023);
 80020e4:	a342      	add	r3, pc, #264	; (adr r3, 80021f0 <APP_main+0x1a40>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	487b      	ldr	r0, [pc, #492]	; (80022d8 <APP_main+0x1b28>)
 80020ec:	f7fe faf4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1228, 0xfef41323);
 80020f0:	a341      	add	r3, pc, #260	; (adr r3, 80021f8 <APP_main+0x1a48>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	4879      	ldr	r0, [pc, #484]	; (80022dc <APP_main+0x1b2c>)
 80020f8:	f7fe faee 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1232, 0x440006f);
 80020fc:	4a78      	ldr	r2, [pc, #480]	; (80022e0 <APP_main+0x1b30>)
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	4878      	ldr	r0, [pc, #480]	; (80022e4 <APP_main+0x1b34>)
 8002104:	f7fe fae8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1236, 0x13);
 8002108:	f04f 0213 	mov.w	r2, #19
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	4875      	ldr	r0, [pc, #468]	; (80022e8 <APP_main+0x1b38>)
 8002112:	f7fe fae1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1240, 0xfec42503);
 8002116:	a33a      	add	r3, pc, #232	; (adr r3, 8002200 <APP_main+0x1a50>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	4873      	ldr	r0, [pc, #460]	; (80022ec <APP_main+0x1b3c>)
 800211e:	f7fe fadb 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1244, 0xf61ff0ef);
 8002122:	4a73      	ldr	r2, [pc, #460]	; (80022f0 <APP_main+0x1b40>)
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	4872      	ldr	r0, [pc, #456]	; (80022f4 <APP_main+0x1b44>)
 800212a:	f7fe fad5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1248, 0x50793);
 800212e:	4a72      	ldr	r2, [pc, #456]	; (80022f8 <APP_main+0x1b48>)
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	4871      	ldr	r0, [pc, #452]	; (80022fc <APP_main+0x1b4c>)
 8002136:	f7fe facf 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1252, 0xfe078ae3);
 800213a:	a333      	add	r3, pc, #204	; (adr r3, 8002208 <APP_main+0x1a58>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	486f      	ldr	r0, [pc, #444]	; (8002300 <APP_main+0x1b50>)
 8002142:	f7fe fac9 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1256, 0xfec42783);
 8002146:	a31a      	add	r3, pc, #104	; (adr r3, 80021b0 <APP_main+0x1a00>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	486d      	ldr	r0, [pc, #436]	; (8002304 <APP_main+0x1b54>)
 800214e:	f7fe fac3 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1260, 0x47a783);
 8002152:	a32f      	add	r3, pc, #188	; (adr r3, 8002210 <APP_main+0x1a60>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	486b      	ldr	r0, [pc, #428]	; (8002308 <APP_main+0x1b58>)
 800215a:	f7fe fabd 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1264, 0xff7f713);
 800215e:	a32e      	add	r3, pc, #184	; (adr r3, 8002218 <APP_main+0x1a68>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	4869      	ldr	r0, [pc, #420]	; (800230c <APP_main+0x1b5c>)
 8002166:	f7fe fab7 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1268, 0xfe842783);
 800216a:	a32d      	add	r3, pc, #180	; (adr r3, 8002220 <APP_main+0x1a70>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	e0ce      	b.n	8002310 <APP_main+0x1b60>
 8002172:	bf00      	nop
 8002174:	f3af 8000 	nop.w
 8002178:	00e7a423 	.word	0x00e7a423
 800217c:	00000000 	.word	0x00000000
 8002180:	01c12403 	.word	0x01c12403
 8002184:	00000000 	.word	0x00000000
 8002188:	02010113 	.word	0x02010113
 800218c:	00000000 	.word	0x00000000
 8002190:	fe010113 	.word	0xfe010113
 8002194:	00000000 	.word	0x00000000
 8002198:	00812e23 	.word	0x00812e23
 800219c:	00000000 	.word	0x00000000
 80021a0:	02010413 	.word	0x02010413
 80021a4:	00000000 	.word	0x00000000
 80021a8:	fea42623 	.word	0xfea42623
 80021ac:	00000000 	.word	0x00000000
 80021b0:	fec42783 	.word	0xfec42783
 80021b4:	00000000 	.word	0x00000000
 80021b8:	00c7a783 	.word	0x00c7a783
 80021bc:	00000000 	.word	0x00000000
 80021c0:	0107d793 	.word	0x0107d793
 80021c4:	00000000 	.word	0x00000000
 80021c8:	0ff7f793 	.word	0x0ff7f793
 80021cc:	00000000 	.word	0x00000000
 80021d0:	0077f793 	.word	0x0077f793
 80021d4:	00000000 	.word	0x00000000
 80021d8:	0087a783 	.word	0x0087a783
 80021dc:	00000000 	.word	0x00000000
 80021e0:	00812c23 	.word	0x00812c23
 80021e4:	00000000 	.word	0x00000000
 80021e8:	feb42423 	.word	0xfeb42423
 80021ec:	00000000 	.word	0x00000000
 80021f0:	fed42023 	.word	0xfed42023
 80021f4:	00000000 	.word	0x00000000
 80021f8:	fef41323 	.word	0xfef41323
 80021fc:	00000000 	.word	0x00000000
 8002200:	fec42503 	.word	0xfec42503
 8002204:	00000000 	.word	0x00000000
 8002208:	fe078ae3 	.word	0xfe078ae3
 800220c:	00000000 	.word	0x00000000
 8002210:	0047a783 	.word	0x0047a783
 8002214:	00000000 	.word	0x00000000
 8002218:	0ff7f713 	.word	0x0ff7f713
 800221c:	00000000 	.word	0x00000000
 8002220:	fe842783 	.word	0xfe842783
 8002224:	00000000 	.word	0x00000000
 8002228:	80000424 	.word	0x80000424
 800222c:	80000428 	.word	0x80000428
 8002230:	8000042c 	.word	0x8000042c
 8002234:	80000430 	.word	0x80000430
 8002238:	80000434 	.word	0x80000434
 800223c:	80000438 	.word	0x80000438
 8002240:	8000043c 	.word	0x8000043c
 8002244:	80000440 	.word	0x80000440
 8002248:	80000444 	.word	0x80000444
 800224c:	80000448 	.word	0x80000448
 8002250:	8000044c 	.word	0x8000044c
 8002254:	80000450 	.word	0x80000450
 8002258:	80000454 	.word	0x80000454
 800225c:	80000458 	.word	0x80000458
 8002260:	8000045c 	.word	0x8000045c
 8002264:	80000460 	.word	0x80000460
 8002268:	00078513 	.word	0x00078513
 800226c:	80000464 	.word	0x80000464
 8002270:	80000468 	.word	0x80000468
 8002274:	8000046c 	.word	0x8000046c
 8002278:	80000470 	.word	0x80000470
 800227c:	80000474 	.word	0x80000474
 8002280:	80000478 	.word	0x80000478
 8002284:	8000047c 	.word	0x8000047c
 8002288:	80000480 	.word	0x80000480
 800228c:	80000484 	.word	0x80000484
 8002290:	80000488 	.word	0x80000488
 8002294:	8000048c 	.word	0x8000048c
 8002298:	80000490 	.word	0x80000490
 800229c:	80000494 	.word	0x80000494
 80022a0:	80000498 	.word	0x80000498
 80022a4:	8000049c 	.word	0x8000049c
 80022a8:	800004a0 	.word	0x800004a0
 80022ac:	800004a4 	.word	0x800004a4
 80022b0:	800004a8 	.word	0x800004a8
 80022b4:	800004ac 	.word	0x800004ac
 80022b8:	00112e23 	.word	0x00112e23
 80022bc:	800004b0 	.word	0x800004b0
 80022c0:	800004b4 	.word	0x800004b4
 80022c4:	800004b8 	.word	0x800004b8
 80022c8:	800004bc 	.word	0x800004bc
 80022cc:	800004c0 	.word	0x800004c0
 80022d0:	00060793 	.word	0x00060793
 80022d4:	800004c4 	.word	0x800004c4
 80022d8:	800004c8 	.word	0x800004c8
 80022dc:	800004cc 	.word	0x800004cc
 80022e0:	0440006f 	.word	0x0440006f
 80022e4:	800004d0 	.word	0x800004d0
 80022e8:	800004d4 	.word	0x800004d4
 80022ec:	800004d8 	.word	0x800004d8
 80022f0:	f61ff0ef 	.word	0xf61ff0ef
 80022f4:	800004dc 	.word	0x800004dc
 80022f8:	00050793 	.word	0x00050793
 80022fc:	800004e0 	.word	0x800004e0
 8002300:	800004e4 	.word	0x800004e4
 8002304:	800004e8 	.word	0x800004e8
 8002308:	800004ec 	.word	0x800004ec
 800230c:	800004f0 	.word	0x800004f0
 8002310:	48cb      	ldr	r0, [pc, #812]	; (8002640 <APP_main+0x1e90>)
 8002312:	f7fe f9e1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1272, 0xe78023);
 8002316:	a39e      	add	r3, pc, #632	; (adr r3, 8002590 <APP_main+0x1de0>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	48c9      	ldr	r0, [pc, #804]	; (8002644 <APP_main+0x1e94>)
 800231e:	f7fe f9db 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1276, 0xfe842783);
 8002322:	a39d      	add	r3, pc, #628	; (adr r3, 8002598 <APP_main+0x1de8>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	48c7      	ldr	r0, [pc, #796]	; (8002648 <APP_main+0x1e98>)
 800232a:	f7fe f9d5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1280, 0x178793);
 800232e:	4ac7      	ldr	r2, [pc, #796]	; (800264c <APP_main+0x1e9c>)
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	48c6      	ldr	r0, [pc, #792]	; (8002650 <APP_main+0x1ea0>)
 8002336:	f7fe f9cf 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1284, 0xfef42423);
 800233a:	a399      	add	r3, pc, #612	; (adr r3, 80025a0 <APP_main+0x1df0>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	48c4      	ldr	r0, [pc, #784]	; (8002654 <APP_main+0x1ea4>)
 8002342:	f7fe f9c9 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1288, 0xfe645783);
 8002346:	a398      	add	r3, pc, #608	; (adr r3, 80025a8 <APP_main+0x1df8>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	48c2      	ldr	r0, [pc, #776]	; (8002658 <APP_main+0x1ea8>)
 800234e:	f7fe f9c3 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1292, 0xfff78793);
 8002352:	4ac2      	ldr	r2, [pc, #776]	; (800265c <APP_main+0x1eac>)
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	48c1      	ldr	r0, [pc, #772]	; (8002660 <APP_main+0x1eb0>)
 800235a:	f7fe f9bd 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1296, 0xfef41323);
 800235e:	a394      	add	r3, pc, #592	; (adr r3, 80025b0 <APP_main+0x1e00>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	48bf      	ldr	r0, [pc, #764]	; (8002664 <APP_main+0x1eb4>)
 8002366:	f7fe f9b7 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1300, 0xfe645783);
 800236a:	a38f      	add	r3, pc, #572	; (adr r3, 80025a8 <APP_main+0x1df8>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	48bd      	ldr	r0, [pc, #756]	; (8002668 <APP_main+0x1eb8>)
 8002372:	f7fe f9b1 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1304, 0xfa079ee3);
 8002376:	a390      	add	r3, pc, #576	; (adr r3, 80025b8 <APP_main+0x1e08>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	48bb      	ldr	r0, [pc, #748]	; (800266c <APP_main+0x1ebc>)
 800237e:	f7fe f9ab 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1308, 0x793);
 8002382:	f240 7293 	movw	r2, #1939	; 0x793
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	48b9      	ldr	r0, [pc, #740]	; (8002670 <APP_main+0x1ec0>)
 800238c:	f7fe f9a4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1312, 0x78513);
 8002390:	4ab8      	ldr	r2, [pc, #736]	; (8002674 <APP_main+0x1ec4>)
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	48b8      	ldr	r0, [pc, #736]	; (8002678 <APP_main+0x1ec8>)
 8002398:	f7fe f99e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1316, 0x1c12083);
 800239c:	a388      	add	r3, pc, #544	; (adr r3, 80025c0 <APP_main+0x1e10>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	48b6      	ldr	r0, [pc, #728]	; (800267c <APP_main+0x1ecc>)
 80023a4:	f7fe f998 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1320, 0x1812403);
 80023a8:	a387      	add	r3, pc, #540	; (adr r3, 80025c8 <APP_main+0x1e18>)
 80023aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ae:	48b4      	ldr	r0, [pc, #720]	; (8002680 <APP_main+0x1ed0>)
 80023b0:	f7fe f992 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1324, 0x2010113);
 80023b4:	a386      	add	r3, pc, #536	; (adr r3, 80025d0 <APP_main+0x1e20>)
 80023b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ba:	48b2      	ldr	r0, [pc, #712]	; (8002684 <APP_main+0x1ed4>)
 80023bc:	f7fe f98c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1328, 0x8067);
 80023c0:	f248 0267 	movw	r2, #32871	; 0x8067
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	48af      	ldr	r0, [pc, #700]	; (8002688 <APP_main+0x1ed8>)
 80023ca:	f7fe f985 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1332, 0xfe010113);
 80023ce:	a382      	add	r3, pc, #520	; (adr r3, 80025d8 <APP_main+0x1e28>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	48ad      	ldr	r0, [pc, #692]	; (800268c <APP_main+0x1edc>)
 80023d6:	f7fe f97f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1336, 0x112e23);
 80023da:	4aad      	ldr	r2, [pc, #692]	; (8002690 <APP_main+0x1ee0>)
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	48ac      	ldr	r0, [pc, #688]	; (8002694 <APP_main+0x1ee4>)
 80023e2:	f7fe f979 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1340, 0x812c23);
 80023e6:	a37e      	add	r3, pc, #504	; (adr r3, 80025e0 <APP_main+0x1e30>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	48aa      	ldr	r0, [pc, #680]	; (8002698 <APP_main+0x1ee8>)
 80023ee:	f7fe f973 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1344, 0x2010413);
 80023f2:	a37d      	add	r3, pc, #500	; (adr r3, 80025e8 <APP_main+0x1e38>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	48a8      	ldr	r0, [pc, #672]	; (800269c <APP_main+0x1eec>)
 80023fa:	f7fe f96d 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1348, 0xfea42623);
 80023fe:	a37c      	add	r3, pc, #496	; (adr r3, 80025f0 <APP_main+0x1e40>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	48a6      	ldr	r0, [pc, #664]	; (80026a0 <APP_main+0x1ef0>)
 8002406:	f7fe f967 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1352, 0xfeb42423);
 800240a:	a37b      	add	r3, pc, #492	; (adr r3, 80025f8 <APP_main+0x1e48>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	48a4      	ldr	r0, [pc, #656]	; (80026a4 <APP_main+0x1ef4>)
 8002412:	f7fe f961 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1356, 0x60793);
 8002416:	4aa4      	ldr	r2, [pc, #656]	; (80026a8 <APP_main+0x1ef8>)
 8002418:	f04f 0300 	mov.w	r3, #0
 800241c:	48a3      	ldr	r0, [pc, #652]	; (80026ac <APP_main+0x1efc>)
 800241e:	f7fe f95b 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1360, 0xfed42023);
 8002422:	a377      	add	r3, pc, #476	; (adr r3, 8002600 <APP_main+0x1e50>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	48a1      	ldr	r0, [pc, #644]	; (80026b0 <APP_main+0x1f00>)
 800242a:	f7fe f955 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1364, 0xfef41323);
 800242e:	a360      	add	r3, pc, #384	; (adr r3, 80025b0 <APP_main+0x1e00>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	489f      	ldr	r0, [pc, #636]	; (80026b4 <APP_main+0x1f04>)
 8002436:	f7fe f94f 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1368, 0x440006f);
 800243a:	4a9f      	ldr	r2, [pc, #636]	; (80026b8 <APP_main+0x1f08>)
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	489e      	ldr	r0, [pc, #632]	; (80026bc <APP_main+0x1f0c>)
 8002442:	f7fe f949 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1372, 0x13);
 8002446:	f04f 0213 	mov.w	r2, #19
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	489c      	ldr	r0, [pc, #624]	; (80026c0 <APP_main+0x1f10>)
 8002450:	f7fe f942 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1376, 0xfec42503);
 8002454:	a36c      	add	r3, pc, #432	; (adr r3, 8002608 <APP_main+0x1e58>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	489a      	ldr	r0, [pc, #616]	; (80026c4 <APP_main+0x1f14>)
 800245c:	f7fe f93c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1380, 0xf11ff0ef);
 8002460:	4a99      	ldr	r2, [pc, #612]	; (80026c8 <APP_main+0x1f18>)
 8002462:	f04f 0300 	mov.w	r3, #0
 8002466:	4899      	ldr	r0, [pc, #612]	; (80026cc <APP_main+0x1f1c>)
 8002468:	f7fe f936 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1384, 0x50793);
 800246c:	4a98      	ldr	r2, [pc, #608]	; (80026d0 <APP_main+0x1f20>)
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	4898      	ldr	r0, [pc, #608]	; (80026d4 <APP_main+0x1f24>)
 8002474:	f7fe f930 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1388, 0xfe079ae3);
 8002478:	a365      	add	r3, pc, #404	; (adr r3, 8002610 <APP_main+0x1e60>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	4896      	ldr	r0, [pc, #600]	; (80026d8 <APP_main+0x1f28>)
 8002480:	f7fe f92a 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1392, 0xfe842783);
 8002484:	a344      	add	r3, pc, #272	; (adr r3, 8002598 <APP_main+0x1de8>)
 8002486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248a:	4894      	ldr	r0, [pc, #592]	; (80026dc <APP_main+0x1f2c>)
 800248c:	f7fe f924 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1396, 0x7c783);
 8002490:	4a93      	ldr	r2, [pc, #588]	; (80026e0 <APP_main+0x1f30>)
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	4893      	ldr	r0, [pc, #588]	; (80026e4 <APP_main+0x1f34>)
 8002498:	f7fe f91e 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1400, 0x78713);
 800249c:	4a92      	ldr	r2, [pc, #584]	; (80026e8 <APP_main+0x1f38>)
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	4892      	ldr	r0, [pc, #584]	; (80026ec <APP_main+0x1f3c>)
 80024a4:	f7fe f918 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1404, 0xfec42783);
 80024a8:	a35b      	add	r3, pc, #364	; (adr r3, 8002618 <APP_main+0x1e68>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	4890      	ldr	r0, [pc, #576]	; (80026f0 <APP_main+0x1f40>)
 80024b0:	f7fe f912 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1408, 0xe7a023);
 80024b4:	a35a      	add	r3, pc, #360	; (adr r3, 8002620 <APP_main+0x1e70>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	488e      	ldr	r0, [pc, #568]	; (80026f4 <APP_main+0x1f44>)
 80024bc:	f7fe f90c 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1412, 0xfe842783);
 80024c0:	a335      	add	r3, pc, #212	; (adr r3, 8002598 <APP_main+0x1de8>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	488c      	ldr	r0, [pc, #560]	; (80026f8 <APP_main+0x1f48>)
 80024c8:	f7fe f906 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1416, 0x178793);
 80024cc:	4a5f      	ldr	r2, [pc, #380]	; (800264c <APP_main+0x1e9c>)
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	488a      	ldr	r0, [pc, #552]	; (80026fc <APP_main+0x1f4c>)
 80024d4:	f7fe f900 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1420, 0xfef42423);
 80024d8:	a331      	add	r3, pc, #196	; (adr r3, 80025a0 <APP_main+0x1df0>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	4888      	ldr	r0, [pc, #544]	; (8002700 <APP_main+0x1f50>)
 80024e0:	f7fe f8fa 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1424, 0xfe645783);
 80024e4:	a330      	add	r3, pc, #192	; (adr r3, 80025a8 <APP_main+0x1df8>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	4886      	ldr	r0, [pc, #536]	; (8002704 <APP_main+0x1f54>)
 80024ec:	f7fe f8f4 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1428, 0xfff78793);
 80024f0:	4a5a      	ldr	r2, [pc, #360]	; (800265c <APP_main+0x1eac>)
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	4884      	ldr	r0, [pc, #528]	; (8002708 <APP_main+0x1f58>)
 80024f8:	f7fe f8ee 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1432, 0xfef41323);
 80024fc:	a32c      	add	r3, pc, #176	; (adr r3, 80025b0 <APP_main+0x1e00>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	4882      	ldr	r0, [pc, #520]	; (800270c <APP_main+0x1f5c>)
 8002504:	f7fe f8e8 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1436, 0xfe645783);
 8002508:	a327      	add	r3, pc, #156	; (adr r3, 80025a8 <APP_main+0x1df8>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	4880      	ldr	r0, [pc, #512]	; (8002710 <APP_main+0x1f60>)
 8002510:	f7fe f8e2 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1440, 0xfa079ee3);
 8002514:	a328      	add	r3, pc, #160	; (adr r3, 80025b8 <APP_main+0x1e08>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	487e      	ldr	r0, [pc, #504]	; (8002714 <APP_main+0x1f64>)
 800251c:	f7fe f8dc 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1444, 0x793);
 8002520:	f240 7293 	movw	r2, #1939	; 0x793
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	487b      	ldr	r0, [pc, #492]	; (8002718 <APP_main+0x1f68>)
 800252a:	f7fe f8d5 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1448, 0x78513);
 800252e:	4a51      	ldr	r2, [pc, #324]	; (8002674 <APP_main+0x1ec4>)
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	4879      	ldr	r0, [pc, #484]	; (800271c <APP_main+0x1f6c>)
 8002536:	f7fe f8cf 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1452, 0x1c12083);
 800253a:	a321      	add	r3, pc, #132	; (adr r3, 80025c0 <APP_main+0x1e10>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	4877      	ldr	r0, [pc, #476]	; (8002720 <APP_main+0x1f70>)
 8002542:	f7fe f8c9 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1456, 0x1812403);
 8002546:	a320      	add	r3, pc, #128	; (adr r3, 80025c8 <APP_main+0x1e18>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	4875      	ldr	r0, [pc, #468]	; (8002724 <APP_main+0x1f74>)
 800254e:	f7fe f8c3 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1460, 0x2010113);
 8002552:	a31f      	add	r3, pc, #124	; (adr r3, 80025d0 <APP_main+0x1e20>)
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	4873      	ldr	r0, [pc, #460]	; (8002728 <APP_main+0x1f78>)
 800255a:	f7fe f8bd 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1464, 0x8067);
 800255e:	f248 0267 	movw	r2, #32871	; 0x8067
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	4871      	ldr	r0, [pc, #452]	; (800272c <APP_main+0x1f7c>)
 8002568:	f7fe f8b6 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1468, 0x6c6c6568);
 800256c:	a32e      	add	r3, pc, #184	; (adr r3, 8002628 <APP_main+0x1e78>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	486f      	ldr	r0, [pc, #444]	; (8002730 <APP_main+0x1f80>)
 8002574:	f7fe f8b0 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1472, 0x6f77206f);
 8002578:	a32d      	add	r3, pc, #180	; (adr r3, 8002630 <APP_main+0x1e80>)
 800257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257e:	486d      	ldr	r0, [pc, #436]	; (8002734 <APP_main+0x1f84>)
 8002580:	f7fe f8aa 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1476, 0xa646c72);
 8002584:	a32c      	add	r3, pc, #176	; (adr r3, 8002638 <APP_main+0x1e88>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	e0d5      	b.n	8002738 <APP_main+0x1f88>
 800258c:	f3af 8000 	nop.w
 8002590:	00e78023 	.word	0x00e78023
 8002594:	00000000 	.word	0x00000000
 8002598:	fe842783 	.word	0xfe842783
 800259c:	00000000 	.word	0x00000000
 80025a0:	fef42423 	.word	0xfef42423
 80025a4:	00000000 	.word	0x00000000
 80025a8:	fe645783 	.word	0xfe645783
 80025ac:	00000000 	.word	0x00000000
 80025b0:	fef41323 	.word	0xfef41323
 80025b4:	00000000 	.word	0x00000000
 80025b8:	fa079ee3 	.word	0xfa079ee3
 80025bc:	00000000 	.word	0x00000000
 80025c0:	01c12083 	.word	0x01c12083
 80025c4:	00000000 	.word	0x00000000
 80025c8:	01812403 	.word	0x01812403
 80025cc:	00000000 	.word	0x00000000
 80025d0:	02010113 	.word	0x02010113
 80025d4:	00000000 	.word	0x00000000
 80025d8:	fe010113 	.word	0xfe010113
 80025dc:	00000000 	.word	0x00000000
 80025e0:	00812c23 	.word	0x00812c23
 80025e4:	00000000 	.word	0x00000000
 80025e8:	02010413 	.word	0x02010413
 80025ec:	00000000 	.word	0x00000000
 80025f0:	fea42623 	.word	0xfea42623
 80025f4:	00000000 	.word	0x00000000
 80025f8:	feb42423 	.word	0xfeb42423
 80025fc:	00000000 	.word	0x00000000
 8002600:	fed42023 	.word	0xfed42023
 8002604:	00000000 	.word	0x00000000
 8002608:	fec42503 	.word	0xfec42503
 800260c:	00000000 	.word	0x00000000
 8002610:	fe079ae3 	.word	0xfe079ae3
 8002614:	00000000 	.word	0x00000000
 8002618:	fec42783 	.word	0xfec42783
 800261c:	00000000 	.word	0x00000000
 8002620:	00e7a023 	.word	0x00e7a023
 8002624:	00000000 	.word	0x00000000
 8002628:	6c6c6568 	.word	0x6c6c6568
 800262c:	00000000 	.word	0x00000000
 8002630:	6f77206f 	.word	0x6f77206f
 8002634:	00000000 	.word	0x00000000
 8002638:	0a646c72 	.word	0x0a646c72
 800263c:	00000000 	.word	0x00000000
 8002640:	800004f4 	.word	0x800004f4
 8002644:	800004f8 	.word	0x800004f8
 8002648:	800004fc 	.word	0x800004fc
 800264c:	00178793 	.word	0x00178793
 8002650:	80000500 	.word	0x80000500
 8002654:	80000504 	.word	0x80000504
 8002658:	80000508 	.word	0x80000508
 800265c:	fff78793 	.word	0xfff78793
 8002660:	8000050c 	.word	0x8000050c
 8002664:	80000510 	.word	0x80000510
 8002668:	80000514 	.word	0x80000514
 800266c:	80000518 	.word	0x80000518
 8002670:	8000051c 	.word	0x8000051c
 8002674:	00078513 	.word	0x00078513
 8002678:	80000520 	.word	0x80000520
 800267c:	80000524 	.word	0x80000524
 8002680:	80000528 	.word	0x80000528
 8002684:	8000052c 	.word	0x8000052c
 8002688:	80000530 	.word	0x80000530
 800268c:	80000534 	.word	0x80000534
 8002690:	00112e23 	.word	0x00112e23
 8002694:	80000538 	.word	0x80000538
 8002698:	8000053c 	.word	0x8000053c
 800269c:	80000540 	.word	0x80000540
 80026a0:	80000544 	.word	0x80000544
 80026a4:	80000548 	.word	0x80000548
 80026a8:	00060793 	.word	0x00060793
 80026ac:	8000054c 	.word	0x8000054c
 80026b0:	80000550 	.word	0x80000550
 80026b4:	80000554 	.word	0x80000554
 80026b8:	0440006f 	.word	0x0440006f
 80026bc:	80000558 	.word	0x80000558
 80026c0:	8000055c 	.word	0x8000055c
 80026c4:	80000560 	.word	0x80000560
 80026c8:	f11ff0ef 	.word	0xf11ff0ef
 80026cc:	80000564 	.word	0x80000564
 80026d0:	00050793 	.word	0x00050793
 80026d4:	80000568 	.word	0x80000568
 80026d8:	8000056c 	.word	0x8000056c
 80026dc:	80000570 	.word	0x80000570
 80026e0:	0007c783 	.word	0x0007c783
 80026e4:	80000574 	.word	0x80000574
 80026e8:	00078713 	.word	0x00078713
 80026ec:	80000578 	.word	0x80000578
 80026f0:	8000057c 	.word	0x8000057c
 80026f4:	80000580 	.word	0x80000580
 80026f8:	80000584 	.word	0x80000584
 80026fc:	80000588 	.word	0x80000588
 8002700:	8000058c 	.word	0x8000058c
 8002704:	80000590 	.word	0x80000590
 8002708:	80000594 	.word	0x80000594
 800270c:	80000598 	.word	0x80000598
 8002710:	8000059c 	.word	0x8000059c
 8002714:	800005a0 	.word	0x800005a0
 8002718:	800005a4 	.word	0x800005a4
 800271c:	800005a8 	.word	0x800005a8
 8002720:	800005ac 	.word	0x800005ac
 8002724:	800005b0 	.word	0x800005b0
 8002728:	800005b4 	.word	0x800005b4
 800272c:	800005b8 	.word	0x800005b8
 8002730:	800005bc 	.word	0x800005bc
 8002734:	800005c0 	.word	0x800005c0
 8002738:	4832      	ldr	r0, [pc, #200]	; (8002804 <APP_main+0x2054>)
 800273a:	f7fd ffcd 	bl	80006d8 <PUTFULL>
        PUTFULL(DTIM_BASE_ADDR + 1480, 0x0);
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	4830      	ldr	r0, [pc, #192]	; (8002808 <APP_main+0x2058>)
 8002748:	f7fd ffc6 	bl	80006d8 <PUTFULL>



        HAL_Delay(100);
 800274c:	2064      	movs	r0, #100	; 0x64
 800274e:	f001 f89b 	bl	8003888 <HAL_Delay>
        PUTFULL(CLINT_MSIP_ADDR, 1);
 8002752:	f04f 0201 	mov.w	r2, #1
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800275e:	f7fd ffbb 	bl	80006d8 <PUTFULL>

        HAL_Delay(100);
 8002762:	2064      	movs	r0, #100	; 0x64
 8002764:	f001 f890 	bl	8003888 <HAL_Delay>
        GET(0x80001000);
 8002768:	4828      	ldr	r0, [pc, #160]	; (800280c <APP_main+0x205c>)
 800276a:	f7fd ff49 	bl	8000600 <GET>
        break;
 800276e:	e041      	b.n	80027f4 <APP_main+0x2044>

      case '0':
        for (uint16_t i=0; i<0x44; i+=4) {
 8002770:	2300      	movs	r3, #0
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	e00a      	b.n	800278c <APP_main+0x1fdc>
          GET(GPIO_BASE_ADDR+i);
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800277c:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd ff3d 	bl	8000600 <GET>
        for (uint16_t i=0; i<0x44; i+=4) {
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	3304      	adds	r3, #4
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	2b43      	cmp	r3, #67	; 0x43
 8002790:	d9f1      	bls.n	8002776 <APP_main+0x1fc6>
        }
        break;
 8002792:	e02f      	b.n	80027f4 <APP_main+0x2044>


      case '1':
        PUTFULL(GPIO_BASE_ADDR + 0x08, 1);
 8002794:	f04f 0201 	mov.w	r2, #1
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	481c      	ldr	r0, [pc, #112]	; (8002810 <APP_main+0x2060>)
 800279e:	f7fd ff9b 	bl	80006d8 <PUTFULL>
        PUTFULL(GPIO_BASE_ADDR + 0x0C, 1);
 80027a2:	f04f 0201 	mov.w	r2, #1
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	481a      	ldr	r0, [pc, #104]	; (8002814 <APP_main+0x2064>)
 80027ac:	f7fd ff94 	bl	80006d8 <PUTFULL>
        break;
 80027b0:	e020      	b.n	80027f4 <APP_main+0x2044>
      case '2':
        PUTFULL(GPIO_BASE_ADDR + 0x08, 1);
 80027b2:	f04f 0201 	mov.w	r2, #1
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	4815      	ldr	r0, [pc, #84]	; (8002810 <APP_main+0x2060>)
 80027bc:	f7fd ff8c 	bl	80006d8 <PUTFULL>
        PUTFULL(GPIO_BASE_ADDR + 0x0C, 0);
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	4812      	ldr	r0, [pc, #72]	; (8002814 <APP_main+0x2064>)
 80027ca:	f7fd ff85 	bl	80006d8 <PUTFULL>
        break;
 80027ce:	e011      	b.n	80027f4 <APP_main+0x2044>

      case 'u':
        GET(UART_TXDATA_ADDR);
 80027d0:	f04f 40a8 	mov.w	r0, #1409286144	; 0x54000000
 80027d4:	f7fd ff14 	bl	8000600 <GET>
        GET(UART_RXDATA_ADDR);
 80027d8:	480f      	ldr	r0, [pc, #60]	; (8002818 <APP_main+0x2068>)
 80027da:	f7fd ff11 	bl	8000600 <GET>
        GET(UART_TXCTRL_ADDR);
 80027de:	480f      	ldr	r0, [pc, #60]	; (800281c <APP_main+0x206c>)
 80027e0:	f7fd ff0e 	bl	8000600 <GET>
        GET(UART_RXCTRL_ADDR);
 80027e4:	480e      	ldr	r0, [pc, #56]	; (8002820 <APP_main+0x2070>)
 80027e6:	f7fd ff0b 	bl	8000600 <GET>
        GET(UART_DIV_ADDR);
 80027ea:	480e      	ldr	r0, [pc, #56]	; (8002824 <APP_main+0x2074>)
 80027ec:	f7fd ff08 	bl	8000600 <GET>
        break;
 80027f0:	e000      	b.n	80027f4 <APP_main+0x2044>
    }
  }
 80027f2:	bf00      	nop

  HAL_Delay(50);
 80027f4:	2032      	movs	r0, #50	; 0x32
 80027f6:	f001 f847 	bl	8003888 <HAL_Delay>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	800005c4 	.word	0x800005c4
 8002808:	800005c8 	.word	0x800005c8
 800280c:	80001000 	.word	0x80001000
 8002810:	10012008 	.word	0x10012008
 8002814:	1001200c 	.word	0x1001200c
 8002818:	54000004 	.word	0x54000004
 800281c:	54000008 	.word	0x54000008
 8002820:	5400000c 	.word	0x5400000c
 8002824:	54000018 	.word	0x54000018

08002828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800282c:	f000 ffba 	bl	80037a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002830:	f000 f810 	bl	8002854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002834:	f000 f9ba 	bl	8002bac <MX_GPIO_Init>
  MX_DMA_Init();
 8002838:	f000 f998 	bl	8002b6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800283c:	f000 f96c 	bl	8002b18 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002840:	f000 f916 	bl	8002a70 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002844:	f000 f872 	bl	800292c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8002848:	f7fd feca 	bl	80005e0 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 800284c:	f7fd ffb0 	bl	80007b0 <APP_main>
 8002850:	e7fc      	b.n	800284c <main+0x24>
	...

08002854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b094      	sub	sp, #80	; 0x50
 8002858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285a:	f107 031c 	add.w	r3, r7, #28
 800285e:	2234      	movs	r2, #52	; 0x34
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fb40 	bl	8006ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	4b29      	ldr	r3, [pc, #164]	; (8002924 <SystemClock_Config+0xd0>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	4a28      	ldr	r2, [pc, #160]	; (8002924 <SystemClock_Config+0xd0>)
 8002882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002886:	6413      	str	r3, [r2, #64]	; 0x40
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <SystemClock_Config+0xd0>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002894:	2300      	movs	r3, #0
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	4b23      	ldr	r3, [pc, #140]	; (8002928 <SystemClock_Config+0xd4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <SystemClock_Config+0xd4>)
 800289e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <SystemClock_Config+0xd4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028ac:	603b      	str	r3, [r7, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028b8:	2310      	movs	r3, #16
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028bc:	2302      	movs	r3, #2
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028c4:	2308      	movs	r3, #8
 80028c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80028c8:	23a0      	movs	r3, #160	; 0xa0
 80028ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028cc:	2302      	movs	r3, #2
 80028ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028d0:	2302      	movs	r3, #2
 80028d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028d4:	2302      	movs	r3, #2
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 f87d 	bl	80049dc <HAL_RCC_OscConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028e8:	f000 f9ec 	bl	8002cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ec:	230f      	movs	r3, #15
 80028ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f0:	2302      	movs	r3, #2
 80028f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002902:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	2105      	movs	r1, #5
 800290a:	4618      	mov	r0, r3
 800290c:	f001 fda2 	bl	8004454 <HAL_RCC_ClockConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002916:	f000 f9d5 	bl	8002cc4 <Error_Handler>
  }
}
 800291a:	bf00      	nop
 800291c:	3750      	adds	r7, #80	; 0x50
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000

0800292c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b096      	sub	sp, #88	; 0x58
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002932:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]
 800295a:	615a      	str	r2, [r3, #20]
 800295c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	2220      	movs	r2, #32
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fabf 	bl	8006ee8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800296a:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <MX_TIM1_Init+0x13c>)
 800296c:	4a3f      	ldr	r2, [pc, #252]	; (8002a6c <MX_TIM1_Init+0x140>)
 800296e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <MX_TIM1_Init+0x13c>)
 8002972:	229f      	movs	r2, #159	; 0x9f
 8002974:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002976:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <MX_TIM1_Init+0x13c>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800297c:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <MX_TIM1_Init+0x13c>)
 800297e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002982:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002984:	4b38      	ldr	r3, [pc, #224]	; (8002a68 <MX_TIM1_Init+0x13c>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <MX_TIM1_Init+0x13c>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002990:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <MX_TIM1_Init+0x13c>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002996:	4834      	ldr	r0, [pc, #208]	; (8002a68 <MX_TIM1_Init+0x13c>)
 8002998:	f002 fabe 	bl	8004f18 <HAL_TIM_Base_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80029a2:	f000 f98f 	bl	8002cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029b0:	4619      	mov	r1, r3
 80029b2:	482d      	ldr	r0, [pc, #180]	; (8002a68 <MX_TIM1_Init+0x13c>)
 80029b4:	f002 fffe 	bl	80059b4 <HAL_TIM_ConfigClockSource>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80029be:	f000 f981 	bl	8002cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029c2:	4829      	ldr	r0, [pc, #164]	; (8002a68 <MX_TIM1_Init+0x13c>)
 80029c4:	f002 faf7 	bl	8004fb6 <HAL_TIM_PWM_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80029ce:	f000 f979 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029de:	4619      	mov	r1, r3
 80029e0:	4821      	ldr	r0, [pc, #132]	; (8002a68 <MX_TIM1_Init+0x13c>)
 80029e2:	f003 fd11 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80029ec:	f000 f96a 	bl	8002cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80029f0:	2370      	movs	r3, #112	; 0x70
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 80029f4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029fe:	2300      	movs	r3, #0
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a12:	2200      	movs	r2, #0
 8002a14:	4619      	mov	r1, r3
 8002a16:	4814      	ldr	r0, [pc, #80]	; (8002a68 <MX_TIM1_Init+0x13c>)
 8002a18:	f002 ff0a 	bl	8005830 <HAL_TIM_PWM_ConfigChannel>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002a22:	f000 f94f 	bl	8002cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	4619      	mov	r1, r3
 8002a48:	4807      	ldr	r0, [pc, #28]	; (8002a68 <MX_TIM1_Init+0x13c>)
 8002a4a:	f003 fd59 	bl	8006500 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002a54:	f000 f936 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a58:	4803      	ldr	r0, [pc, #12]	; (8002a68 <MX_TIM1_Init+0x13c>)
 8002a5a:	f000 f9d3 	bl	8002e04 <HAL_TIM_MspPostInit>

}
 8002a5e:	bf00      	nop
 8002a60:	3758      	adds	r7, #88	; 0x58
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000360 	.word	0x20000360
 8002a6c:	40010000 	.word	0x40010000

08002a70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a80:	463b      	mov	r3, r7
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <MX_TIM4_Init+0xa4>)
 8002a90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002aa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa6:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aac:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002ab2:	4817      	ldr	r0, [pc, #92]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002ab4:	f002 fba0 	bl	80051f8 <HAL_TIM_IC_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002abe:	f000 f901 	bl	8002cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002aca:	f107 0310 	add.w	r3, r7, #16
 8002ace:	4619      	mov	r1, r3
 8002ad0:	480f      	ldr	r0, [pc, #60]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002ad2:	f003 fc99 	bl	8006408 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002adc:	f000 f8f2 	bl	8002cc4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002af0:	463b      	mov	r3, r7
 8002af2:	2200      	movs	r2, #0
 8002af4:	4619      	mov	r1, r3
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <MX_TIM4_Init+0xa0>)
 8002af8:	f002 fdfe 	bl	80056f8 <HAL_TIM_IC_ConfigChannel>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002b02:	f000 f8df 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b06:	bf00      	nop
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200003a8 	.word	0x200003a8
 8002b14:	40000800 	.word	0x40000800

08002b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <MX_USART2_UART_Init+0x50>)
 8002b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b3e:	220c      	movs	r2, #12
 8002b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b4e:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_USART2_UART_Init+0x4c>)
 8002b50:	f003 fd3c 	bl	80065cc <HAL_UART_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002b5a:	f000 f8b3 	bl	8002cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200003f0 	.word	0x200003f0
 8002b68:	40004400 	.word	0x40004400

08002b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <MX_DMA_Init+0x3c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ba8 <MX_DMA_Init+0x3c>)
 8002b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <MX_DMA_Init+0x3c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	2010      	movs	r0, #16
 8002b94:	f000 ff77 	bl	8003a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b98:	2010      	movs	r0, #16
 8002b9a:	f000 ff90 	bl	8003abe <HAL_NVIC_EnableIRQ>

}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800

08002bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb2:	f107 030c 	add.w	r3, r7, #12
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a3a      	ldr	r2, [pc, #232]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a33      	ldr	r2, [pc, #204]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a2c      	ldr	r2, [pc, #176]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b2a      	ldr	r3, [pc, #168]	; (8002cb4 <MX_GPIO_Init+0x108>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2103      	movs	r1, #3
 8002c1a:	4827      	ldr	r0, [pc, #156]	; (8002cb8 <MX_GPIO_Init+0x10c>)
 8002c1c:	f001 fc00 	bl	8004420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2121      	movs	r1, #33	; 0x21
 8002c24:	4825      	ldr	r0, [pc, #148]	; (8002cbc <MX_GPIO_Init+0x110>)
 8002c26:	f001 fbfb 	bl	8004420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	481e      	ldr	r0, [pc, #120]	; (8002cb8 <MX_GPIO_Init+0x10c>)
 8002c40:	f001 fa42 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 8002c44:	2303      	movs	r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4817      	ldr	r0, [pc, #92]	; (8002cb8 <MX_GPIO_Init+0x10c>)
 8002c5c:	f001 fa34 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5;
 8002c60:	2321      	movs	r3, #33	; 0x21
 8002c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	4619      	mov	r1, r3
 8002c76:	4811      	ldr	r0, [pc, #68]	; (8002cbc <MX_GPIO_Init+0x110>)
 8002c78:	f001 fa26 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 8002c7c:	2312      	movs	r3, #18
 8002c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	480b      	ldr	r0, [pc, #44]	; (8002cbc <MX_GPIO_Init+0x110>)
 8002c90:	f001 fa1a 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8002c94:	2301      	movs	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4806      	ldr	r0, [pc, #24]	; (8002cc0 <MX_GPIO_Init+0x114>)
 8002ca8:	f001 fa0e 	bl	80040c8 <HAL_GPIO_Init>

}
 8002cac:	bf00      	nop
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40020400 	.word	0x40020400

08002cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc8:	b672      	cpsid	i
}
 8002cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <Error_Handler+0x8>
	...

08002cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_MspInit+0x4c>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <HAL_MspInit+0x4c>)
 8002ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_MspInit+0x4c>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_MspInit+0x4c>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	4a08      	ldr	r2, [pc, #32]	; (8002d1c <HAL_MspInit+0x4c>)
 8002cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6413      	str	r3, [r2, #64]	; 0x40
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_MspInit+0x4c>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_TIM_Base_MspInit+0x3c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d10d      	bne.n	8002d4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_TIM_Base_MspInit+0x40>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a09      	ldr	r2, [pc, #36]	; (8002d60 <HAL_TIM_Base_MspInit+0x40>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_TIM_Base_MspInit+0x40>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40023800 	.word	0x40023800

08002d64 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0314 	add.w	r3, r7, #20
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_TIM_IC_MspInit+0x94>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d133      	bne.n	8002dee <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <HAL_TIM_IC_MspInit+0x98>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	; (8002dfc <HAL_TIM_IC_MspInit+0x98>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_TIM_IC_MspInit+0x98>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_TIM_IC_MspInit+0x98>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <HAL_TIM_IC_MspInit+0x98>)
 8002dac:	f043 0302 	orr.w	r3, r3, #2
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_TIM_IC_MspInit+0x98>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dbe:	2340      	movs	r3, #64	; 0x40
 8002dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd2:	f107 0314 	add.w	r3, r7, #20
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4809      	ldr	r0, [pc, #36]	; (8002e00 <HAL_TIM_IC_MspInit+0x9c>)
 8002dda:	f001 f975 	bl	80040c8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	201e      	movs	r0, #30
 8002de4:	f000 fe4f 	bl	8003a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002de8:	201e      	movs	r0, #30
 8002dea:	f000 fe68 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002dee:	bf00      	nop
 8002df0:	3728      	adds	r7, #40	; 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40020400 	.word	0x40020400

08002e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <HAL_TIM_MspPostInit+0x68>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d11e      	bne.n	8002e64 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_TIM_MspPostInit+0x6c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_TIM_MspPostInit+0x6c>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_TIM_MspPostInit+0x6c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e54:	2301      	movs	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4805      	ldr	r0, [pc, #20]	; (8002e74 <HAL_TIM_MspPostInit+0x70>)
 8002e60:	f001 f932 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e64:	bf00      	nop
 8002e66:	3720      	adds	r7, #32
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020000 	.word	0x40020000

08002e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a30      	ldr	r2, [pc, #192]	; (8002f58 <HAL_UART_MspInit+0xe0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d159      	bne.n	8002f4e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_UART_MspInit+0xe4>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <HAL_UART_MspInit+0xe4>)
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <HAL_UART_MspInit+0xe4>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_UART_MspInit+0xe4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <HAL_UART_MspInit+0xe4>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <HAL_UART_MspInit+0xe4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	481c      	ldr	r0, [pc, #112]	; (8002f60 <HAL_UART_MspInit+0xe8>)
 8002eee:	f001 f8eb 	bl	80040c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_UART_MspInit+0xf0>)
 8002ef6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002efe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f00:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f32:	480c      	ldr	r0, [pc, #48]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f34:	f000 fdde 	bl	8003af4 <HAL_DMA_Init>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002f3e:	f7ff fec1 	bl	8002cc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
 8002f48:	4a06      	ldr	r2, [pc, #24]	; (8002f64 <HAL_UART_MspInit+0xec>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40004400 	.word	0x40004400
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	20000434 	.word	0x20000434
 8002f68:	40026088 	.word	0x40026088

08002f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <NMI_Handler+0x4>

08002f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <HardFault_Handler+0x4>

08002f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <MemManage_Handler+0x4>

08002f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f82:	e7fe      	b.n	8002f82 <BusFault_Handler+0x4>

08002f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f88:	e7fe      	b.n	8002f88 <UsageFault_Handler+0x4>

08002f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb8:	f000 fc46 	bl	8003848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <DMA1_Stream5_IRQHandler+0x10>)
 8002fc6:	f000 fe43 	bl	8003c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000434 	.word	0x20000434

08002fd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <TIM4_IRQHandler+0x10>)
 8002fda:	f002 fa85 	bl	80054e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200003a8 	.word	0x200003a8

08002fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <_sbrk+0x5c>)
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <_sbrk+0x60>)
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <_sbrk+0x64>)
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <_sbrk+0x68>)
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <_sbrk+0x64>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4413      	add	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	429a      	cmp	r2, r3
 8003016:	d207      	bcs.n	8003028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003018:	f003 ff3c 	bl	8006e94 <__errno>
 800301c:	4603      	mov	r3, r0
 800301e:	220c      	movs	r2, #12
 8003020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	e009      	b.n	800303c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	4a05      	ldr	r2, [pc, #20]	; (800304c <_sbrk+0x64>)
 8003038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20020000 	.word	0x20020000
 8003048:	00000400 	.word	0x00000400
 800304c:	20000494 	.word	0x20000494
 8003050:	200004b0 	.word	0x200004b0

08003054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003058:	4b06      	ldr	r3, [pc, #24]	; (8003074 <SystemInit+0x20>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <SystemInit+0x20>)
 8003060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8003086:	2b00      	cmp	r3, #0
 8003088:	d034      	beq.n	80030f4 <TL_update+0x7c>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8003090:	461a      	mov	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	7edb      	ldrb	r3, [r3, #27]
 8003098:	461a      	mov	r2, r3
 800309a:	2101      	movs	r1, #1
 800309c:	4834      	ldr	r0, [pc, #208]	; (8003170 <TL_update+0xf8>)
 800309e:	f001 f9bf 	bl	8004420 <HAL_GPIO_WritePin>

    if (tl->tx_bit_offset == 0) {
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <TL_update+0x48>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 80030ac:	2201      	movs	r2, #1
 80030ae:	2101      	movs	r1, #1
 80030b0:	4830      	ldr	r0, [pc, #192]	; (8003174 <TL_update+0xfc>)
 80030b2:	f001 f9b5 	bl	8004420 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 80030b6:	2201      	movs	r2, #1
 80030b8:	2102      	movs	r1, #2
 80030ba:	482d      	ldr	r0, [pc, #180]	; (8003170 <TL_update+0xf8>)
 80030bc:	f001 f9b0 	bl	8004420 <HAL_GPIO_WritePin>
    }


    if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80030c6:	2b7b      	cmp	r3, #123	; 0x7b
 80030c8:	d10c      	bne.n	80030e4 <TL_update+0x6c>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2102      	movs	r1, #2
 80030ce:	4828      	ldr	r0, [pc, #160]	; (8003170 <TL_update+0xf8>)
 80030d0:	f001 f9a6 	bl	8004420 <HAL_GPIO_WritePin>
      tl->tx_pending = 0;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
      tl->tx_finished = 1;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    }

    tl->tx_bit_offset += 1;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 80030ea:	3301      	adds	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  }

  if (tl->rx_pending) {
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d033      	beq.n	8003166 <TL_update+0xee>
    if (tl->rx_finished) {
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <TL_update+0xa2>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 0);
 8003108:	2200      	movs	r2, #0
 800310a:	2101      	movs	r1, #1
 800310c:	4819      	ldr	r0, [pc, #100]	; (8003174 <TL_update+0xfc>)
 800310e:	f001 f987 	bl	8004420 <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
    }
    if (HAL_GPIO_ReadPin(TL_MISO_Valid_GPIO_Port, TL_MISO_Valid_Pin) == GPIO_PIN_SET) {
 800311a:	2102      	movs	r1, #2
 800311c:	4815      	ldr	r0, [pc, #84]	; (8003174 <TL_update+0xfc>)
 800311e:	f001 f967 	bl	80043f0 <HAL_GPIO_ReadPin>
 8003122:	4603      	mov	r3, r0
 8003124:	2b01      	cmp	r3, #1
 8003126:	d11e      	bne.n	8003166 <TL_update+0xee>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_MISO_Data_GPIO_Port, TL_MISO_Data_Pin);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800312e:	461c      	mov	r4, r3
 8003130:	2110      	movs	r1, #16
 8003132:	4810      	ldr	r0, [pc, #64]	; (8003174 <TL_update+0xfc>)
 8003134:	f001 f95c 	bl	80043f0 <HAL_GPIO_ReadPin>
 8003138:	4603      	mov	r3, r0
 800313a:	461a      	mov	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4423      	add	r3, r4
 8003140:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b

      tl->rx_bit_offset += 1;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800314a:	3301      	adds	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246

      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800315a:	2b7b      	cmp	r3, #123	; 0x7b
 800315c:	d103      	bne.n	8003166 <TL_update+0xee>
        tl->rx_finished = 1;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
      }
    }
  }
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bd90      	pop	{r4, r7, pc}
 800316e:	bf00      	nop
 8003170:	40020800 	.word	0x40020800
 8003174:	40020000 	.word	0x40020000

08003178 <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 8003178:	b4f0      	push	{r4, r5, r6, r7}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8003180:	2100      	movs	r1, #0
 8003182:	83f9      	strh	r1, [r7, #30]
 8003184:	e011      	b.n	80031aa <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	7e89      	ldrb	r1, [r1, #26]
 800318a:	4608      	mov	r0, r1
 800318c:	8bf9      	ldrh	r1, [r7, #30]
 800318e:	fa40 f101 	asr.w	r1, r0, r1
 8003192:	b2c8      	uxtb	r0, r1
 8003194:	8bf9      	ldrh	r1, [r7, #30]
 8003196:	f000 0001 	and.w	r0, r0, #1
 800319a:	b2c4      	uxtb	r4, r0
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4401      	add	r1, r0
 80031a0:	4620      	mov	r0, r4
 80031a2:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80031a4:	8bf9      	ldrh	r1, [r7, #30]
 80031a6:	3101      	adds	r1, #1
 80031a8:	83f9      	strh	r1, [r7, #30]
 80031aa:	8bf9      	ldrh	r1, [r7, #30]
 80031ac:	2900      	cmp	r1, #0
 80031ae:	d0ea      	beq.n	8003186 <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80031b0:	2100      	movs	r1, #0
 80031b2:	83b9      	strh	r1, [r7, #28]
 80031b4:	e012      	b.n	80031dc <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->mask >> i) & 0b1;
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	7e49      	ldrb	r1, [r1, #25]
 80031ba:	4608      	mov	r0, r1
 80031bc:	8bb9      	ldrh	r1, [r7, #28]
 80031be:	fa40 f101 	asr.w	r1, r0, r1
 80031c2:	b2c8      	uxtb	r0, r1
 80031c4:	8bb9      	ldrh	r1, [r7, #28]
 80031c6:	3101      	adds	r1, #1
 80031c8:	f000 0001 	and.w	r0, r0, #1
 80031cc:	b2c4      	uxtb	r4, r0
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4401      	add	r1, r0
 80031d2:	4620      	mov	r0, r4
 80031d4:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80031d6:	8bb9      	ldrh	r1, [r7, #28]
 80031d8:	3101      	adds	r1, #1
 80031da:	83b9      	strh	r1, [r7, #28]
 80031dc:	8bb9      	ldrh	r1, [r7, #28]
 80031de:	2907      	cmp	r1, #7
 80031e0:	d9e9      	bls.n	80031b6 <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80031e2:	2100      	movs	r1, #0
 80031e4:	8379      	strh	r1, [r7, #26]
 80031e6:	e012      	b.n	800320e <TL_serialize+0x96>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->corrupt >> i) & 0b1;
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	7e09      	ldrb	r1, [r1, #24]
 80031ec:	4608      	mov	r0, r1
 80031ee:	8b79      	ldrh	r1, [r7, #26]
 80031f0:	fa40 f101 	asr.w	r1, r0, r1
 80031f4:	b2c8      	uxtb	r0, r1
 80031f6:	8b79      	ldrh	r1, [r7, #26]
 80031f8:	3109      	adds	r1, #9
 80031fa:	f000 0001 	and.w	r0, r0, #1
 80031fe:	b2c4      	uxtb	r4, r0
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4401      	add	r1, r0
 8003204:	4620      	mov	r0, r4
 8003206:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8003208:	8b79      	ldrh	r1, [r7, #26]
 800320a:	3101      	adds	r1, #1
 800320c:	8379      	strh	r1, [r7, #26]
 800320e:	8b79      	ldrh	r1, [r7, #26]
 8003210:	2900      	cmp	r1, #0
 8003212:	d0e9      	beq.n	80031e8 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8003214:	2100      	movs	r1, #0
 8003216:	8339      	strh	r1, [r7, #24]
 8003218:	e01e      	b.n	8003258 <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8003220:	8b3c      	ldrh	r4, [r7, #24]
 8003222:	f1c4 0620 	rsb	r6, r4, #32
 8003226:	f1a4 0520 	sub.w	r5, r4, #32
 800322a:	fa20 f204 	lsr.w	r2, r0, r4
 800322e:	fa01 f606 	lsl.w	r6, r1, r6
 8003232:	4332      	orrs	r2, r6
 8003234:	fa21 f505 	lsr.w	r5, r1, r5
 8003238:	432a      	orrs	r2, r5
 800323a:	fa21 f304 	lsr.w	r3, r1, r4
 800323e:	b2d0      	uxtb	r0, r2
 8003240:	8b39      	ldrh	r1, [r7, #24]
 8003242:	310a      	adds	r1, #10
 8003244:	f000 0001 	and.w	r0, r0, #1
 8003248:	b2c4      	uxtb	r4, r0
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4401      	add	r1, r0
 800324e:	4620      	mov	r0, r4
 8003250:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8003252:	8b39      	ldrh	r1, [r7, #24]
 8003254:	3101      	adds	r1, #1
 8003256:	8339      	strh	r1, [r7, #24]
 8003258:	8b39      	ldrh	r1, [r7, #24]
 800325a:	293f      	cmp	r1, #63	; 0x3f
 800325c:	d9dd      	bls.n	800321a <TL_serialize+0xa2>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 800325e:	2300      	movs	r3, #0
 8003260:	82fb      	strh	r3, [r7, #22]
 8003262:	e011      	b.n	8003288 <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->address >> i) & 0b1;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	8afb      	ldrh	r3, [r7, #22]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	b2da      	uxtb	r2, r3
 8003270:	8afb      	ldrh	r3, [r7, #22]
 8003272:	334a      	adds	r3, #74	; 0x4a
 8003274:	f002 0201 	and.w	r2, r2, #1
 8003278:	b2d1      	uxtb	r1, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	460a      	mov	r2, r1
 8003280:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8003282:	8afb      	ldrh	r3, [r7, #22]
 8003284:	3301      	adds	r3, #1
 8003286:	82fb      	strh	r3, [r7, #22]
 8003288:	8afb      	ldrh	r3, [r7, #22]
 800328a:	2b1f      	cmp	r3, #31
 800328c:	d9ea      	bls.n	8003264 <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 800328e:	2300      	movs	r3, #0
 8003290:	82bb      	strh	r3, [r7, #20]
 8003292:	e012      	b.n	80032ba <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	791b      	ldrb	r3, [r3, #4]
 8003298:	461a      	mov	r2, r3
 800329a:	8abb      	ldrh	r3, [r7, #20]
 800329c:	fa42 f303 	asr.w	r3, r2, r3
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	8abb      	ldrh	r3, [r7, #20]
 80032a4:	336a      	adds	r3, #106	; 0x6a
 80032a6:	f002 0201 	and.w	r2, r2, #1
 80032aa:	b2d1      	uxtb	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	460a      	mov	r2, r1
 80032b2:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80032b4:	8abb      	ldrh	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	82bb      	strh	r3, [r7, #20]
 80032ba:	8abb      	ldrh	r3, [r7, #20]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d9e9      	bls.n	8003294 <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80032c0:	2300      	movs	r3, #0
 80032c2:	827b      	strh	r3, [r7, #18]
 80032c4:	e012      	b.n	80032ec <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	78db      	ldrb	r3, [r3, #3]
 80032ca:	461a      	mov	r2, r3
 80032cc:	8a7b      	ldrh	r3, [r7, #18]
 80032ce:	fa42 f303 	asr.w	r3, r2, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	8a7b      	ldrh	r3, [r7, #18]
 80032d6:	336e      	adds	r3, #110	; 0x6e
 80032d8:	f002 0201 	and.w	r2, r2, #1
 80032dc:	b2d1      	uxtb	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4413      	add	r3, r2
 80032e2:	460a      	mov	r2, r1
 80032e4:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80032e6:	8a7b      	ldrh	r3, [r7, #18]
 80032e8:	3301      	adds	r3, #1
 80032ea:	827b      	strh	r3, [r7, #18]
 80032ec:	8a7b      	ldrh	r3, [r7, #18]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d9e9      	bls.n	80032c6 <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80032f2:	2300      	movs	r3, #0
 80032f4:	823b      	strh	r3, [r7, #16]
 80032f6:	e012      	b.n	800331e <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	789b      	ldrb	r3, [r3, #2]
 80032fc:	461a      	mov	r2, r3
 80032fe:	8a3b      	ldrh	r3, [r7, #16]
 8003300:	fa42 f303 	asr.w	r3, r2, r3
 8003304:	b2da      	uxtb	r2, r3
 8003306:	8a3b      	ldrh	r3, [r7, #16]
 8003308:	3372      	adds	r3, #114	; 0x72
 800330a:	f002 0201 	and.w	r2, r2, #1
 800330e:	b2d1      	uxtb	r1, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	460a      	mov	r2, r1
 8003316:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8003318:	8a3b      	ldrh	r3, [r7, #16]
 800331a:	3301      	adds	r3, #1
 800331c:	823b      	strh	r3, [r7, #16]
 800331e:	8a3b      	ldrh	r3, [r7, #16]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d9e9      	bls.n	80032f8 <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8003324:	2300      	movs	r3, #0
 8003326:	81fb      	strh	r3, [r7, #14]
 8003328:	e012      	b.n	8003350 <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	785b      	ldrb	r3, [r3, #1]
 800332e:	461a      	mov	r2, r3
 8003330:	89fb      	ldrh	r3, [r7, #14]
 8003332:	fa42 f303 	asr.w	r3, r2, r3
 8003336:	b2da      	uxtb	r2, r3
 8003338:	89fb      	ldrh	r3, [r7, #14]
 800333a:	3375      	adds	r3, #117	; 0x75
 800333c:	f002 0201 	and.w	r2, r2, #1
 8003340:	b2d1      	uxtb	r1, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	460a      	mov	r2, r1
 8003348:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800334a:	89fb      	ldrh	r3, [r7, #14]
 800334c:	3301      	adds	r3, #1
 800334e:	81fb      	strh	r3, [r7, #14]
 8003350:	89fb      	ldrh	r3, [r7, #14]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d9e9      	bls.n	800332a <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8003356:	2300      	movs	r3, #0
 8003358:	81bb      	strh	r3, [r7, #12]
 800335a:	e012      	b.n	8003382 <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	89bb      	ldrh	r3, [r7, #12]
 8003364:	fa42 f303 	asr.w	r3, r2, r3
 8003368:	b2da      	uxtb	r2, r3
 800336a:	89bb      	ldrh	r3, [r7, #12]
 800336c:	3378      	adds	r3, #120	; 0x78
 800336e:	f002 0201 	and.w	r2, r2, #1
 8003372:	b2d1      	uxtb	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	460a      	mov	r2, r1
 800337a:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 800337c:	89bb      	ldrh	r3, [r7, #12]
 800337e:	3301      	adds	r3, #1
 8003380:	81bb      	strh	r3, [r7, #12]
 8003382:	89bb      	ldrh	r3, [r7, #12]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d9e9      	bls.n	800335c <TL_serialize+0x1e4>
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bcf0      	pop	{r4, r5, r6, r7}
 8003392:	4770      	bx	lr

08003394 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 8003394:	b4f0      	push	{r4, r5, r6, r7}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  frame->chanid = 0;
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	2000      	movs	r0, #0
 80033a0:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	2000      	movs	r0, #0
 80033a6:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	2000      	movs	r0, #0
 80033ac:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	2000      	movs	r0, #0
 80033b2:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	2000      	movs	r0, #0
 80033b8:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	2000      	movs	r0, #0
 80033be:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 80033c0:	687e      	ldr	r6, [r7, #4]
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	2000      	movs	r0, #0
 80033d2:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	2000      	movs	r0, #0
 80033d8:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	2000      	movs	r0, #0
 80033de:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80033e0:	2100      	movs	r1, #0
 80033e2:	83f9      	strh	r1, [r7, #30]
 80033e4:	e014      	b.n	8003410 <TL_deserialize+0x7c>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	7e89      	ldrb	r1, [r1, #26]
 80033ea:	b248      	sxtb	r0, r1
 80033ec:	8bf9      	ldrh	r1, [r7, #30]
 80033ee:	687e      	ldr	r6, [r7, #4]
 80033f0:	4431      	add	r1, r6
 80033f2:	7ec9      	ldrb	r1, [r1, #27]
 80033f4:	f001 0601 	and.w	r6, r1, #1
 80033f8:	8bf9      	ldrh	r1, [r7, #30]
 80033fa:	fa06 f101 	lsl.w	r1, r6, r1
 80033fe:	b249      	sxtb	r1, r1
 8003400:	4301      	orrs	r1, r0
 8003402:	b249      	sxtb	r1, r1
 8003404:	b2c8      	uxtb	r0, r1
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 800340a:	8bf9      	ldrh	r1, [r7, #30]
 800340c:	3101      	adds	r1, #1
 800340e:	83f9      	strh	r1, [r7, #30]
 8003410:	8bf9      	ldrh	r1, [r7, #30]
 8003412:	2900      	cmp	r1, #0
 8003414:	d0e7      	beq.n	80033e6 <TL_deserialize+0x52>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8003416:	2100      	movs	r1, #0
 8003418:	83b9      	strh	r1, [r7, #28]
 800341a:	e015      	b.n	8003448 <TL_deserialize+0xb4>
    frame->mask |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	7e49      	ldrb	r1, [r1, #25]
 8003420:	b248      	sxtb	r0, r1
 8003422:	8bb9      	ldrh	r1, [r7, #28]
 8003424:	3101      	adds	r1, #1
 8003426:	687e      	ldr	r6, [r7, #4]
 8003428:	4431      	add	r1, r6
 800342a:	7ec9      	ldrb	r1, [r1, #27]
 800342c:	f001 0601 	and.w	r6, r1, #1
 8003430:	8bb9      	ldrh	r1, [r7, #28]
 8003432:	fa06 f101 	lsl.w	r1, r6, r1
 8003436:	b249      	sxtb	r1, r1
 8003438:	4301      	orrs	r1, r0
 800343a:	b249      	sxtb	r1, r1
 800343c:	b2c8      	uxtb	r0, r1
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	7648      	strb	r0, [r1, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8003442:	8bb9      	ldrh	r1, [r7, #28]
 8003444:	3101      	adds	r1, #1
 8003446:	83b9      	strh	r1, [r7, #28]
 8003448:	8bb9      	ldrh	r1, [r7, #28]
 800344a:	2907      	cmp	r1, #7
 800344c:	d9e6      	bls.n	800341c <TL_deserialize+0x88>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800344e:	2100      	movs	r1, #0
 8003450:	8379      	strh	r1, [r7, #26]
 8003452:	e015      	b.n	8003480 <TL_deserialize+0xec>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	7e09      	ldrb	r1, [r1, #24]
 8003458:	b248      	sxtb	r0, r1
 800345a:	8b79      	ldrh	r1, [r7, #26]
 800345c:	3109      	adds	r1, #9
 800345e:	687e      	ldr	r6, [r7, #4]
 8003460:	4431      	add	r1, r6
 8003462:	7ec9      	ldrb	r1, [r1, #27]
 8003464:	f001 0601 	and.w	r6, r1, #1
 8003468:	8b79      	ldrh	r1, [r7, #26]
 800346a:	fa06 f101 	lsl.w	r1, r6, r1
 800346e:	b249      	sxtb	r1, r1
 8003470:	4301      	orrs	r1, r0
 8003472:	b249      	sxtb	r1, r1
 8003474:	b2c8      	uxtb	r0, r1
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800347a:	8b79      	ldrh	r1, [r7, #26]
 800347c:	3101      	adds	r1, #1
 800347e:	8379      	strh	r1, [r7, #26]
 8003480:	8b79      	ldrh	r1, [r7, #26]
 8003482:	2900      	cmp	r1, #0
 8003484:	d0e6      	beq.n	8003454 <TL_deserialize+0xc0>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 8003486:	2100      	movs	r1, #0
 8003488:	8339      	strh	r1, [r7, #24]
 800348a:	e01b      	b.n	80034c4 <TL_deserialize+0x130>
    frame->data |= ((frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8003492:	8b3e      	ldrh	r6, [r7, #24]
 8003494:	f106 0c0a 	add.w	ip, r6, #10
 8003498:	687e      	ldr	r6, [r7, #4]
 800349a:	4466      	add	r6, ip
 800349c:	7ef6      	ldrb	r6, [r6, #27]
 800349e:	f006 0c01 	and.w	ip, r6, #1
 80034a2:	8b3e      	ldrh	r6, [r7, #24]
 80034a4:	fa0c f606 	lsl.w	r6, ip, r6
 80034a8:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80034ac:	4632      	mov	r2, r6
 80034ae:	4663      	mov	r3, ip
 80034b0:	ea40 0402 	orr.w	r4, r0, r2
 80034b4:	ea41 0503 	orr.w	r5, r1, r3
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	e9c1 4504 	strd	r4, r5, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80034be:	8b39      	ldrh	r1, [r7, #24]
 80034c0:	3101      	adds	r1, #1
 80034c2:	8339      	strh	r1, [r7, #24]
 80034c4:	8b39      	ldrh	r1, [r7, #24]
 80034c6:	293f      	cmp	r1, #63	; 0x3f
 80034c8:	d9e0      	bls.n	800348c <TL_deserialize+0xf8>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80034ca:	2300      	movs	r3, #0
 80034cc:	82fb      	strh	r3, [r7, #22]
 80034ce:	e011      	b.n	80034f4 <TL_deserialize+0x160>
    frame->address |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	8afa      	ldrh	r2, [r7, #22]
 80034d6:	324a      	adds	r2, #74	; 0x4a
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	440a      	add	r2, r1
 80034dc:	7ed2      	ldrb	r2, [r2, #27]
 80034de:	f002 0101 	and.w	r1, r2, #1
 80034e2:	8afa      	ldrh	r2, [r7, #22]
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80034ee:	8afb      	ldrh	r3, [r7, #22]
 80034f0:	3301      	adds	r3, #1
 80034f2:	82fb      	strh	r3, [r7, #22]
 80034f4:	8afb      	ldrh	r3, [r7, #22]
 80034f6:	2b1f      	cmp	r3, #31
 80034f8:	d9ea      	bls.n	80034d0 <TL_deserialize+0x13c>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80034fa:	2300      	movs	r3, #0
 80034fc:	82bb      	strh	r3, [r7, #20]
 80034fe:	e015      	b.n	800352c <TL_deserialize+0x198>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	791b      	ldrb	r3, [r3, #4]
 8003504:	b25a      	sxtb	r2, r3
 8003506:	8abb      	ldrh	r3, [r7, #20]
 8003508:	336a      	adds	r3, #106	; 0x6a
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	440b      	add	r3, r1
 800350e:	7edb      	ldrb	r3, [r3, #27]
 8003510:	f003 0101 	and.w	r1, r3, #1
 8003514:	8abb      	ldrh	r3, [r7, #20]
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	b25b      	sxtb	r3, r3
 800351c:	4313      	orrs	r3, r2
 800351e:	b25b      	sxtb	r3, r3
 8003520:	b2da      	uxtb	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8003526:	8abb      	ldrh	r3, [r7, #20]
 8003528:	3301      	adds	r3, #1
 800352a:	82bb      	strh	r3, [r7, #20]
 800352c:	8abb      	ldrh	r3, [r7, #20]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d9e6      	bls.n	8003500 <TL_deserialize+0x16c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8003532:	2300      	movs	r3, #0
 8003534:	827b      	strh	r3, [r7, #18]
 8003536:	e015      	b.n	8003564 <TL_deserialize+0x1d0>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	78db      	ldrb	r3, [r3, #3]
 800353c:	b25a      	sxtb	r2, r3
 800353e:	8a7b      	ldrh	r3, [r7, #18]
 8003540:	336e      	adds	r3, #110	; 0x6e
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	440b      	add	r3, r1
 8003546:	7edb      	ldrb	r3, [r3, #27]
 8003548:	f003 0101 	and.w	r1, r3, #1
 800354c:	8a7b      	ldrh	r3, [r7, #18]
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	b25b      	sxtb	r3, r3
 8003554:	4313      	orrs	r3, r2
 8003556:	b25b      	sxtb	r3, r3
 8003558:	b2da      	uxtb	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800355e:	8a7b      	ldrh	r3, [r7, #18]
 8003560:	3301      	adds	r3, #1
 8003562:	827b      	strh	r3, [r7, #18]
 8003564:	8a7b      	ldrh	r3, [r7, #18]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d9e6      	bls.n	8003538 <TL_deserialize+0x1a4>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800356a:	2300      	movs	r3, #0
 800356c:	823b      	strh	r3, [r7, #16]
 800356e:	e015      	b.n	800359c <TL_deserialize+0x208>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	789b      	ldrb	r3, [r3, #2]
 8003574:	b25a      	sxtb	r2, r3
 8003576:	8a3b      	ldrh	r3, [r7, #16]
 8003578:	3372      	adds	r3, #114	; 0x72
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	440b      	add	r3, r1
 800357e:	7edb      	ldrb	r3, [r3, #27]
 8003580:	f003 0101 	and.w	r1, r3, #1
 8003584:	8a3b      	ldrh	r3, [r7, #16]
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	b25b      	sxtb	r3, r3
 800358c:	4313      	orrs	r3, r2
 800358e:	b25b      	sxtb	r3, r3
 8003590:	b2da      	uxtb	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8003596:	8a3b      	ldrh	r3, [r7, #16]
 8003598:	3301      	adds	r3, #1
 800359a:	823b      	strh	r3, [r7, #16]
 800359c:	8a3b      	ldrh	r3, [r7, #16]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d9e6      	bls.n	8003570 <TL_deserialize+0x1dc>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80035a2:	2300      	movs	r3, #0
 80035a4:	81fb      	strh	r3, [r7, #14]
 80035a6:	e015      	b.n	80035d4 <TL_deserialize+0x240>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	b25a      	sxtb	r2, r3
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	3375      	adds	r3, #117	; 0x75
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	440b      	add	r3, r1
 80035b6:	7edb      	ldrb	r3, [r3, #27]
 80035b8:	f003 0101 	and.w	r1, r3, #1
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	fa01 f303 	lsl.w	r3, r1, r3
 80035c2:	b25b      	sxtb	r3, r3
 80035c4:	4313      	orrs	r3, r2
 80035c6:	b25b      	sxtb	r3, r3
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80035ce:	89fb      	ldrh	r3, [r7, #14]
 80035d0:	3301      	adds	r3, #1
 80035d2:	81fb      	strh	r3, [r7, #14]
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d9e6      	bls.n	80035a8 <TL_deserialize+0x214>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80035da:	2300      	movs	r3, #0
 80035dc:	81bb      	strh	r3, [r7, #12]
 80035de:	e015      	b.n	800360c <TL_deserialize+0x278>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b25a      	sxtb	r2, r3
 80035e6:	89bb      	ldrh	r3, [r7, #12]
 80035e8:	3378      	adds	r3, #120	; 0x78
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	440b      	add	r3, r1
 80035ee:	7edb      	ldrb	r3, [r3, #27]
 80035f0:	f003 0101 	and.w	r1, r3, #1
 80035f4:	89bb      	ldrh	r3, [r7, #12]
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	4313      	orrs	r3, r2
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	b2da      	uxtb	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8003606:	89bb      	ldrh	r3, [r7, #12]
 8003608:	3301      	adds	r3, #1
 800360a:	81bb      	strh	r3, [r7, #12]
 800360c:	89bb      	ldrh	r3, [r7, #12]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d9e6      	bls.n	80035e0 <TL_deserialize+0x24c>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bcf0      	pop	{r4, r5, r6, r7}
 800361c:	4770      	bx	lr

0800361e <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fda5 	bl	8003178 <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->rx_bit_offset = 0;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
  tl->tx_finished = 0;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_finished = 0;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  // enable TX RX
  tl->rx_pending = 1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
  tl->tx_pending = 1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <TL_GET>:


void TL_GET(TileLinkController *tl, uint32_t address) {
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  tl->tx_frame.chanid  = 0;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
  tl->tx_frame.opcode  = 0x4;  // get
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2204      	movs	r2, #4
 800367a:	705a      	strb	r2, [r3, #1]
  tl->tx_frame.param   = 0;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	709a      	strb	r2, [r3, #2]
  tl->tx_frame.size    = 2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	70da      	strb	r2, [r3, #3]
  tl->tx_frame.source  = 0;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	711a      	strb	r2, [r3, #4]
  tl->tx_frame.address = address;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	609a      	str	r2, [r3, #8]
  tl->tx_frame.data    = 0x0000000000000000;
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  tl->tx_frame.corrupt = 0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	761a      	strb	r2, [r3, #24]
  tl->tx_frame.mask    = 0b00001111;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	220f      	movs	r2, #15
 80036ac:	765a      	strb	r2, [r3, #25]
  tl->tx_frame.last    = 1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	769a      	strb	r2, [r3, #26]
  TL_transmit(tl);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ffb2 	bl	800361e <TL_transmit>
  while (!tl->rx_finished) {}
 80036ba:	bf00      	nop
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0fa      	beq.n	80036bc <TL_GET+0x56>
  TL_deserialize(&tl->rx_frame);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fe61 	bl	8003394 <TL_deserialize>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <TL_PUTFULLDATA>:

void TL_PUTFULLDATA(TileLinkController *tl, uint32_t address, uint64_t data) {
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	e9c7 2300 	strd	r2, r3, [r7]
  tl->tx_frame.chanid  = 0;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
  tl->tx_frame.opcode  = 0x0;  // putfulldata
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	705a      	strb	r2, [r3, #1]
  tl->tx_frame.param   = 0;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	709a      	strb	r2, [r3, #2]
  tl->tx_frame.size    = 2;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2202      	movs	r2, #2
 80036fe:	70da      	strb	r2, [r3, #3]
  tl->tx_frame.source  = 0;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	711a      	strb	r2, [r3, #4]
  tl->tx_frame.address = address;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	609a      	str	r2, [r3, #8]
  tl->tx_frame.data    = data;
 800370c:	68f9      	ldr	r1, [r7, #12]
 800370e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003712:	e9c1 2304 	strd	r2, r3, [r1, #16]
  tl->tx_frame.corrupt = 0;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	761a      	strb	r2, [r3, #24]
  tl->tx_frame.mask    = 0b00001111;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	220f      	movs	r2, #15
 8003720:	765a      	strb	r2, [r3, #25]
  tl->tx_frame.last    = 1;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	769a      	strb	r2, [r3, #26]
  TL_transmit(tl);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff ff78 	bl	800361e <TL_transmit>
  while (!tl->rx_finished) {}
 800372e:	bf00      	nop
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0fa      	beq.n	8003730 <TL_PUTFULLDATA+0x56>
  TL_deserialize(&tl->rx_frame);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fe27 	bl	8003394 <TL_deserialize>
}
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003754:	480d      	ldr	r0, [pc, #52]	; (800378c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003758:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800375c:	e002      	b.n	8003764 <LoopCopyDataInit>

0800375e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800375e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003762:	3304      	adds	r3, #4

08003764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003768:	d3f9      	bcc.n	800375e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800376c:	4c0b      	ldr	r4, [pc, #44]	; (800379c <LoopFillZerobss+0x26>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003770:	e001      	b.n	8003776 <LoopFillZerobss>

08003772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003774:	3204      	adds	r2, #4

08003776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003778:	d3fb      	bcc.n	8003772 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800377a:	f7ff fc6b 	bl	8003054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377e:	f003 fb8f 	bl	8006ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003782:	f7ff f851 	bl	8002828 <main>
  bx  lr    
 8003786:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800378c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003790:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003794:	080079a0 	.word	0x080079a0
  ldr r2, =_sbss
 8003798:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800379c:	200004ac 	.word	0x200004ac

080037a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC_IRQHandler>
	...

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_Init+0x40>)
 80037ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_Init+0x40>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_Init+0x40>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_Init+0x40>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f000 f94f 	bl	8003a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d2:	200f      	movs	r0, #15
 80037d4:	f000 f808 	bl	80037e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff fa7a 	bl	8002cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_InitTick+0x54>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_InitTick+0x58>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f967 	bl	8003ada <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00e      	b.n	8003834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d80a      	bhi.n	8003832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381c:	2200      	movs	r2, #0
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f000 f92f 	bl	8003a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_InitTick+0x5c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000000 	.word	0x20000000
 8003840:	20000008 	.word	0x20000008
 8003844:	20000004 	.word	0x20000004

08003848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000008 	.word	0x20000008
 800386c:	20000498 	.word	0x20000498

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000498 	.word	0x20000498

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_Delay+0x44>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000008 	.word	0x20000008

080038d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003902:	4a04      	ldr	r2, [pc, #16]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	60d3      	str	r3, [r2, #12]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__NVIC_GetPriorityGrouping+0x18>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0307 	and.w	r3, r3, #7
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db0b      	blt.n	800395e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <__NVIC_EnableIRQ+0x38>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2001      	movs	r0, #1
 8003956:	fa00 f202 	lsl.w	r2, r0, r2
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db0a      	blt.n	800399a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	490c      	ldr	r1, [pc, #48]	; (80039bc <__NVIC_SetPriority+0x4c>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	440b      	add	r3, r1
 8003994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003998:	e00a      	b.n	80039b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4908      	ldr	r1, [pc, #32]	; (80039c0 <__NVIC_SetPriority+0x50>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3b04      	subs	r3, #4
 80039a8:	0112      	lsls	r2, r2, #4
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	440b      	add	r3, r1
 80039ae:	761a      	strb	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf28      	it	cs
 80039e2:	2304      	movcs	r3, #4
 80039e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d902      	bls.n	80039f4 <NVIC_EncodePriority+0x30>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3b03      	subs	r3, #3
 80039f2:	e000      	b.n	80039f6 <NVIC_EncodePriority+0x32>
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	4313      	orrs	r3, r2
         );
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	; 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a3c:	d301      	bcc.n	8003a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00f      	b.n	8003a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a42:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <SysTick_Config+0x40>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4a:	210f      	movs	r1, #15
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	f7ff ff8e 	bl	8003970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a54:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <SysTick_Config+0x40>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5a:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <SysTick_Config+0x40>)
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	e000e010 	.word	0xe000e010

08003a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff ff29 	bl	80038d0 <__NVIC_SetPriorityGrouping>
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b086      	sub	sp, #24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a98:	f7ff ff3e 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8003a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	6978      	ldr	r0, [r7, #20]
 8003aa4:	f7ff ff8e 	bl	80039c4 <NVIC_EncodePriority>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff5d 	bl	8003970 <__NVIC_SetPriority>
}
 8003ab6:	bf00      	nop
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff31 	bl	8003934 <__NVIC_EnableIRQ>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ffa2 	bl	8003a2c <SysTick_Config>
 8003ae8:	4603      	mov	r3, r0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b00:	f7ff feb6 	bl	8003870 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e099      	b.n	8003c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b30:	e00f      	b.n	8003b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b32:	f7ff fe9d 	bl	8003870 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d908      	bls.n	8003b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2203      	movs	r2, #3
 8003b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e078      	b.n	8003c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e8      	bne.n	8003b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <HAL_DMA_Init+0x158>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d107      	bne.n	8003bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f023 0307 	bic.w	r3, r3, #7
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d117      	bne.n	8003c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00e      	beq.n	8003c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f9e9 	bl	8003fd0 <DMA_CheckFifoParam>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2240      	movs	r2, #64	; 0x40
 8003c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c12:	2301      	movs	r3, #1
 8003c14:	e016      	b.n	8003c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9a0 	bl	8003f64 <DMA_CalcBaseAndBitshift>
 8003c24:	4603      	mov	r3, r0
 8003c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	223f      	movs	r2, #63	; 0x3f
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	f010803f 	.word	0xf010803f

08003c50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c5c:	4b8e      	ldr	r3, [pc, #568]	; (8003e98 <HAL_DMA_IRQHandler+0x248>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a8e      	ldr	r2, [pc, #568]	; (8003e9c <HAL_DMA_IRQHandler+0x24c>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01a      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d013      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0204 	bic.w	r2, r2, #4
 8003ca2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	2208      	movs	r2, #8
 8003caa:	409a      	lsls	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	2201      	movs	r2, #1
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f043 0202 	orr.w	r2, r3, #2
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d012      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d14:	2204      	movs	r2, #4
 8003d16:	409a      	lsls	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d043      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d03c      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	2210      	movs	r2, #16
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d018      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d108      	bne.n	8003d80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d024      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
 8003d7e:	e01f      	b.n	8003dc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01b      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
 8003d90:	e016      	b.n	8003dc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0208 	bic.w	r2, r2, #8
 8003dae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 808f 	beq.w	8003ef0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8087 	beq.w	8003ef0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	2220      	movs	r2, #32
 8003de8:	409a      	lsls	r2, r3
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d136      	bne.n	8003e68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0216 	bic.w	r2, r2, #22
 8003e08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695a      	ldr	r2, [r3, #20]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d103      	bne.n	8003e2a <HAL_DMA_IRQHandler+0x1da>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0208 	bic.w	r2, r2, #8
 8003e38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	223f      	movs	r2, #63	; 0x3f
 8003e40:	409a      	lsls	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d07e      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
        }
        return;
 8003e66:	e079      	b.n	8003f5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01d      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10d      	bne.n	8003ea0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d031      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	4798      	blx	r3
 8003e94:	e02c      	b.n	8003ef0 <HAL_DMA_IRQHandler+0x2a0>
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000
 8003e9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d023      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
 8003eb0:	e01e      	b.n	8003ef0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0210 	bic.w	r2, r2, #16
 8003ece:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d032      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d022      	beq.n	8003f4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2205      	movs	r2, #5
 8003f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d307      	bcc.n	8003f38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f2      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x2cc>
 8003f36:	e000      	b.n	8003f3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
 8003f5a:	e000      	b.n	8003f5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f5c:	bf00      	nop
    }
  }
}
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	3b10      	subs	r3, #16
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x64>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f7e:	4a13      	ldr	r2, [pc, #76]	; (8003fcc <DMA_CalcBaseAndBitshift+0x68>)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d909      	bls.n	8003fa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fa4:	e007      	b.n	8003fb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fae:	f023 0303 	bic.w	r3, r3, #3
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	aaaaaaab 	.word	0xaaaaaaab
 8003fcc:	08007954 	.word	0x08007954

08003fd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11f      	bne.n	800402a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d856      	bhi.n	800409e <DMA_CheckFifoParam+0xce>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <DMA_CheckFifoParam+0x28>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	0800401b 	.word	0x0800401b
 8004000:	08004009 	.word	0x08004009
 8004004:	0800409f 	.word	0x0800409f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d046      	beq.n	80040a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004018:	e043      	b.n	80040a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004022:	d140      	bne.n	80040a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004028:	e03d      	b.n	80040a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004032:	d121      	bne.n	8004078 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d837      	bhi.n	80040aa <DMA_CheckFifoParam+0xda>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <DMA_CheckFifoParam+0x70>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004051 	.word	0x08004051
 8004044:	08004057 	.word	0x08004057
 8004048:	08004051 	.word	0x08004051
 800404c:	08004069 	.word	0x08004069
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      break;
 8004054:	e030      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d025      	beq.n	80040ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004066:	e022      	b.n	80040ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004070:	d11f      	bne.n	80040b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004076:	e01c      	b.n	80040b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d903      	bls.n	8004086 <DMA_CheckFifoParam+0xb6>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d003      	beq.n	800408c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004084:	e018      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
      break;
 800408a:	e015      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00e      	beq.n	80040b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e00b      	b.n	80040b6 <DMA_CheckFifoParam+0xe6>
      break;
 800409e:	bf00      	nop
 80040a0:	e00a      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040a2:	bf00      	nop
 80040a4:	e008      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e006      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040aa:	bf00      	nop
 80040ac:	e004      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
    }
  } 
  
  return status; 
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop

080040c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e165      	b.n	80043b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e4:	2201      	movs	r2, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f040 8154 	bne.w	80043aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d005      	beq.n	800411a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004116:	2b02      	cmp	r3, #2
 8004118:	d130      	bne.n	800417c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004150:	2201      	movs	r2, #1
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 0201 	and.w	r2, r3, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b03      	cmp	r3, #3
 8004186:	d017      	beq.n	80041b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d123      	bne.n	800420c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	08da      	lsrs	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3208      	adds	r2, #8
 80041cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	220f      	movs	r2, #15
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	08da      	lsrs	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3208      	adds	r2, #8
 8004206:	69b9      	ldr	r1, [r7, #24]
 8004208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0203 	and.w	r2, r3, #3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80ae 	beq.w	80043aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b5d      	ldr	r3, [pc, #372]	; (80043c8 <HAL_GPIO_Init+0x300>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <HAL_GPIO_Init+0x300>)
 8004258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800425c:	6453      	str	r3, [r2, #68]	; 0x44
 800425e:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <HAL_GPIO_Init+0x300>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426a:	4a58      	ldr	r2, [pc, #352]	; (80043cc <HAL_GPIO_Init+0x304>)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a4f      	ldr	r2, [pc, #316]	; (80043d0 <HAL_GPIO_Init+0x308>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d025      	beq.n	80042e2 <HAL_GPIO_Init+0x21a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4e      	ldr	r2, [pc, #312]	; (80043d4 <HAL_GPIO_Init+0x30c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01f      	beq.n	80042de <HAL_GPIO_Init+0x216>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4d      	ldr	r2, [pc, #308]	; (80043d8 <HAL_GPIO_Init+0x310>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d019      	beq.n	80042da <HAL_GPIO_Init+0x212>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4c      	ldr	r2, [pc, #304]	; (80043dc <HAL_GPIO_Init+0x314>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_GPIO_Init+0x20e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4b      	ldr	r2, [pc, #300]	; (80043e0 <HAL_GPIO_Init+0x318>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00d      	beq.n	80042d2 <HAL_GPIO_Init+0x20a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4a      	ldr	r2, [pc, #296]	; (80043e4 <HAL_GPIO_Init+0x31c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <HAL_GPIO_Init+0x206>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a49      	ldr	r2, [pc, #292]	; (80043e8 <HAL_GPIO_Init+0x320>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_GPIO_Init+0x202>
 80042c6:	2306      	movs	r3, #6
 80042c8:	e00c      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042ca:	2307      	movs	r3, #7
 80042cc:	e00a      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042ce:	2305      	movs	r3, #5
 80042d0:	e008      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042d2:	2304      	movs	r3, #4
 80042d4:	e006      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042d6:	2303      	movs	r3, #3
 80042d8:	e004      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042da:	2302      	movs	r3, #2
 80042dc:	e002      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042e2:	2300      	movs	r3, #0
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	f002 0203 	and.w	r2, r2, #3
 80042ea:	0092      	lsls	r2, r2, #2
 80042ec:	4093      	lsls	r3, r2
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042f4:	4935      	ldr	r1, [pc, #212]	; (80043cc <HAL_GPIO_Init+0x304>)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3302      	adds	r3, #2
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004302:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004326:	4a31      	ldr	r2, [pc, #196]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800432c:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <HAL_GPIO_Init+0x324>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004350:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004356:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <HAL_GPIO_Init+0x324>)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043a4:	4a11      	ldr	r2, [pc, #68]	; (80043ec <HAL_GPIO_Init+0x324>)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3301      	adds	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b0f      	cmp	r3, #15
 80043b4:	f67f ae96 	bls.w	80040e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3724      	adds	r7, #36	; 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40013800 	.word	0x40013800
 80043d0:	40020000 	.word	0x40020000
 80043d4:	40020400 	.word	0x40020400
 80043d8:	40020800 	.word	0x40020800
 80043dc:	40020c00 	.word	0x40020c00
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40021400 	.word	0x40021400
 80043e8:	40021800 	.word	0x40021800
 80043ec:	40013c00 	.word	0x40013c00

080043f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	e001      	b.n	8004412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
 800442c:	4613      	mov	r3, r2
 800442e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004430:	787b      	ldrb	r3, [r7, #1]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800443c:	e003      	b.n	8004446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800443e:	887b      	ldrh	r3, [r7, #2]
 8004440:	041a      	lsls	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	619a      	str	r2, [r3, #24]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0cc      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004468:	4b68      	ldr	r3, [pc, #416]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d90c      	bls.n	8004490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004476:	4b65      	ldr	r3, [pc, #404]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b63      	ldr	r3, [pc, #396]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0b8      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	4a58      	ldr	r2, [pc, #352]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c0:	4b53      	ldr	r3, [pc, #332]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4a52      	ldr	r2, [pc, #328]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044cc:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	494d      	ldr	r1, [pc, #308]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d044      	beq.n	8004574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d119      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b02      	cmp	r3, #2
 8004508:	d003      	beq.n	8004512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	2b03      	cmp	r3, #3
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	4b3f      	ldr	r3, [pc, #252]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e06f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b3b      	ldr	r3, [pc, #236]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e067      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b37      	ldr	r3, [pc, #220]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4934      	ldr	r1, [pc, #208]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004544:	f7ff f994 	bl	8003870 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7ff f990 	bl	8003870 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e04f      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d20c      	bcs.n	800459c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b22      	ldr	r3, [pc, #136]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e032      	b.n	8004602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a8:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4916      	ldr	r1, [pc, #88]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0308 	and.w	r3, r3, #8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d009      	beq.n	80045da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045c6:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045da:	f000 f855 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	490a      	ldr	r1, [pc, #40]	; (8004614 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	5ccb      	ldrb	r3, [r1, r3]
 80045ee:	fa22 f303 	lsr.w	r3, r2, r3
 80045f2:	4a09      	ldr	r2, [pc, #36]	; (8004618 <HAL_RCC_ClockConfig+0x1c4>)
 80045f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045f6:	4b09      	ldr	r3, [pc, #36]	; (800461c <HAL_RCC_ClockConfig+0x1c8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff f8f4 	bl	80037e8 <HAL_InitTick>

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40023c00 	.word	0x40023c00
 8004610:	40023800 	.word	0x40023800
 8004614:	0800793c 	.word	0x0800793c
 8004618:	20000000 	.word	0x20000000
 800461c:	20000004 	.word	0x20000004

08004620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <HAL_RCC_GetHCLKFreq+0x14>)
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000000 	.word	0x20000000

08004638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800463c:	f7ff fff0 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0a9b      	lsrs	r3, r3, #10
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK1Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	0800794c 	.word	0x0800794c

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004664:	f7ff ffdc 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0b5b      	lsrs	r3, r3, #13
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4903      	ldr	r1, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	0800794c 	.word	0x0800794c

08004688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800468c:	b0a6      	sub	sp, #152	; 0x98
 800468e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046ae:	4bc8      	ldr	r3, [pc, #800]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	f200 817e 	bhi.w	80049b8 <HAL_RCC_GetSysClockFreq+0x330>
 80046bc:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c2:	bf00      	nop
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	080049b9 	.word	0x080049b9
 80046cc:	080049b9 	.word	0x080049b9
 80046d0:	080049b9 	.word	0x080049b9
 80046d4:	08004701 	.word	0x08004701
 80046d8:	080049b9 	.word	0x080049b9
 80046dc:	080049b9 	.word	0x080049b9
 80046e0:	080049b9 	.word	0x080049b9
 80046e4:	08004709 	.word	0x08004709
 80046e8:	080049b9 	.word	0x080049b9
 80046ec:	080049b9 	.word	0x080049b9
 80046f0:	080049b9 	.word	0x080049b9
 80046f4:	08004873 	.word	0x08004873
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046f8:	4bb6      	ldr	r3, [pc, #728]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80046fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80046fe:	e15f      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004700:	4bb5      	ldr	r3, [pc, #724]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004706:	e15b      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004708:	4bb1      	ldr	r3, [pc, #708]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004714:	4bae      	ldr	r3, [pc, #696]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d031      	beq.n	8004784 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004720:	4bab      	ldr	r3, [pc, #684]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	2200      	movs	r2, #0
 8004728:	66bb      	str	r3, [r7, #104]	; 0x68
 800472a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800472c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	663b      	str	r3, [r7, #96]	; 0x60
 8004734:	2300      	movs	r3, #0
 8004736:	667b      	str	r3, [r7, #100]	; 0x64
 8004738:	4ba7      	ldr	r3, [pc, #668]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x350>)
 800473a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800473e:	462a      	mov	r2, r5
 8004740:	fb03 f202 	mul.w	r2, r3, r2
 8004744:	2300      	movs	r3, #0
 8004746:	4621      	mov	r1, r4
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	4aa2      	ldr	r2, [pc, #648]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004750:	4621      	mov	r1, r4
 8004752:	fba1 1202 	umull	r1, r2, r1, r2
 8004756:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004758:	460a      	mov	r2, r1
 800475a:	67ba      	str	r2, [r7, #120]	; 0x78
 800475c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800475e:	4413      	add	r3, r2
 8004760:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004766:	2200      	movs	r2, #0
 8004768:	65bb      	str	r3, [r7, #88]	; 0x58
 800476a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800476c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004770:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004774:	f7fb fda4 	bl	80002c0 <__aeabi_uldivmod>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4613      	mov	r3, r2
 800477e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004782:	e064      	b.n	800484e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004784:	4b92      	ldr	r3, [pc, #584]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	2200      	movs	r2, #0
 800478c:	653b      	str	r3, [r7, #80]	; 0x50
 800478e:	657a      	str	r2, [r7, #84]	; 0x54
 8004790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	64bb      	str	r3, [r7, #72]	; 0x48
 8004798:	2300      	movs	r3, #0
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80047a0:	4622      	mov	r2, r4
 80047a2:	462b      	mov	r3, r5
 80047a4:	f04f 0000 	mov.w	r0, #0
 80047a8:	f04f 0100 	mov.w	r1, #0
 80047ac:	0159      	lsls	r1, r3, #5
 80047ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047b2:	0150      	lsls	r0, r2, #5
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4621      	mov	r1, r4
 80047ba:	1a51      	subs	r1, r2, r1
 80047bc:	6139      	str	r1, [r7, #16]
 80047be:	4629      	mov	r1, r5
 80047c0:	eb63 0301 	sbc.w	r3, r3, r1
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047d2:	4659      	mov	r1, fp
 80047d4:	018b      	lsls	r3, r1, #6
 80047d6:	4651      	mov	r1, sl
 80047d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047dc:	4651      	mov	r1, sl
 80047de:	018a      	lsls	r2, r1, #6
 80047e0:	4651      	mov	r1, sl
 80047e2:	ebb2 0801 	subs.w	r8, r2, r1
 80047e6:	4659      	mov	r1, fp
 80047e8:	eb63 0901 	sbc.w	r9, r3, r1
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004800:	4690      	mov	r8, r2
 8004802:	4699      	mov	r9, r3
 8004804:	4623      	mov	r3, r4
 8004806:	eb18 0303 	adds.w	r3, r8, r3
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	462b      	mov	r3, r5
 800480e:	eb49 0303 	adc.w	r3, r9, r3
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004820:	4629      	mov	r1, r5
 8004822:	028b      	lsls	r3, r1, #10
 8004824:	4621      	mov	r1, r4
 8004826:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800482a:	4621      	mov	r1, r4
 800482c:	028a      	lsls	r2, r1, #10
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004836:	2200      	movs	r2, #0
 8004838:	643b      	str	r3, [r7, #64]	; 0x40
 800483a:	647a      	str	r2, [r7, #68]	; 0x44
 800483c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004840:	f7fb fd3e 	bl	80002c0 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800484e:	4b60      	ldr	r3, [pc, #384]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	3301      	adds	r3, #1
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004860:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004870:	e0a6      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004872:	4b57      	ldr	r3, [pc, #348]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800487a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487e:	4b54      	ldr	r3, [pc, #336]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02a      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488a:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	2200      	movs	r2, #0
 8004892:	63bb      	str	r3, [r7, #56]	; 0x38
 8004894:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004898:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800489c:	2100      	movs	r1, #0
 800489e:	4b4e      	ldr	r3, [pc, #312]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80048a0:	fb03 f201 	mul.w	r2, r3, r1
 80048a4:	2300      	movs	r3, #0
 80048a6:	fb00 f303 	mul.w	r3, r0, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	4a4a      	ldr	r2, [pc, #296]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80048ae:	fba0 1202 	umull	r1, r2, r0, r2
 80048b2:	677a      	str	r2, [r7, #116]	; 0x74
 80048b4:	460a      	mov	r2, r1
 80048b6:	673a      	str	r2, [r7, #112]	; 0x70
 80048b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048ba:	4413      	add	r3, r2
 80048bc:	677b      	str	r3, [r7, #116]	; 0x74
 80048be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048c2:	2200      	movs	r2, #0
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
 80048c6:	637a      	str	r2, [r7, #52]	; 0x34
 80048c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80048cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80048d0:	f7fb fcf6 	bl	80002c0 <__aeabi_uldivmod>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4613      	mov	r3, r2
 80048da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048de:	e05b      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e0:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	099b      	lsrs	r3, r3, #6
 80048e6:	2200      	movs	r2, #0
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	623b      	str	r3, [r7, #32]
 80048f4:	2300      	movs	r3, #0
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
 80048f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	f04f 0000 	mov.w	r0, #0
 8004904:	f04f 0100 	mov.w	r1, #0
 8004908:	0159      	lsls	r1, r3, #5
 800490a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490e:	0150      	lsls	r0, r2, #5
 8004910:	4602      	mov	r2, r0
 8004912:	460b      	mov	r3, r1
 8004914:	4641      	mov	r1, r8
 8004916:	ebb2 0a01 	subs.w	sl, r2, r1
 800491a:	4649      	mov	r1, r9
 800491c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800492c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004934:	ebb2 040a 	subs.w	r4, r2, sl
 8004938:	eb63 050b 	sbc.w	r5, r3, fp
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	00eb      	lsls	r3, r5, #3
 8004946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800494a:	00e2      	lsls	r2, r4, #3
 800494c:	4614      	mov	r4, r2
 800494e:	461d      	mov	r5, r3
 8004950:	4643      	mov	r3, r8
 8004952:	18e3      	adds	r3, r4, r3
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	464b      	mov	r3, r9
 8004958:	eb45 0303 	adc.w	r3, r5, r3
 800495c:	607b      	str	r3, [r7, #4]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800496a:	4629      	mov	r1, r5
 800496c:	028b      	lsls	r3, r1, #10
 800496e:	4621      	mov	r1, r4
 8004970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004974:	4621      	mov	r1, r4
 8004976:	028a      	lsls	r2, r1, #10
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004980:	2200      	movs	r2, #0
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	61fa      	str	r2, [r7, #28]
 8004986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800498a:	f7fb fc99 	bl	80002c0 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4613      	mov	r3, r2
 8004994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004998:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	0f1b      	lsrs	r3, r3, #28
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80049a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049b6:	e003      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80049ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80049be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3798      	adds	r7, #152	; 0x98
 80049c8:	46bd      	mov	sp, r7
 80049ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	00f42400 	.word	0x00f42400
 80049d8:	017d7840 	.word	0x017d7840

080049dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e28d      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8083 	beq.w	8004b02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049fc:	4b94      	ldr	r3, [pc, #592]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d019      	beq.n	8004a3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a08:	4b91      	ldr	r3, [pc, #580]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d106      	bne.n	8004a22 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a14:	4b8e      	ldr	r3, [pc, #568]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a20:	d00c      	beq.n	8004a3c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a22:	4b8b      	ldr	r3, [pc, #556]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a2a:	2b0c      	cmp	r3, #12
 8004a2c:	d112      	bne.n	8004a54 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2e:	4b88      	ldr	r3, [pc, #544]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	4b84      	ldr	r3, [pc, #528]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d05b      	beq.n	8004b00 <HAL_RCC_OscConfig+0x124>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d157      	bne.n	8004b00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e25a      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCC_OscConfig+0x90>
 8004a5e:	4b7c      	ldr	r3, [pc, #496]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a7b      	ldr	r2, [pc, #492]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e01d      	b.n	8004aa8 <HAL_RCC_OscConfig+0xcc>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0xb4>
 8004a76:	4b76      	ldr	r3, [pc, #472]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a75      	ldr	r2, [pc, #468]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	4b73      	ldr	r3, [pc, #460]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a72      	ldr	r2, [pc, #456]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e00b      	b.n	8004aa8 <HAL_RCC_OscConfig+0xcc>
 8004a90:	4b6f      	ldr	r3, [pc, #444]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6e      	ldr	r2, [pc, #440]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b6c      	ldr	r3, [pc, #432]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a6b      	ldr	r2, [pc, #428]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fe fede 	bl	8003870 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fe feda 	bl	8003870 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e21f      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aca:	4b61      	ldr	r3, [pc, #388]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xdc>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fe feca 	bl	8003870 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fe fec6 	bl	8003870 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e20b      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af2:	4b57      	ldr	r3, [pc, #348]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x104>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d06f      	beq.n	8004bee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b0e:	4b50      	ldr	r3, [pc, #320]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d017      	beq.n	8004b4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b1a:	4b4d      	ldr	r3, [pc, #308]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d105      	bne.n	8004b32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b26:	4b4a      	ldr	r3, [pc, #296]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b32:	4b47      	ldr	r3, [pc, #284]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d11c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3e:	4b44      	ldr	r3, [pc, #272]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d116      	bne.n	8004b78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4a:	4b41      	ldr	r3, [pc, #260]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_RCC_OscConfig+0x186>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e1d3      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b62:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4937      	ldr	r1, [pc, #220]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b76:	e03a      	b.n	8004bee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b80:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fe fe73 	bl	8003870 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fe fe6f 	bl	8003870 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e1b4      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bac:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4925      	ldr	r1, [pc, #148]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
 8004bc0:	e015      	b.n	8004bee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_RCC_OscConfig+0x278>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fe fe52 	bl	8003870 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fe fe4e 	bl	8003870 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e193      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be2:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d036      	beq.n	8004c68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <HAL_RCC_OscConfig+0x27c>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fe fe32 	bl	8003870 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fe fe2e 	bl	8003870 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e173      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_RCC_OscConfig+0x274>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x234>
 8004c2e:	e01b      	b.n	8004c68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_RCC_OscConfig+0x27c>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c36:	f7fe fe1b 	bl	8003870 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c3c:	e00e      	b.n	8004c5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3e:	f7fe fe17 	bl	8003870 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d907      	bls.n	8004c5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e15c      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
 8004c50:	40023800 	.word	0x40023800
 8004c54:	42470000 	.word	0x42470000
 8004c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c5c:	4b8a      	ldr	r3, [pc, #552]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ea      	bne.n	8004c3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8097 	beq.w	8004da4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7a:	4b83      	ldr	r3, [pc, #524]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	4b7f      	ldr	r3, [pc, #508]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a7e      	ldr	r2, [pc, #504]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
 8004c96:	4b7c      	ldr	r3, [pc, #496]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	4b79      	ldr	r3, [pc, #484]	; (8004e8c <HAL_RCC_OscConfig+0x4b0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d118      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb2:	4b76      	ldr	r3, [pc, #472]	; (8004e8c <HAL_RCC_OscConfig+0x4b0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a75      	ldr	r2, [pc, #468]	; (8004e8c <HAL_RCC_OscConfig+0x4b0>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cbe:	f7fe fdd7 	bl	8003870 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fe fdd3 	bl	8003870 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e118      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	4b6c      	ldr	r3, [pc, #432]	; (8004e8c <HAL_RCC_OscConfig+0x4b0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x31e>
 8004cec:	4b66      	ldr	r3, [pc, #408]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	4a65      	ldr	r2, [pc, #404]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf8:	e01c      	b.n	8004d34 <HAL_RCC_OscConfig+0x358>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x340>
 8004d02:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	4a60      	ldr	r2, [pc, #384]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0e:	4b5e      	ldr	r3, [pc, #376]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	4a5d      	ldr	r2, [pc, #372]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0x358>
 8004d1c:	4b5a      	ldr	r3, [pc, #360]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	4a59      	ldr	r2, [pc, #356]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	6713      	str	r3, [r2, #112]	; 0x70
 8004d28:	4b57      	ldr	r3, [pc, #348]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	4a56      	ldr	r2, [pc, #344]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d2e:	f023 0304 	bic.w	r3, r3, #4
 8004d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fe fd98 	bl	8003870 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fe fd94 	bl	8003870 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0d7      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5a:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0ee      	beq.n	8004d44 <HAL_RCC_OscConfig+0x368>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fe fd82 	bl	8003870 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fe fd7e 	bl	8003870 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0c1      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d86:	4b40      	ldr	r3, [pc, #256]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ee      	bne.n	8004d70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b3b      	ldr	r3, [pc, #236]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	4a3a      	ldr	r2, [pc, #232]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80ad 	beq.w	8004f08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dae:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d060      	beq.n	8004e7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d145      	bne.n	8004e4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc2:	4b33      	ldr	r3, [pc, #204]	; (8004e90 <HAL_RCC_OscConfig+0x4b4>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fe fd52 	bl	8003870 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fe fd4e 	bl	8003870 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e093      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	4b29      	ldr	r3, [pc, #164]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	019b      	lsls	r3, r3, #6
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	3b01      	subs	r3, #1
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	491b      	ldr	r1, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e20:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <HAL_RCC_OscConfig+0x4b4>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e26:	f7fe fd23 	bl	8003870 <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2e:	f7fe fd1f 	bl	8003870 <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e064      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e40:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <HAL_RCC_OscConfig+0x452>
 8004e4c:	e05c      	b.n	8004f08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b10      	ldr	r3, [pc, #64]	; (8004e90 <HAL_RCC_OscConfig+0x4b4>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e54:	f7fe fd0c 	bl	8003870 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fe fd08 	bl	8003870 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e04d      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_RCC_OscConfig+0x4ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x480>
 8004e7a:	e045      	b.n	8004f08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d107      	bne.n	8004e94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e040      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40007000 	.word	0x40007000
 8004e90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e94:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <HAL_RCC_OscConfig+0x538>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d030      	beq.n	8004f04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d129      	bne.n	8004f04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d122      	bne.n	8004f04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004eca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d119      	bne.n	8004f04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	3b01      	subs	r3, #1
 8004ede:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d10f      	bne.n	8004f04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d107      	bne.n	8004f04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40023800 	.word	0x40023800

08004f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e041      	b.n	8004fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fd feee 	bl	8002d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f000 fe1c 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e041      	b.n	800504c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f839 	bl	8005054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	f000 fdcd 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <HAL_TIM_PWM_Start+0x24>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e022      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b04      	cmp	r3, #4
 8005090:	d109      	bne.n	80050a6 <HAL_TIM_PWM_Start+0x3e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	bf14      	ite	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	2300      	moveq	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e015      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d109      	bne.n	80050c0 <HAL_TIM_PWM_Start+0x58>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e008      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e07c      	b.n	80051d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start+0x82>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	e013      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start+0x92>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	e00b      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0xa2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005108:	e003      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2201      	movs	r2, #1
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f001 f94e 	bl	80063bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2d      	ldr	r2, [pc, #180]	; (80051dc <HAL_TIM_PWM_Start+0x174>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_TIM_PWM_Start+0xcc>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2c      	ldr	r2, [pc, #176]	; (80051e0 <HAL_TIM_PWM_Start+0x178>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d101      	bne.n	8005138 <HAL_TIM_PWM_Start+0xd0>
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_TIM_PWM_Start+0xd2>
 8005138:	2300      	movs	r3, #0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800514c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a22      	ldr	r2, [pc, #136]	; (80051dc <HAL_TIM_PWM_Start+0x174>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d022      	beq.n	800519e <HAL_TIM_PWM_Start+0x136>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005160:	d01d      	beq.n	800519e <HAL_TIM_PWM_Start+0x136>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <HAL_TIM_PWM_Start+0x17c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d018      	beq.n	800519e <HAL_TIM_PWM_Start+0x136>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1d      	ldr	r2, [pc, #116]	; (80051e8 <HAL_TIM_PWM_Start+0x180>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_TIM_PWM_Start+0x136>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <HAL_TIM_PWM_Start+0x184>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <HAL_TIM_PWM_Start+0x136>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <HAL_TIM_PWM_Start+0x178>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_TIM_PWM_Start+0x136>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_TIM_PWM_Start+0x188>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_TIM_PWM_Start+0x136>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_TIM_PWM_Start+0x18c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d111      	bne.n	80051c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b06      	cmp	r3, #6
 80051ae:	d010      	beq.n	80051d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c0:	e007      	b.n	80051d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40010000 	.word	0x40010000
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40014000 	.word	0x40014000
 80051f4:	40001800 	.word	0x40001800

080051f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e041      	b.n	800528e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fd fda0 	bl	8002d64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 fcac 	bl	8005b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a2:	2300      	movs	r3, #0
 80052a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_IC_Start_IT+0x1e>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	e013      	b.n	80052de <HAL_TIM_IC_Start_IT+0x46>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_IC_Start_IT+0x2e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	e00b      	b.n	80052de <HAL_TIM_IC_Start_IT+0x46>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_IC_Start_IT+0x3e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e003      	b.n	80052de <HAL_TIM_IC_Start_IT+0x46>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <HAL_TIM_IC_Start_IT+0x58>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e013      	b.n	8005318 <HAL_TIM_IC_Start_IT+0x80>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d104      	bne.n	8005300 <HAL_TIM_IC_Start_IT+0x68>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e00b      	b.n	8005318 <HAL_TIM_IC_Start_IT+0x80>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b08      	cmp	r3, #8
 8005304:	d104      	bne.n	8005310 <HAL_TIM_IC_Start_IT+0x78>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e003      	b.n	8005318 <HAL_TIM_IC_Start_IT+0x80>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005316:	b2db      	uxtb	r3, r3
 8005318:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800531a:	7bbb      	ldrb	r3, [r7, #14]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d102      	bne.n	8005326 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005320:	7b7b      	ldrb	r3, [r7, #13]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d001      	beq.n	800532a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e0cc      	b.n	80054c4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <HAL_TIM_IC_Start_IT+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005338:	e013      	b.n	8005362 <HAL_TIM_IC_Start_IT+0xca>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d104      	bne.n	800534a <HAL_TIM_IC_Start_IT+0xb2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005348:	e00b      	b.n	8005362 <HAL_TIM_IC_Start_IT+0xca>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d104      	bne.n	800535a <HAL_TIM_IC_Start_IT+0xc2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005358:	e003      	b.n	8005362 <HAL_TIM_IC_Start_IT+0xca>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start_IT+0xda>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005370:	e013      	b.n	800539a <HAL_TIM_IC_Start_IT+0x102>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d104      	bne.n	8005382 <HAL_TIM_IC_Start_IT+0xea>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005380:	e00b      	b.n	800539a <HAL_TIM_IC_Start_IT+0x102>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d104      	bne.n	8005392 <HAL_TIM_IC_Start_IT+0xfa>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005390:	e003      	b.n	800539a <HAL_TIM_IC_Start_IT+0x102>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d841      	bhi.n	8005424 <HAL_TIM_IC_Start_IT+0x18c>
 80053a0:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <HAL_TIM_IC_Start_IT+0x110>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053dd 	.word	0x080053dd
 80053ac:	08005425 	.word	0x08005425
 80053b0:	08005425 	.word	0x08005425
 80053b4:	08005425 	.word	0x08005425
 80053b8:	080053ef 	.word	0x080053ef
 80053bc:	08005425 	.word	0x08005425
 80053c0:	08005425 	.word	0x08005425
 80053c4:	08005425 	.word	0x08005425
 80053c8:	08005401 	.word	0x08005401
 80053cc:	08005425 	.word	0x08005425
 80053d0:	08005425 	.word	0x08005425
 80053d4:	08005425 	.word	0x08005425
 80053d8:	08005413 	.word	0x08005413
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0202 	orr.w	r2, r2, #2
 80053ea:	60da      	str	r2, [r3, #12]
      break;
 80053ec:	e01d      	b.n	800542a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0204 	orr.w	r2, r2, #4
 80053fc:	60da      	str	r2, [r3, #12]
      break;
 80053fe:	e014      	b.n	800542a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0208 	orr.w	r2, r2, #8
 800540e:	60da      	str	r2, [r3, #12]
      break;
 8005410:	e00b      	b.n	800542a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 0210 	orr.w	r2, r2, #16
 8005420:	60da      	str	r2, [r3, #12]
      break;
 8005422:	e002      	b.n	800542a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
      break;
 8005428:	bf00      	nop
  }

  if (status == HAL_OK)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d148      	bne.n	80054c2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2201      	movs	r2, #1
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f000 ffbf 	bl	80063bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a22      	ldr	r2, [pc, #136]	; (80054cc <HAL_TIM_IC_Start_IT+0x234>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d022      	beq.n	800548e <HAL_TIM_IC_Start_IT+0x1f6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005450:	d01d      	beq.n	800548e <HAL_TIM_IC_Start_IT+0x1f6>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_TIM_IC_Start_IT+0x238>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d018      	beq.n	800548e <HAL_TIM_IC_Start_IT+0x1f6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_TIM_IC_Start_IT+0x23c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <HAL_TIM_IC_Start_IT+0x1f6>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_TIM_IC_Start_IT+0x240>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00e      	beq.n	800548e <HAL_TIM_IC_Start_IT+0x1f6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a19      	ldr	r2, [pc, #100]	; (80054dc <HAL_TIM_IC_Start_IT+0x244>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_TIM_IC_Start_IT+0x1f6>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a18      	ldr	r2, [pc, #96]	; (80054e0 <HAL_TIM_IC_Start_IT+0x248>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_TIM_IC_Start_IT+0x1f6>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <HAL_TIM_IC_Start_IT+0x24c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d111      	bne.n	80054b2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b06      	cmp	r3, #6
 800549e:	d010      	beq.n	80054c2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b0:	e007      	b.n	80054c2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0201 	orr.w	r2, r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40010400 	.word	0x40010400
 80054e0:	40014000 	.word	0x40014000
 80054e4:	40001800 	.word	0x40001800

080054e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b02      	cmp	r3, #2
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0202 	mvn.w	r2, #2
 8005514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb f84a 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fb0f 	bl	8005b56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 fb16 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	2b04      	cmp	r3, #4
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b04      	cmp	r3, #4
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0204 	mvn.w	r2, #4
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fb f820 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fae5 	bl	8005b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 faec 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d122      	bne.n	80055ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0308 	and.w	r3, r3, #8
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0208 	mvn.w	r2, #8
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2204      	movs	r2, #4
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fa fff6 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fabb 	bl	8005b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fac2 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d122      	bne.n	8005640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b10      	cmp	r3, #16
 8005606:	d11b      	bne.n	8005640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0210 	mvn.w	r2, #16
 8005610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2208      	movs	r2, #8
 8005616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fa ffcc 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 800562c:	e005      	b.n	800563a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa91 	bl	8005b56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fa98 	bl	8005b6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d10e      	bne.n	800566c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d107      	bne.n	800566c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f06f 0201 	mvn.w	r2, #1
 8005664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa6b 	bl	8005b42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d10e      	bne.n	8005698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005684:	2b80      	cmp	r3, #128	; 0x80
 8005686:	d107      	bne.n	8005698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 ff90 	bl	80065b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d10e      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	d107      	bne.n	80056c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fa5d 	bl	8005b7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d10e      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d107      	bne.n	80056f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0220 	mvn.w	r2, #32
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 ff5a 	bl	80065a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005712:	2302      	movs	r3, #2
 8005714:	e088      	b.n	8005828 <HAL_TIM_IC_ConfigChannel+0x130>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d11b      	bne.n	800575c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6819      	ldr	r1, [r3, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f000 fc7e 	bl	8006034 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 020c 	bic.w	r2, r2, #12
 8005746:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6999      	ldr	r1, [r3, #24]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	619a      	str	r2, [r3, #24]
 800575a:	e060      	b.n	800581e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d11c      	bne.n	800579c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f000 fd02 	bl	800617a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005784:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6999      	ldr	r1, [r3, #24]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	021a      	lsls	r2, r3, #8
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	619a      	str	r2, [r3, #24]
 800579a:	e040      	b.n	800581e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d11b      	bne.n	80057da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f000 fd4f 	bl	8006254 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 020c 	bic.w	r2, r2, #12
 80057c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69d9      	ldr	r1, [r3, #28]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	61da      	str	r2, [r3, #28]
 80057d8:	e021      	b.n	800581e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d11c      	bne.n	800581a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	6819      	ldr	r1, [r3, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f000 fd6c 	bl	80062cc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005802:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69d9      	ldr	r1, [r3, #28]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	61da      	str	r2, [r3, #28]
 8005818:	e001      	b.n	800581e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005826:	7dfb      	ldrb	r3, [r7, #23]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800584a:	2302      	movs	r3, #2
 800584c:	e0ae      	b.n	80059ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b0c      	cmp	r3, #12
 800585a:	f200 809f 	bhi.w	800599c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800585e:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	08005899 	.word	0x08005899
 8005868:	0800599d 	.word	0x0800599d
 800586c:	0800599d 	.word	0x0800599d
 8005870:	0800599d 	.word	0x0800599d
 8005874:	080058d9 	.word	0x080058d9
 8005878:	0800599d 	.word	0x0800599d
 800587c:	0800599d 	.word	0x0800599d
 8005880:	0800599d 	.word	0x0800599d
 8005884:	0800591b 	.word	0x0800591b
 8005888:	0800599d 	.word	0x0800599d
 800588c:	0800599d 	.word	0x0800599d
 8005890:	0800599d 	.word	0x0800599d
 8005894:	0800595b 	.word	0x0800595b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fa18 	bl	8005cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0208 	orr.w	r2, r2, #8
 80058b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0204 	bic.w	r2, r2, #4
 80058c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6999      	ldr	r1, [r3, #24]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	619a      	str	r2, [r3, #24]
      break;
 80058d6:	e064      	b.n	80059a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fa68 	bl	8005db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699a      	ldr	r2, [r3, #24]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6999      	ldr	r1, [r3, #24]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	021a      	lsls	r2, r3, #8
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	619a      	str	r2, [r3, #24]
      break;
 8005918:	e043      	b.n	80059a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fabd 	bl	8005ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0208 	orr.w	r2, r2, #8
 8005934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0204 	bic.w	r2, r2, #4
 8005944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69d9      	ldr	r1, [r3, #28]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	61da      	str	r2, [r3, #28]
      break;
 8005958:	e023      	b.n	80059a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fb11 	bl	8005f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69da      	ldr	r2, [r3, #28]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69da      	ldr	r2, [r3, #28]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69d9      	ldr	r1, [r3, #28]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	021a      	lsls	r2, r3, #8
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	61da      	str	r2, [r3, #28]
      break;
 800599a:	e002      	b.n	80059a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	75fb      	strb	r3, [r7, #23]
      break;
 80059a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_TIM_ConfigClockSource+0x1c>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e0b4      	b.n	8005b3a <HAL_TIM_ConfigClockSource+0x186>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a08:	d03e      	beq.n	8005a88 <HAL_TIM_ConfigClockSource+0xd4>
 8005a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a0e:	f200 8087 	bhi.w	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a16:	f000 8086 	beq.w	8005b26 <HAL_TIM_ConfigClockSource+0x172>
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1e:	d87f      	bhi.n	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
 8005a20:	2b70      	cmp	r3, #112	; 0x70
 8005a22:	d01a      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0xa6>
 8005a24:	2b70      	cmp	r3, #112	; 0x70
 8005a26:	d87b      	bhi.n	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	2b60      	cmp	r3, #96	; 0x60
 8005a2a:	d050      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0x11a>
 8005a2c:	2b60      	cmp	r3, #96	; 0x60
 8005a2e:	d877      	bhi.n	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
 8005a30:	2b50      	cmp	r3, #80	; 0x50
 8005a32:	d03c      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0xfa>
 8005a34:	2b50      	cmp	r3, #80	; 0x50
 8005a36:	d873      	bhi.n	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d058      	beq.n	8005aee <HAL_TIM_ConfigClockSource+0x13a>
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d86f      	bhi.n	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
 8005a40:	2b30      	cmp	r3, #48	; 0x30
 8005a42:	d064      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0x15a>
 8005a44:	2b30      	cmp	r3, #48	; 0x30
 8005a46:	d86b      	bhi.n	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d060      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0x15a>
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d867      	bhi.n	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d05c      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0x15a>
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d05a      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0x15a>
 8005a58:	e062      	b.n	8005b20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6899      	ldr	r1, [r3, #8]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f000 fc87 	bl	800637c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	609a      	str	r2, [r3, #8]
      break;
 8005a86:	e04f      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	6899      	ldr	r1, [r3, #8]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f000 fc70 	bl	800637c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aaa:	609a      	str	r2, [r3, #8]
      break;
 8005aac:	e03c      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6859      	ldr	r1, [r3, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f000 fb2e 	bl	800611c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2150      	movs	r1, #80	; 0x50
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fc3d 	bl	8006346 <TIM_ITRx_SetConfig>
      break;
 8005acc:	e02c      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6818      	ldr	r0, [r3, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	6859      	ldr	r1, [r3, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	461a      	mov	r2, r3
 8005adc:	f000 fb8a 	bl	80061f4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2160      	movs	r1, #96	; 0x60
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fc2d 	bl	8006346 <TIM_ITRx_SetConfig>
      break;
 8005aec:	e01c      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6859      	ldr	r1, [r3, #4]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f000 fb0e 	bl	800611c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2140      	movs	r1, #64	; 0x40
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fc1d 	bl	8006346 <TIM_ITRx_SetConfig>
      break;
 8005b0c:	e00c      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f000 fc14 	bl	8006346 <TIM_ITRx_SetConfig>
      break;
 8005b1e:	e003      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
      break;
 8005b24:	e000      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a40      	ldr	r2, [pc, #256]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3d      	ldr	r2, [pc, #244]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3c      	ldr	r2, [pc, #240]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3b      	ldr	r2, [pc, #236]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x40>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a3a      	ldr	r2, [pc, #232]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d108      	bne.n	8005be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2f      	ldr	r2, [pc, #188]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d02b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf4:	d027      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <TIM_Base_SetConfig+0x118>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d023      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <TIM_Base_SetConfig+0x11c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d01f      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2a      	ldr	r2, [pc, #168]	; (8005cb4 <TIM_Base_SetConfig+0x120>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d017      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a28      	ldr	r2, [pc, #160]	; (8005cbc <TIM_Base_SetConfig+0x128>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <TIM_Base_SetConfig+0x12c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d00f      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <TIM_Base_SetConfig+0x130>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00b      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <TIM_Base_SetConfig+0x134>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a24      	ldr	r2, [pc, #144]	; (8005ccc <TIM_Base_SetConfig+0x138>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d003      	beq.n	8005c46 <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a23      	ldr	r2, [pc, #140]	; (8005cd0 <TIM_Base_SetConfig+0x13c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ca8 <TIM_Base_SetConfig+0x114>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_Base_SetConfig+0xf8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <TIM_Base_SetConfig+0x124>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d103      	bne.n	8005c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	615a      	str	r2, [r3, #20]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40014400 	.word	0x40014400
 8005cc4:	40014800 	.word	0x40014800
 8005cc8:	40001800 	.word	0x40001800
 8005ccc:	40001c00 	.word	0x40001c00
 8005cd0:	40002000 	.word	0x40002000

08005cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0201 	bic.w	r2, r3, #1
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f023 0302 	bic.w	r3, r3, #2
 8005d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a20      	ldr	r2, [pc, #128]	; (8005dac <TIM_OC1_SetConfig+0xd8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC1_SetConfig+0x64>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <TIM_OC1_SetConfig+0xdc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d10c      	bne.n	8005d52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f023 0308 	bic.w	r3, r3, #8
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f023 0304 	bic.w	r3, r3, #4
 8005d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a15      	ldr	r2, [pc, #84]	; (8005dac <TIM_OC1_SetConfig+0xd8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_OC1_SetConfig+0x8e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <TIM_OC1_SetConfig+0xdc>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d111      	bne.n	8005d86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	621a      	str	r2, [r3, #32]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40010000 	.word	0x40010000
 8005db0:	40010400 	.word	0x40010400

08005db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f023 0210 	bic.w	r2, r3, #16
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f023 0320 	bic.w	r3, r3, #32
 8005dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a22      	ldr	r2, [pc, #136]	; (8005e98 <TIM_OC2_SetConfig+0xe4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC2_SetConfig+0x68>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a21      	ldr	r2, [pc, #132]	; (8005e9c <TIM_OC2_SetConfig+0xe8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d10d      	bne.n	8005e38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <TIM_OC2_SetConfig+0xe4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_OC2_SetConfig+0x94>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <TIM_OC2_SetConfig+0xe8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d113      	bne.n	8005e70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	621a      	str	r2, [r3, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40010000 	.word	0x40010000
 8005e9c:	40010400 	.word	0x40010400

08005ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0303 	bic.w	r3, r3, #3
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a21      	ldr	r2, [pc, #132]	; (8005f80 <TIM_OC3_SetConfig+0xe0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d003      	beq.n	8005f06 <TIM_OC3_SetConfig+0x66>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a20      	ldr	r2, [pc, #128]	; (8005f84 <TIM_OC3_SetConfig+0xe4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d10d      	bne.n	8005f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a16      	ldr	r2, [pc, #88]	; (8005f80 <TIM_OC3_SetConfig+0xe0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_OC3_SetConfig+0x92>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <TIM_OC3_SetConfig+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d113      	bne.n	8005f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	621a      	str	r2, [r3, #32]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40010000 	.word	0x40010000
 8005f84:	40010400 	.word	0x40010400

08005f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a12      	ldr	r2, [pc, #72]	; (800602c <TIM_OC4_SetConfig+0xa4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d003      	beq.n	8005ff0 <TIM_OC4_SetConfig+0x68>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a11      	ldr	r2, [pc, #68]	; (8006030 <TIM_OC4_SetConfig+0xa8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d109      	bne.n	8006004 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	019b      	lsls	r3, r3, #6
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40010000 	.word	0x40010000
 8006030:	40010400 	.word	0x40010400

08006034 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a28      	ldr	r2, [pc, #160]	; (8006100 <TIM_TI1_SetConfig+0xcc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01b      	beq.n	800609a <TIM_TI1_SetConfig+0x66>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006068:	d017      	beq.n	800609a <TIM_TI1_SetConfig+0x66>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4a25      	ldr	r2, [pc, #148]	; (8006104 <TIM_TI1_SetConfig+0xd0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <TIM_TI1_SetConfig+0x66>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4a24      	ldr	r2, [pc, #144]	; (8006108 <TIM_TI1_SetConfig+0xd4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00f      	beq.n	800609a <TIM_TI1_SetConfig+0x66>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4a23      	ldr	r2, [pc, #140]	; (800610c <TIM_TI1_SetConfig+0xd8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <TIM_TI1_SetConfig+0x66>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a22      	ldr	r2, [pc, #136]	; (8006110 <TIM_TI1_SetConfig+0xdc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d007      	beq.n	800609a <TIM_TI1_SetConfig+0x66>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a21      	ldr	r2, [pc, #132]	; (8006114 <TIM_TI1_SetConfig+0xe0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_TI1_SetConfig+0x66>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	4a20      	ldr	r2, [pc, #128]	; (8006118 <TIM_TI1_SetConfig+0xe4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d101      	bne.n	800609e <TIM_TI1_SetConfig+0x6a>
 800609a:	2301      	movs	r3, #1
 800609c:	e000      	b.n	80060a0 <TIM_TI1_SetConfig+0x6c>
 800609e:	2300      	movs	r3, #0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d008      	beq.n	80060b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	e003      	b.n	80060be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f023 030a 	bic.w	r3, r3, #10
 80060d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f003 030a 	and.w	r3, r3, #10
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40010000 	.word	0x40010000
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40010400 	.word	0x40010400
 8006114:	40014000 	.word	0x40014000
 8006118:	40001800 	.word	0x40001800

0800611c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 030a 	bic.w	r3, r3, #10
 8006158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f023 0210 	bic.w	r2, r3, #16
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	b29b      	uxth	r3, r3
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 0210 	bic.w	r2, r3, #16
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800621e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	031b      	lsls	r3, r3, #12
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f023 0303 	bic.w	r3, r3, #3
 8006280:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006290:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	b2db      	uxtb	r3, r3
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	621a      	str	r2, [r3, #32]
}
 80062c0:	bf00      	nop
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800630a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	031b      	lsls	r3, r3, #12
 8006310:	b29b      	uxth	r3, r3
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800631e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	031b      	lsls	r3, r3, #12
 8006324:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	621a      	str	r2, [r3, #32]
}
 800633a:	bf00      	nop
 800633c:	371c      	adds	r7, #28
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	f043 0307 	orr.w	r3, r3, #7
 8006368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	609a      	str	r2, [r3, #8]
}
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	021a      	lsls	r2, r3, #8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	431a      	orrs	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	609a      	str	r2, [r3, #8]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2201      	movs	r2, #1
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a1a      	ldr	r2, [r3, #32]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	43db      	mvns	r3, r3
 80063de:	401a      	ands	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1a      	ldr	r2, [r3, #32]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	fa01 f303 	lsl.w	r3, r1, r3
 80063f4:	431a      	orrs	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	621a      	str	r2, [r3, #32]
}
 80063fa:	bf00      	nop
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006418:	2b01      	cmp	r3, #1
 800641a:	d101      	bne.n	8006420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800641c:	2302      	movs	r3, #2
 800641e:	e05a      	b.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d022      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646c:	d01d      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a1d      	ldr	r2, [pc, #116]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d018      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1a      	ldr	r2, [pc, #104]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a15      	ldr	r2, [pc, #84]	; (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d10c      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40000400 	.word	0x40000400
 80064ec:	40000800 	.word	0x40000800
 80064f0:	40000c00 	.word	0x40000c00
 80064f4:	40010400 	.word	0x40010400
 80064f8:	40014000 	.word	0x40014000
 80064fc:	40001800 	.word	0x40001800

08006500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006518:	2302      	movs	r3, #2
 800651a:	e03d      	b.n	8006598 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e03f      	b.n	800665e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fc fc40 	bl	8002e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2224      	movs	r2, #36	; 0x24
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800660e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f9cb 	bl	80069ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695a      	ldr	r2, [r3, #20]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2220      	movs	r2, #32
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b08a      	sub	sp, #40	; 0x28
 800666a:	af02      	add	r7, sp, #8
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	603b      	str	r3, [r7, #0]
 8006672:	4613      	mov	r3, r2
 8006674:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b20      	cmp	r3, #32
 8006684:	d17c      	bne.n	8006780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <HAL_UART_Transmit+0x2c>
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e075      	b.n	8006782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_UART_Transmit+0x3e>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e06e      	b.n	8006782 <HAL_UART_Transmit+0x11c>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2221      	movs	r2, #33	; 0x21
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066ba:	f7fd f8d9 	bl	8003870 <HAL_GetTick>
 80066be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	88fa      	ldrh	r2, [r7, #6]
 80066ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d4:	d108      	bne.n	80066e8 <HAL_UART_Transmit+0x82>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e003      	b.n	80066f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066f8:	e02a      	b.n	8006750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	2180      	movs	r1, #128	; 0x80
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f8e2 	bl	80068ce <UART_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e036      	b.n	8006782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	3302      	adds	r3, #2
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	e007      	b.n	8006742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	3301      	adds	r3, #1
 8006740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1cf      	bne.n	80066fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2200      	movs	r2, #0
 8006762:	2140      	movs	r1, #64	; 0x40
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f8b2 	bl	80068ce <UART_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e006      	b.n	8006782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	e000      	b.n	8006782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006780:	2302      	movs	r3, #2
  }
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b08a      	sub	sp, #40	; 0x28
 800678e:	af02      	add	r7, sp, #8
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	f040 808c 	bne.w	80068c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d002      	beq.n	80067b8 <HAL_UART_Receive+0x2e>
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e084      	b.n	80068c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_UART_Receive+0x40>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e07d      	b.n	80068c6 <HAL_UART_Receive+0x13c>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2222      	movs	r2, #34	; 0x22
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067e6:	f7fd f843 	bl	8003870 <HAL_GetTick>
 80067ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006800:	d108      	bne.n	8006814 <HAL_UART_Receive+0x8a>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e003      	b.n	800681c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006824:	e043      	b.n	80068ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2200      	movs	r2, #0
 800682e:	2120      	movs	r1, #32
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 f84c 	bl	80068ce <UART_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e042      	b.n	80068c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10c      	bne.n	8006860 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006852:	b29a      	uxth	r2, r3
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	3302      	adds	r3, #2
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	e01f      	b.n	80068a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006868:	d007      	beq.n	800687a <HAL_UART_Receive+0xf0>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <HAL_UART_Receive+0xfe>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	b2da      	uxtb	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e008      	b.n	800689a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006894:	b2da      	uxtb	r2, r3
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3301      	adds	r3, #1
 800689e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1b6      	bne.n	8006826 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	e000      	b.n	80068c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80068c4:	2302      	movs	r3, #2
  }
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b090      	sub	sp, #64	; 0x40
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	4613      	mov	r3, r2
 80068dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068de:	e050      	b.n	8006982 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d04c      	beq.n	8006982 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <UART_WaitOnFlagUntilTimeout+0x30>
 80068ee:	f7fc ffbf 	bl	8003870 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d241      	bcs.n	8006982 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	330c      	adds	r3, #12
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	330c      	adds	r3, #12
 800691c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800691e:	637a      	str	r2, [r7, #52]	; 0x34
 8006920:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e5      	bne.n	80068fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3314      	adds	r3, #20
 8006938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	613b      	str	r3, [r7, #16]
   return(result);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	63bb      	str	r3, [r7, #56]	; 0x38
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3314      	adds	r3, #20
 8006950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006952:	623a      	str	r2, [r7, #32]
 8006954:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	69f9      	ldr	r1, [r7, #28]
 8006958:	6a3a      	ldr	r2, [r7, #32]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e5      	bne.n	8006932 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e00f      	b.n	80069a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4013      	ands	r3, r2
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	429a      	cmp	r2, r3
 8006990:	bf0c      	ite	eq
 8006992:	2301      	moveq	r3, #1
 8006994:	2300      	movne	r3, #0
 8006996:	b2db      	uxtb	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	429a      	cmp	r2, r3
 800699e:	d09f      	beq.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3740      	adds	r7, #64	; 0x40
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b0:	b0c0      	sub	sp, #256	; 0x100
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	68d9      	ldr	r1, [r3, #12]
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	ea40 0301 	orr.w	r3, r0, r1
 80069d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a04:	f021 010c 	bic.w	r1, r1, #12
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a12:	430b      	orrs	r3, r1
 8006a14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a26:	6999      	ldr	r1, [r3, #24]
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	ea40 0301 	orr.w	r3, r0, r1
 8006a32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b8f      	ldr	r3, [pc, #572]	; (8006c78 <UART_SetConfig+0x2cc>)
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d005      	beq.n	8006a4c <UART_SetConfig+0xa0>
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b8d      	ldr	r3, [pc, #564]	; (8006c7c <UART_SetConfig+0x2d0>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d104      	bne.n	8006a56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a4c:	f7fd fe08 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8006a50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a54:	e003      	b.n	8006a5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a56:	f7fd fdef 	bl	8004638 <HAL_RCC_GetPCLK1Freq>
 8006a5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a68:	f040 810c 	bne.w	8006c84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	1891      	adds	r1, r2, r2
 8006a84:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a86:	415b      	adcs	r3, r3
 8006a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a8e:	4621      	mov	r1, r4
 8006a90:	eb12 0801 	adds.w	r8, r2, r1
 8006a94:	4629      	mov	r1, r5
 8006a96:	eb43 0901 	adc.w	r9, r3, r1
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aae:	4690      	mov	r8, r2
 8006ab0:	4699      	mov	r9, r3
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	eb18 0303 	adds.w	r3, r8, r3
 8006ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006abc:	462b      	mov	r3, r5
 8006abe:	eb49 0303 	adc.w	r3, r9, r3
 8006ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ada:	460b      	mov	r3, r1
 8006adc:	18db      	adds	r3, r3, r3
 8006ade:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	eb42 0303 	adc.w	r3, r2, r3
 8006ae6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006aec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006af0:	f7f9 fbe6 	bl	80002c0 <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4b61      	ldr	r3, [pc, #388]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006afa:	fba3 2302 	umull	r2, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	011c      	lsls	r4, r3, #4
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	1891      	adds	r1, r2, r2
 8006b1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b1c:	415b      	adcs	r3, r3
 8006b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b24:	4641      	mov	r1, r8
 8006b26:	eb12 0a01 	adds.w	sl, r2, r1
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b44:	4692      	mov	sl, r2
 8006b46:	469b      	mov	fp, r3
 8006b48:	4643      	mov	r3, r8
 8006b4a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b52:	464b      	mov	r3, r9
 8006b54:	eb4b 0303 	adc.w	r3, fp, r3
 8006b58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b70:	460b      	mov	r3, r1
 8006b72:	18db      	adds	r3, r3, r3
 8006b74:	643b      	str	r3, [r7, #64]	; 0x40
 8006b76:	4613      	mov	r3, r2
 8006b78:	eb42 0303 	adc.w	r3, r2, r3
 8006b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b86:	f7f9 fb9b 	bl	80002c0 <__aeabi_uldivmod>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4b3b      	ldr	r3, [pc, #236]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006b92:	fba3 2301 	umull	r2, r3, r3, r1
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	2264      	movs	r2, #100	; 0x64
 8006b9a:	fb02 f303 	mul.w	r3, r2, r3
 8006b9e:	1acb      	subs	r3, r1, r3
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ba6:	4b36      	ldr	r3, [pc, #216]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006ba8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bac:	095b      	lsrs	r3, r3, #5
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bb4:	441c      	add	r4, r3
 8006bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	1891      	adds	r1, r2, r2
 8006bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bd0:	415b      	adcs	r3, r3
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bd8:	4641      	mov	r1, r8
 8006bda:	1851      	adds	r1, r2, r1
 8006bdc:	6339      	str	r1, [r7, #48]	; 0x30
 8006bde:	4649      	mov	r1, r9
 8006be0:	414b      	adcs	r3, r1
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	00cb      	lsls	r3, r1, #3
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	00ca      	lsls	r2, r1, #3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	4642      	mov	r2, r8
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c0c:	464b      	mov	r3, r9
 8006c0e:	460a      	mov	r2, r1
 8006c10:	eb42 0303 	adc.w	r3, r2, r3
 8006c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	18db      	adds	r3, r3, r3
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c32:	4613      	mov	r3, r2
 8006c34:	eb42 0303 	adc.w	r3, r2, r3
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c42:	f7f9 fb3d 	bl	80002c0 <__aeabi_uldivmod>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	2164      	movs	r1, #100	; 0x64
 8006c54:	fb01 f303 	mul.w	r3, r1, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	3332      	adds	r3, #50	; 0x32
 8006c5e:	4a08      	ldr	r2, [pc, #32]	; (8006c80 <UART_SetConfig+0x2d4>)
 8006c60:	fba2 2303 	umull	r2, r3, r2, r3
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f003 0207 	and.w	r2, r3, #7
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4422      	add	r2, r4
 8006c72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c74:	e105      	b.n	8006e82 <UART_SetConfig+0x4d6>
 8006c76:	bf00      	nop
 8006c78:	40011000 	.word	0x40011000
 8006c7c:	40011400 	.word	0x40011400
 8006c80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c96:	4642      	mov	r2, r8
 8006c98:	464b      	mov	r3, r9
 8006c9a:	1891      	adds	r1, r2, r2
 8006c9c:	6239      	str	r1, [r7, #32]
 8006c9e:	415b      	adcs	r3, r3
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	1854      	adds	r4, r2, r1
 8006caa:	4649      	mov	r1, r9
 8006cac:	eb43 0501 	adc.w	r5, r3, r1
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	f04f 0300 	mov.w	r3, #0
 8006cb8:	00eb      	lsls	r3, r5, #3
 8006cba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cbe:	00e2      	lsls	r2, r4, #3
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	4643      	mov	r3, r8
 8006cc6:	18e3      	adds	r3, r4, r3
 8006cc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ccc:	464b      	mov	r3, r9
 8006cce:	eb45 0303 	adc.w	r3, r5, r3
 8006cd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	008b      	lsls	r3, r1, #2
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	008a      	lsls	r2, r1, #2
 8006d00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d04:	f7f9 fadc 	bl	80002c0 <__aeabi_uldivmod>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4b60      	ldr	r3, [pc, #384]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006d0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d12:	095b      	lsrs	r3, r3, #5
 8006d14:	011c      	lsls	r4, r3, #4
 8006d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d28:	4642      	mov	r2, r8
 8006d2a:	464b      	mov	r3, r9
 8006d2c:	1891      	adds	r1, r2, r2
 8006d2e:	61b9      	str	r1, [r7, #24]
 8006d30:	415b      	adcs	r3, r3
 8006d32:	61fb      	str	r3, [r7, #28]
 8006d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d38:	4641      	mov	r1, r8
 8006d3a:	1851      	adds	r1, r2, r1
 8006d3c:	6139      	str	r1, [r7, #16]
 8006d3e:	4649      	mov	r1, r9
 8006d40:	414b      	adcs	r3, r1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d50:	4659      	mov	r1, fp
 8006d52:	00cb      	lsls	r3, r1, #3
 8006d54:	4651      	mov	r1, sl
 8006d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5a:	4651      	mov	r1, sl
 8006d5c:	00ca      	lsls	r2, r1, #3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	4603      	mov	r3, r0
 8006d64:	4642      	mov	r2, r8
 8006d66:	189b      	adds	r3, r3, r2
 8006d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d6c:	464b      	mov	r3, r9
 8006d6e:	460a      	mov	r2, r1
 8006d70:	eb42 0303 	adc.w	r3, r2, r3
 8006d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d90:	4649      	mov	r1, r9
 8006d92:	008b      	lsls	r3, r1, #2
 8006d94:	4641      	mov	r1, r8
 8006d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	008a      	lsls	r2, r1, #2
 8006d9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006da2:	f7f9 fa8d 	bl	80002c0 <__aeabi_uldivmod>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4b39      	ldr	r3, [pc, #228]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006dac:	fba3 1302 	umull	r1, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	2164      	movs	r1, #100	; 0x64
 8006db4:	fb01 f303 	mul.w	r3, r1, r3
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	3332      	adds	r3, #50	; 0x32
 8006dbe:	4a34      	ldr	r2, [pc, #208]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dca:	441c      	add	r4, r3
 8006dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	673b      	str	r3, [r7, #112]	; 0x70
 8006dd4:	677a      	str	r2, [r7, #116]	; 0x74
 8006dd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dda:	4642      	mov	r2, r8
 8006ddc:	464b      	mov	r3, r9
 8006dde:	1891      	adds	r1, r2, r2
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	415b      	adcs	r3, r3
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dea:	4641      	mov	r1, r8
 8006dec:	1851      	adds	r1, r2, r1
 8006dee:	6039      	str	r1, [r7, #0]
 8006df0:	4649      	mov	r1, r9
 8006df2:	414b      	adcs	r3, r1
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e02:	4659      	mov	r1, fp
 8006e04:	00cb      	lsls	r3, r1, #3
 8006e06:	4651      	mov	r1, sl
 8006e08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e0c:	4651      	mov	r1, sl
 8006e0e:	00ca      	lsls	r2, r1, #3
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	4603      	mov	r3, r0
 8006e16:	4642      	mov	r2, r8
 8006e18:	189b      	adds	r3, r3, r2
 8006e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e1c:	464b      	mov	r3, r9
 8006e1e:	460a      	mov	r2, r1
 8006e20:	eb42 0303 	adc.w	r3, r2, r3
 8006e24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8006e30:	667a      	str	r2, [r7, #100]	; 0x64
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e3e:	4649      	mov	r1, r9
 8006e40:	008b      	lsls	r3, r1, #2
 8006e42:	4641      	mov	r1, r8
 8006e44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e48:	4641      	mov	r1, r8
 8006e4a:	008a      	lsls	r2, r1, #2
 8006e4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e50:	f7f9 fa36 	bl	80002c0 <__aeabi_uldivmod>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	2164      	movs	r1, #100	; 0x64
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	011b      	lsls	r3, r3, #4
 8006e6a:	3332      	adds	r3, #50	; 0x32
 8006e6c:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <UART_SetConfig+0x4e4>)
 8006e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	f003 020f 	and.w	r2, r3, #15
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4422      	add	r2, r4
 8006e80:	609a      	str	r2, [r3, #8]
}
 8006e82:	bf00      	nop
 8006e84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e8e:	bf00      	nop
 8006e90:	51eb851f 	.word	0x51eb851f

08006e94 <__errno>:
 8006e94:	4b01      	ldr	r3, [pc, #4]	; (8006e9c <__errno+0x8>)
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	2000000c 	.word	0x2000000c

08006ea0 <__libc_init_array>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	4d0d      	ldr	r5, [pc, #52]	; (8006ed8 <__libc_init_array+0x38>)
 8006ea4:	4c0d      	ldr	r4, [pc, #52]	; (8006edc <__libc_init_array+0x3c>)
 8006ea6:	1b64      	subs	r4, r4, r5
 8006ea8:	10a4      	asrs	r4, r4, #2
 8006eaa:	2600      	movs	r6, #0
 8006eac:	42a6      	cmp	r6, r4
 8006eae:	d109      	bne.n	8006ec4 <__libc_init_array+0x24>
 8006eb0:	4d0b      	ldr	r5, [pc, #44]	; (8006ee0 <__libc_init_array+0x40>)
 8006eb2:	4c0c      	ldr	r4, [pc, #48]	; (8006ee4 <__libc_init_array+0x44>)
 8006eb4:	f000 fc8e 	bl	80077d4 <_init>
 8006eb8:	1b64      	subs	r4, r4, r5
 8006eba:	10a4      	asrs	r4, r4, #2
 8006ebc:	2600      	movs	r6, #0
 8006ebe:	42a6      	cmp	r6, r4
 8006ec0:	d105      	bne.n	8006ece <__libc_init_array+0x2e>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec8:	4798      	blx	r3
 8006eca:	3601      	adds	r6, #1
 8006ecc:	e7ee      	b.n	8006eac <__libc_init_array+0xc>
 8006ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed2:	4798      	blx	r3
 8006ed4:	3601      	adds	r6, #1
 8006ed6:	e7f2      	b.n	8006ebe <__libc_init_array+0x1e>
 8006ed8:	08007998 	.word	0x08007998
 8006edc:	08007998 	.word	0x08007998
 8006ee0:	08007998 	.word	0x08007998
 8006ee4:	0800799c 	.word	0x0800799c

08006ee8 <memset>:
 8006ee8:	4402      	add	r2, r0
 8006eea:	4603      	mov	r3, r0
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d100      	bne.n	8006ef2 <memset+0xa>
 8006ef0:	4770      	bx	lr
 8006ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef6:	e7f9      	b.n	8006eec <memset+0x4>

08006ef8 <siprintf>:
 8006ef8:	b40e      	push	{r1, r2, r3}
 8006efa:	b500      	push	{lr}
 8006efc:	b09c      	sub	sp, #112	; 0x70
 8006efe:	ab1d      	add	r3, sp, #116	; 0x74
 8006f00:	9002      	str	r0, [sp, #8]
 8006f02:	9006      	str	r0, [sp, #24]
 8006f04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f08:	4809      	ldr	r0, [pc, #36]	; (8006f30 <siprintf+0x38>)
 8006f0a:	9107      	str	r1, [sp, #28]
 8006f0c:	9104      	str	r1, [sp, #16]
 8006f0e:	4909      	ldr	r1, [pc, #36]	; (8006f34 <siprintf+0x3c>)
 8006f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f14:	9105      	str	r1, [sp, #20]
 8006f16:	6800      	ldr	r0, [r0, #0]
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	a902      	add	r1, sp, #8
 8006f1c:	f000 f868 	bl	8006ff0 <_svfiprintf_r>
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	b01c      	add	sp, #112	; 0x70
 8006f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f2c:	b003      	add	sp, #12
 8006f2e:	4770      	bx	lr
 8006f30:	2000000c 	.word	0x2000000c
 8006f34:	ffff0208 	.word	0xffff0208

08006f38 <__ssputs_r>:
 8006f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	688e      	ldr	r6, [r1, #8]
 8006f3e:	429e      	cmp	r6, r3
 8006f40:	4682      	mov	sl, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	4690      	mov	r8, r2
 8006f46:	461f      	mov	r7, r3
 8006f48:	d838      	bhi.n	8006fbc <__ssputs_r+0x84>
 8006f4a:	898a      	ldrh	r2, [r1, #12]
 8006f4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f50:	d032      	beq.n	8006fb8 <__ssputs_r+0x80>
 8006f52:	6825      	ldr	r5, [r4, #0]
 8006f54:	6909      	ldr	r1, [r1, #16]
 8006f56:	eba5 0901 	sub.w	r9, r5, r1
 8006f5a:	6965      	ldr	r5, [r4, #20]
 8006f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f64:	3301      	adds	r3, #1
 8006f66:	444b      	add	r3, r9
 8006f68:	106d      	asrs	r5, r5, #1
 8006f6a:	429d      	cmp	r5, r3
 8006f6c:	bf38      	it	cc
 8006f6e:	461d      	movcc	r5, r3
 8006f70:	0553      	lsls	r3, r2, #21
 8006f72:	d531      	bpl.n	8006fd8 <__ssputs_r+0xa0>
 8006f74:	4629      	mov	r1, r5
 8006f76:	f000 fb63 	bl	8007640 <_malloc_r>
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	b950      	cbnz	r0, 8006f94 <__ssputs_r+0x5c>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	f8ca 3000 	str.w	r3, [sl]
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f8a:	81a3      	strh	r3, [r4, #12]
 8006f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f94:	6921      	ldr	r1, [r4, #16]
 8006f96:	464a      	mov	r2, r9
 8006f98:	f000 fabe 	bl	8007518 <memcpy>
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa6:	81a3      	strh	r3, [r4, #12]
 8006fa8:	6126      	str	r6, [r4, #16]
 8006faa:	6165      	str	r5, [r4, #20]
 8006fac:	444e      	add	r6, r9
 8006fae:	eba5 0509 	sub.w	r5, r5, r9
 8006fb2:	6026      	str	r6, [r4, #0]
 8006fb4:	60a5      	str	r5, [r4, #8]
 8006fb6:	463e      	mov	r6, r7
 8006fb8:	42be      	cmp	r6, r7
 8006fba:	d900      	bls.n	8006fbe <__ssputs_r+0x86>
 8006fbc:	463e      	mov	r6, r7
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	4641      	mov	r1, r8
 8006fc4:	f000 fab6 	bl	8007534 <memmove>
 8006fc8:	68a3      	ldr	r3, [r4, #8]
 8006fca:	1b9b      	subs	r3, r3, r6
 8006fcc:	60a3      	str	r3, [r4, #8]
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	4433      	add	r3, r6
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e7db      	b.n	8006f90 <__ssputs_r+0x58>
 8006fd8:	462a      	mov	r2, r5
 8006fda:	f000 fba5 	bl	8007728 <_realloc_r>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d1e1      	bne.n	8006fa8 <__ssputs_r+0x70>
 8006fe4:	6921      	ldr	r1, [r4, #16]
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	f000 fabe 	bl	8007568 <_free_r>
 8006fec:	e7c7      	b.n	8006f7e <__ssputs_r+0x46>
	...

08006ff0 <_svfiprintf_r>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	4698      	mov	r8, r3
 8006ff6:	898b      	ldrh	r3, [r1, #12]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	b09d      	sub	sp, #116	; 0x74
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	4614      	mov	r4, r2
 8007002:	d50e      	bpl.n	8007022 <_svfiprintf_r+0x32>
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	b963      	cbnz	r3, 8007022 <_svfiprintf_r+0x32>
 8007008:	2140      	movs	r1, #64	; 0x40
 800700a:	f000 fb19 	bl	8007640 <_malloc_r>
 800700e:	6028      	str	r0, [r5, #0]
 8007010:	6128      	str	r0, [r5, #16]
 8007012:	b920      	cbnz	r0, 800701e <_svfiprintf_r+0x2e>
 8007014:	230c      	movs	r3, #12
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	e0d1      	b.n	80071c2 <_svfiprintf_r+0x1d2>
 800701e:	2340      	movs	r3, #64	; 0x40
 8007020:	616b      	str	r3, [r5, #20]
 8007022:	2300      	movs	r3, #0
 8007024:	9309      	str	r3, [sp, #36]	; 0x24
 8007026:	2320      	movs	r3, #32
 8007028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007030:	2330      	movs	r3, #48	; 0x30
 8007032:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071dc <_svfiprintf_r+0x1ec>
 8007036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703a:	f04f 0901 	mov.w	r9, #1
 800703e:	4623      	mov	r3, r4
 8007040:	469a      	mov	sl, r3
 8007042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007046:	b10a      	cbz	r2, 800704c <_svfiprintf_r+0x5c>
 8007048:	2a25      	cmp	r2, #37	; 0x25
 800704a:	d1f9      	bne.n	8007040 <_svfiprintf_r+0x50>
 800704c:	ebba 0b04 	subs.w	fp, sl, r4
 8007050:	d00b      	beq.n	800706a <_svfiprintf_r+0x7a>
 8007052:	465b      	mov	r3, fp
 8007054:	4622      	mov	r2, r4
 8007056:	4629      	mov	r1, r5
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ff6d 	bl	8006f38 <__ssputs_r>
 800705e:	3001      	adds	r0, #1
 8007060:	f000 80aa 	beq.w	80071b8 <_svfiprintf_r+0x1c8>
 8007064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007066:	445a      	add	r2, fp
 8007068:	9209      	str	r2, [sp, #36]	; 0x24
 800706a:	f89a 3000 	ldrb.w	r3, [sl]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 80a2 	beq.w	80071b8 <_svfiprintf_r+0x1c8>
 8007074:	2300      	movs	r3, #0
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800707e:	f10a 0a01 	add.w	sl, sl, #1
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	9307      	str	r3, [sp, #28]
 8007086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708a:	931a      	str	r3, [sp, #104]	; 0x68
 800708c:	4654      	mov	r4, sl
 800708e:	2205      	movs	r2, #5
 8007090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007094:	4851      	ldr	r0, [pc, #324]	; (80071dc <_svfiprintf_r+0x1ec>)
 8007096:	f7f9 f8c3 	bl	8000220 <memchr>
 800709a:	9a04      	ldr	r2, [sp, #16]
 800709c:	b9d8      	cbnz	r0, 80070d6 <_svfiprintf_r+0xe6>
 800709e:	06d0      	lsls	r0, r2, #27
 80070a0:	bf44      	itt	mi
 80070a2:	2320      	movmi	r3, #32
 80070a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a8:	0711      	lsls	r1, r2, #28
 80070aa:	bf44      	itt	mi
 80070ac:	232b      	movmi	r3, #43	; 0x2b
 80070ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b2a      	cmp	r3, #42	; 0x2a
 80070b8:	d015      	beq.n	80070e6 <_svfiprintf_r+0xf6>
 80070ba:	9a07      	ldr	r2, [sp, #28]
 80070bc:	4654      	mov	r4, sl
 80070be:	2000      	movs	r0, #0
 80070c0:	f04f 0c0a 	mov.w	ip, #10
 80070c4:	4621      	mov	r1, r4
 80070c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ca:	3b30      	subs	r3, #48	; 0x30
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d94e      	bls.n	800716e <_svfiprintf_r+0x17e>
 80070d0:	b1b0      	cbz	r0, 8007100 <_svfiprintf_r+0x110>
 80070d2:	9207      	str	r2, [sp, #28]
 80070d4:	e014      	b.n	8007100 <_svfiprintf_r+0x110>
 80070d6:	eba0 0308 	sub.w	r3, r0, r8
 80070da:	fa09 f303 	lsl.w	r3, r9, r3
 80070de:	4313      	orrs	r3, r2
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	46a2      	mov	sl, r4
 80070e4:	e7d2      	b.n	800708c <_svfiprintf_r+0x9c>
 80070e6:	9b03      	ldr	r3, [sp, #12]
 80070e8:	1d19      	adds	r1, r3, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	9103      	str	r1, [sp, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bfbb      	ittet	lt
 80070f2:	425b      	neglt	r3, r3
 80070f4:	f042 0202 	orrlt.w	r2, r2, #2
 80070f8:	9307      	strge	r3, [sp, #28]
 80070fa:	9307      	strlt	r3, [sp, #28]
 80070fc:	bfb8      	it	lt
 80070fe:	9204      	strlt	r2, [sp, #16]
 8007100:	7823      	ldrb	r3, [r4, #0]
 8007102:	2b2e      	cmp	r3, #46	; 0x2e
 8007104:	d10c      	bne.n	8007120 <_svfiprintf_r+0x130>
 8007106:	7863      	ldrb	r3, [r4, #1]
 8007108:	2b2a      	cmp	r3, #42	; 0x2a
 800710a:	d135      	bne.n	8007178 <_svfiprintf_r+0x188>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	9203      	str	r2, [sp, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bfb8      	it	lt
 8007118:	f04f 33ff 	movlt.w	r3, #4294967295
 800711c:	3402      	adds	r4, #2
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071ec <_svfiprintf_r+0x1fc>
 8007124:	7821      	ldrb	r1, [r4, #0]
 8007126:	2203      	movs	r2, #3
 8007128:	4650      	mov	r0, sl
 800712a:	f7f9 f879 	bl	8000220 <memchr>
 800712e:	b140      	cbz	r0, 8007142 <_svfiprintf_r+0x152>
 8007130:	2340      	movs	r3, #64	; 0x40
 8007132:	eba0 000a 	sub.w	r0, r0, sl
 8007136:	fa03 f000 	lsl.w	r0, r3, r0
 800713a:	9b04      	ldr	r3, [sp, #16]
 800713c:	4303      	orrs	r3, r0
 800713e:	3401      	adds	r4, #1
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007146:	4826      	ldr	r0, [pc, #152]	; (80071e0 <_svfiprintf_r+0x1f0>)
 8007148:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800714c:	2206      	movs	r2, #6
 800714e:	f7f9 f867 	bl	8000220 <memchr>
 8007152:	2800      	cmp	r0, #0
 8007154:	d038      	beq.n	80071c8 <_svfiprintf_r+0x1d8>
 8007156:	4b23      	ldr	r3, [pc, #140]	; (80071e4 <_svfiprintf_r+0x1f4>)
 8007158:	bb1b      	cbnz	r3, 80071a2 <_svfiprintf_r+0x1b2>
 800715a:	9b03      	ldr	r3, [sp, #12]
 800715c:	3307      	adds	r3, #7
 800715e:	f023 0307 	bic.w	r3, r3, #7
 8007162:	3308      	adds	r3, #8
 8007164:	9303      	str	r3, [sp, #12]
 8007166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007168:	4433      	add	r3, r6
 800716a:	9309      	str	r3, [sp, #36]	; 0x24
 800716c:	e767      	b.n	800703e <_svfiprintf_r+0x4e>
 800716e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007172:	460c      	mov	r4, r1
 8007174:	2001      	movs	r0, #1
 8007176:	e7a5      	b.n	80070c4 <_svfiprintf_r+0xd4>
 8007178:	2300      	movs	r3, #0
 800717a:	3401      	adds	r4, #1
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	4619      	mov	r1, r3
 8007180:	f04f 0c0a 	mov.w	ip, #10
 8007184:	4620      	mov	r0, r4
 8007186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718a:	3a30      	subs	r2, #48	; 0x30
 800718c:	2a09      	cmp	r2, #9
 800718e:	d903      	bls.n	8007198 <_svfiprintf_r+0x1a8>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d0c5      	beq.n	8007120 <_svfiprintf_r+0x130>
 8007194:	9105      	str	r1, [sp, #20]
 8007196:	e7c3      	b.n	8007120 <_svfiprintf_r+0x130>
 8007198:	fb0c 2101 	mla	r1, ip, r1, r2
 800719c:	4604      	mov	r4, r0
 800719e:	2301      	movs	r3, #1
 80071a0:	e7f0      	b.n	8007184 <_svfiprintf_r+0x194>
 80071a2:	ab03      	add	r3, sp, #12
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	462a      	mov	r2, r5
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <_svfiprintf_r+0x1f8>)
 80071aa:	a904      	add	r1, sp, #16
 80071ac:	4638      	mov	r0, r7
 80071ae:	f3af 8000 	nop.w
 80071b2:	1c42      	adds	r2, r0, #1
 80071b4:	4606      	mov	r6, r0
 80071b6:	d1d6      	bne.n	8007166 <_svfiprintf_r+0x176>
 80071b8:	89ab      	ldrh	r3, [r5, #12]
 80071ba:	065b      	lsls	r3, r3, #25
 80071bc:	f53f af2c 	bmi.w	8007018 <_svfiprintf_r+0x28>
 80071c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c2:	b01d      	add	sp, #116	; 0x74
 80071c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c8:	ab03      	add	r3, sp, #12
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	462a      	mov	r2, r5
 80071ce:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <_svfiprintf_r+0x1f8>)
 80071d0:	a904      	add	r1, sp, #16
 80071d2:	4638      	mov	r0, r7
 80071d4:	f000 f87a 	bl	80072cc <_printf_i>
 80071d8:	e7eb      	b.n	80071b2 <_svfiprintf_r+0x1c2>
 80071da:	bf00      	nop
 80071dc:	0800795c 	.word	0x0800795c
 80071e0:	08007966 	.word	0x08007966
 80071e4:	00000000 	.word	0x00000000
 80071e8:	08006f39 	.word	0x08006f39
 80071ec:	08007962 	.word	0x08007962

080071f0 <_printf_common>:
 80071f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f4:	4616      	mov	r6, r2
 80071f6:	4699      	mov	r9, r3
 80071f8:	688a      	ldr	r2, [r1, #8]
 80071fa:	690b      	ldr	r3, [r1, #16]
 80071fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007200:	4293      	cmp	r3, r2
 8007202:	bfb8      	it	lt
 8007204:	4613      	movlt	r3, r2
 8007206:	6033      	str	r3, [r6, #0]
 8007208:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800720c:	4607      	mov	r7, r0
 800720e:	460c      	mov	r4, r1
 8007210:	b10a      	cbz	r2, 8007216 <_printf_common+0x26>
 8007212:	3301      	adds	r3, #1
 8007214:	6033      	str	r3, [r6, #0]
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	0699      	lsls	r1, r3, #26
 800721a:	bf42      	ittt	mi
 800721c:	6833      	ldrmi	r3, [r6, #0]
 800721e:	3302      	addmi	r3, #2
 8007220:	6033      	strmi	r3, [r6, #0]
 8007222:	6825      	ldr	r5, [r4, #0]
 8007224:	f015 0506 	ands.w	r5, r5, #6
 8007228:	d106      	bne.n	8007238 <_printf_common+0x48>
 800722a:	f104 0a19 	add.w	sl, r4, #25
 800722e:	68e3      	ldr	r3, [r4, #12]
 8007230:	6832      	ldr	r2, [r6, #0]
 8007232:	1a9b      	subs	r3, r3, r2
 8007234:	42ab      	cmp	r3, r5
 8007236:	dc26      	bgt.n	8007286 <_printf_common+0x96>
 8007238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800723c:	1e13      	subs	r3, r2, #0
 800723e:	6822      	ldr	r2, [r4, #0]
 8007240:	bf18      	it	ne
 8007242:	2301      	movne	r3, #1
 8007244:	0692      	lsls	r2, r2, #26
 8007246:	d42b      	bmi.n	80072a0 <_printf_common+0xb0>
 8007248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800724c:	4649      	mov	r1, r9
 800724e:	4638      	mov	r0, r7
 8007250:	47c0      	blx	r8
 8007252:	3001      	adds	r0, #1
 8007254:	d01e      	beq.n	8007294 <_printf_common+0xa4>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	68e5      	ldr	r5, [r4, #12]
 800725a:	6832      	ldr	r2, [r6, #0]
 800725c:	f003 0306 	and.w	r3, r3, #6
 8007260:	2b04      	cmp	r3, #4
 8007262:	bf08      	it	eq
 8007264:	1aad      	subeq	r5, r5, r2
 8007266:	68a3      	ldr	r3, [r4, #8]
 8007268:	6922      	ldr	r2, [r4, #16]
 800726a:	bf0c      	ite	eq
 800726c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007270:	2500      	movne	r5, #0
 8007272:	4293      	cmp	r3, r2
 8007274:	bfc4      	itt	gt
 8007276:	1a9b      	subgt	r3, r3, r2
 8007278:	18ed      	addgt	r5, r5, r3
 800727a:	2600      	movs	r6, #0
 800727c:	341a      	adds	r4, #26
 800727e:	42b5      	cmp	r5, r6
 8007280:	d11a      	bne.n	80072b8 <_printf_common+0xc8>
 8007282:	2000      	movs	r0, #0
 8007284:	e008      	b.n	8007298 <_printf_common+0xa8>
 8007286:	2301      	movs	r3, #1
 8007288:	4652      	mov	r2, sl
 800728a:	4649      	mov	r1, r9
 800728c:	4638      	mov	r0, r7
 800728e:	47c0      	blx	r8
 8007290:	3001      	adds	r0, #1
 8007292:	d103      	bne.n	800729c <_printf_common+0xac>
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729c:	3501      	adds	r5, #1
 800729e:	e7c6      	b.n	800722e <_printf_common+0x3e>
 80072a0:	18e1      	adds	r1, r4, r3
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	2030      	movs	r0, #48	; 0x30
 80072a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072aa:	4422      	add	r2, r4
 80072ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072b4:	3302      	adds	r3, #2
 80072b6:	e7c7      	b.n	8007248 <_printf_common+0x58>
 80072b8:	2301      	movs	r3, #1
 80072ba:	4622      	mov	r2, r4
 80072bc:	4649      	mov	r1, r9
 80072be:	4638      	mov	r0, r7
 80072c0:	47c0      	blx	r8
 80072c2:	3001      	adds	r0, #1
 80072c4:	d0e6      	beq.n	8007294 <_printf_common+0xa4>
 80072c6:	3601      	adds	r6, #1
 80072c8:	e7d9      	b.n	800727e <_printf_common+0x8e>
	...

080072cc <_printf_i>:
 80072cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	7e0f      	ldrb	r7, [r1, #24]
 80072d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072d4:	2f78      	cmp	r7, #120	; 0x78
 80072d6:	4691      	mov	r9, r2
 80072d8:	4680      	mov	r8, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	469a      	mov	sl, r3
 80072de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072e2:	d807      	bhi.n	80072f4 <_printf_i+0x28>
 80072e4:	2f62      	cmp	r7, #98	; 0x62
 80072e6:	d80a      	bhi.n	80072fe <_printf_i+0x32>
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	f000 80d8 	beq.w	800749e <_printf_i+0x1d2>
 80072ee:	2f58      	cmp	r7, #88	; 0x58
 80072f0:	f000 80a3 	beq.w	800743a <_printf_i+0x16e>
 80072f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072fc:	e03a      	b.n	8007374 <_printf_i+0xa8>
 80072fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007302:	2b15      	cmp	r3, #21
 8007304:	d8f6      	bhi.n	80072f4 <_printf_i+0x28>
 8007306:	a101      	add	r1, pc, #4	; (adr r1, 800730c <_printf_i+0x40>)
 8007308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800730c:	08007365 	.word	0x08007365
 8007310:	08007379 	.word	0x08007379
 8007314:	080072f5 	.word	0x080072f5
 8007318:	080072f5 	.word	0x080072f5
 800731c:	080072f5 	.word	0x080072f5
 8007320:	080072f5 	.word	0x080072f5
 8007324:	08007379 	.word	0x08007379
 8007328:	080072f5 	.word	0x080072f5
 800732c:	080072f5 	.word	0x080072f5
 8007330:	080072f5 	.word	0x080072f5
 8007334:	080072f5 	.word	0x080072f5
 8007338:	08007485 	.word	0x08007485
 800733c:	080073a9 	.word	0x080073a9
 8007340:	08007467 	.word	0x08007467
 8007344:	080072f5 	.word	0x080072f5
 8007348:	080072f5 	.word	0x080072f5
 800734c:	080074a7 	.word	0x080074a7
 8007350:	080072f5 	.word	0x080072f5
 8007354:	080073a9 	.word	0x080073a9
 8007358:	080072f5 	.word	0x080072f5
 800735c:	080072f5 	.word	0x080072f5
 8007360:	0800746f 	.word	0x0800746f
 8007364:	682b      	ldr	r3, [r5, #0]
 8007366:	1d1a      	adds	r2, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	602a      	str	r2, [r5, #0]
 800736c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007374:	2301      	movs	r3, #1
 8007376:	e0a3      	b.n	80074c0 <_printf_i+0x1f4>
 8007378:	6820      	ldr	r0, [r4, #0]
 800737a:	6829      	ldr	r1, [r5, #0]
 800737c:	0606      	lsls	r6, r0, #24
 800737e:	f101 0304 	add.w	r3, r1, #4
 8007382:	d50a      	bpl.n	800739a <_printf_i+0xce>
 8007384:	680e      	ldr	r6, [r1, #0]
 8007386:	602b      	str	r3, [r5, #0]
 8007388:	2e00      	cmp	r6, #0
 800738a:	da03      	bge.n	8007394 <_printf_i+0xc8>
 800738c:	232d      	movs	r3, #45	; 0x2d
 800738e:	4276      	negs	r6, r6
 8007390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007394:	485e      	ldr	r0, [pc, #376]	; (8007510 <_printf_i+0x244>)
 8007396:	230a      	movs	r3, #10
 8007398:	e019      	b.n	80073ce <_printf_i+0x102>
 800739a:	680e      	ldr	r6, [r1, #0]
 800739c:	602b      	str	r3, [r5, #0]
 800739e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073a2:	bf18      	it	ne
 80073a4:	b236      	sxthne	r6, r6
 80073a6:	e7ef      	b.n	8007388 <_printf_i+0xbc>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	6820      	ldr	r0, [r4, #0]
 80073ac:	1d19      	adds	r1, r3, #4
 80073ae:	6029      	str	r1, [r5, #0]
 80073b0:	0601      	lsls	r1, r0, #24
 80073b2:	d501      	bpl.n	80073b8 <_printf_i+0xec>
 80073b4:	681e      	ldr	r6, [r3, #0]
 80073b6:	e002      	b.n	80073be <_printf_i+0xf2>
 80073b8:	0646      	lsls	r6, r0, #25
 80073ba:	d5fb      	bpl.n	80073b4 <_printf_i+0xe8>
 80073bc:	881e      	ldrh	r6, [r3, #0]
 80073be:	4854      	ldr	r0, [pc, #336]	; (8007510 <_printf_i+0x244>)
 80073c0:	2f6f      	cmp	r7, #111	; 0x6f
 80073c2:	bf0c      	ite	eq
 80073c4:	2308      	moveq	r3, #8
 80073c6:	230a      	movne	r3, #10
 80073c8:	2100      	movs	r1, #0
 80073ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ce:	6865      	ldr	r5, [r4, #4]
 80073d0:	60a5      	str	r5, [r4, #8]
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	bfa2      	ittt	ge
 80073d6:	6821      	ldrge	r1, [r4, #0]
 80073d8:	f021 0104 	bicge.w	r1, r1, #4
 80073dc:	6021      	strge	r1, [r4, #0]
 80073de:	b90e      	cbnz	r6, 80073e4 <_printf_i+0x118>
 80073e0:	2d00      	cmp	r5, #0
 80073e2:	d04d      	beq.n	8007480 <_printf_i+0x1b4>
 80073e4:	4615      	mov	r5, r2
 80073e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ea:	fb03 6711 	mls	r7, r3, r1, r6
 80073ee:	5dc7      	ldrb	r7, [r0, r7]
 80073f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073f4:	4637      	mov	r7, r6
 80073f6:	42bb      	cmp	r3, r7
 80073f8:	460e      	mov	r6, r1
 80073fa:	d9f4      	bls.n	80073e6 <_printf_i+0x11a>
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d10b      	bne.n	8007418 <_printf_i+0x14c>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	07de      	lsls	r6, r3, #31
 8007404:	d508      	bpl.n	8007418 <_printf_i+0x14c>
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	6861      	ldr	r1, [r4, #4]
 800740a:	4299      	cmp	r1, r3
 800740c:	bfde      	ittt	le
 800740e:	2330      	movle	r3, #48	; 0x30
 8007410:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007414:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007418:	1b52      	subs	r2, r2, r5
 800741a:	6122      	str	r2, [r4, #16]
 800741c:	f8cd a000 	str.w	sl, [sp]
 8007420:	464b      	mov	r3, r9
 8007422:	aa03      	add	r2, sp, #12
 8007424:	4621      	mov	r1, r4
 8007426:	4640      	mov	r0, r8
 8007428:	f7ff fee2 	bl	80071f0 <_printf_common>
 800742c:	3001      	adds	r0, #1
 800742e:	d14c      	bne.n	80074ca <_printf_i+0x1fe>
 8007430:	f04f 30ff 	mov.w	r0, #4294967295
 8007434:	b004      	add	sp, #16
 8007436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800743a:	4835      	ldr	r0, [pc, #212]	; (8007510 <_printf_i+0x244>)
 800743c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007440:	6829      	ldr	r1, [r5, #0]
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	f851 6b04 	ldr.w	r6, [r1], #4
 8007448:	6029      	str	r1, [r5, #0]
 800744a:	061d      	lsls	r5, r3, #24
 800744c:	d514      	bpl.n	8007478 <_printf_i+0x1ac>
 800744e:	07df      	lsls	r7, r3, #31
 8007450:	bf44      	itt	mi
 8007452:	f043 0320 	orrmi.w	r3, r3, #32
 8007456:	6023      	strmi	r3, [r4, #0]
 8007458:	b91e      	cbnz	r6, 8007462 <_printf_i+0x196>
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	f023 0320 	bic.w	r3, r3, #32
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	2310      	movs	r3, #16
 8007464:	e7b0      	b.n	80073c8 <_printf_i+0xfc>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	f043 0320 	orr.w	r3, r3, #32
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	2378      	movs	r3, #120	; 0x78
 8007470:	4828      	ldr	r0, [pc, #160]	; (8007514 <_printf_i+0x248>)
 8007472:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007476:	e7e3      	b.n	8007440 <_printf_i+0x174>
 8007478:	0659      	lsls	r1, r3, #25
 800747a:	bf48      	it	mi
 800747c:	b2b6      	uxthmi	r6, r6
 800747e:	e7e6      	b.n	800744e <_printf_i+0x182>
 8007480:	4615      	mov	r5, r2
 8007482:	e7bb      	b.n	80073fc <_printf_i+0x130>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	6826      	ldr	r6, [r4, #0]
 8007488:	6961      	ldr	r1, [r4, #20]
 800748a:	1d18      	adds	r0, r3, #4
 800748c:	6028      	str	r0, [r5, #0]
 800748e:	0635      	lsls	r5, r6, #24
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	d501      	bpl.n	8007498 <_printf_i+0x1cc>
 8007494:	6019      	str	r1, [r3, #0]
 8007496:	e002      	b.n	800749e <_printf_i+0x1d2>
 8007498:	0670      	lsls	r0, r6, #25
 800749a:	d5fb      	bpl.n	8007494 <_printf_i+0x1c8>
 800749c:	8019      	strh	r1, [r3, #0]
 800749e:	2300      	movs	r3, #0
 80074a0:	6123      	str	r3, [r4, #16]
 80074a2:	4615      	mov	r5, r2
 80074a4:	e7ba      	b.n	800741c <_printf_i+0x150>
 80074a6:	682b      	ldr	r3, [r5, #0]
 80074a8:	1d1a      	adds	r2, r3, #4
 80074aa:	602a      	str	r2, [r5, #0]
 80074ac:	681d      	ldr	r5, [r3, #0]
 80074ae:	6862      	ldr	r2, [r4, #4]
 80074b0:	2100      	movs	r1, #0
 80074b2:	4628      	mov	r0, r5
 80074b4:	f7f8 feb4 	bl	8000220 <memchr>
 80074b8:	b108      	cbz	r0, 80074be <_printf_i+0x1f2>
 80074ba:	1b40      	subs	r0, r0, r5
 80074bc:	6060      	str	r0, [r4, #4]
 80074be:	6863      	ldr	r3, [r4, #4]
 80074c0:	6123      	str	r3, [r4, #16]
 80074c2:	2300      	movs	r3, #0
 80074c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074c8:	e7a8      	b.n	800741c <_printf_i+0x150>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	462a      	mov	r2, r5
 80074ce:	4649      	mov	r1, r9
 80074d0:	4640      	mov	r0, r8
 80074d2:	47d0      	blx	sl
 80074d4:	3001      	adds	r0, #1
 80074d6:	d0ab      	beq.n	8007430 <_printf_i+0x164>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	079b      	lsls	r3, r3, #30
 80074dc:	d413      	bmi.n	8007506 <_printf_i+0x23a>
 80074de:	68e0      	ldr	r0, [r4, #12]
 80074e0:	9b03      	ldr	r3, [sp, #12]
 80074e2:	4298      	cmp	r0, r3
 80074e4:	bfb8      	it	lt
 80074e6:	4618      	movlt	r0, r3
 80074e8:	e7a4      	b.n	8007434 <_printf_i+0x168>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4632      	mov	r2, r6
 80074ee:	4649      	mov	r1, r9
 80074f0:	4640      	mov	r0, r8
 80074f2:	47d0      	blx	sl
 80074f4:	3001      	adds	r0, #1
 80074f6:	d09b      	beq.n	8007430 <_printf_i+0x164>
 80074f8:	3501      	adds	r5, #1
 80074fa:	68e3      	ldr	r3, [r4, #12]
 80074fc:	9903      	ldr	r1, [sp, #12]
 80074fe:	1a5b      	subs	r3, r3, r1
 8007500:	42ab      	cmp	r3, r5
 8007502:	dcf2      	bgt.n	80074ea <_printf_i+0x21e>
 8007504:	e7eb      	b.n	80074de <_printf_i+0x212>
 8007506:	2500      	movs	r5, #0
 8007508:	f104 0619 	add.w	r6, r4, #25
 800750c:	e7f5      	b.n	80074fa <_printf_i+0x22e>
 800750e:	bf00      	nop
 8007510:	0800796d 	.word	0x0800796d
 8007514:	0800797e 	.word	0x0800797e

08007518 <memcpy>:
 8007518:	440a      	add	r2, r1
 800751a:	4291      	cmp	r1, r2
 800751c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007520:	d100      	bne.n	8007524 <memcpy+0xc>
 8007522:	4770      	bx	lr
 8007524:	b510      	push	{r4, lr}
 8007526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800752a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800752e:	4291      	cmp	r1, r2
 8007530:	d1f9      	bne.n	8007526 <memcpy+0xe>
 8007532:	bd10      	pop	{r4, pc}

08007534 <memmove>:
 8007534:	4288      	cmp	r0, r1
 8007536:	b510      	push	{r4, lr}
 8007538:	eb01 0402 	add.w	r4, r1, r2
 800753c:	d902      	bls.n	8007544 <memmove+0x10>
 800753e:	4284      	cmp	r4, r0
 8007540:	4623      	mov	r3, r4
 8007542:	d807      	bhi.n	8007554 <memmove+0x20>
 8007544:	1e43      	subs	r3, r0, #1
 8007546:	42a1      	cmp	r1, r4
 8007548:	d008      	beq.n	800755c <memmove+0x28>
 800754a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800754e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007552:	e7f8      	b.n	8007546 <memmove+0x12>
 8007554:	4402      	add	r2, r0
 8007556:	4601      	mov	r1, r0
 8007558:	428a      	cmp	r2, r1
 800755a:	d100      	bne.n	800755e <memmove+0x2a>
 800755c:	bd10      	pop	{r4, pc}
 800755e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007566:	e7f7      	b.n	8007558 <memmove+0x24>

08007568 <_free_r>:
 8007568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800756a:	2900      	cmp	r1, #0
 800756c:	d044      	beq.n	80075f8 <_free_r+0x90>
 800756e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007572:	9001      	str	r0, [sp, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	f1a1 0404 	sub.w	r4, r1, #4
 800757a:	bfb8      	it	lt
 800757c:	18e4      	addlt	r4, r4, r3
 800757e:	f000 f913 	bl	80077a8 <__malloc_lock>
 8007582:	4a1e      	ldr	r2, [pc, #120]	; (80075fc <_free_r+0x94>)
 8007584:	9801      	ldr	r0, [sp, #4]
 8007586:	6813      	ldr	r3, [r2, #0]
 8007588:	b933      	cbnz	r3, 8007598 <_free_r+0x30>
 800758a:	6063      	str	r3, [r4, #4]
 800758c:	6014      	str	r4, [r2, #0]
 800758e:	b003      	add	sp, #12
 8007590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007594:	f000 b90e 	b.w	80077b4 <__malloc_unlock>
 8007598:	42a3      	cmp	r3, r4
 800759a:	d908      	bls.n	80075ae <_free_r+0x46>
 800759c:	6825      	ldr	r5, [r4, #0]
 800759e:	1961      	adds	r1, r4, r5
 80075a0:	428b      	cmp	r3, r1
 80075a2:	bf01      	itttt	eq
 80075a4:	6819      	ldreq	r1, [r3, #0]
 80075a6:	685b      	ldreq	r3, [r3, #4]
 80075a8:	1949      	addeq	r1, r1, r5
 80075aa:	6021      	streq	r1, [r4, #0]
 80075ac:	e7ed      	b.n	800758a <_free_r+0x22>
 80075ae:	461a      	mov	r2, r3
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	b10b      	cbz	r3, 80075b8 <_free_r+0x50>
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d9fa      	bls.n	80075ae <_free_r+0x46>
 80075b8:	6811      	ldr	r1, [r2, #0]
 80075ba:	1855      	adds	r5, r2, r1
 80075bc:	42a5      	cmp	r5, r4
 80075be:	d10b      	bne.n	80075d8 <_free_r+0x70>
 80075c0:	6824      	ldr	r4, [r4, #0]
 80075c2:	4421      	add	r1, r4
 80075c4:	1854      	adds	r4, r2, r1
 80075c6:	42a3      	cmp	r3, r4
 80075c8:	6011      	str	r1, [r2, #0]
 80075ca:	d1e0      	bne.n	800758e <_free_r+0x26>
 80075cc:	681c      	ldr	r4, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	6053      	str	r3, [r2, #4]
 80075d2:	4421      	add	r1, r4
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	e7da      	b.n	800758e <_free_r+0x26>
 80075d8:	d902      	bls.n	80075e0 <_free_r+0x78>
 80075da:	230c      	movs	r3, #12
 80075dc:	6003      	str	r3, [r0, #0]
 80075de:	e7d6      	b.n	800758e <_free_r+0x26>
 80075e0:	6825      	ldr	r5, [r4, #0]
 80075e2:	1961      	adds	r1, r4, r5
 80075e4:	428b      	cmp	r3, r1
 80075e6:	bf04      	itt	eq
 80075e8:	6819      	ldreq	r1, [r3, #0]
 80075ea:	685b      	ldreq	r3, [r3, #4]
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	bf04      	itt	eq
 80075f0:	1949      	addeq	r1, r1, r5
 80075f2:	6021      	streq	r1, [r4, #0]
 80075f4:	6054      	str	r4, [r2, #4]
 80075f6:	e7ca      	b.n	800758e <_free_r+0x26>
 80075f8:	b003      	add	sp, #12
 80075fa:	bd30      	pop	{r4, r5, pc}
 80075fc:	2000049c 	.word	0x2000049c

08007600 <sbrk_aligned>:
 8007600:	b570      	push	{r4, r5, r6, lr}
 8007602:	4e0e      	ldr	r6, [pc, #56]	; (800763c <sbrk_aligned+0x3c>)
 8007604:	460c      	mov	r4, r1
 8007606:	6831      	ldr	r1, [r6, #0]
 8007608:	4605      	mov	r5, r0
 800760a:	b911      	cbnz	r1, 8007612 <sbrk_aligned+0x12>
 800760c:	f000 f8bc 	bl	8007788 <_sbrk_r>
 8007610:	6030      	str	r0, [r6, #0]
 8007612:	4621      	mov	r1, r4
 8007614:	4628      	mov	r0, r5
 8007616:	f000 f8b7 	bl	8007788 <_sbrk_r>
 800761a:	1c43      	adds	r3, r0, #1
 800761c:	d00a      	beq.n	8007634 <sbrk_aligned+0x34>
 800761e:	1cc4      	adds	r4, r0, #3
 8007620:	f024 0403 	bic.w	r4, r4, #3
 8007624:	42a0      	cmp	r0, r4
 8007626:	d007      	beq.n	8007638 <sbrk_aligned+0x38>
 8007628:	1a21      	subs	r1, r4, r0
 800762a:	4628      	mov	r0, r5
 800762c:	f000 f8ac 	bl	8007788 <_sbrk_r>
 8007630:	3001      	adds	r0, #1
 8007632:	d101      	bne.n	8007638 <sbrk_aligned+0x38>
 8007634:	f04f 34ff 	mov.w	r4, #4294967295
 8007638:	4620      	mov	r0, r4
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	200004a0 	.word	0x200004a0

08007640 <_malloc_r>:
 8007640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007644:	1ccd      	adds	r5, r1, #3
 8007646:	f025 0503 	bic.w	r5, r5, #3
 800764a:	3508      	adds	r5, #8
 800764c:	2d0c      	cmp	r5, #12
 800764e:	bf38      	it	cc
 8007650:	250c      	movcc	r5, #12
 8007652:	2d00      	cmp	r5, #0
 8007654:	4607      	mov	r7, r0
 8007656:	db01      	blt.n	800765c <_malloc_r+0x1c>
 8007658:	42a9      	cmp	r1, r5
 800765a:	d905      	bls.n	8007668 <_malloc_r+0x28>
 800765c:	230c      	movs	r3, #12
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	2600      	movs	r6, #0
 8007662:	4630      	mov	r0, r6
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	4e2e      	ldr	r6, [pc, #184]	; (8007724 <_malloc_r+0xe4>)
 800766a:	f000 f89d 	bl	80077a8 <__malloc_lock>
 800766e:	6833      	ldr	r3, [r6, #0]
 8007670:	461c      	mov	r4, r3
 8007672:	bb34      	cbnz	r4, 80076c2 <_malloc_r+0x82>
 8007674:	4629      	mov	r1, r5
 8007676:	4638      	mov	r0, r7
 8007678:	f7ff ffc2 	bl	8007600 <sbrk_aligned>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	4604      	mov	r4, r0
 8007680:	d14d      	bne.n	800771e <_malloc_r+0xde>
 8007682:	6834      	ldr	r4, [r6, #0]
 8007684:	4626      	mov	r6, r4
 8007686:	2e00      	cmp	r6, #0
 8007688:	d140      	bne.n	800770c <_malloc_r+0xcc>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	4631      	mov	r1, r6
 800768e:	4638      	mov	r0, r7
 8007690:	eb04 0803 	add.w	r8, r4, r3
 8007694:	f000 f878 	bl	8007788 <_sbrk_r>
 8007698:	4580      	cmp	r8, r0
 800769a:	d13a      	bne.n	8007712 <_malloc_r+0xd2>
 800769c:	6821      	ldr	r1, [r4, #0]
 800769e:	3503      	adds	r5, #3
 80076a0:	1a6d      	subs	r5, r5, r1
 80076a2:	f025 0503 	bic.w	r5, r5, #3
 80076a6:	3508      	adds	r5, #8
 80076a8:	2d0c      	cmp	r5, #12
 80076aa:	bf38      	it	cc
 80076ac:	250c      	movcc	r5, #12
 80076ae:	4629      	mov	r1, r5
 80076b0:	4638      	mov	r0, r7
 80076b2:	f7ff ffa5 	bl	8007600 <sbrk_aligned>
 80076b6:	3001      	adds	r0, #1
 80076b8:	d02b      	beq.n	8007712 <_malloc_r+0xd2>
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	442b      	add	r3, r5
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	e00e      	b.n	80076e0 <_malloc_r+0xa0>
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	1b52      	subs	r2, r2, r5
 80076c6:	d41e      	bmi.n	8007706 <_malloc_r+0xc6>
 80076c8:	2a0b      	cmp	r2, #11
 80076ca:	d916      	bls.n	80076fa <_malloc_r+0xba>
 80076cc:	1961      	adds	r1, r4, r5
 80076ce:	42a3      	cmp	r3, r4
 80076d0:	6025      	str	r5, [r4, #0]
 80076d2:	bf18      	it	ne
 80076d4:	6059      	strne	r1, [r3, #4]
 80076d6:	6863      	ldr	r3, [r4, #4]
 80076d8:	bf08      	it	eq
 80076da:	6031      	streq	r1, [r6, #0]
 80076dc:	5162      	str	r2, [r4, r5]
 80076de:	604b      	str	r3, [r1, #4]
 80076e0:	4638      	mov	r0, r7
 80076e2:	f104 060b 	add.w	r6, r4, #11
 80076e6:	f000 f865 	bl	80077b4 <__malloc_unlock>
 80076ea:	f026 0607 	bic.w	r6, r6, #7
 80076ee:	1d23      	adds	r3, r4, #4
 80076f0:	1af2      	subs	r2, r6, r3
 80076f2:	d0b6      	beq.n	8007662 <_malloc_r+0x22>
 80076f4:	1b9b      	subs	r3, r3, r6
 80076f6:	50a3      	str	r3, [r4, r2]
 80076f8:	e7b3      	b.n	8007662 <_malloc_r+0x22>
 80076fa:	6862      	ldr	r2, [r4, #4]
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	bf0c      	ite	eq
 8007700:	6032      	streq	r2, [r6, #0]
 8007702:	605a      	strne	r2, [r3, #4]
 8007704:	e7ec      	b.n	80076e0 <_malloc_r+0xa0>
 8007706:	4623      	mov	r3, r4
 8007708:	6864      	ldr	r4, [r4, #4]
 800770a:	e7b2      	b.n	8007672 <_malloc_r+0x32>
 800770c:	4634      	mov	r4, r6
 800770e:	6876      	ldr	r6, [r6, #4]
 8007710:	e7b9      	b.n	8007686 <_malloc_r+0x46>
 8007712:	230c      	movs	r3, #12
 8007714:	603b      	str	r3, [r7, #0]
 8007716:	4638      	mov	r0, r7
 8007718:	f000 f84c 	bl	80077b4 <__malloc_unlock>
 800771c:	e7a1      	b.n	8007662 <_malloc_r+0x22>
 800771e:	6025      	str	r5, [r4, #0]
 8007720:	e7de      	b.n	80076e0 <_malloc_r+0xa0>
 8007722:	bf00      	nop
 8007724:	2000049c 	.word	0x2000049c

08007728 <_realloc_r>:
 8007728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800772c:	4680      	mov	r8, r0
 800772e:	4614      	mov	r4, r2
 8007730:	460e      	mov	r6, r1
 8007732:	b921      	cbnz	r1, 800773e <_realloc_r+0x16>
 8007734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007738:	4611      	mov	r1, r2
 800773a:	f7ff bf81 	b.w	8007640 <_malloc_r>
 800773e:	b92a      	cbnz	r2, 800774c <_realloc_r+0x24>
 8007740:	f7ff ff12 	bl	8007568 <_free_r>
 8007744:	4625      	mov	r5, r4
 8007746:	4628      	mov	r0, r5
 8007748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800774c:	f000 f838 	bl	80077c0 <_malloc_usable_size_r>
 8007750:	4284      	cmp	r4, r0
 8007752:	4607      	mov	r7, r0
 8007754:	d802      	bhi.n	800775c <_realloc_r+0x34>
 8007756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800775a:	d812      	bhi.n	8007782 <_realloc_r+0x5a>
 800775c:	4621      	mov	r1, r4
 800775e:	4640      	mov	r0, r8
 8007760:	f7ff ff6e 	bl	8007640 <_malloc_r>
 8007764:	4605      	mov	r5, r0
 8007766:	2800      	cmp	r0, #0
 8007768:	d0ed      	beq.n	8007746 <_realloc_r+0x1e>
 800776a:	42bc      	cmp	r4, r7
 800776c:	4622      	mov	r2, r4
 800776e:	4631      	mov	r1, r6
 8007770:	bf28      	it	cs
 8007772:	463a      	movcs	r2, r7
 8007774:	f7ff fed0 	bl	8007518 <memcpy>
 8007778:	4631      	mov	r1, r6
 800777a:	4640      	mov	r0, r8
 800777c:	f7ff fef4 	bl	8007568 <_free_r>
 8007780:	e7e1      	b.n	8007746 <_realloc_r+0x1e>
 8007782:	4635      	mov	r5, r6
 8007784:	e7df      	b.n	8007746 <_realloc_r+0x1e>
	...

08007788 <_sbrk_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	4d06      	ldr	r5, [pc, #24]	; (80077a4 <_sbrk_r+0x1c>)
 800778c:	2300      	movs	r3, #0
 800778e:	4604      	mov	r4, r0
 8007790:	4608      	mov	r0, r1
 8007792:	602b      	str	r3, [r5, #0]
 8007794:	f7fb fc28 	bl	8002fe8 <_sbrk>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_sbrk_r+0x1a>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_sbrk_r+0x1a>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	200004a4 	.word	0x200004a4

080077a8 <__malloc_lock>:
 80077a8:	4801      	ldr	r0, [pc, #4]	; (80077b0 <__malloc_lock+0x8>)
 80077aa:	f000 b811 	b.w	80077d0 <__retarget_lock_acquire_recursive>
 80077ae:	bf00      	nop
 80077b0:	200004a8 	.word	0x200004a8

080077b4 <__malloc_unlock>:
 80077b4:	4801      	ldr	r0, [pc, #4]	; (80077bc <__malloc_unlock+0x8>)
 80077b6:	f000 b80c 	b.w	80077d2 <__retarget_lock_release_recursive>
 80077ba:	bf00      	nop
 80077bc:	200004a8 	.word	0x200004a8

080077c0 <_malloc_usable_size_r>:
 80077c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077c4:	1f18      	subs	r0, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfbc      	itt	lt
 80077ca:	580b      	ldrlt	r3, [r1, r0]
 80077cc:	18c0      	addlt	r0, r0, r3
 80077ce:	4770      	bx	lr

080077d0 <__retarget_lock_acquire_recursive>:
 80077d0:	4770      	bx	lr

080077d2 <__retarget_lock_release_recursive>:
 80077d2:	4770      	bx	lr

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	bf00      	nop
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	bf00      	nop
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
