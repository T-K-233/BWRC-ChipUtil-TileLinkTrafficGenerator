
TileLinkTrafficGenerator-F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052fc  080052fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005304  08005304  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800530c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000070  0800537c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800537c  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed22  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f70  00000000  00000000  0002edc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00030d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  000319e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233eb  00000000  00000000  000325d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100ca  00000000  00000000  000559bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d228d  00000000  00000000  00065a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137d12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003904  00000000  00000000  00137d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800514c 	.word	0x0800514c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800514c 	.word	0x0800514c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <HAL_TIM_IC_CaptureCallback>:

TileLinkController tl;

char str[128];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  TL_update(&tl);
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <HAL_TIM_IC_CaptureCallback+0x18>)
 80005ce:	f000 fcf9 	bl	8000fc4 <TL_update>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090

080005e0 <APP_init>:

void APP_setLED(uint8_t state) {
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, state);
}

void APP_init() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e4:	2100      	movs	r1, #0
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <APP_init+0x18>)
 80005e8:	f002 f9fa 	bl	80029e0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80005ec:	2100      	movs	r1, #0
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <APP_init+0x1c>)
 80005f0:	f002 fb0e 	bl	8002c10 <HAL_TIM_IC_Start_IT>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000360 	.word	0x20000360
 80005fc:	200003a8 	.word	0x200003a8

08000600 <GET>:

void GET(uint32_t address) {
 8000600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000602:	b089      	sub	sp, #36	; 0x24
 8000604:	af06      	add	r7, sp, #24
 8000606:	6078      	str	r0, [r7, #4]
  TL_GET(&tl, address);
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	482b      	ldr	r0, [pc, #172]	; (80006b8 <GET+0xb8>)
 800060c:	f000 ffd1 	bl	80015b2 <TL_GET>
  sprintf(str, "[TL Get] <address: 0x%08lx, size: %d>\r\n", tl.tx_frame.address, tl.tx_frame.size);
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <GET+0xb8>)
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <GET+0xb8>)
 8000616:	78db      	ldrb	r3, [r3, #3]
 8000618:	4928      	ldr	r1, [pc, #160]	; (80006bc <GET+0xbc>)
 800061a:	4829      	ldr	r0, [pc, #164]	; (80006c0 <GET+0xc0>)
 800061c:	f004 f928 	bl	8004870 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000620:	4827      	ldr	r0, [pc, #156]	; (80006c0 <GET+0xc0>)
 8000622:	f7ff fdf5 	bl	8000210 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800062e:	4924      	ldr	r1, [pc, #144]	; (80006c0 <GET+0xc0>)
 8000630:	4824      	ldr	r0, [pc, #144]	; (80006c4 <GET+0xc4>)
 8000632:	f003 fcd4 	bl	8003fde <HAL_UART_Transmit>
  sprintf(str, "[TL AccessAckData] <chanid: %d, opcode: %d, size: %d, source: 0x%08lx, denied: %d, corrupt: %d, data: 0x%08lx%08lx>\r\n", tl.rx_frame.chanid, tl.rx_frame.opcode, tl.rx_frame.size, tl.rx_frame.address, tl.rx_frame.mask, tl.rx_frame.corrupt, (uint32_t)(tl.rx_frame.data >> 32), (uint32_t)tl.rx_frame.data);
 8000636:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <GET+0xb8>)
 8000638:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800063c:	469c      	mov	ip, r3
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <GET+0xb8>)
 8000640:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8000644:	469e      	mov	lr, r3
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <GET+0xb8>)
 8000648:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800064c:	461d      	mov	r5, r3
 800064e:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <GET+0xb8>)
 8000650:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <GET+0xb8>)
 8000656:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 800065a:	461e      	mov	r6, r3
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <GET+0xb8>)
 800065e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <GET+0xb8>)
 8000666:	e9d3 014c 	ldrd	r0, r1, [r3, #304]	; 0x130
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	000a      	movs	r2, r1
 8000674:	2300      	movs	r3, #0
 8000676:	4611      	mov	r1, r2
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <GET+0xb8>)
 800067a:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800067e:	4613      	mov	r3, r2
 8000680:	9305      	str	r3, [sp, #20]
 8000682:	9104      	str	r1, [sp, #16]
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	9303      	str	r3, [sp, #12]
 8000688:	9602      	str	r6, [sp, #8]
 800068a:	9401      	str	r4, [sp, #4]
 800068c:	9500      	str	r5, [sp, #0]
 800068e:	4673      	mov	r3, lr
 8000690:	4662      	mov	r2, ip
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <GET+0xc8>)
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <GET+0xc0>)
 8000696:	f004 f8eb 	bl	8004870 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <GET+0xc0>)
 800069c:	f7ff fdb8 	bl	8000210 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a8:	4905      	ldr	r1, [pc, #20]	; (80006c0 <GET+0xc0>)
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <GET+0xc4>)
 80006ac:	f003 fc97 	bl	8003fde <HAL_UART_Transmit>
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b8:	20000090 	.word	0x20000090
 80006bc:	08005164 	.word	0x08005164
 80006c0:	200002e0 	.word	0x200002e0
 80006c4:	200003f0 	.word	0x200003f0
 80006c8:	0800518c 	.word	0x0800518c

080006cc <PUTFULL>:

void PUTFULL(uint32_t address, uint64_t data) {
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af04      	add	r7, sp, #16
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	e9c7 2300 	strd	r2, r3, [r7]
  TL_PUTFULLDATA(&tl, address, data);
 80006d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006dc:	68f9      	ldr	r1, [r7, #12]
 80006de:	482c      	ldr	r0, [pc, #176]	; (8000790 <PUTFULL+0xc4>)
 80006e0:	f000 ffa1 	bl	8001626 <TL_PUTFULLDATA>
  sprintf(str, "[TL PutFullData] <address: 0x%08lx, size: %d, data: data: 0x%08lx%08lx>\r\n", tl.tx_frame.address, tl.tx_frame.size, (uint32_t)(tl.tx_frame.data >> 32), (uint32_t)tl.tx_frame.data);
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <PUTFULL+0xc4>)
 80006e6:	689c      	ldr	r4, [r3, #8]
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <PUTFULL+0xc4>)
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	461d      	mov	r5, r3
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <PUTFULL+0xc4>)
 80006f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	f04f 0300 	mov.w	r3, #0
 80006fc:	000a      	movs	r2, r1
 80006fe:	2300      	movs	r3, #0
 8000700:	4611      	mov	r1, r2
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <PUTFULL+0xc4>)
 8000704:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000708:	4613      	mov	r3, r2
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	9100      	str	r1, [sp, #0]
 800070e:	462b      	mov	r3, r5
 8000710:	4622      	mov	r2, r4
 8000712:	4920      	ldr	r1, [pc, #128]	; (8000794 <PUTFULL+0xc8>)
 8000714:	4820      	ldr	r0, [pc, #128]	; (8000798 <PUTFULL+0xcc>)
 8000716:	f004 f8ab 	bl	8004870 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800071a:	481f      	ldr	r0, [pc, #124]	; (8000798 <PUTFULL+0xcc>)
 800071c:	f7ff fd78 	bl	8000210 <strlen>
 8000720:	4603      	mov	r3, r0
 8000722:	b29a      	uxth	r2, r3
 8000724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000728:	491b      	ldr	r1, [pc, #108]	; (8000798 <PUTFULL+0xcc>)
 800072a:	481c      	ldr	r0, [pc, #112]	; (800079c <PUTFULL+0xd0>)
 800072c:	f003 fc57 	bl	8003fde <HAL_UART_Transmit>
  sprintf(str, "[TL AccessAck] <chanid: %d, opcode: %d, size: %d, source: 0x%08lx, denied: %d, corrupt: %d>\r\n", tl.rx_frame.chanid, tl.rx_frame.opcode, tl.rx_frame.size, tl.rx_frame.address, tl.rx_frame.mask, tl.rx_frame.corrupt);
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <PUTFULL+0xc4>)
 8000732:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 8000736:	461c      	mov	r4, r3
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <PUTFULL+0xc4>)
 800073a:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800073e:	461d      	mov	r5, r3
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <PUTFULL+0xc4>)
 8000742:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 8000746:	4619      	mov	r1, r3
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <PUTFULL+0xc4>)
 800074a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <PUTFULL+0xc4>)
 8000750:	f892 2139 	ldrb.w	r2, [r2, #313]	; 0x139
 8000754:	4610      	mov	r0, r2
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <PUTFULL+0xc4>)
 8000758:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
 800075c:	9203      	str	r2, [sp, #12]
 800075e:	9002      	str	r0, [sp, #8]
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	9100      	str	r1, [sp, #0]
 8000764:	462b      	mov	r3, r5
 8000766:	4622      	mov	r2, r4
 8000768:	490d      	ldr	r1, [pc, #52]	; (80007a0 <PUTFULL+0xd4>)
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <PUTFULL+0xcc>)
 800076c:	f004 f880 	bl	8004870 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000770:	4809      	ldr	r0, [pc, #36]	; (8000798 <PUTFULL+0xcc>)
 8000772:	f7ff fd4d 	bl	8000210 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	4906      	ldr	r1, [pc, #24]	; (8000798 <PUTFULL+0xcc>)
 8000780:	4806      	ldr	r0, [pc, #24]	; (800079c <PUTFULL+0xd0>)
 8000782:	f003 fc2c 	bl	8003fde <HAL_UART_Transmit>
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bdb0      	pop	{r4, r5, r7, pc}
 800078e:	bf00      	nop
 8000790:	20000090 	.word	0x20000090
 8000794:	08005204 	.word	0x08005204
 8000798:	200002e0 	.word	0x200002e0
 800079c:	200003f0 	.word	0x200003f0
 80007a0:	08005250 	.word	0x08005250

080007a4 <APP_main>:

void APP_main() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  uint8_t cmd;
  if (HAL_UART_Receive(&huart2, &cmd, 1, 1000) == HAL_OK) {
 80007aa:	1df9      	adds	r1, r7, #7
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	2201      	movs	r2, #1
 80007b2:	481d      	ldr	r0, [pc, #116]	; (8000828 <APP_main+0x84>)
 80007b4:	f003 fca5 	bl	8004102 <HAL_UART_Receive>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d12c      	bne.n	8000818 <APP_main+0x74>
    if (cmd == 'b') {
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b62      	cmp	r3, #98	; 0x62
 80007c2:	d103      	bne.n	80007cc <APP_main+0x28>
      GET(BOOT_SELECT_ADDR);
 80007c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007c8:	f7ff ff1a 	bl	8000600 <GET>
    }
    if (cmd == 'i') {
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b69      	cmp	r3, #105	; 0x69
 80007d0:	d103      	bne.n	80007da <APP_main+0x36>
      GET(CLINT_MSIP_ADDR);
 80007d2:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80007d6:	f7ff ff13 	bl	8000600 <GET>
    }
    if (cmd == 't') {
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b74      	cmp	r3, #116	; 0x74
 80007de:	d102      	bne.n	80007e6 <APP_main+0x42>
      GET(CLINT_MTIME_ADDR);
 80007e0:	4812      	ldr	r0, [pc, #72]	; (800082c <APP_main+0x88>)
 80007e2:	f7ff ff0d 	bl	8000600 <GET>
    }
    if (cmd == 'r') {
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b72      	cmp	r3, #114	; 0x72
 80007ea:	d103      	bne.n	80007f4 <APP_main+0x50>
      GET(BOOTROM_BASE_ADDR);
 80007ec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80007f0:	f7ff ff06 	bl	8000600 <GET>
    }
    if (cmd == 'd') {
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b64      	cmp	r3, #100	; 0x64
 80007f8:	d103      	bne.n	8000802 <APP_main+0x5e>
      GET(DTIM_BASE_ADDR);
 80007fa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80007fe:	f7ff feff 	bl	8000600 <GET>
    }
    if (cmd == 'D') {
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b44      	cmp	r3, #68	; 0x44
 8000806:	d107      	bne.n	8000818 <APP_main+0x74>
      PUTFULL(DTIM_BASE_ADDR, 0x0000000001010101);
 8000808:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000814:	f7ff ff5a 	bl	80006cc <PUTFULL>
    }
  }

  HAL_Delay(50);
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f000 ffdb 	bl	80017d4 <HAL_Delay>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200003f0 	.word	0x200003f0
 800082c:	0200bff8 	.word	0x0200bff8

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 ff5c 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f80e 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 f998 	bl	8000b70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000840:	f000 f96c 	bl	8000b1c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000844:	f000 f916 	bl	8000a74 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000848:	f000 f872 	bl	8000930 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 800084c:	f7ff fec8 	bl	80005e0 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8000850:	f7ff ffa8 	bl	80007a4 <APP_main>
 8000854:	e7fc      	b.n	8000850 <main+0x20>
	...

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2234      	movs	r2, #52	; 0x34
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fffa 	bl	8004860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <SystemClock_Config+0xd0>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a28      	ldr	r2, [pc, #160]	; (8000928 <SystemClock_Config+0xd0>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b26      	ldr	r3, [pc, #152]	; (8000928 <SystemClock_Config+0xd0>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <SystemClock_Config+0xd4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a22      	ldr	r2, [pc, #136]	; (800092c <SystemClock_Config+0xd4>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b20      	ldr	r3, [pc, #128]	; (800092c <SystemClock_Config+0xd4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008c8:	2308      	movs	r3, #8
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008cc:	23a0      	movs	r3, #160	; 0xa0
 80008ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 fd37 	bl	8002354 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008ec:	f000 f9cc 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2302      	movs	r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000906:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	2105      	movs	r1, #5
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fa5c 	bl	8001dcc <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800091a:	f000 f9b5 	bl	8000c88 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b096      	sub	sp, #88	; 0x58
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2220      	movs	r2, #32
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f003 ff79 	bl	8004860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096e:	4b3f      	ldr	r3, [pc, #252]	; (8000a6c <MX_TIM1_Init+0x13c>)
 8000970:	4a3f      	ldr	r2, [pc, #252]	; (8000a70 <MX_TIM1_Init+0x140>)
 8000972:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000974:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <MX_TIM1_Init+0x13c>)
 8000976:	229f      	movs	r2, #159	; 0x9f
 8000978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <MX_TIM1_Init+0x13c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000980:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <MX_TIM1_Init+0x13c>)
 8000982:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000986:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <MX_TIM1_Init+0x13c>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098e:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <MX_TIM1_Init+0x13c>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <MX_TIM1_Init+0x13c>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800099a:	4834      	ldr	r0, [pc, #208]	; (8000a6c <MX_TIM1_Init+0x13c>)
 800099c:	f001 ff78 	bl	8002890 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009a6:	f000 f96f 	bl	8000c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009b4:	4619      	mov	r1, r3
 80009b6:	482d      	ldr	r0, [pc, #180]	; (8000a6c <MX_TIM1_Init+0x13c>)
 80009b8:	f002 fcb8 	bl	800332c <HAL_TIM_ConfigClockSource>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009c2:	f000 f961 	bl	8000c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c6:	4829      	ldr	r0, [pc, #164]	; (8000a6c <MX_TIM1_Init+0x13c>)
 80009c8:	f001 ffb1 	bl	800292e <HAL_TIM_PWM_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009d2:	f000 f959 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d6:	2300      	movs	r3, #0
 80009d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009e2:	4619      	mov	r1, r3
 80009e4:	4821      	ldr	r0, [pc, #132]	; (8000a6c <MX_TIM1_Init+0x13c>)
 80009e6:	f003 f9cb 	bl	8003d80 <HAL_TIMEx_MasterConfigSynchronization>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009f0:	f000 f94a 	bl	8000c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009f4:	2370      	movs	r3, #112	; 0x70
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 80009f8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <MX_TIM1_Init+0x13c>)
 8000a1c:	f002 fbc4 	bl	80031a8 <HAL_TIM_PWM_ConfigChannel>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000a26:	f000 f92f 	bl	8000c88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM1_Init+0x13c>)
 8000a4e:	f003 fa13 	bl	8003e78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000a58:	f000 f916 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM1_Init+0x13c>)
 8000a5e:	f000 f9b3 	bl	8000dc8 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3758      	adds	r7, #88	; 0x58
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000360 	.word	0x20000360
 8000a70:	40010000 	.word	0x40010000

08000a74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000a92:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <MX_TIM4_Init+0xa4>)
 8000a94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000ab6:	4817      	ldr	r0, [pc, #92]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000ab8:	f002 f85a 	bl	8002b70 <HAL_TIM_IC_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ac2:	f000 f8e1 	bl	8000c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000ad6:	f003 f953 	bl	8003d80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000ae0:	f000 f8d2 	bl	8000c88 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_TIM4_Init+0xa0>)
 8000afc:	f002 fab8 	bl	8003070 <HAL_TIM_IC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000b06:	f000 f8bf 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200003a8 	.word	0x200003a8
 8000b18:	40000800 	.word	0x40000800

08000b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_USART2_UART_Init+0x50>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f003 f9f6 	bl	8003f44 <HAL_UART_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b5e:	f000 f893 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200003f0 	.word	0x200003f0
 8000b6c:	40004400 	.word	0x40004400

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a3a      	ldr	r2, [pc, #232]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a2c      	ldr	r2, [pc, #176]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_GPIO_Init+0x108>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2103      	movs	r1, #3
 8000bde:	4827      	ldr	r0, [pc, #156]	; (8000c7c <MX_GPIO_Init+0x10c>)
 8000be0:	f001 f8da 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TL_MISO_Ready_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2121      	movs	r1, #33	; 0x21
 8000be8:	4825      	ldr	r0, [pc, #148]	; (8000c80 <MX_GPIO_Init+0x110>)
 8000bea:	f001 f8d5 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	481e      	ldr	r0, [pc, #120]	; (8000c7c <MX_GPIO_Init+0x10c>)
 8000c04:	f000 ff1c 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MOSI_Data_Pin TL_MOSI_Valid_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Data_Pin|TL_MOSI_Valid_Pin;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <MX_GPIO_Init+0x10c>)
 8000c20:	f000 ff0e 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Ready_Pin PA5 */
  GPIO_InitStruct.Pin = TL_MISO_Ready_Pin|GPIO_PIN_5;
 8000c24:	2321      	movs	r3, #33	; 0x21
 8000c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4811      	ldr	r0, [pc, #68]	; (8000c80 <MX_GPIO_Init+0x110>)
 8000c3c:	f000 ff00 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : TL_MISO_Valid_Pin TL_MISO_Data_Pin */
  GPIO_InitStruct.Pin = TL_MISO_Valid_Pin|TL_MISO_Data_Pin;
 8000c40:	2312      	movs	r3, #18
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <MX_GPIO_Init+0x110>)
 8000c54:	f000 fef4 	bl	8001a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : TL_MOSI_Ready_Pin */
  GPIO_InitStruct.Pin = TL_MOSI_Ready_Pin;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TL_MOSI_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_GPIO_Init+0x114>)
 8000c6c:	f000 fee8 	bl	8001a40 <HAL_GPIO_Init>

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_TIM_Base_MspInit+0x3c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10d      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspInit+0x40>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40010000 	.word	0x40010000
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_TIM_IC_MspInit+0x94>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d133      	bne.n	8000db2 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_TIM_IC_MspInit+0x98>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d82:	2340      	movs	r3, #64	; 0x40
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d92:	2302      	movs	r3, #2
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <HAL_TIM_IC_MspInit+0x9c>)
 8000d9e:	f000 fe4f 	bl	8001a40 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	201e      	movs	r0, #30
 8000da8:	f000 fe13 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dac:	201e      	movs	r0, #30
 8000dae:	f000 fe2c 	bl	8001a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40000800 	.word	0x40000800
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_TIM_MspPostInit+0x68>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d11e      	bne.n	8000e28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <HAL_TIM_MspPostInit+0x6c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <HAL_TIM_MspPostInit+0x6c>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_TIM_MspPostInit+0x6c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_TIM_MspPostInit+0x70>)
 8000e24:	f000 fe0c 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_UART_MspInit+0x84>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12b      	bne.n	8000eb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_UART_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e96:	230c      	movs	r3, #12
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ea6:	2307      	movs	r3, #7
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_UART_MspInit+0x8c>)
 8000eb2:	f000 fdc5 	bl	8001a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 fc3c 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM4_IRQHandler+0x10>)
 8000f26:	f001 ff9b 	bl	8002e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200003a8 	.word	0x200003a8

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f003 fc52 	bl	800480c <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20020000 	.word	0x20020000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	20000434 	.word	0x20000434
 8000f9c:	20000450 	.word	0x20000450

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <TL_update>:
 */

#include "tilelink.h"


void TL_update(TileLinkController *tl) {
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if (tl->tx_pending) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d034      	beq.n	8001040 <TL_update+0x7c>
    HAL_GPIO_WritePin(TL_MOSI_Data_GPIO_Port, TL_MOSI_Data_Pin, tl->tx_frame.buffer[tl->tx_bit_offset]);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8000fdc:	461a      	mov	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	7edb      	ldrb	r3, [r3, #27]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4834      	ldr	r0, [pc, #208]	; (80010bc <TL_update+0xf8>)
 8000fea:	f000 fed5 	bl	8001d98 <HAL_GPIO_WritePin>

    if (tl->tx_bit_offset == 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d109      	bne.n	800100c <TL_update+0x48>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4830      	ldr	r0, [pc, #192]	; (80010c0 <TL_update+0xfc>)
 8000ffe:	f000 fecb 	bl	8001d98 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 1);
 8001002:	2201      	movs	r2, #1
 8001004:	2102      	movs	r1, #2
 8001006:	482d      	ldr	r0, [pc, #180]	; (80010bc <TL_update+0xf8>)
 8001008:	f000 fec6 	bl	8001d98 <HAL_GPIO_WritePin>
    }


    if (tl->tx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001012:	2b7b      	cmp	r3, #123	; 0x7b
 8001014:	d10c      	bne.n	8001030 <TL_update+0x6c>
      HAL_GPIO_WritePin(TL_MOSI_Valid_GPIO_Port, TL_MOSI_Valid_Pin, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2102      	movs	r1, #2
 800101a:	4828      	ldr	r0, [pc, #160]	; (80010bc <TL_update+0xf8>)
 800101c:	f000 febc 	bl	8001d98 <HAL_GPIO_WritePin>
      tl->tx_pending = 0;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
      tl->tx_finished = 1;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
    }

    tl->tx_bit_offset += 1;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8001036:	3301      	adds	r3, #1
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  }

  if (tl->rx_pending) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f8b3 324a 	ldrh.w	r3, [r3, #586]	; 0x24a
 8001046:	2b00      	cmp	r3, #0
 8001048:	d033      	beq.n	80010b2 <TL_update+0xee>
    if (tl->rx_finished) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8001050:	2b00      	cmp	r3, #0
 8001052:	d008      	beq.n	8001066 <TL_update+0xa2>
      HAL_GPIO_WritePin(TL_MISO_Ready_GPIO_Port, TL_MISO_Ready_Pin, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2101      	movs	r1, #1
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <TL_update+0xfc>)
 800105a:	f000 fe9d 	bl	8001d98 <HAL_GPIO_WritePin>
      tl->rx_pending = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
    }
    if (HAL_GPIO_ReadPin(TL_MISO_Valid_GPIO_Port, TL_MISO_Valid_Pin) == GPIO_PIN_SET) {
 8001066:	2102      	movs	r1, #2
 8001068:	4815      	ldr	r0, [pc, #84]	; (80010c0 <TL_update+0xfc>)
 800106a:	f000 fe7d 	bl	8001d68 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d11e      	bne.n	80010b2 <TL_update+0xee>
      tl->rx_frame.buffer[tl->rx_bit_offset] = HAL_GPIO_ReadPin(TL_MISO_Data_GPIO_Port, TL_MISO_Data_Pin);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 800107a:	461c      	mov	r4, r3
 800107c:	2110      	movs	r1, #16
 800107e:	4810      	ldr	r0, [pc, #64]	; (80010c0 <TL_update+0xfc>)
 8001080:	f000 fe72 	bl	8001d68 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4423      	add	r3, r4
 800108c:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b

      tl->rx_bit_offset += 1;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8001096:	3301      	adds	r3, #1
 8001098:	b29a      	uxth	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246

      if (tl->rx_bit_offset == TL_SERDES_TOTAL_SIZE) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 80010a6:	2b7b      	cmp	r3, #123	; 0x7b
 80010a8:	d103      	bne.n	80010b2 <TL_update+0xee>
        tl->rx_finished = 1;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248
      }
    }
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020000 	.word	0x40020000

080010c4 <TL_serialize>:

void TL_serialize(TileLinkFrame *frame) {
 80010c4:	b4f0      	push	{r4, r5, r6, r7}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80010cc:	2100      	movs	r1, #0
 80010ce:	83f9      	strh	r1, [r7, #30]
 80010d0:	e011      	b.n	80010f6 <TL_serialize+0x32>
    frame->buffer[i] = (frame->last >> i) & 0b1;
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	7e89      	ldrb	r1, [r1, #26]
 80010d6:	4608      	mov	r0, r1
 80010d8:	8bf9      	ldrh	r1, [r7, #30]
 80010da:	fa40 f101 	asr.w	r1, r0, r1
 80010de:	b2c8      	uxtb	r0, r1
 80010e0:	8bf9      	ldrh	r1, [r7, #30]
 80010e2:	f000 0001 	and.w	r0, r0, #1
 80010e6:	b2c4      	uxtb	r4, r0
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	4401      	add	r1, r0
 80010ec:	4620      	mov	r0, r4
 80010ee:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 80010f0:	8bf9      	ldrh	r1, [r7, #30]
 80010f2:	3101      	adds	r1, #1
 80010f4:	83f9      	strh	r1, [r7, #30]
 80010f6:	8bf9      	ldrh	r1, [r7, #30]
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d0ea      	beq.n	80010d2 <TL_serialize+0xe>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 80010fc:	2100      	movs	r1, #0
 80010fe:	83b9      	strh	r1, [r7, #28]
 8001100:	e012      	b.n	8001128 <TL_serialize+0x64>
    frame->buffer[i+TL_SERDES_LAST_OFFSET] = (frame->corrupt >> i) & 0b1;
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	7e09      	ldrb	r1, [r1, #24]
 8001106:	4608      	mov	r0, r1
 8001108:	8bb9      	ldrh	r1, [r7, #28]
 800110a:	fa40 f101 	asr.w	r1, r0, r1
 800110e:	b2c8      	uxtb	r0, r1
 8001110:	8bb9      	ldrh	r1, [r7, #28]
 8001112:	3101      	adds	r1, #1
 8001114:	f000 0001 	and.w	r0, r0, #1
 8001118:	b2c4      	uxtb	r4, r0
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	4401      	add	r1, r0
 800111e:	4620      	mov	r0, r4
 8001120:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001122:	8bb9      	ldrh	r1, [r7, #28]
 8001124:	3101      	adds	r1, #1
 8001126:	83b9      	strh	r1, [r7, #28]
 8001128:	8bb9      	ldrh	r1, [r7, #28]
 800112a:	2900      	cmp	r1, #0
 800112c:	d0e9      	beq.n	8001102 <TL_serialize+0x3e>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800112e:	2100      	movs	r1, #0
 8001130:	8379      	strh	r1, [r7, #26]
 8001132:	e01e      	b.n	8001172 <TL_serialize+0xae>
    frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] = (frame->data >> i) & 0b1;
 8001134:	6879      	ldr	r1, [r7, #4]
 8001136:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800113a:	8b7c      	ldrh	r4, [r7, #26]
 800113c:	f1c4 0620 	rsb	r6, r4, #32
 8001140:	f1a4 0520 	sub.w	r5, r4, #32
 8001144:	fa20 f204 	lsr.w	r2, r0, r4
 8001148:	fa01 f606 	lsl.w	r6, r1, r6
 800114c:	4332      	orrs	r2, r6
 800114e:	fa21 f505 	lsr.w	r5, r1, r5
 8001152:	432a      	orrs	r2, r5
 8001154:	fa21 f304 	lsr.w	r3, r1, r4
 8001158:	b2d0      	uxtb	r0, r2
 800115a:	8b79      	ldrh	r1, [r7, #26]
 800115c:	3102      	adds	r1, #2
 800115e:	f000 0001 	and.w	r0, r0, #1
 8001162:	b2c4      	uxtb	r4, r0
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	4401      	add	r1, r0
 8001168:	4620      	mov	r0, r4
 800116a:	76c8      	strb	r0, [r1, #27]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800116c:	8b79      	ldrh	r1, [r7, #26]
 800116e:	3101      	adds	r1, #1
 8001170:	8379      	strh	r1, [r7, #26]
 8001172:	8b79      	ldrh	r1, [r7, #26]
 8001174:	293f      	cmp	r1, #63	; 0x3f
 8001176:	d9dd      	bls.n	8001134 <TL_serialize+0x70>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 8001178:	2300      	movs	r3, #0
 800117a:	833b      	strh	r3, [r7, #24]
 800117c:	e012      	b.n	80011a4 <TL_serialize+0xe0>
    frame->buffer[i+TL_SERDES_DATA_OFFSET] = (frame->mask >> i) & 0b1;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7e5b      	ldrb	r3, [r3, #25]
 8001182:	461a      	mov	r2, r3
 8001184:	8b3b      	ldrh	r3, [r7, #24]
 8001186:	fa42 f303 	asr.w	r3, r2, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	8b3b      	ldrh	r3, [r7, #24]
 800118e:	3342      	adds	r3, #66	; 0x42
 8001190:	f002 0201 	and.w	r2, r2, #1
 8001194:	b2d1      	uxtb	r1, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	460a      	mov	r2, r1
 800119c:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800119e:	8b3b      	ldrh	r3, [r7, #24]
 80011a0:	3301      	adds	r3, #1
 80011a2:	833b      	strh	r3, [r7, #24]
 80011a4:	8b3b      	ldrh	r3, [r7, #24]
 80011a6:	2b07      	cmp	r3, #7
 80011a8:	d9e9      	bls.n	800117e <TL_serialize+0xba>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	82fb      	strh	r3, [r7, #22]
 80011ae:	e011      	b.n	80011d4 <TL_serialize+0x110>
    frame->buffer[i+TL_SERDES_MASK_OFFSET] = (frame->address >> i) & 0b1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	8afb      	ldrh	r3, [r7, #22]
 80011b6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	8afb      	ldrh	r3, [r7, #22]
 80011be:	334a      	adds	r3, #74	; 0x4a
 80011c0:	f002 0201 	and.w	r2, r2, #1
 80011c4:	b2d1      	uxtb	r1, r2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	460a      	mov	r2, r1
 80011cc:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 80011ce:	8afb      	ldrh	r3, [r7, #22]
 80011d0:	3301      	adds	r3, #1
 80011d2:	82fb      	strh	r3, [r7, #22]
 80011d4:	8afb      	ldrh	r3, [r7, #22]
 80011d6:	2b1f      	cmp	r3, #31
 80011d8:	d9ea      	bls.n	80011b0 <TL_serialize+0xec>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 80011da:	2300      	movs	r3, #0
 80011dc:	82bb      	strh	r3, [r7, #20]
 80011de:	e012      	b.n	8001206 <TL_serialize+0x142>
    frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] = (frame->source >> i) & 0b1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	791b      	ldrb	r3, [r3, #4]
 80011e4:	461a      	mov	r2, r3
 80011e6:	8abb      	ldrh	r3, [r7, #20]
 80011e8:	fa42 f303 	asr.w	r3, r2, r3
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	8abb      	ldrh	r3, [r7, #20]
 80011f0:	336a      	adds	r3, #106	; 0x6a
 80011f2:	f002 0201 	and.w	r2, r2, #1
 80011f6:	b2d1      	uxtb	r1, r2
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	460a      	mov	r2, r1
 80011fe:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001200:	8abb      	ldrh	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	82bb      	strh	r3, [r7, #20]
 8001206:	8abb      	ldrh	r3, [r7, #20]
 8001208:	2b03      	cmp	r3, #3
 800120a:	d9e9      	bls.n	80011e0 <TL_serialize+0x11c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800120c:	2300      	movs	r3, #0
 800120e:	827b      	strh	r3, [r7, #18]
 8001210:	e012      	b.n	8001238 <TL_serialize+0x174>
    frame->buffer[i+TL_SERDES_SOURCE_OFFSET] = (frame->size >> i) & 0b1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	78db      	ldrb	r3, [r3, #3]
 8001216:	461a      	mov	r2, r3
 8001218:	8a7b      	ldrh	r3, [r7, #18]
 800121a:	fa42 f303 	asr.w	r3, r2, r3
 800121e:	b2da      	uxtb	r2, r3
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	336e      	adds	r3, #110	; 0x6e
 8001224:	f002 0201 	and.w	r2, r2, #1
 8001228:	b2d1      	uxtb	r1, r2
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	460a      	mov	r2, r1
 8001230:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 8001232:	8a7b      	ldrh	r3, [r7, #18]
 8001234:	3301      	adds	r3, #1
 8001236:	827b      	strh	r3, [r7, #18]
 8001238:	8a7b      	ldrh	r3, [r7, #18]
 800123a:	2b03      	cmp	r3, #3
 800123c:	d9e9      	bls.n	8001212 <TL_serialize+0x14e>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 800123e:	2300      	movs	r3, #0
 8001240:	823b      	strh	r3, [r7, #16]
 8001242:	e012      	b.n	800126a <TL_serialize+0x1a6>
    frame->buffer[i+TL_SERDES_SIZE_OFFSET] = (frame->param >> i) & 0b1;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	789b      	ldrb	r3, [r3, #2]
 8001248:	461a      	mov	r2, r3
 800124a:	8a3b      	ldrh	r3, [r7, #16]
 800124c:	fa42 f303 	asr.w	r3, r2, r3
 8001250:	b2da      	uxtb	r2, r3
 8001252:	8a3b      	ldrh	r3, [r7, #16]
 8001254:	3372      	adds	r3, #114	; 0x72
 8001256:	f002 0201 	and.w	r2, r2, #1
 800125a:	b2d1      	uxtb	r1, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	460a      	mov	r2, r1
 8001262:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 8001264:	8a3b      	ldrh	r3, [r7, #16]
 8001266:	3301      	adds	r3, #1
 8001268:	823b      	strh	r3, [r7, #16]
 800126a:	8a3b      	ldrh	r3, [r7, #16]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d9e9      	bls.n	8001244 <TL_serialize+0x180>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001270:	2300      	movs	r3, #0
 8001272:	81fb      	strh	r3, [r7, #14]
 8001274:	e012      	b.n	800129c <TL_serialize+0x1d8>
    frame->buffer[i+TL_SERDES_PARAM_OFFSET] = (frame->opcode >> i) & 0b1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	461a      	mov	r2, r3
 800127c:	89fb      	ldrh	r3, [r7, #14]
 800127e:	fa42 f303 	asr.w	r3, r2, r3
 8001282:	b2da      	uxtb	r2, r3
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	3375      	adds	r3, #117	; 0x75
 8001288:	f002 0201 	and.w	r2, r2, #1
 800128c:	b2d1      	uxtb	r1, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	460a      	mov	r2, r1
 8001294:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	81fb      	strh	r3, [r7, #14]
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d9e9      	bls.n	8001276 <TL_serialize+0x1b2>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80012a2:	2300      	movs	r3, #0
 80012a4:	81bb      	strh	r3, [r7, #12]
 80012a6:	e012      	b.n	80012ce <TL_serialize+0x20a>
    frame->buffer[i+TL_SERDES_OPCODE_OFFSET] = (frame->chanid >> i) & 0b1;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	fa42 f303 	asr.w	r3, r2, r3
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	89bb      	ldrh	r3, [r7, #12]
 80012b8:	3378      	adds	r3, #120	; 0x78
 80012ba:	f002 0201 	and.w	r2, r2, #1
 80012be:	b2d1      	uxtb	r1, r2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	460a      	mov	r2, r1
 80012c6:	76da      	strb	r2, [r3, #27]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	81bb      	strh	r3, [r7, #12]
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d9e9      	bls.n	80012a8 <TL_serialize+0x1e4>
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bcf0      	pop	{r4, r5, r6, r7}
 80012de:	4770      	bx	lr

080012e0 <TL_deserialize>:

void TL_deserialize(TileLinkFrame *frame) {
 80012e0:	b4f0      	push	{r4, r5, r6, r7}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  frame->chanid = 0;
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	2000      	movs	r0, #0
 80012ec:	7008      	strb	r0, [r1, #0]
  frame->opcode = 0;
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	2000      	movs	r0, #0
 80012f2:	7048      	strb	r0, [r1, #1]
  frame->param = 0;
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	2000      	movs	r0, #0
 80012f8:	7088      	strb	r0, [r1, #2]
  frame->size = 0;
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	2000      	movs	r0, #0
 80012fe:	70c8      	strb	r0, [r1, #3]
  frame->source = 0;
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	2000      	movs	r0, #0
 8001304:	7108      	strb	r0, [r1, #4]
  frame->address = 0;
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2000      	movs	r0, #0
 800130a:	6088      	str	r0, [r1, #8]
  frame->data = 0;
 800130c:	687e      	ldr	r6, [r7, #4]
 800130e:	f04f 0000 	mov.w	r0, #0
 8001312:	f04f 0100 	mov.w	r1, #0
 8001316:	e9c6 0104 	strd	r0, r1, [r6, #16]
  frame->corrupt = 0;
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2000      	movs	r0, #0
 800131e:	7608      	strb	r0, [r1, #24]
  frame->mask = 0;
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	2000      	movs	r0, #0
 8001324:	7648      	strb	r0, [r1, #25]
  frame->last = 0;
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2000      	movs	r0, #0
 800132a:	7688      	strb	r0, [r1, #26]

  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 800132c:	2100      	movs	r1, #0
 800132e:	83f9      	strh	r1, [r7, #30]
 8001330:	e014      	b.n	800135c <TL_deserialize+0x7c>
    frame->last |= ((frame->buffer[i] & 0b1) << i);
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	7e89      	ldrb	r1, [r1, #26]
 8001336:	b248      	sxtb	r0, r1
 8001338:	8bf9      	ldrh	r1, [r7, #30]
 800133a:	687e      	ldr	r6, [r7, #4]
 800133c:	4431      	add	r1, r6
 800133e:	7ec9      	ldrb	r1, [r1, #27]
 8001340:	f001 0601 	and.w	r6, r1, #1
 8001344:	8bf9      	ldrh	r1, [r7, #30]
 8001346:	fa06 f101 	lsl.w	r1, r6, r1
 800134a:	b249      	sxtb	r1, r1
 800134c:	4301      	orrs	r1, r0
 800134e:	b249      	sxtb	r1, r1
 8001350:	b2c8      	uxtb	r0, r1
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	7688      	strb	r0, [r1, #26]
  for (uint16_t i=0; i<TL_SERDES_LAST_SIZE; i+=1) {
 8001356:	8bf9      	ldrh	r1, [r7, #30]
 8001358:	3101      	adds	r1, #1
 800135a:	83f9      	strh	r1, [r7, #30]
 800135c:	8bf9      	ldrh	r1, [r7, #30]
 800135e:	2900      	cmp	r1, #0
 8001360:	d0e7      	beq.n	8001332 <TL_deserialize+0x52>
  }
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 8001362:	2100      	movs	r1, #0
 8001364:	83b9      	strh	r1, [r7, #28]
 8001366:	e015      	b.n	8001394 <TL_deserialize+0xb4>
    frame->corrupt |= ((frame->buffer[i+TL_SERDES_LAST_OFFSET] & 0b1) << i);
 8001368:	6879      	ldr	r1, [r7, #4]
 800136a:	7e09      	ldrb	r1, [r1, #24]
 800136c:	b248      	sxtb	r0, r1
 800136e:	8bb9      	ldrh	r1, [r7, #28]
 8001370:	3101      	adds	r1, #1
 8001372:	687e      	ldr	r6, [r7, #4]
 8001374:	4431      	add	r1, r6
 8001376:	7ec9      	ldrb	r1, [r1, #27]
 8001378:	f001 0601 	and.w	r6, r1, #1
 800137c:	8bb9      	ldrh	r1, [r7, #28]
 800137e:	fa06 f101 	lsl.w	r1, r6, r1
 8001382:	b249      	sxtb	r1, r1
 8001384:	4301      	orrs	r1, r0
 8001386:	b249      	sxtb	r1, r1
 8001388:	b2c8      	uxtb	r0, r1
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	7608      	strb	r0, [r1, #24]
  for (uint16_t i=0; i<TL_SERDES_CORRUPT_SIZE; i+=1) {
 800138e:	8bb9      	ldrh	r1, [r7, #28]
 8001390:	3101      	adds	r1, #1
 8001392:	83b9      	strh	r1, [r7, #28]
 8001394:	8bb9      	ldrh	r1, [r7, #28]
 8001396:	2900      	cmp	r1, #0
 8001398:	d0e6      	beq.n	8001368 <TL_deserialize+0x88>
  }
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 800139a:	2100      	movs	r1, #0
 800139c:	8379      	strh	r1, [r7, #26]
 800139e:	e01b      	b.n	80013d8 <TL_deserialize+0xf8>
    frame->data |= ((frame->buffer[i+TL_SERDES_CORRUPT_OFFSET] & 0b1) << i);
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80013a6:	8b7e      	ldrh	r6, [r7, #26]
 80013a8:	f106 0c02 	add.w	ip, r6, #2
 80013ac:	687e      	ldr	r6, [r7, #4]
 80013ae:	4466      	add	r6, ip
 80013b0:	7ef6      	ldrb	r6, [r6, #27]
 80013b2:	f006 0c01 	and.w	ip, r6, #1
 80013b6:	8b7e      	ldrh	r6, [r7, #26]
 80013b8:	fa0c f606 	lsl.w	r6, ip, r6
 80013bc:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 80013c0:	4632      	mov	r2, r6
 80013c2:	4663      	mov	r3, ip
 80013c4:	ea40 0402 	orr.w	r4, r0, r2
 80013c8:	ea41 0503 	orr.w	r5, r1, r3
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	e9c1 4504 	strd	r4, r5, [r1, #16]
  for (uint16_t i=0; i<TL_SERDES_DATA_SIZE; i+=1) {
 80013d2:	8b79      	ldrh	r1, [r7, #26]
 80013d4:	3101      	adds	r1, #1
 80013d6:	8379      	strh	r1, [r7, #26]
 80013d8:	8b79      	ldrh	r1, [r7, #26]
 80013da:	293f      	cmp	r1, #63	; 0x3f
 80013dc:	d9e0      	bls.n	80013a0 <TL_deserialize+0xc0>
  }
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 80013de:	2300      	movs	r3, #0
 80013e0:	833b      	strh	r3, [r7, #24]
 80013e2:	e015      	b.n	8001410 <TL_deserialize+0x130>
    frame->mask |= ((frame->buffer[i+TL_SERDES_DATA_OFFSET] & 0b1) << i);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e5b      	ldrb	r3, [r3, #25]
 80013e8:	b25a      	sxtb	r2, r3
 80013ea:	8b3b      	ldrh	r3, [r7, #24]
 80013ec:	3342      	adds	r3, #66	; 0x42
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	440b      	add	r3, r1
 80013f2:	7edb      	ldrb	r3, [r3, #27]
 80013f4:	f003 0101 	and.w	r1, r3, #1
 80013f8:	8b3b      	ldrh	r3, [r7, #24]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25b      	sxtb	r3, r3
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	765a      	strb	r2, [r3, #25]
  for (uint16_t i=0; i<TL_SERDES_MASK_SIZE; i+=1) {
 800140a:	8b3b      	ldrh	r3, [r7, #24]
 800140c:	3301      	adds	r3, #1
 800140e:	833b      	strh	r3, [r7, #24]
 8001410:	8b3b      	ldrh	r3, [r7, #24]
 8001412:	2b07      	cmp	r3, #7
 8001414:	d9e6      	bls.n	80013e4 <TL_deserialize+0x104>
  }
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 8001416:	2300      	movs	r3, #0
 8001418:	82fb      	strh	r3, [r7, #22]
 800141a:	e011      	b.n	8001440 <TL_deserialize+0x160>
    frame->address |= ((frame->buffer[i+TL_SERDES_MASK_OFFSET] & 0b1) << i);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	8afa      	ldrh	r2, [r7, #22]
 8001422:	324a      	adds	r2, #74	; 0x4a
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	440a      	add	r2, r1
 8001428:	7ed2      	ldrb	r2, [r2, #27]
 800142a:	f002 0101 	and.w	r1, r2, #1
 800142e:	8afa      	ldrh	r2, [r7, #22]
 8001430:	fa01 f202 	lsl.w	r2, r1, r2
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
  for (uint16_t i=0; i<TL_SERDES_ADDRESS_SIZE; i+=1) {
 800143a:	8afb      	ldrh	r3, [r7, #22]
 800143c:	3301      	adds	r3, #1
 800143e:	82fb      	strh	r3, [r7, #22]
 8001440:	8afb      	ldrh	r3, [r7, #22]
 8001442:	2b1f      	cmp	r3, #31
 8001444:	d9ea      	bls.n	800141c <TL_deserialize+0x13c>
  }
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001446:	2300      	movs	r3, #0
 8001448:	82bb      	strh	r3, [r7, #20]
 800144a:	e015      	b.n	8001478 <TL_deserialize+0x198>
    frame->source |= ((frame->buffer[i+TL_SERDES_ADDRESS_OFFSET] & 0b1) << i);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	791b      	ldrb	r3, [r3, #4]
 8001450:	b25a      	sxtb	r2, r3
 8001452:	8abb      	ldrh	r3, [r7, #20]
 8001454:	336a      	adds	r3, #106	; 0x6a
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	440b      	add	r3, r1
 800145a:	7edb      	ldrb	r3, [r3, #27]
 800145c:	f003 0101 	and.w	r1, r3, #1
 8001460:	8abb      	ldrh	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	711a      	strb	r2, [r3, #4]
  for (uint16_t i=0; i<TL_SERDES_SOURCE_SIZE; i+=1) {
 8001472:	8abb      	ldrh	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	82bb      	strh	r3, [r7, #20]
 8001478:	8abb      	ldrh	r3, [r7, #20]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d9e6      	bls.n	800144c <TL_deserialize+0x16c>
  }
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 800147e:	2300      	movs	r3, #0
 8001480:	827b      	strh	r3, [r7, #18]
 8001482:	e015      	b.n	80014b0 <TL_deserialize+0x1d0>
    frame->size |= ((frame->buffer[i+TL_SERDES_SOURCE_OFFSET] & 0b1) << i);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	78db      	ldrb	r3, [r3, #3]
 8001488:	b25a      	sxtb	r2, r3
 800148a:	8a7b      	ldrh	r3, [r7, #18]
 800148c:	336e      	adds	r3, #110	; 0x6e
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	440b      	add	r3, r1
 8001492:	7edb      	ldrb	r3, [r3, #27]
 8001494:	f003 0101 	and.w	r1, r3, #1
 8001498:	8a7b      	ldrh	r3, [r7, #18]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	70da      	strb	r2, [r3, #3]
  for (uint16_t i=0; i<TL_SERDES_SIZE_SIZE; i+=1) {
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	3301      	adds	r3, #1
 80014ae:	827b      	strh	r3, [r7, #18]
 80014b0:	8a7b      	ldrh	r3, [r7, #18]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d9e6      	bls.n	8001484 <TL_deserialize+0x1a4>
  }
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	823b      	strh	r3, [r7, #16]
 80014ba:	e015      	b.n	80014e8 <TL_deserialize+0x208>
    frame->param |= ((frame->buffer[i+TL_SERDES_SIZE_OFFSET] & 0b1) << i);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	8a3b      	ldrh	r3, [r7, #16]
 80014c4:	3372      	adds	r3, #114	; 0x72
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	440b      	add	r3, r1
 80014ca:	7edb      	ldrb	r3, [r3, #27]
 80014cc:	f003 0101 	and.w	r1, r3, #1
 80014d0:	8a3b      	ldrh	r3, [r7, #16]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	709a      	strb	r2, [r3, #2]
  for (uint16_t i=0; i<TL_SERDES_PARAM_SIZE; i+=1) {
 80014e2:	8a3b      	ldrh	r3, [r7, #16]
 80014e4:	3301      	adds	r3, #1
 80014e6:	823b      	strh	r3, [r7, #16]
 80014e8:	8a3b      	ldrh	r3, [r7, #16]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d9e6      	bls.n	80014bc <TL_deserialize+0x1dc>
  }
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	81fb      	strh	r3, [r7, #14]
 80014f2:	e015      	b.n	8001520 <TL_deserialize+0x240>
    frame->opcode |= ((frame->buffer[i+TL_SERDES_PARAM_OFFSET] & 0b1) << i);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	785b      	ldrb	r3, [r3, #1]
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	89fb      	ldrh	r3, [r7, #14]
 80014fc:	3375      	adds	r3, #117	; 0x75
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	440b      	add	r3, r1
 8001502:	7edb      	ldrb	r3, [r3, #27]
 8001504:	f003 0101 	and.w	r1, r3, #1
 8001508:	89fb      	ldrh	r3, [r7, #14]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b25b      	sxtb	r3, r3
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	705a      	strb	r2, [r3, #1]
  for (uint16_t i=0; i<TL_SERDES_OPCODE_SIZE; i+=1) {
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	3301      	adds	r3, #1
 800151e:	81fb      	strh	r3, [r7, #14]
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d9e6      	bls.n	80014f4 <TL_deserialize+0x214>
  }
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001526:	2300      	movs	r3, #0
 8001528:	81bb      	strh	r3, [r7, #12]
 800152a:	e015      	b.n	8001558 <TL_deserialize+0x278>
    frame->chanid |= ((frame->buffer[i+TL_SERDES_OPCODE_OFFSET] & 0b1) << i);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b25a      	sxtb	r2, r3
 8001532:	89bb      	ldrh	r3, [r7, #12]
 8001534:	3378      	adds	r3, #120	; 0x78
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	440b      	add	r3, r1
 800153a:	7edb      	ldrb	r3, [r3, #27]
 800153c:	f003 0101 	and.w	r1, r3, #1
 8001540:	89bb      	ldrh	r3, [r7, #12]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	b25b      	sxtb	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b25b      	sxtb	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	701a      	strb	r2, [r3, #0]
  for (uint16_t i=0; i<TL_SERDES_CHANID_SIZE; i+=1) {
 8001552:	89bb      	ldrh	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	81bb      	strh	r3, [r7, #12]
 8001558:	89bb      	ldrh	r3, [r7, #12]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d9e6      	bls.n	800152c <TL_deserialize+0x24c>
  }
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bcf0      	pop	{r4, r5, r6, r7}
 8001568:	4770      	bx	lr

0800156a <TL_transmit>:

void TL_transmit(TileLinkController *tl) {
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  TL_serialize(&tl->tx_frame);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fda5 	bl	80010c4 <TL_serialize>

  // reset state
  tl->tx_bit_offset = 0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
  tl->rx_bit_offset = 0;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f8a3 2246 	strh.w	r2, [r3, #582]	; 0x246
  tl->tx_finished = 0;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f8a3 2242 	strh.w	r2, [r3, #578]	; 0x242
  tl->rx_finished = 0;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  // enable TX RX
  tl->rx_pending = 1;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2201      	movs	r2, #1
 800159e:	f8a3 224a 	strh.w	r2, [r3, #586]	; 0x24a
  tl->tx_pending = 1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <TL_GET>:


void TL_GET(TileLinkController *tl, uint32_t address) {
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  tl->tx_frame.chanid  = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
  tl->tx_frame.opcode  = 0x4;  // get
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2204      	movs	r2, #4
 80015c6:	705a      	strb	r2, [r3, #1]
  tl->tx_frame.param   = 0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	709a      	strb	r2, [r3, #2]
  tl->tx_frame.size    = 2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2202      	movs	r2, #2
 80015d2:	70da      	strb	r2, [r3, #3]
  tl->tx_frame.source  = 0;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	711a      	strb	r2, [r3, #4]
  tl->tx_frame.address = address;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	609a      	str	r2, [r3, #8]
  tl->tx_frame.data    = 0x0000000000000000;
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
  tl->tx_frame.corrupt = 0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	761a      	strb	r2, [r3, #24]
  tl->tx_frame.mask    = 0b00001111;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	220f      	movs	r2, #15
 80015f8:	765a      	strb	r2, [r3, #25]
  tl->tx_frame.last    = 1;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	769a      	strb	r2, [r3, #26]
  TL_transmit(tl);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ffb2 	bl	800156a <TL_transmit>
  while (!tl->rx_finished) {}
 8001606:	bf00      	nop
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0fa      	beq.n	8001608 <TL_GET+0x56>
  TL_deserialize(&tl->rx_frame);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fe61 	bl	80012e0 <TL_deserialize>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <TL_PUTFULLDATA>:

void TL_PUTFULLDATA(TileLinkController *tl, uint32_t address, uint64_t data) {
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	e9c7 2300 	strd	r2, r3, [r7]
  tl->tx_frame.chanid  = 0;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
  tl->tx_frame.opcode  = 0x0;  // putfulldata
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	705a      	strb	r2, [r3, #1]
  tl->tx_frame.param   = 0;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	709a      	strb	r2, [r3, #2]
  tl->tx_frame.size    = 2;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2202      	movs	r2, #2
 800164a:	70da      	strb	r2, [r3, #3]
  tl->tx_frame.source  = 0;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	711a      	strb	r2, [r3, #4]
  tl->tx_frame.address = address;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	68ba      	ldr	r2, [r7, #8]
 8001656:	609a      	str	r2, [r3, #8]
  tl->tx_frame.data    = data;
 8001658:	68f9      	ldr	r1, [r7, #12]
 800165a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800165e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  tl->tx_frame.corrupt = 0;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2200      	movs	r2, #0
 8001666:	761a      	strb	r2, [r3, #24]
  tl->tx_frame.mask    = 0b00001111;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	220f      	movs	r2, #15
 800166c:	765a      	strb	r2, [r3, #25]
  tl->tx_frame.last    = 1;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	769a      	strb	r2, [r3, #26]
  TL_transmit(tl);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff ff78 	bl	800156a <TL_transmit>
  while (!tl->rx_finished) {}
 800167a:	bf00      	nop
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0fa      	beq.n	800167c <TL_PUTFULLDATA+0x56>
  TL_deserialize(&tl->rx_frame);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fe27 	bl	80012e0 <TL_deserialize>
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016a2:	490e      	ldr	r1, [pc, #56]	; (80016dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b8:	4c0b      	ldr	r4, [pc, #44]	; (80016e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c6:	f7ff fc6b 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f003 f8a5 	bl	8004818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff f8af 	bl	8000830 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016e0:	0800530c 	.word	0x0800530c
  ldr r2, =_sbss
 80016e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016e8:	2000044c 	.word	0x2000044c

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f94f 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fab6 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f967 	bl	8001a26 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 f92f 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000438 	.word	0x20000438

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000438 	.word	0x20000438

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff ffee 	bl	80017bc <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffde 	bl	80017bc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	; (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <__NVIC_EnableIRQ+0x38>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000e100 	.word	0xe000e100

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	; (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	; (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff29 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff3e 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff31 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	e165      	b.n	8001d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8154 	bne.w	8001d22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d005      	beq.n	8001a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d130      	bne.n	8001af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0201 	and.w	r2, r3, #1
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d017      	beq.n	8001b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d123      	bne.n	8001b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	08da      	lsrs	r2, r3, #3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3208      	adds	r2, #8
 8001b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	08da      	lsrs	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3208      	adds	r2, #8
 8001b7e:	69b9      	ldr	r1, [r7, #24]
 8001b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0203 	and.w	r2, r3, #3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80ae 	beq.w	8001d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_GPIO_Init+0x300>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a5c      	ldr	r2, [pc, #368]	; (8001d40 <HAL_GPIO_Init+0x300>)
 8001bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b5a      	ldr	r3, [pc, #360]	; (8001d40 <HAL_GPIO_Init+0x300>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be2:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3302      	adds	r3, #2
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_GPIO_Init+0x308>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d025      	beq.n	8001c5a <HAL_GPIO_Init+0x21a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <HAL_GPIO_Init+0x30c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01f      	beq.n	8001c56 <HAL_GPIO_Init+0x216>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4d      	ldr	r2, [pc, #308]	; (8001d50 <HAL_GPIO_Init+0x310>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x212>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4c      	ldr	r2, [pc, #304]	; (8001d54 <HAL_GPIO_Init+0x314>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <HAL_GPIO_Init+0x318>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x20a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a4a      	ldr	r2, [pc, #296]	; (8001d5c <HAL_GPIO_Init+0x31c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x206>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a49      	ldr	r2, [pc, #292]	; (8001d60 <HAL_GPIO_Init+0x320>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x202>
 8001c3e:	2306      	movs	r3, #6
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c42:	2307      	movs	r3, #7
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x21c>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cce:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1c:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_GPIO_Init+0x324>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae96 	bls.w	8001a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40013c00 	.word	0x40013c00

08001d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e001      	b.n	8001d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db4:	e003      	b.n	8001dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	619a      	str	r2, [r3, #24]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0cc      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d90c      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b8      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	494d      	ldr	r1, [pc, #308]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d044      	beq.n	8001eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d119      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e067      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4934      	ldr	r1, [pc, #208]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7ff fc7e 	bl	80017bc <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7ff fc7a 	bl	80017bc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e04f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d20c      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e032      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4916      	ldr	r1, [pc, #88]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f52:	f000 f855 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001f56:	4602      	mov	r2, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	490a      	ldr	r1, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	5ccb      	ldrb	r3, [r1, r3]
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fbde 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	080052b0 	.word	0x080052b0
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000000 	.word	0x20000000

08001fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fb4:	f7ff fff0 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0a9b      	lsrs	r3, r3, #10
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4903      	ldr	r1, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	080052c0 	.word	0x080052c0

08001fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fdc:	f7ff ffdc 	bl	8001f98 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0b5b      	lsrs	r3, r3, #13
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4903      	ldr	r1, [pc, #12]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	080052c0 	.word	0x080052c0

08002000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002004:	b0a6      	sub	sp, #152	; 0x98
 8002006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002026:	4bc8      	ldr	r3, [pc, #800]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b0c      	cmp	r3, #12
 8002030:	f200 817e 	bhi.w	8002330 <HAL_RCC_GetSysClockFreq+0x330>
 8002034:	a201      	add	r2, pc, #4	; (adr r2, 800203c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203a:	bf00      	nop
 800203c:	08002071 	.word	0x08002071
 8002040:	08002331 	.word	0x08002331
 8002044:	08002331 	.word	0x08002331
 8002048:	08002331 	.word	0x08002331
 800204c:	08002079 	.word	0x08002079
 8002050:	08002331 	.word	0x08002331
 8002054:	08002331 	.word	0x08002331
 8002058:	08002331 	.word	0x08002331
 800205c:	08002081 	.word	0x08002081
 8002060:	08002331 	.word	0x08002331
 8002064:	08002331 	.word	0x08002331
 8002068:	08002331 	.word	0x08002331
 800206c:	080021eb 	.word	0x080021eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4bb6      	ldr	r3, [pc, #728]	; (800234c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002076:	e15f      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4bb5      	ldr	r3, [pc, #724]	; (8002350 <HAL_RCC_GetSysClockFreq+0x350>)
 800207a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800207e:	e15b      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002080:	4bb1      	ldr	r3, [pc, #708]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208c:	4bae      	ldr	r3, [pc, #696]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d031      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002098:	4bab      	ldr	r3, [pc, #684]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	2200      	movs	r2, #0
 80020a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80020a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020aa:	663b      	str	r3, [r7, #96]	; 0x60
 80020ac:	2300      	movs	r3, #0
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
 80020b0:	4ba7      	ldr	r3, [pc, #668]	; (8002350 <HAL_RCC_GetSysClockFreq+0x350>)
 80020b2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020b6:	462a      	mov	r2, r5
 80020b8:	fb03 f202 	mul.w	r2, r3, r2
 80020bc:	2300      	movs	r3, #0
 80020be:	4621      	mov	r1, r4
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	4aa2      	ldr	r2, [pc, #648]	; (8002350 <HAL_RCC_GetSysClockFreq+0x350>)
 80020c8:	4621      	mov	r1, r4
 80020ca:	fba1 1202 	umull	r1, r2, r1, r2
 80020ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80020d0:	460a      	mov	r2, r1
 80020d2:	67ba      	str	r2, [r7, #120]	; 0x78
 80020d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80020d6:	4413      	add	r3, r2
 80020d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020de:	2200      	movs	r2, #0
 80020e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80020e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80020e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80020ec:	f7fe f8e8 	bl	80002c0 <__aeabi_uldivmod>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4613      	mov	r3, r2
 80020f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020fa:	e064      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fc:	4b92      	ldr	r3, [pc, #584]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	099b      	lsrs	r3, r3, #6
 8002102:	2200      	movs	r2, #0
 8002104:	653b      	str	r3, [r7, #80]	; 0x50
 8002106:	657a      	str	r2, [r7, #84]	; 0x54
 8002108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800210a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002110:	2300      	movs	r3, #0
 8002112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002114:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002118:	4622      	mov	r2, r4
 800211a:	462b      	mov	r3, r5
 800211c:	f04f 0000 	mov.w	r0, #0
 8002120:	f04f 0100 	mov.w	r1, #0
 8002124:	0159      	lsls	r1, r3, #5
 8002126:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800212a:	0150      	lsls	r0, r2, #5
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4621      	mov	r1, r4
 8002132:	1a51      	subs	r1, r2, r1
 8002134:	6139      	str	r1, [r7, #16]
 8002136:	4629      	mov	r1, r5
 8002138:	eb63 0301 	sbc.w	r3, r3, r1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800214a:	4659      	mov	r1, fp
 800214c:	018b      	lsls	r3, r1, #6
 800214e:	4651      	mov	r1, sl
 8002150:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002154:	4651      	mov	r1, sl
 8002156:	018a      	lsls	r2, r1, #6
 8002158:	4651      	mov	r1, sl
 800215a:	ebb2 0801 	subs.w	r8, r2, r1
 800215e:	4659      	mov	r1, fp
 8002160:	eb63 0901 	sbc.w	r9, r3, r1
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002170:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002174:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002178:	4690      	mov	r8, r2
 800217a:	4699      	mov	r9, r3
 800217c:	4623      	mov	r3, r4
 800217e:	eb18 0303 	adds.w	r3, r8, r3
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	462b      	mov	r3, r5
 8002186:	eb49 0303 	adc.w	r3, r9, r3
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002198:	4629      	mov	r1, r5
 800219a:	028b      	lsls	r3, r1, #10
 800219c:	4621      	mov	r1, r4
 800219e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a2:	4621      	mov	r1, r4
 80021a4:	028a      	lsls	r2, r1, #10
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ae:	2200      	movs	r2, #0
 80021b0:	643b      	str	r3, [r7, #64]	; 0x40
 80021b2:	647a      	str	r2, [r7, #68]	; 0x44
 80021b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021b8:	f7fe f882 	bl	80002c0 <__aeabi_uldivmod>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4613      	mov	r3, r2
 80021c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021c6:	4b60      	ldr	r3, [pc, #384]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	0c1b      	lsrs	r3, r3, #16
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	3301      	adds	r3, #1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80021d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80021e8:	e0a6      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f6:	4b54      	ldr	r3, [pc, #336]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d02a      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	099b      	lsrs	r3, r3, #6
 8002208:	2200      	movs	r2, #0
 800220a:	63bb      	str	r3, [r7, #56]	; 0x38
 800220c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800220e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002210:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002214:	2100      	movs	r1, #0
 8002216:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <HAL_RCC_GetSysClockFreq+0x350>)
 8002218:	fb03 f201 	mul.w	r2, r3, r1
 800221c:	2300      	movs	r3, #0
 800221e:	fb00 f303 	mul.w	r3, r0, r3
 8002222:	4413      	add	r3, r2
 8002224:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <HAL_RCC_GetSysClockFreq+0x350>)
 8002226:	fba0 1202 	umull	r1, r2, r0, r2
 800222a:	677a      	str	r2, [r7, #116]	; 0x74
 800222c:	460a      	mov	r2, r1
 800222e:	673a      	str	r2, [r7, #112]	; 0x70
 8002230:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002232:	4413      	add	r3, r2
 8002234:	677b      	str	r3, [r7, #116]	; 0x74
 8002236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800223a:	2200      	movs	r2, #0
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
 800223e:	637a      	str	r2, [r7, #52]	; 0x34
 8002240:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002244:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002248:	f7fe f83a 	bl	80002c0 <__aeabi_uldivmod>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4613      	mov	r3, r2
 8002252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002256:	e05b      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002258:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	2200      	movs	r2, #0
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
 8002262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226a:	623b      	str	r3, [r7, #32]
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
 8002270:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002274:	4642      	mov	r2, r8
 8002276:	464b      	mov	r3, r9
 8002278:	f04f 0000 	mov.w	r0, #0
 800227c:	f04f 0100 	mov.w	r1, #0
 8002280:	0159      	lsls	r1, r3, #5
 8002282:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002286:	0150      	lsls	r0, r2, #5
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4641      	mov	r1, r8
 800228e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002292:	4649      	mov	r1, r9
 8002294:	eb63 0b01 	sbc.w	fp, r3, r1
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ac:	ebb2 040a 	subs.w	r4, r2, sl
 80022b0:	eb63 050b 	sbc.w	r5, r3, fp
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	00eb      	lsls	r3, r5, #3
 80022be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c2:	00e2      	lsls	r2, r4, #3
 80022c4:	4614      	mov	r4, r2
 80022c6:	461d      	mov	r5, r3
 80022c8:	4643      	mov	r3, r8
 80022ca:	18e3      	adds	r3, r4, r3
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	464b      	mov	r3, r9
 80022d0:	eb45 0303 	adc.w	r3, r5, r3
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022e2:	4629      	mov	r1, r5
 80022e4:	028b      	lsls	r3, r1, #10
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ec:	4621      	mov	r1, r4
 80022ee:	028a      	lsls	r2, r1, #10
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f8:	2200      	movs	r2, #0
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	61fa      	str	r2, [r7, #28]
 80022fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002302:	f7fd ffdd 	bl	80002c0 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4613      	mov	r3, r2
 800230c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCC_GetSysClockFreq+0x348>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0f1b      	lsrs	r3, r3, #28
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800231e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002326:	fbb2 f3f3 	udiv	r3, r2, r3
 800232a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800232e:	e003      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002336:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002338:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800233c:	4618      	mov	r0, r3
 800233e:	3798      	adds	r7, #152	; 0x98
 8002340:	46bd      	mov	sp, r7
 8002342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	00f42400 	.word	0x00f42400
 8002350:	017d7840 	.word	0x017d7840

08002354 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e28d      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8083 	beq.w	800247a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002374:	4b94      	ldr	r3, [pc, #592]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b04      	cmp	r3, #4
 800237e:	d019      	beq.n	80023b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002380:	4b91      	ldr	r3, [pc, #580]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002388:	2b08      	cmp	r3, #8
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800238c:	4b8e      	ldr	r3, [pc, #568]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002398:	d00c      	beq.n	80023b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239a:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d112      	bne.n	80023cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a6:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b2:	d10b      	bne.n	80023cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	4b84      	ldr	r3, [pc, #528]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d05b      	beq.n	8002478 <HAL_RCC_OscConfig+0x124>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d157      	bne.n	8002478 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e25a      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x90>
 80023d6:	4b7c      	ldr	r3, [pc, #496]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7b      	ldr	r2, [pc, #492]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xcc>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0xb4>
 80023ee:	4b76      	ldr	r3, [pc, #472]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a75      	ldr	r2, [pc, #468]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b73      	ldr	r3, [pc, #460]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a72      	ldr	r2, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xcc>
 8002408:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6b      	ldr	r2, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7ff f9c8 	bl	80017bc <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff f9c4 	bl	80017bc <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e21f      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xdc>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff f9b4 	bl	80017bc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff f9b0 	bl	80017bc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e20b      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	4b57      	ldr	r3, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x104>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d06f      	beq.n	8002566 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002486:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b00      	cmp	r3, #0
 8002490:	d017      	beq.n	80024c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002492:	4b4d      	ldr	r3, [pc, #308]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800249a:	2b08      	cmp	r3, #8
 800249c:	d105      	bne.n	80024aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800249e:	4b4a      	ldr	r3, [pc, #296]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024aa:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d11c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b6:	4b44      	ldr	r3, [pc, #272]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	4b41      	ldr	r3, [pc, #260]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x186>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e1d3      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b3b      	ldr	r3, [pc, #236]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4937      	ldr	r1, [pc, #220]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	e03a      	b.n	8002566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f8:	4b34      	ldr	r3, [pc, #208]	; (80025cc <HAL_RCC_OscConfig+0x278>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7ff f95d 	bl	80017bc <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002506:	f7ff f959 	bl	80017bc <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e1b4      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4925      	ldr	r1, [pc, #148]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_OscConfig+0x278>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff f93c 	bl	80017bc <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002548:	f7ff f938 	bl	80017bc <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e193      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	4b1b      	ldr	r3, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d036      	beq.n	80025e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d016      	beq.n	80025a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <HAL_RCC_OscConfig+0x27c>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002580:	f7ff f91c 	bl	80017bc <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002588:	f7ff f918 	bl	80017bc <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e173      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_OscConfig+0x274>)
 800259c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x234>
 80025a6:	e01b      	b.n	80025e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_OscConfig+0x27c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7ff f905 	bl	80017bc <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	e00e      	b.n	80025d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b6:	f7ff f901 	bl	80017bc <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d907      	bls.n	80025d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e15c      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
 80025c8:	40023800 	.word	0x40023800
 80025cc:	42470000 	.word	0x42470000
 80025d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b8a      	ldr	r3, [pc, #552]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 80025d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ea      	bne.n	80025b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8097 	beq.w	800271c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b83      	ldr	r3, [pc, #524]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	4b7f      	ldr	r3, [pc, #508]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a7e      	ldr	r2, [pc, #504]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b7c      	ldr	r3, [pc, #496]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261a:	2301      	movs	r3, #1
 800261c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b79      	ldr	r3, [pc, #484]	; (8002804 <HAL_RCC_OscConfig+0x4b0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x4b0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4b0>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002636:	f7ff f8c1 	bl	80017bc <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7ff f8bd 	bl	80017bc <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e118      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b6c      	ldr	r3, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x4b0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x31e>
 8002664:	4b66      	ldr	r3, [pc, #408]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	4a65      	ldr	r2, [pc, #404]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6713      	str	r3, [r2, #112]	; 0x70
 8002670:	e01c      	b.n	80026ac <HAL_RCC_OscConfig+0x358>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b05      	cmp	r3, #5
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x340>
 800267a:	4b61      	ldr	r3, [pc, #388]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 800267c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267e:	4a60      	ldr	r2, [pc, #384]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6713      	str	r3, [r2, #112]	; 0x70
 8002686:	4b5e      	ldr	r3, [pc, #376]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0x358>
 8002694:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a59      	ldr	r2, [pc, #356]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	4b57      	ldr	r3, [pc, #348]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a56      	ldr	r2, [pc, #344]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 80026a6:	f023 0304 	bic.w	r3, r3, #4
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7ff f882 	bl	80017bc <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7ff f87e 	bl	80017bc <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0d7      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ee      	beq.n	80026bc <HAL_RCC_OscConfig+0x368>
 80026de:	e014      	b.n	800270a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e0:	f7ff f86c 	bl	80017bc <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7ff f868 	bl	80017bc <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e0c1      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026fe:	4b40      	ldr	r3, [pc, #256]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1ee      	bne.n	80026e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d105      	bne.n	800271c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002710:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80ad 	beq.w	8002880 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002726:	4b36      	ldr	r3, [pc, #216]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b08      	cmp	r3, #8
 8002730:	d060      	beq.n	80027f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d145      	bne.n	80027c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273a:	4b33      	ldr	r3, [pc, #204]	; (8002808 <HAL_RCC_OscConfig+0x4b4>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7ff f83c 	bl	80017bc <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002748:	f7ff f838 	bl	80017bc <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e093      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	3b01      	subs	r3, #1
 8002780:	041b      	lsls	r3, r3, #16
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	071b      	lsls	r3, r3, #28
 8002792:	491b      	ldr	r1, [pc, #108]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <HAL_RCC_OscConfig+0x4b4>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7ff f80d 	bl	80017bc <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a6:	f7ff f809 	bl	80017bc <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e064      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x452>
 80027c4:	e05c      	b.n	8002880 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_RCC_OscConfig+0x4b4>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fff6 	bl	80017bc <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d4:	f7fe fff2 	bl	80017bc <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e04d      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	4b06      	ldr	r3, [pc, #24]	; (8002800 <HAL_RCC_OscConfig+0x4ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x480>
 80027f2:	e045      	b.n	8002880 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d107      	bne.n	800280c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e040      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000
 8002808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800280c:	4b1f      	ldr	r3, [pc, #124]	; (800288c <HAL_RCC_OscConfig+0x538>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d030      	beq.n	800287c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d129      	bne.n	800287c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d122      	bne.n	800287c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800283c:	4013      	ands	r3, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002844:	4293      	cmp	r3, r2
 8002846:	d119      	bne.n	800287c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	085b      	lsrs	r3, r3, #1
 8002854:	3b01      	subs	r3, #1
 8002856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d10f      	bne.n	800287c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e041      	b.n	8002926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe fa14 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 fe1c 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e041      	b.n	80029c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f839 	bl	80029cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	4619      	mov	r1, r3
 800296c:	4610      	mov	r0, r2
 800296e:	f000 fdcd 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x24>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e022      	b.n	8002a4a <HAL_TIM_PWM_Start+0x6a>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d109      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x3e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	bf14      	ite	ne
 8002a16:	2301      	movne	r3, #1
 8002a18:	2300      	moveq	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	e015      	b.n	8002a4a <HAL_TIM_PWM_Start+0x6a>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d109      	bne.n	8002a38 <HAL_TIM_PWM_Start+0x58>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	e008      	b.n	8002a4a <HAL_TIM_PWM_Start+0x6a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e07c      	b.n	8002b4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_TIM_PWM_Start+0x82>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a60:	e013      	b.n	8002a8a <HAL_TIM_PWM_Start+0xaa>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d104      	bne.n	8002a72 <HAL_TIM_PWM_Start+0x92>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a70:	e00b      	b.n	8002a8a <HAL_TIM_PWM_Start+0xaa>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d104      	bne.n	8002a82 <HAL_TIM_PWM_Start+0xa2>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a80:	e003      	b.n	8002a8a <HAL_TIM_PWM_Start+0xaa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 f94e 	bl	8003d34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	; (8002b54 <HAL_TIM_PWM_Start+0x174>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_TIM_PWM_Start+0xcc>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <HAL_TIM_PWM_Start+0x178>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_PWM_Start+0xd0>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <HAL_TIM_PWM_Start+0xd2>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_TIM_PWM_Start+0x174>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d022      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d01d      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1f      	ldr	r2, [pc, #124]	; (8002b5c <HAL_TIM_PWM_Start+0x17c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d018      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_TIM_PWM_Start+0x180>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1c      	ldr	r2, [pc, #112]	; (8002b64 <HAL_TIM_PWM_Start+0x184>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_TIM_PWM_Start+0x178>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a18      	ldr	r2, [pc, #96]	; (8002b68 <HAL_TIM_PWM_Start+0x188>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIM_PWM_Start+0x136>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <HAL_TIM_PWM_Start+0x18c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d111      	bne.n	8002b3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2b06      	cmp	r3, #6
 8002b26:	d010      	beq.n	8002b4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b38:	e007      	b.n	8002b4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40010400 	.word	0x40010400
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40001800 	.word	0x40001800

08002b70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e041      	b.n	8002c06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe f8c6 	bl	8000d28 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f000 fcac 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_IC_Start_IT+0x1e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e013      	b.n	8002c56 <HAL_TIM_IC_Start_IT+0x46>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_IC_Start_IT+0x2e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e00b      	b.n	8002c56 <HAL_TIM_IC_Start_IT+0x46>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d104      	bne.n	8002c4e <HAL_TIM_IC_Start_IT+0x3e>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	e003      	b.n	8002c56 <HAL_TIM_IC_Start_IT+0x46>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_TIM_IC_Start_IT+0x58>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e013      	b.n	8002c90 <HAL_TIM_IC_Start_IT+0x80>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d104      	bne.n	8002c78 <HAL_TIM_IC_Start_IT+0x68>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e00b      	b.n	8002c90 <HAL_TIM_IC_Start_IT+0x80>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d104      	bne.n	8002c88 <HAL_TIM_IC_Start_IT+0x78>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e003      	b.n	8002c90 <HAL_TIM_IC_Start_IT+0x80>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c92:	7bbb      	ldrb	r3, [r7, #14]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d102      	bne.n	8002c9e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c98:	7b7b      	ldrb	r3, [r7, #13]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0cc      	b.n	8002e3c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_IC_Start_IT+0xa2>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb0:	e013      	b.n	8002cda <HAL_TIM_IC_Start_IT+0xca>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_IC_Start_IT+0xb2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc0:	e00b      	b.n	8002cda <HAL_TIM_IC_Start_IT+0xca>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d104      	bne.n	8002cd2 <HAL_TIM_IC_Start_IT+0xc2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd0:	e003      	b.n	8002cda <HAL_TIM_IC_Start_IT+0xca>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_IC_Start_IT+0xda>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce8:	e013      	b.n	8002d12 <HAL_TIM_IC_Start_IT+0x102>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_IC_Start_IT+0xea>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf8:	e00b      	b.n	8002d12 <HAL_TIM_IC_Start_IT+0x102>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_IC_Start_IT+0xfa>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	e003      	b.n	8002d12 <HAL_TIM_IC_Start_IT+0x102>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	d841      	bhi.n	8002d9c <HAL_TIM_IC_Start_IT+0x18c>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <HAL_TIM_IC_Start_IT+0x110>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002d9d 	.word	0x08002d9d
 8002d28:	08002d9d 	.word	0x08002d9d
 8002d2c:	08002d9d 	.word	0x08002d9d
 8002d30:	08002d67 	.word	0x08002d67
 8002d34:	08002d9d 	.word	0x08002d9d
 8002d38:	08002d9d 	.word	0x08002d9d
 8002d3c:	08002d9d 	.word	0x08002d9d
 8002d40:	08002d79 	.word	0x08002d79
 8002d44:	08002d9d 	.word	0x08002d9d
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002d9d 	.word	0x08002d9d
 8002d50:	08002d8b 	.word	0x08002d8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0202 	orr.w	r2, r2, #2
 8002d62:	60da      	str	r2, [r3, #12]
      break;
 8002d64:	e01d      	b.n	8002da2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0204 	orr.w	r2, r2, #4
 8002d74:	60da      	str	r2, [r3, #12]
      break;
 8002d76:	e014      	b.n	8002da2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0208 	orr.w	r2, r2, #8
 8002d86:	60da      	str	r2, [r3, #12]
      break;
 8002d88:	e00b      	b.n	8002da2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0210 	orr.w	r2, r2, #16
 8002d98:	60da      	str	r2, [r3, #12]
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002da0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d148      	bne.n	8002e3a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	6839      	ldr	r1, [r7, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 ffbf 	bl	8003d34 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_TIM_IC_Start_IT+0x234>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d022      	beq.n	8002e06 <HAL_TIM_IC_Start_IT+0x1f6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc8:	d01d      	beq.n	8002e06 <HAL_TIM_IC_Start_IT+0x1f6>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_TIM_IC_Start_IT+0x238>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d018      	beq.n	8002e06 <HAL_TIM_IC_Start_IT+0x1f6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <HAL_TIM_IC_Start_IT+0x23c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_TIM_IC_Start_IT+0x1f6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <HAL_TIM_IC_Start_IT+0x240>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00e      	beq.n	8002e06 <HAL_TIM_IC_Start_IT+0x1f6>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_TIM_IC_Start_IT+0x244>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_TIM_IC_Start_IT+0x1f6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_TIM_IC_Start_IT+0x248>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_TIM_IC_Start_IT+0x1f6>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <HAL_TIM_IC_Start_IT+0x24c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d111      	bne.n	8002e2a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b06      	cmp	r3, #6
 8002e16:	d010      	beq.n	8002e3a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	e007      	b.n	8002e3a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	40010400 	.word	0x40010400
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40001800 	.word	0x40001800

08002e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0202 	mvn.w	r2, #2
 8002e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fd fb8e 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fb0f 	bl	80034ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fb16 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0204 	mvn.w	r2, #4
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fd fb64 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fae5 	bl	80034ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 faec 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0208 	mvn.w	r2, #8
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fb3a 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fabb 	bl	80034ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fac2 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0210 	mvn.w	r2, #16
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd fb10 	bl	80005c4 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 fa91 	bl	80034ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fa98 	bl	80034e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0201 	mvn.w	r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fa6b 	bl	80034ba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 ff90 	bl	8003f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fa5d 	bl	80034f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b20      	cmp	r3, #32
 8003048:	d10e      	bne.n	8003068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b20      	cmp	r3, #32
 8003056:	d107      	bne.n	8003068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0220 	mvn.w	r2, #32
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 ff5a 	bl	8003f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d101      	bne.n	800308e <HAL_TIM_IC_ConfigChannel+0x1e>
 800308a:	2302      	movs	r3, #2
 800308c:	e088      	b.n	80031a0 <HAL_TIM_IC_ConfigChannel+0x130>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f000 fc7e 	bl	80039ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 020c 	bic.w	r2, r2, #12
 80030be:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6999      	ldr	r1, [r3, #24]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	619a      	str	r2, [r3, #24]
 80030d2:	e060      	b.n	8003196 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d11c      	bne.n	8003114 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f000 fd02 	bl	8003af2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80030fc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6999      	ldr	r1, [r3, #24]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	021a      	lsls	r2, r3, #8
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	619a      	str	r2, [r3, #24]
 8003112:	e040      	b.n	8003196 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d11b      	bne.n	8003152 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f000 fd4f 	bl	8003bcc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 020c 	bic.w	r2, r2, #12
 800313c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69d9      	ldr	r1, [r3, #28]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	61da      	str	r2, [r3, #28]
 8003150:	e021      	b.n	8003196 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0c      	cmp	r3, #12
 8003156:	d11c      	bne.n	8003192 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6819      	ldr	r1, [r3, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f000 fd6c 	bl	8003c44 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800317a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69d9      	ldr	r1, [r3, #28]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	021a      	lsls	r2, r3, #8
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	61da      	str	r2, [r3, #28]
 8003190:	e001      	b.n	8003196 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800319e:	7dfb      	ldrb	r3, [r7, #23]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0ae      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	f200 809f 	bhi.w	8003314 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	08003211 	.word	0x08003211
 80031e0:	08003315 	.word	0x08003315
 80031e4:	08003315 	.word	0x08003315
 80031e8:	08003315 	.word	0x08003315
 80031ec:	08003251 	.word	0x08003251
 80031f0:	08003315 	.word	0x08003315
 80031f4:	08003315 	.word	0x08003315
 80031f8:	08003315 	.word	0x08003315
 80031fc:	08003293 	.word	0x08003293
 8003200:	08003315 	.word	0x08003315
 8003204:	08003315 	.word	0x08003315
 8003208:	08003315 	.word	0x08003315
 800320c:	080032d3 	.word	0x080032d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fa18 	bl	800364c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6999      	ldr	r1, [r3, #24]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	619a      	str	r2, [r3, #24]
      break;
 800324e:	e064      	b.n	800331a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fa68 	bl	800372c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6999      	ldr	r1, [r3, #24]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	021a      	lsls	r2, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	619a      	str	r2, [r3, #24]
      break;
 8003290:	e043      	b.n	800331a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fabd 	bl	8003818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0208 	orr.w	r2, r2, #8
 80032ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0204 	bic.w	r2, r2, #4
 80032bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	61da      	str	r2, [r3, #28]
      break;
 80032d0:	e023      	b.n	800331a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fb11 	bl	8003900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69d9      	ldr	r1, [r3, #28]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	021a      	lsls	r2, r3, #8
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	61da      	str	r2, [r3, #28]
      break;
 8003312:	e002      	b.n	800331a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
      break;
 8003318:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003322:	7dfb      	ldrb	r3, [r7, #23]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_TIM_ConfigClockSource+0x1c>
 8003344:	2302      	movs	r3, #2
 8003346:	e0b4      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x186>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003380:	d03e      	beq.n	8003400 <HAL_TIM_ConfigClockSource+0xd4>
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003386:	f200 8087 	bhi.w	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	f000 8086 	beq.w	800349e <HAL_TIM_ConfigClockSource+0x172>
 8003392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003396:	d87f      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b70      	cmp	r3, #112	; 0x70
 800339a:	d01a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0xa6>
 800339c:	2b70      	cmp	r3, #112	; 0x70
 800339e:	d87b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b60      	cmp	r3, #96	; 0x60
 80033a2:	d050      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0x11a>
 80033a4:	2b60      	cmp	r3, #96	; 0x60
 80033a6:	d877      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b50      	cmp	r3, #80	; 0x50
 80033aa:	d03c      	beq.n	8003426 <HAL_TIM_ConfigClockSource+0xfa>
 80033ac:	2b50      	cmp	r3, #80	; 0x50
 80033ae:	d873      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d058      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x13a>
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d86f      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b30      	cmp	r3, #48	; 0x30
 80033ba:	d064      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	2b30      	cmp	r3, #48	; 0x30
 80033be:	d86b      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d060      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d867      	bhi.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05c      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d05a      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x15a>
 80033d0:	e062      	b.n	8003498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	6899      	ldr	r1, [r3, #8]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f000 fc87 	bl	8003cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	609a      	str	r2, [r3, #8]
      break;
 80033fe:	e04f      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f000 fc70 	bl	8003cf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003422:	609a      	str	r2, [r3, #8]
      break;
 8003424:	e03c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	461a      	mov	r2, r3
 8003434:	f000 fb2e 	bl	8003a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2150      	movs	r1, #80	; 0x50
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fc3d 	bl	8003cbe <TIM_ITRx_SetConfig>
      break;
 8003444:	e02c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	461a      	mov	r2, r3
 8003454:	f000 fb8a 	bl	8003b6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2160      	movs	r1, #96	; 0x60
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fc2d 	bl	8003cbe <TIM_ITRx_SetConfig>
      break;
 8003464:	e01c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	f000 fb0e 	bl	8003a94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fc1d 	bl	8003cbe <TIM_ITRx_SetConfig>
      break;
 8003484:	e00c      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f000 fc14 	bl	8003cbe <TIM_ITRx_SetConfig>
      break;
 8003496:	e003      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e000      	b.n	80034a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800349e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a40      	ldr	r2, [pc, #256]	; (8003620 <TIM_Base_SetConfig+0x114>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d013      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d00f      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3d      	ldr	r2, [pc, #244]	; (8003624 <TIM_Base_SetConfig+0x118>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00b      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a3c      	ldr	r2, [pc, #240]	; (8003628 <TIM_Base_SetConfig+0x11c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <TIM_Base_SetConfig+0x120>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a3a      	ldr	r2, [pc, #232]	; (8003630 <TIM_Base_SetConfig+0x124>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2f      	ldr	r2, [pc, #188]	; (8003620 <TIM_Base_SetConfig+0x114>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d027      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <TIM_Base_SetConfig+0x118>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d023      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <TIM_Base_SetConfig+0x11c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01f      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a2a      	ldr	r2, [pc, #168]	; (800362c <TIM_Base_SetConfig+0x120>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a29      	ldr	r2, [pc, #164]	; (8003630 <TIM_Base_SetConfig+0x124>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d017      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a28      	ldr	r2, [pc, #160]	; (8003634 <TIM_Base_SetConfig+0x128>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a27      	ldr	r2, [pc, #156]	; (8003638 <TIM_Base_SetConfig+0x12c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00f      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a26      	ldr	r2, [pc, #152]	; (800363c <TIM_Base_SetConfig+0x130>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00b      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a25      	ldr	r2, [pc, #148]	; (8003640 <TIM_Base_SetConfig+0x134>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d007      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a24      	ldr	r2, [pc, #144]	; (8003644 <TIM_Base_SetConfig+0x138>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d003      	beq.n	80035be <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a23      	ldr	r2, [pc, #140]	; (8003648 <TIM_Base_SetConfig+0x13c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d108      	bne.n	80035d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <TIM_Base_SetConfig+0x114>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0xf8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0c      	ldr	r2, [pc, #48]	; (8003630 <TIM_Base_SetConfig+0x124>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d103      	bne.n	800360c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	615a      	str	r2, [r3, #20]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40010400 	.word	0x40010400
 8003634:	40014000 	.word	0x40014000
 8003638:	40014400 	.word	0x40014400
 800363c:	40014800 	.word	0x40014800
 8003640:	40001800 	.word	0x40001800
 8003644:	40001c00 	.word	0x40001c00
 8003648:	40002000 	.word	0x40002000

0800364c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f023 0201 	bic.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 0302 	bic.w	r3, r3, #2
 8003694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a20      	ldr	r2, [pc, #128]	; (8003724 <TIM_OC1_SetConfig+0xd8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_OC1_SetConfig+0x64>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <TIM_OC1_SetConfig+0xdc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d10c      	bne.n	80036ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0308 	bic.w	r3, r3, #8
 80036b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a15      	ldr	r2, [pc, #84]	; (8003724 <TIM_OC1_SetConfig+0xd8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d003      	beq.n	80036da <TIM_OC1_SetConfig+0x8e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a14      	ldr	r2, [pc, #80]	; (8003728 <TIM_OC1_SetConfig+0xdc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d111      	bne.n	80036fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	621a      	str	r2, [r3, #32]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40010000 	.word	0x40010000
 8003728:	40010400 	.word	0x40010400

0800372c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0210 	bic.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0320 	bic.w	r3, r3, #32
 8003776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a22      	ldr	r2, [pc, #136]	; (8003810 <TIM_OC2_SetConfig+0xe4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_OC2_SetConfig+0x68>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a21      	ldr	r2, [pc, #132]	; (8003814 <TIM_OC2_SetConfig+0xe8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10d      	bne.n	80037b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a17      	ldr	r2, [pc, #92]	; (8003810 <TIM_OC2_SetConfig+0xe4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC2_SetConfig+0x94>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <TIM_OC2_SetConfig+0xe8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d113      	bne.n	80037e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000
 8003814:	40010400 	.word	0x40010400

08003818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f023 0303 	bic.w	r3, r3, #3
 800384e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <TIM_OC3_SetConfig+0xe0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_OC3_SetConfig+0x66>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a20      	ldr	r2, [pc, #128]	; (80038fc <TIM_OC3_SetConfig+0xe4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d10d      	bne.n	800389a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC3_SetConfig+0xe0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d003      	beq.n	80038aa <TIM_OC3_SetConfig+0x92>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <TIM_OC3_SetConfig+0xe4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d113      	bne.n	80038d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400

08003900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800394a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <TIM_OC4_SetConfig+0xa4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_OC4_SetConfig+0x68>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <TIM_OC4_SetConfig+0xa8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d109      	bne.n	800397c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800396e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40010400 	.word	0x40010400

080039ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
 80039b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a28      	ldr	r2, [pc, #160]	; (8003a78 <TIM_TI1_SetConfig+0xcc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d01b      	beq.n	8003a12 <TIM_TI1_SetConfig+0x66>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d017      	beq.n	8003a12 <TIM_TI1_SetConfig+0x66>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <TIM_TI1_SetConfig+0xd0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d013      	beq.n	8003a12 <TIM_TI1_SetConfig+0x66>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a24      	ldr	r2, [pc, #144]	; (8003a80 <TIM_TI1_SetConfig+0xd4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00f      	beq.n	8003a12 <TIM_TI1_SetConfig+0x66>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4a23      	ldr	r2, [pc, #140]	; (8003a84 <TIM_TI1_SetConfig+0xd8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00b      	beq.n	8003a12 <TIM_TI1_SetConfig+0x66>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <TIM_TI1_SetConfig+0xdc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <TIM_TI1_SetConfig+0x66>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <TIM_TI1_SetConfig+0xe0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d003      	beq.n	8003a12 <TIM_TI1_SetConfig+0x66>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <TIM_TI1_SetConfig+0xe4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <TIM_TI1_SetConfig+0x6a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <TIM_TI1_SetConfig+0x6c>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0303 	bic.w	r3, r3, #3
 8003a22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e003      	b.n	8003a36 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f023 030a 	bic.w	r3, r3, #10
 8003a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f003 030a 	and.w	r3, r3, #10
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40000400 	.word	0x40000400
 8003a80:	40000800 	.word	0x40000800
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	40010400 	.word	0x40010400
 8003a8c:	40014000 	.word	0x40014000
 8003a90:	40001800 	.word	0x40001800

08003a94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	f023 0201 	bic.w	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f023 030a 	bic.w	r3, r3, #10
 8003ad0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f023 0210 	bic.w	r2, r3, #16
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	031b      	lsls	r3, r3, #12
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b44:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	621a      	str	r2, [r3, #32]
}
 8003b60:	bf00      	nop
 8003b62:	371c      	adds	r7, #28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f023 0210 	bic.w	r2, r3, #16
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	031b      	lsls	r3, r3, #12
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	621a      	str	r2, [r3, #32]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b087      	sub	sp, #28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f023 0303 	bic.w	r3, r3, #3
 8003bf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c1c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	621a      	str	r2, [r3, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	031b      	lsls	r3, r3, #12
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	031b      	lsls	r3, r3, #12
 8003c9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	621a      	str	r2, [r3, #32]
}
 8003cb2:	bf00      	nop
 8003cb4:	371c      	adds	r7, #28
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f043 0307 	orr.w	r3, r3, #7
 8003ce0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	609a      	str	r2, [r3, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	021a      	lsls	r2, r3, #8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	609a      	str	r2, [r3, #8]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2201      	movs	r2, #1
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1a      	ldr	r2, [r3, #32]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	401a      	ands	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d94:	2302      	movs	r3, #2
 8003d96:	e05a      	b.n	8003e4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d022      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de4:	d01d      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d018      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1a      	ldr	r2, [pc, #104]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00e      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d009      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a17      	ldr	r2, [pc, #92]	; (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d004      	beq.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10c      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	40000c00 	.word	0x40000c00
 8003e6c:	40010400 	.word	0x40010400
 8003e70:	40014000 	.word	0x40014000
 8003e74:	40001800 	.word	0x40001800

08003e78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e03d      	b.n	8003f10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e03f      	b.n	8003fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc ff66 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f9cb 	bl	8004324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08a      	sub	sp, #40	; 0x28
 8003fe2:	af02      	add	r7, sp, #8
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	603b      	str	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d17c      	bne.n	80040f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_UART_Transmit+0x2c>
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e075      	b.n	80040fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_UART_Transmit+0x3e>
 8004018:	2302      	movs	r3, #2
 800401a:	e06e      	b.n	80040fa <HAL_UART_Transmit+0x11c>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2221      	movs	r2, #33	; 0x21
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004032:	f7fd fbc3 	bl	80017bc <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404c:	d108      	bne.n	8004060 <HAL_UART_Transmit+0x82>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d104      	bne.n	8004060 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004056:	2300      	movs	r3, #0
 8004058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	e003      	b.n	8004068 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004070:	e02a      	b.n	80040c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f8e2 	bl	8004246 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e036      	b.n	80040fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	3302      	adds	r3, #2
 80040a6:	61bb      	str	r3, [r7, #24]
 80040a8:	e007      	b.n	80040ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	781a      	ldrb	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	3301      	adds	r3, #1
 80040b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1cf      	bne.n	8004072 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	2200      	movs	r2, #0
 80040da:	2140      	movs	r1, #64	; 0x40
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f8b2 	bl	8004246 <UART_WaitOnFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e006      	b.n	80040fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	e000      	b.n	80040fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b08a      	sub	sp, #40	; 0x28
 8004106:	af02      	add	r7, sp, #8
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	4613      	mov	r3, r2
 8004110:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b20      	cmp	r3, #32
 8004120:	f040 808c 	bne.w	800423c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_UART_Receive+0x2e>
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e084      	b.n	800423e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_UART_Receive+0x40>
 800413e:	2302      	movs	r3, #2
 8004140:	e07d      	b.n	800423e <HAL_UART_Receive+0x13c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2222      	movs	r2, #34	; 0x22
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800415e:	f7fd fb2d 	bl	80017bc <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	88fa      	ldrh	r2, [r7, #6]
 800416e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004178:	d108      	bne.n	800418c <HAL_UART_Receive+0x8a>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	61bb      	str	r3, [r7, #24]
 800418a:	e003      	b.n	8004194 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800419c:	e043      	b.n	8004226 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2120      	movs	r1, #32
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f84c 	bl	8004246 <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e042      	b.n	800423e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	3302      	adds	r3, #2
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e01f      	b.n	8004218 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d007      	beq.n	80041f2 <HAL_UART_Receive+0xf0>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <HAL_UART_Receive+0xfe>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e008      	b.n	8004212 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420c:	b2da      	uxtb	r2, r3
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3301      	adds	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1b6      	bne.n	800419e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	e000      	b.n	800423e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800423c:	2302      	movs	r3, #2
  }
}
 800423e:	4618      	mov	r0, r3
 8004240:	3720      	adds	r7, #32
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b090      	sub	sp, #64	; 0x40
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004256:	e050      	b.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d04c      	beq.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0x30>
 8004266:	f7fd faa9 	bl	80017bc <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004272:	429a      	cmp	r2, r3
 8004274:	d241      	bcs.n	80042fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800428c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	330c      	adds	r3, #12
 8004294:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004296:	637a      	str	r2, [r7, #52]	; 0x34
 8004298:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800429c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e5      	bne.n	8004276 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042ca:	623a      	str	r2, [r7, #32]
 80042cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	69f9      	ldr	r1, [r7, #28]
 80042d0:	6a3a      	ldr	r2, [r7, #32]
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e5      	bne.n	80042aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	429a      	cmp	r2, r3
 8004316:	d09f      	beq.n	8004258 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3740      	adds	r7, #64	; 0x40
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004328:	b0c0      	sub	sp, #256	; 0x100
 800432a:	af00      	add	r7, sp, #0
 800432c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	68d9      	ldr	r1, [r3, #12]
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	ea40 0301 	orr.w	r3, r0, r1
 800434c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	431a      	orrs	r2, r3
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	431a      	orrs	r2, r3
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800437c:	f021 010c 	bic.w	r1, r1, #12
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800438a:	430b      	orrs	r3, r1
 800438c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800439a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439e:	6999      	ldr	r1, [r3, #24]
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	ea40 0301 	orr.w	r3, r0, r1
 80043aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b8f      	ldr	r3, [pc, #572]	; (80045f0 <UART_SetConfig+0x2cc>)
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d005      	beq.n	80043c4 <UART_SetConfig+0xa0>
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b8d      	ldr	r3, [pc, #564]	; (80045f4 <UART_SetConfig+0x2d0>)
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d104      	bne.n	80043ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043c4:	f7fd fe08 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 80043c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043cc:	e003      	b.n	80043d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ce:	f7fd fdef 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 80043d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e0:	f040 810c 	bne.w	80045fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043f6:	4622      	mov	r2, r4
 80043f8:	462b      	mov	r3, r5
 80043fa:	1891      	adds	r1, r2, r2
 80043fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043fe:	415b      	adcs	r3, r3
 8004400:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004402:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004406:	4621      	mov	r1, r4
 8004408:	eb12 0801 	adds.w	r8, r2, r1
 800440c:	4629      	mov	r1, r5
 800440e:	eb43 0901 	adc.w	r9, r3, r1
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800441e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004426:	4690      	mov	r8, r2
 8004428:	4699      	mov	r9, r3
 800442a:	4623      	mov	r3, r4
 800442c:	eb18 0303 	adds.w	r3, r8, r3
 8004430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004434:	462b      	mov	r3, r5
 8004436:	eb49 0303 	adc.w	r3, r9, r3
 800443a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800444a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800444e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004452:	460b      	mov	r3, r1
 8004454:	18db      	adds	r3, r3, r3
 8004456:	653b      	str	r3, [r7, #80]	; 0x50
 8004458:	4613      	mov	r3, r2
 800445a:	eb42 0303 	adc.w	r3, r2, r3
 800445e:	657b      	str	r3, [r7, #84]	; 0x54
 8004460:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004464:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004468:	f7fb ff2a 	bl	80002c0 <__aeabi_uldivmod>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <UART_SetConfig+0x2d4>)
 8004472:	fba3 2302 	umull	r2, r3, r3, r2
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	011c      	lsls	r4, r3, #4
 800447a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800447e:	2200      	movs	r2, #0
 8004480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004484:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004488:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800448c:	4642      	mov	r2, r8
 800448e:	464b      	mov	r3, r9
 8004490:	1891      	adds	r1, r2, r2
 8004492:	64b9      	str	r1, [r7, #72]	; 0x48
 8004494:	415b      	adcs	r3, r3
 8004496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004498:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800449c:	4641      	mov	r1, r8
 800449e:	eb12 0a01 	adds.w	sl, r2, r1
 80044a2:	4649      	mov	r1, r9
 80044a4:	eb43 0b01 	adc.w	fp, r3, r1
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044bc:	4692      	mov	sl, r2
 80044be:	469b      	mov	fp, r3
 80044c0:	4643      	mov	r3, r8
 80044c2:	eb1a 0303 	adds.w	r3, sl, r3
 80044c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044ca:	464b      	mov	r3, r9
 80044cc:	eb4b 0303 	adc.w	r3, fp, r3
 80044d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044e8:	460b      	mov	r3, r1
 80044ea:	18db      	adds	r3, r3, r3
 80044ec:	643b      	str	r3, [r7, #64]	; 0x40
 80044ee:	4613      	mov	r3, r2
 80044f0:	eb42 0303 	adc.w	r3, r2, r3
 80044f4:	647b      	str	r3, [r7, #68]	; 0x44
 80044f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044fe:	f7fb fedf 	bl	80002c0 <__aeabi_uldivmod>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4611      	mov	r1, r2
 8004508:	4b3b      	ldr	r3, [pc, #236]	; (80045f8 <UART_SetConfig+0x2d4>)
 800450a:	fba3 2301 	umull	r2, r3, r3, r1
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2264      	movs	r2, #100	; 0x64
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	1acb      	subs	r3, r1, r3
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800451e:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <UART_SetConfig+0x2d4>)
 8004520:	fba3 2302 	umull	r2, r3, r3, r2
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800452c:	441c      	add	r4, r3
 800452e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004532:	2200      	movs	r2, #0
 8004534:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004538:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800453c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004540:	4642      	mov	r2, r8
 8004542:	464b      	mov	r3, r9
 8004544:	1891      	adds	r1, r2, r2
 8004546:	63b9      	str	r1, [r7, #56]	; 0x38
 8004548:	415b      	adcs	r3, r3
 800454a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800454c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004550:	4641      	mov	r1, r8
 8004552:	1851      	adds	r1, r2, r1
 8004554:	6339      	str	r1, [r7, #48]	; 0x30
 8004556:	4649      	mov	r1, r9
 8004558:	414b      	adcs	r3, r1
 800455a:	637b      	str	r3, [r7, #52]	; 0x34
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004568:	4659      	mov	r1, fp
 800456a:	00cb      	lsls	r3, r1, #3
 800456c:	4651      	mov	r1, sl
 800456e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004572:	4651      	mov	r1, sl
 8004574:	00ca      	lsls	r2, r1, #3
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	4603      	mov	r3, r0
 800457c:	4642      	mov	r2, r8
 800457e:	189b      	adds	r3, r3, r2
 8004580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004584:	464b      	mov	r3, r9
 8004586:	460a      	mov	r2, r1
 8004588:	eb42 0303 	adc.w	r3, r2, r3
 800458c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800459c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045a4:	460b      	mov	r3, r1
 80045a6:	18db      	adds	r3, r3, r3
 80045a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045aa:	4613      	mov	r3, r2
 80045ac:	eb42 0303 	adc.w	r3, r2, r3
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045ba:	f7fb fe81 	bl	80002c0 <__aeabi_uldivmod>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <UART_SetConfig+0x2d4>)
 80045c4:	fba3 1302 	umull	r1, r3, r3, r2
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	2164      	movs	r1, #100	; 0x64
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	3332      	adds	r3, #50	; 0x32
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <UART_SetConfig+0x2d4>)
 80045d8:	fba2 2303 	umull	r2, r3, r2, r3
 80045dc:	095b      	lsrs	r3, r3, #5
 80045de:	f003 0207 	and.w	r2, r3, #7
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4422      	add	r2, r4
 80045ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045ec:	e105      	b.n	80047fa <UART_SetConfig+0x4d6>
 80045ee:	bf00      	nop
 80045f0:	40011000 	.word	0x40011000
 80045f4:	40011400 	.word	0x40011400
 80045f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004600:	2200      	movs	r2, #0
 8004602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800460a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800460e:	4642      	mov	r2, r8
 8004610:	464b      	mov	r3, r9
 8004612:	1891      	adds	r1, r2, r2
 8004614:	6239      	str	r1, [r7, #32]
 8004616:	415b      	adcs	r3, r3
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
 800461a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800461e:	4641      	mov	r1, r8
 8004620:	1854      	adds	r4, r2, r1
 8004622:	4649      	mov	r1, r9
 8004624:	eb43 0501 	adc.w	r5, r3, r1
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	00eb      	lsls	r3, r5, #3
 8004632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004636:	00e2      	lsls	r2, r4, #3
 8004638:	4614      	mov	r4, r2
 800463a:	461d      	mov	r5, r3
 800463c:	4643      	mov	r3, r8
 800463e:	18e3      	adds	r3, r4, r3
 8004640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004644:	464b      	mov	r3, r9
 8004646:	eb45 0303 	adc.w	r3, r5, r3
 800464a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800465a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800466a:	4629      	mov	r1, r5
 800466c:	008b      	lsls	r3, r1, #2
 800466e:	4621      	mov	r1, r4
 8004670:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004674:	4621      	mov	r1, r4
 8004676:	008a      	lsls	r2, r1, #2
 8004678:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800467c:	f7fb fe20 	bl	80002c0 <__aeabi_uldivmod>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4b60      	ldr	r3, [pc, #384]	; (8004808 <UART_SetConfig+0x4e4>)
 8004686:	fba3 2302 	umull	r2, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	011c      	lsls	r4, r3, #4
 800468e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004692:	2200      	movs	r2, #0
 8004694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004698:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800469c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046a0:	4642      	mov	r2, r8
 80046a2:	464b      	mov	r3, r9
 80046a4:	1891      	adds	r1, r2, r2
 80046a6:	61b9      	str	r1, [r7, #24]
 80046a8:	415b      	adcs	r3, r3
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b0:	4641      	mov	r1, r8
 80046b2:	1851      	adds	r1, r2, r1
 80046b4:	6139      	str	r1, [r7, #16]
 80046b6:	4649      	mov	r1, r9
 80046b8:	414b      	adcs	r3, r1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046c8:	4659      	mov	r1, fp
 80046ca:	00cb      	lsls	r3, r1, #3
 80046cc:	4651      	mov	r1, sl
 80046ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d2:	4651      	mov	r1, sl
 80046d4:	00ca      	lsls	r2, r1, #3
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	4642      	mov	r2, r8
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046e4:	464b      	mov	r3, r9
 80046e6:	460a      	mov	r2, r1
 80046e8:	eb42 0303 	adc.w	r3, r2, r3
 80046ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004708:	4649      	mov	r1, r9
 800470a:	008b      	lsls	r3, r1, #2
 800470c:	4641      	mov	r1, r8
 800470e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004712:	4641      	mov	r1, r8
 8004714:	008a      	lsls	r2, r1, #2
 8004716:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800471a:	f7fb fdd1 	bl	80002c0 <__aeabi_uldivmod>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4b39      	ldr	r3, [pc, #228]	; (8004808 <UART_SetConfig+0x4e4>)
 8004724:	fba3 1302 	umull	r1, r3, r3, r2
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	2164      	movs	r1, #100	; 0x64
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	3332      	adds	r3, #50	; 0x32
 8004736:	4a34      	ldr	r2, [pc, #208]	; (8004808 <UART_SetConfig+0x4e4>)
 8004738:	fba2 2303 	umull	r2, r3, r2, r3
 800473c:	095b      	lsrs	r3, r3, #5
 800473e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004742:	441c      	add	r4, r3
 8004744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004748:	2200      	movs	r2, #0
 800474a:	673b      	str	r3, [r7, #112]	; 0x70
 800474c:	677a      	str	r2, [r7, #116]	; 0x74
 800474e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004752:	4642      	mov	r2, r8
 8004754:	464b      	mov	r3, r9
 8004756:	1891      	adds	r1, r2, r2
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	415b      	adcs	r3, r3
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004762:	4641      	mov	r1, r8
 8004764:	1851      	adds	r1, r2, r1
 8004766:	6039      	str	r1, [r7, #0]
 8004768:	4649      	mov	r1, r9
 800476a:	414b      	adcs	r3, r1
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800477a:	4659      	mov	r1, fp
 800477c:	00cb      	lsls	r3, r1, #3
 800477e:	4651      	mov	r1, sl
 8004780:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004784:	4651      	mov	r1, sl
 8004786:	00ca      	lsls	r2, r1, #3
 8004788:	4610      	mov	r0, r2
 800478a:	4619      	mov	r1, r3
 800478c:	4603      	mov	r3, r0
 800478e:	4642      	mov	r2, r8
 8004790:	189b      	adds	r3, r3, r2
 8004792:	66bb      	str	r3, [r7, #104]	; 0x68
 8004794:	464b      	mov	r3, r9
 8004796:	460a      	mov	r2, r1
 8004798:	eb42 0303 	adc.w	r3, r2, r3
 800479c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	663b      	str	r3, [r7, #96]	; 0x60
 80047a8:	667a      	str	r2, [r7, #100]	; 0x64
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047b6:	4649      	mov	r1, r9
 80047b8:	008b      	lsls	r3, r1, #2
 80047ba:	4641      	mov	r1, r8
 80047bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c0:	4641      	mov	r1, r8
 80047c2:	008a      	lsls	r2, r1, #2
 80047c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047c8:	f7fb fd7a 	bl	80002c0 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <UART_SetConfig+0x4e4>)
 80047d2:	fba3 1302 	umull	r1, r3, r3, r2
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	2164      	movs	r1, #100	; 0x64
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	3332      	adds	r3, #50	; 0x32
 80047e4:	4a08      	ldr	r2, [pc, #32]	; (8004808 <UART_SetConfig+0x4e4>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	f003 020f 	and.w	r2, r3, #15
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4422      	add	r2, r4
 80047f8:	609a      	str	r2, [r3, #8]
}
 80047fa:	bf00      	nop
 80047fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004806:	bf00      	nop
 8004808:	51eb851f 	.word	0x51eb851f

0800480c <__errno>:
 800480c:	4b01      	ldr	r3, [pc, #4]	; (8004814 <__errno+0x8>)
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000000c 	.word	0x2000000c

08004818 <__libc_init_array>:
 8004818:	b570      	push	{r4, r5, r6, lr}
 800481a:	4d0d      	ldr	r5, [pc, #52]	; (8004850 <__libc_init_array+0x38>)
 800481c:	4c0d      	ldr	r4, [pc, #52]	; (8004854 <__libc_init_array+0x3c>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	2600      	movs	r6, #0
 8004824:	42a6      	cmp	r6, r4
 8004826:	d109      	bne.n	800483c <__libc_init_array+0x24>
 8004828:	4d0b      	ldr	r5, [pc, #44]	; (8004858 <__libc_init_array+0x40>)
 800482a:	4c0c      	ldr	r4, [pc, #48]	; (800485c <__libc_init_array+0x44>)
 800482c:	f000 fc8e 	bl	800514c <_init>
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	2600      	movs	r6, #0
 8004836:	42a6      	cmp	r6, r4
 8004838:	d105      	bne.n	8004846 <__libc_init_array+0x2e>
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004840:	4798      	blx	r3
 8004842:	3601      	adds	r6, #1
 8004844:	e7ee      	b.n	8004824 <__libc_init_array+0xc>
 8004846:	f855 3b04 	ldr.w	r3, [r5], #4
 800484a:	4798      	blx	r3
 800484c:	3601      	adds	r6, #1
 800484e:	e7f2      	b.n	8004836 <__libc_init_array+0x1e>
 8004850:	08005304 	.word	0x08005304
 8004854:	08005304 	.word	0x08005304
 8004858:	08005304 	.word	0x08005304
 800485c:	08005308 	.word	0x08005308

08004860 <memset>:
 8004860:	4402      	add	r2, r0
 8004862:	4603      	mov	r3, r0
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <memset+0xa>
 8004868:	4770      	bx	lr
 800486a:	f803 1b01 	strb.w	r1, [r3], #1
 800486e:	e7f9      	b.n	8004864 <memset+0x4>

08004870 <siprintf>:
 8004870:	b40e      	push	{r1, r2, r3}
 8004872:	b500      	push	{lr}
 8004874:	b09c      	sub	sp, #112	; 0x70
 8004876:	ab1d      	add	r3, sp, #116	; 0x74
 8004878:	9002      	str	r0, [sp, #8]
 800487a:	9006      	str	r0, [sp, #24]
 800487c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004880:	4809      	ldr	r0, [pc, #36]	; (80048a8 <siprintf+0x38>)
 8004882:	9107      	str	r1, [sp, #28]
 8004884:	9104      	str	r1, [sp, #16]
 8004886:	4909      	ldr	r1, [pc, #36]	; (80048ac <siprintf+0x3c>)
 8004888:	f853 2b04 	ldr.w	r2, [r3], #4
 800488c:	9105      	str	r1, [sp, #20]
 800488e:	6800      	ldr	r0, [r0, #0]
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	a902      	add	r1, sp, #8
 8004894:	f000 f868 	bl	8004968 <_svfiprintf_r>
 8004898:	9b02      	ldr	r3, [sp, #8]
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	b01c      	add	sp, #112	; 0x70
 80048a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048a4:	b003      	add	sp, #12
 80048a6:	4770      	bx	lr
 80048a8:	2000000c 	.word	0x2000000c
 80048ac:	ffff0208 	.word	0xffff0208

080048b0 <__ssputs_r>:
 80048b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b4:	688e      	ldr	r6, [r1, #8]
 80048b6:	429e      	cmp	r6, r3
 80048b8:	4682      	mov	sl, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	4690      	mov	r8, r2
 80048be:	461f      	mov	r7, r3
 80048c0:	d838      	bhi.n	8004934 <__ssputs_r+0x84>
 80048c2:	898a      	ldrh	r2, [r1, #12]
 80048c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048c8:	d032      	beq.n	8004930 <__ssputs_r+0x80>
 80048ca:	6825      	ldr	r5, [r4, #0]
 80048cc:	6909      	ldr	r1, [r1, #16]
 80048ce:	eba5 0901 	sub.w	r9, r5, r1
 80048d2:	6965      	ldr	r5, [r4, #20]
 80048d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048dc:	3301      	adds	r3, #1
 80048de:	444b      	add	r3, r9
 80048e0:	106d      	asrs	r5, r5, #1
 80048e2:	429d      	cmp	r5, r3
 80048e4:	bf38      	it	cc
 80048e6:	461d      	movcc	r5, r3
 80048e8:	0553      	lsls	r3, r2, #21
 80048ea:	d531      	bpl.n	8004950 <__ssputs_r+0xa0>
 80048ec:	4629      	mov	r1, r5
 80048ee:	f000 fb63 	bl	8004fb8 <_malloc_r>
 80048f2:	4606      	mov	r6, r0
 80048f4:	b950      	cbnz	r0, 800490c <__ssputs_r+0x5c>
 80048f6:	230c      	movs	r3, #12
 80048f8:	f8ca 3000 	str.w	r3, [sl]
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490c:	6921      	ldr	r1, [r4, #16]
 800490e:	464a      	mov	r2, r9
 8004910:	f000 fabe 	bl	8004e90 <memcpy>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800491a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491e:	81a3      	strh	r3, [r4, #12]
 8004920:	6126      	str	r6, [r4, #16]
 8004922:	6165      	str	r5, [r4, #20]
 8004924:	444e      	add	r6, r9
 8004926:	eba5 0509 	sub.w	r5, r5, r9
 800492a:	6026      	str	r6, [r4, #0]
 800492c:	60a5      	str	r5, [r4, #8]
 800492e:	463e      	mov	r6, r7
 8004930:	42be      	cmp	r6, r7
 8004932:	d900      	bls.n	8004936 <__ssputs_r+0x86>
 8004934:	463e      	mov	r6, r7
 8004936:	6820      	ldr	r0, [r4, #0]
 8004938:	4632      	mov	r2, r6
 800493a:	4641      	mov	r1, r8
 800493c:	f000 fab6 	bl	8004eac <memmove>
 8004940:	68a3      	ldr	r3, [r4, #8]
 8004942:	1b9b      	subs	r3, r3, r6
 8004944:	60a3      	str	r3, [r4, #8]
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	4433      	add	r3, r6
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	2000      	movs	r0, #0
 800494e:	e7db      	b.n	8004908 <__ssputs_r+0x58>
 8004950:	462a      	mov	r2, r5
 8004952:	f000 fba5 	bl	80050a0 <_realloc_r>
 8004956:	4606      	mov	r6, r0
 8004958:	2800      	cmp	r0, #0
 800495a:	d1e1      	bne.n	8004920 <__ssputs_r+0x70>
 800495c:	6921      	ldr	r1, [r4, #16]
 800495e:	4650      	mov	r0, sl
 8004960:	f000 fabe 	bl	8004ee0 <_free_r>
 8004964:	e7c7      	b.n	80048f6 <__ssputs_r+0x46>
	...

08004968 <_svfiprintf_r>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	4698      	mov	r8, r3
 800496e:	898b      	ldrh	r3, [r1, #12]
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	b09d      	sub	sp, #116	; 0x74
 8004974:	4607      	mov	r7, r0
 8004976:	460d      	mov	r5, r1
 8004978:	4614      	mov	r4, r2
 800497a:	d50e      	bpl.n	800499a <_svfiprintf_r+0x32>
 800497c:	690b      	ldr	r3, [r1, #16]
 800497e:	b963      	cbnz	r3, 800499a <_svfiprintf_r+0x32>
 8004980:	2140      	movs	r1, #64	; 0x40
 8004982:	f000 fb19 	bl	8004fb8 <_malloc_r>
 8004986:	6028      	str	r0, [r5, #0]
 8004988:	6128      	str	r0, [r5, #16]
 800498a:	b920      	cbnz	r0, 8004996 <_svfiprintf_r+0x2e>
 800498c:	230c      	movs	r3, #12
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e0d1      	b.n	8004b3a <_svfiprintf_r+0x1d2>
 8004996:	2340      	movs	r3, #64	; 0x40
 8004998:	616b      	str	r3, [r5, #20]
 800499a:	2300      	movs	r3, #0
 800499c:	9309      	str	r3, [sp, #36]	; 0x24
 800499e:	2320      	movs	r3, #32
 80049a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049a8:	2330      	movs	r3, #48	; 0x30
 80049aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b54 <_svfiprintf_r+0x1ec>
 80049ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049b2:	f04f 0901 	mov.w	r9, #1
 80049b6:	4623      	mov	r3, r4
 80049b8:	469a      	mov	sl, r3
 80049ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049be:	b10a      	cbz	r2, 80049c4 <_svfiprintf_r+0x5c>
 80049c0:	2a25      	cmp	r2, #37	; 0x25
 80049c2:	d1f9      	bne.n	80049b8 <_svfiprintf_r+0x50>
 80049c4:	ebba 0b04 	subs.w	fp, sl, r4
 80049c8:	d00b      	beq.n	80049e2 <_svfiprintf_r+0x7a>
 80049ca:	465b      	mov	r3, fp
 80049cc:	4622      	mov	r2, r4
 80049ce:	4629      	mov	r1, r5
 80049d0:	4638      	mov	r0, r7
 80049d2:	f7ff ff6d 	bl	80048b0 <__ssputs_r>
 80049d6:	3001      	adds	r0, #1
 80049d8:	f000 80aa 	beq.w	8004b30 <_svfiprintf_r+0x1c8>
 80049dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049de:	445a      	add	r2, fp
 80049e0:	9209      	str	r2, [sp, #36]	; 0x24
 80049e2:	f89a 3000 	ldrb.w	r3, [sl]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80a2 	beq.w	8004b30 <_svfiprintf_r+0x1c8>
 80049ec:	2300      	movs	r3, #0
 80049ee:	f04f 32ff 	mov.w	r2, #4294967295
 80049f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049f6:	f10a 0a01 	add.w	sl, sl, #1
 80049fa:	9304      	str	r3, [sp, #16]
 80049fc:	9307      	str	r3, [sp, #28]
 80049fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a02:	931a      	str	r3, [sp, #104]	; 0x68
 8004a04:	4654      	mov	r4, sl
 8004a06:	2205      	movs	r2, #5
 8004a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0c:	4851      	ldr	r0, [pc, #324]	; (8004b54 <_svfiprintf_r+0x1ec>)
 8004a0e:	f7fb fc07 	bl	8000220 <memchr>
 8004a12:	9a04      	ldr	r2, [sp, #16]
 8004a14:	b9d8      	cbnz	r0, 8004a4e <_svfiprintf_r+0xe6>
 8004a16:	06d0      	lsls	r0, r2, #27
 8004a18:	bf44      	itt	mi
 8004a1a:	2320      	movmi	r3, #32
 8004a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a20:	0711      	lsls	r1, r2, #28
 8004a22:	bf44      	itt	mi
 8004a24:	232b      	movmi	r3, #43	; 0x2b
 8004a26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a30:	d015      	beq.n	8004a5e <_svfiprintf_r+0xf6>
 8004a32:	9a07      	ldr	r2, [sp, #28]
 8004a34:	4654      	mov	r4, sl
 8004a36:	2000      	movs	r0, #0
 8004a38:	f04f 0c0a 	mov.w	ip, #10
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a42:	3b30      	subs	r3, #48	; 0x30
 8004a44:	2b09      	cmp	r3, #9
 8004a46:	d94e      	bls.n	8004ae6 <_svfiprintf_r+0x17e>
 8004a48:	b1b0      	cbz	r0, 8004a78 <_svfiprintf_r+0x110>
 8004a4a:	9207      	str	r2, [sp, #28]
 8004a4c:	e014      	b.n	8004a78 <_svfiprintf_r+0x110>
 8004a4e:	eba0 0308 	sub.w	r3, r0, r8
 8004a52:	fa09 f303 	lsl.w	r3, r9, r3
 8004a56:	4313      	orrs	r3, r2
 8004a58:	9304      	str	r3, [sp, #16]
 8004a5a:	46a2      	mov	sl, r4
 8004a5c:	e7d2      	b.n	8004a04 <_svfiprintf_r+0x9c>
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	1d19      	adds	r1, r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	9103      	str	r1, [sp, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bfbb      	ittet	lt
 8004a6a:	425b      	neglt	r3, r3
 8004a6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a70:	9307      	strge	r3, [sp, #28]
 8004a72:	9307      	strlt	r3, [sp, #28]
 8004a74:	bfb8      	it	lt
 8004a76:	9204      	strlt	r2, [sp, #16]
 8004a78:	7823      	ldrb	r3, [r4, #0]
 8004a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a7c:	d10c      	bne.n	8004a98 <_svfiprintf_r+0x130>
 8004a7e:	7863      	ldrb	r3, [r4, #1]
 8004a80:	2b2a      	cmp	r3, #42	; 0x2a
 8004a82:	d135      	bne.n	8004af0 <_svfiprintf_r+0x188>
 8004a84:	9b03      	ldr	r3, [sp, #12]
 8004a86:	1d1a      	adds	r2, r3, #4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	9203      	str	r2, [sp, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bfb8      	it	lt
 8004a90:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a94:	3402      	adds	r4, #2
 8004a96:	9305      	str	r3, [sp, #20]
 8004a98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b64 <_svfiprintf_r+0x1fc>
 8004a9c:	7821      	ldrb	r1, [r4, #0]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	4650      	mov	r0, sl
 8004aa2:	f7fb fbbd 	bl	8000220 <memchr>
 8004aa6:	b140      	cbz	r0, 8004aba <_svfiprintf_r+0x152>
 8004aa8:	2340      	movs	r3, #64	; 0x40
 8004aaa:	eba0 000a 	sub.w	r0, r0, sl
 8004aae:	fa03 f000 	lsl.w	r0, r3, r0
 8004ab2:	9b04      	ldr	r3, [sp, #16]
 8004ab4:	4303      	orrs	r3, r0
 8004ab6:	3401      	adds	r4, #1
 8004ab8:	9304      	str	r3, [sp, #16]
 8004aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004abe:	4826      	ldr	r0, [pc, #152]	; (8004b58 <_svfiprintf_r+0x1f0>)
 8004ac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ac4:	2206      	movs	r2, #6
 8004ac6:	f7fb fbab 	bl	8000220 <memchr>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d038      	beq.n	8004b40 <_svfiprintf_r+0x1d8>
 8004ace:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <_svfiprintf_r+0x1f4>)
 8004ad0:	bb1b      	cbnz	r3, 8004b1a <_svfiprintf_r+0x1b2>
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	3307      	adds	r3, #7
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	3308      	adds	r3, #8
 8004adc:	9303      	str	r3, [sp, #12]
 8004ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae0:	4433      	add	r3, r6
 8004ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ae4:	e767      	b.n	80049b6 <_svfiprintf_r+0x4e>
 8004ae6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aea:	460c      	mov	r4, r1
 8004aec:	2001      	movs	r0, #1
 8004aee:	e7a5      	b.n	8004a3c <_svfiprintf_r+0xd4>
 8004af0:	2300      	movs	r3, #0
 8004af2:	3401      	adds	r4, #1
 8004af4:	9305      	str	r3, [sp, #20]
 8004af6:	4619      	mov	r1, r3
 8004af8:	f04f 0c0a 	mov.w	ip, #10
 8004afc:	4620      	mov	r0, r4
 8004afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b02:	3a30      	subs	r2, #48	; 0x30
 8004b04:	2a09      	cmp	r2, #9
 8004b06:	d903      	bls.n	8004b10 <_svfiprintf_r+0x1a8>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0c5      	beq.n	8004a98 <_svfiprintf_r+0x130>
 8004b0c:	9105      	str	r1, [sp, #20]
 8004b0e:	e7c3      	b.n	8004a98 <_svfiprintf_r+0x130>
 8004b10:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b14:	4604      	mov	r4, r0
 8004b16:	2301      	movs	r3, #1
 8004b18:	e7f0      	b.n	8004afc <_svfiprintf_r+0x194>
 8004b1a:	ab03      	add	r3, sp, #12
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	462a      	mov	r2, r5
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <_svfiprintf_r+0x1f8>)
 8004b22:	a904      	add	r1, sp, #16
 8004b24:	4638      	mov	r0, r7
 8004b26:	f3af 8000 	nop.w
 8004b2a:	1c42      	adds	r2, r0, #1
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	d1d6      	bne.n	8004ade <_svfiprintf_r+0x176>
 8004b30:	89ab      	ldrh	r3, [r5, #12]
 8004b32:	065b      	lsls	r3, r3, #25
 8004b34:	f53f af2c 	bmi.w	8004990 <_svfiprintf_r+0x28>
 8004b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b3a:	b01d      	add	sp, #116	; 0x74
 8004b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b40:	ab03      	add	r3, sp, #12
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	462a      	mov	r2, r5
 8004b46:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <_svfiprintf_r+0x1f8>)
 8004b48:	a904      	add	r1, sp, #16
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	f000 f87a 	bl	8004c44 <_printf_i>
 8004b50:	e7eb      	b.n	8004b2a <_svfiprintf_r+0x1c2>
 8004b52:	bf00      	nop
 8004b54:	080052c8 	.word	0x080052c8
 8004b58:	080052d2 	.word	0x080052d2
 8004b5c:	00000000 	.word	0x00000000
 8004b60:	080048b1 	.word	0x080048b1
 8004b64:	080052ce 	.word	0x080052ce

08004b68 <_printf_common>:
 8004b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	4699      	mov	r9, r3
 8004b70:	688a      	ldr	r2, [r1, #8]
 8004b72:	690b      	ldr	r3, [r1, #16]
 8004b74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	bfb8      	it	lt
 8004b7c:	4613      	movlt	r3, r2
 8004b7e:	6033      	str	r3, [r6, #0]
 8004b80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b84:	4607      	mov	r7, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	b10a      	cbz	r2, 8004b8e <_printf_common+0x26>
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	6033      	str	r3, [r6, #0]
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	0699      	lsls	r1, r3, #26
 8004b92:	bf42      	ittt	mi
 8004b94:	6833      	ldrmi	r3, [r6, #0]
 8004b96:	3302      	addmi	r3, #2
 8004b98:	6033      	strmi	r3, [r6, #0]
 8004b9a:	6825      	ldr	r5, [r4, #0]
 8004b9c:	f015 0506 	ands.w	r5, r5, #6
 8004ba0:	d106      	bne.n	8004bb0 <_printf_common+0x48>
 8004ba2:	f104 0a19 	add.w	sl, r4, #25
 8004ba6:	68e3      	ldr	r3, [r4, #12]
 8004ba8:	6832      	ldr	r2, [r6, #0]
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	42ab      	cmp	r3, r5
 8004bae:	dc26      	bgt.n	8004bfe <_printf_common+0x96>
 8004bb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bb4:	1e13      	subs	r3, r2, #0
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	bf18      	it	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	0692      	lsls	r2, r2, #26
 8004bbe:	d42b      	bmi.n	8004c18 <_printf_common+0xb0>
 8004bc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	4638      	mov	r0, r7
 8004bc8:	47c0      	blx	r8
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d01e      	beq.n	8004c0c <_printf_common+0xa4>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	68e5      	ldr	r5, [r4, #12]
 8004bd2:	6832      	ldr	r2, [r6, #0]
 8004bd4:	f003 0306 	and.w	r3, r3, #6
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	bf08      	it	eq
 8004bdc:	1aad      	subeq	r5, r5, r2
 8004bde:	68a3      	ldr	r3, [r4, #8]
 8004be0:	6922      	ldr	r2, [r4, #16]
 8004be2:	bf0c      	ite	eq
 8004be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004be8:	2500      	movne	r5, #0
 8004bea:	4293      	cmp	r3, r2
 8004bec:	bfc4      	itt	gt
 8004bee:	1a9b      	subgt	r3, r3, r2
 8004bf0:	18ed      	addgt	r5, r5, r3
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	341a      	adds	r4, #26
 8004bf6:	42b5      	cmp	r5, r6
 8004bf8:	d11a      	bne.n	8004c30 <_printf_common+0xc8>
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	e008      	b.n	8004c10 <_printf_common+0xa8>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	4652      	mov	r2, sl
 8004c02:	4649      	mov	r1, r9
 8004c04:	4638      	mov	r0, r7
 8004c06:	47c0      	blx	r8
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d103      	bne.n	8004c14 <_printf_common+0xac>
 8004c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c14:	3501      	adds	r5, #1
 8004c16:	e7c6      	b.n	8004ba6 <_printf_common+0x3e>
 8004c18:	18e1      	adds	r1, r4, r3
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	2030      	movs	r0, #48	; 0x30
 8004c1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c22:	4422      	add	r2, r4
 8004c24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	e7c7      	b.n	8004bc0 <_printf_common+0x58>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4622      	mov	r2, r4
 8004c34:	4649      	mov	r1, r9
 8004c36:	4638      	mov	r0, r7
 8004c38:	47c0      	blx	r8
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d0e6      	beq.n	8004c0c <_printf_common+0xa4>
 8004c3e:	3601      	adds	r6, #1
 8004c40:	e7d9      	b.n	8004bf6 <_printf_common+0x8e>
	...

08004c44 <_printf_i>:
 8004c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c48:	7e0f      	ldrb	r7, [r1, #24]
 8004c4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c4c:	2f78      	cmp	r7, #120	; 0x78
 8004c4e:	4691      	mov	r9, r2
 8004c50:	4680      	mov	r8, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	469a      	mov	sl, r3
 8004c56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c5a:	d807      	bhi.n	8004c6c <_printf_i+0x28>
 8004c5c:	2f62      	cmp	r7, #98	; 0x62
 8004c5e:	d80a      	bhi.n	8004c76 <_printf_i+0x32>
 8004c60:	2f00      	cmp	r7, #0
 8004c62:	f000 80d8 	beq.w	8004e16 <_printf_i+0x1d2>
 8004c66:	2f58      	cmp	r7, #88	; 0x58
 8004c68:	f000 80a3 	beq.w	8004db2 <_printf_i+0x16e>
 8004c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c74:	e03a      	b.n	8004cec <_printf_i+0xa8>
 8004c76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c7a:	2b15      	cmp	r3, #21
 8004c7c:	d8f6      	bhi.n	8004c6c <_printf_i+0x28>
 8004c7e:	a101      	add	r1, pc, #4	; (adr r1, 8004c84 <_printf_i+0x40>)
 8004c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c84:	08004cdd 	.word	0x08004cdd
 8004c88:	08004cf1 	.word	0x08004cf1
 8004c8c:	08004c6d 	.word	0x08004c6d
 8004c90:	08004c6d 	.word	0x08004c6d
 8004c94:	08004c6d 	.word	0x08004c6d
 8004c98:	08004c6d 	.word	0x08004c6d
 8004c9c:	08004cf1 	.word	0x08004cf1
 8004ca0:	08004c6d 	.word	0x08004c6d
 8004ca4:	08004c6d 	.word	0x08004c6d
 8004ca8:	08004c6d 	.word	0x08004c6d
 8004cac:	08004c6d 	.word	0x08004c6d
 8004cb0:	08004dfd 	.word	0x08004dfd
 8004cb4:	08004d21 	.word	0x08004d21
 8004cb8:	08004ddf 	.word	0x08004ddf
 8004cbc:	08004c6d 	.word	0x08004c6d
 8004cc0:	08004c6d 	.word	0x08004c6d
 8004cc4:	08004e1f 	.word	0x08004e1f
 8004cc8:	08004c6d 	.word	0x08004c6d
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004c6d 	.word	0x08004c6d
 8004cd4:	08004c6d 	.word	0x08004c6d
 8004cd8:	08004de7 	.word	0x08004de7
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	1d1a      	adds	r2, r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	602a      	str	r2, [r5, #0]
 8004ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cec:	2301      	movs	r3, #1
 8004cee:	e0a3      	b.n	8004e38 <_printf_i+0x1f4>
 8004cf0:	6820      	ldr	r0, [r4, #0]
 8004cf2:	6829      	ldr	r1, [r5, #0]
 8004cf4:	0606      	lsls	r6, r0, #24
 8004cf6:	f101 0304 	add.w	r3, r1, #4
 8004cfa:	d50a      	bpl.n	8004d12 <_printf_i+0xce>
 8004cfc:	680e      	ldr	r6, [r1, #0]
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	2e00      	cmp	r6, #0
 8004d02:	da03      	bge.n	8004d0c <_printf_i+0xc8>
 8004d04:	232d      	movs	r3, #45	; 0x2d
 8004d06:	4276      	negs	r6, r6
 8004d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0c:	485e      	ldr	r0, [pc, #376]	; (8004e88 <_printf_i+0x244>)
 8004d0e:	230a      	movs	r3, #10
 8004d10:	e019      	b.n	8004d46 <_printf_i+0x102>
 8004d12:	680e      	ldr	r6, [r1, #0]
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d1a:	bf18      	it	ne
 8004d1c:	b236      	sxthne	r6, r6
 8004d1e:	e7ef      	b.n	8004d00 <_printf_i+0xbc>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	6820      	ldr	r0, [r4, #0]
 8004d24:	1d19      	adds	r1, r3, #4
 8004d26:	6029      	str	r1, [r5, #0]
 8004d28:	0601      	lsls	r1, r0, #24
 8004d2a:	d501      	bpl.n	8004d30 <_printf_i+0xec>
 8004d2c:	681e      	ldr	r6, [r3, #0]
 8004d2e:	e002      	b.n	8004d36 <_printf_i+0xf2>
 8004d30:	0646      	lsls	r6, r0, #25
 8004d32:	d5fb      	bpl.n	8004d2c <_printf_i+0xe8>
 8004d34:	881e      	ldrh	r6, [r3, #0]
 8004d36:	4854      	ldr	r0, [pc, #336]	; (8004e88 <_printf_i+0x244>)
 8004d38:	2f6f      	cmp	r7, #111	; 0x6f
 8004d3a:	bf0c      	ite	eq
 8004d3c:	2308      	moveq	r3, #8
 8004d3e:	230a      	movne	r3, #10
 8004d40:	2100      	movs	r1, #0
 8004d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d46:	6865      	ldr	r5, [r4, #4]
 8004d48:	60a5      	str	r5, [r4, #8]
 8004d4a:	2d00      	cmp	r5, #0
 8004d4c:	bfa2      	ittt	ge
 8004d4e:	6821      	ldrge	r1, [r4, #0]
 8004d50:	f021 0104 	bicge.w	r1, r1, #4
 8004d54:	6021      	strge	r1, [r4, #0]
 8004d56:	b90e      	cbnz	r6, 8004d5c <_printf_i+0x118>
 8004d58:	2d00      	cmp	r5, #0
 8004d5a:	d04d      	beq.n	8004df8 <_printf_i+0x1b4>
 8004d5c:	4615      	mov	r5, r2
 8004d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d62:	fb03 6711 	mls	r7, r3, r1, r6
 8004d66:	5dc7      	ldrb	r7, [r0, r7]
 8004d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d6c:	4637      	mov	r7, r6
 8004d6e:	42bb      	cmp	r3, r7
 8004d70:	460e      	mov	r6, r1
 8004d72:	d9f4      	bls.n	8004d5e <_printf_i+0x11a>
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d10b      	bne.n	8004d90 <_printf_i+0x14c>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	07de      	lsls	r6, r3, #31
 8004d7c:	d508      	bpl.n	8004d90 <_printf_i+0x14c>
 8004d7e:	6923      	ldr	r3, [r4, #16]
 8004d80:	6861      	ldr	r1, [r4, #4]
 8004d82:	4299      	cmp	r1, r3
 8004d84:	bfde      	ittt	le
 8004d86:	2330      	movle	r3, #48	; 0x30
 8004d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d90:	1b52      	subs	r2, r2, r5
 8004d92:	6122      	str	r2, [r4, #16]
 8004d94:	f8cd a000 	str.w	sl, [sp]
 8004d98:	464b      	mov	r3, r9
 8004d9a:	aa03      	add	r2, sp, #12
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4640      	mov	r0, r8
 8004da0:	f7ff fee2 	bl	8004b68 <_printf_common>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d14c      	bne.n	8004e42 <_printf_i+0x1fe>
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	b004      	add	sp, #16
 8004dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db2:	4835      	ldr	r0, [pc, #212]	; (8004e88 <_printf_i+0x244>)
 8004db4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004db8:	6829      	ldr	r1, [r5, #0]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dc0:	6029      	str	r1, [r5, #0]
 8004dc2:	061d      	lsls	r5, r3, #24
 8004dc4:	d514      	bpl.n	8004df0 <_printf_i+0x1ac>
 8004dc6:	07df      	lsls	r7, r3, #31
 8004dc8:	bf44      	itt	mi
 8004dca:	f043 0320 	orrmi.w	r3, r3, #32
 8004dce:	6023      	strmi	r3, [r4, #0]
 8004dd0:	b91e      	cbnz	r6, 8004dda <_printf_i+0x196>
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	f023 0320 	bic.w	r3, r3, #32
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	2310      	movs	r3, #16
 8004ddc:	e7b0      	b.n	8004d40 <_printf_i+0xfc>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f043 0320 	orr.w	r3, r3, #32
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	2378      	movs	r3, #120	; 0x78
 8004de8:	4828      	ldr	r0, [pc, #160]	; (8004e8c <_printf_i+0x248>)
 8004dea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dee:	e7e3      	b.n	8004db8 <_printf_i+0x174>
 8004df0:	0659      	lsls	r1, r3, #25
 8004df2:	bf48      	it	mi
 8004df4:	b2b6      	uxthmi	r6, r6
 8004df6:	e7e6      	b.n	8004dc6 <_printf_i+0x182>
 8004df8:	4615      	mov	r5, r2
 8004dfa:	e7bb      	b.n	8004d74 <_printf_i+0x130>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	6826      	ldr	r6, [r4, #0]
 8004e00:	6961      	ldr	r1, [r4, #20]
 8004e02:	1d18      	adds	r0, r3, #4
 8004e04:	6028      	str	r0, [r5, #0]
 8004e06:	0635      	lsls	r5, r6, #24
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	d501      	bpl.n	8004e10 <_printf_i+0x1cc>
 8004e0c:	6019      	str	r1, [r3, #0]
 8004e0e:	e002      	b.n	8004e16 <_printf_i+0x1d2>
 8004e10:	0670      	lsls	r0, r6, #25
 8004e12:	d5fb      	bpl.n	8004e0c <_printf_i+0x1c8>
 8004e14:	8019      	strh	r1, [r3, #0]
 8004e16:	2300      	movs	r3, #0
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	4615      	mov	r5, r2
 8004e1c:	e7ba      	b.n	8004d94 <_printf_i+0x150>
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	1d1a      	adds	r2, r3, #4
 8004e22:	602a      	str	r2, [r5, #0]
 8004e24:	681d      	ldr	r5, [r3, #0]
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f7fb f9f8 	bl	8000220 <memchr>
 8004e30:	b108      	cbz	r0, 8004e36 <_printf_i+0x1f2>
 8004e32:	1b40      	subs	r0, r0, r5
 8004e34:	6060      	str	r0, [r4, #4]
 8004e36:	6863      	ldr	r3, [r4, #4]
 8004e38:	6123      	str	r3, [r4, #16]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e40:	e7a8      	b.n	8004d94 <_printf_i+0x150>
 8004e42:	6923      	ldr	r3, [r4, #16]
 8004e44:	462a      	mov	r2, r5
 8004e46:	4649      	mov	r1, r9
 8004e48:	4640      	mov	r0, r8
 8004e4a:	47d0      	blx	sl
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d0ab      	beq.n	8004da8 <_printf_i+0x164>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	079b      	lsls	r3, r3, #30
 8004e54:	d413      	bmi.n	8004e7e <_printf_i+0x23a>
 8004e56:	68e0      	ldr	r0, [r4, #12]
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	4298      	cmp	r0, r3
 8004e5c:	bfb8      	it	lt
 8004e5e:	4618      	movlt	r0, r3
 8004e60:	e7a4      	b.n	8004dac <_printf_i+0x168>
 8004e62:	2301      	movs	r3, #1
 8004e64:	4632      	mov	r2, r6
 8004e66:	4649      	mov	r1, r9
 8004e68:	4640      	mov	r0, r8
 8004e6a:	47d0      	blx	sl
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d09b      	beq.n	8004da8 <_printf_i+0x164>
 8004e70:	3501      	adds	r5, #1
 8004e72:	68e3      	ldr	r3, [r4, #12]
 8004e74:	9903      	ldr	r1, [sp, #12]
 8004e76:	1a5b      	subs	r3, r3, r1
 8004e78:	42ab      	cmp	r3, r5
 8004e7a:	dcf2      	bgt.n	8004e62 <_printf_i+0x21e>
 8004e7c:	e7eb      	b.n	8004e56 <_printf_i+0x212>
 8004e7e:	2500      	movs	r5, #0
 8004e80:	f104 0619 	add.w	r6, r4, #25
 8004e84:	e7f5      	b.n	8004e72 <_printf_i+0x22e>
 8004e86:	bf00      	nop
 8004e88:	080052d9 	.word	0x080052d9
 8004e8c:	080052ea 	.word	0x080052ea

08004e90 <memcpy>:
 8004e90:	440a      	add	r2, r1
 8004e92:	4291      	cmp	r1, r2
 8004e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e98:	d100      	bne.n	8004e9c <memcpy+0xc>
 8004e9a:	4770      	bx	lr
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ea6:	4291      	cmp	r1, r2
 8004ea8:	d1f9      	bne.n	8004e9e <memcpy+0xe>
 8004eaa:	bd10      	pop	{r4, pc}

08004eac <memmove>:
 8004eac:	4288      	cmp	r0, r1
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	eb01 0402 	add.w	r4, r1, r2
 8004eb4:	d902      	bls.n	8004ebc <memmove+0x10>
 8004eb6:	4284      	cmp	r4, r0
 8004eb8:	4623      	mov	r3, r4
 8004eba:	d807      	bhi.n	8004ecc <memmove+0x20>
 8004ebc:	1e43      	subs	r3, r0, #1
 8004ebe:	42a1      	cmp	r1, r4
 8004ec0:	d008      	beq.n	8004ed4 <memmove+0x28>
 8004ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eca:	e7f8      	b.n	8004ebe <memmove+0x12>
 8004ecc:	4402      	add	r2, r0
 8004ece:	4601      	mov	r1, r0
 8004ed0:	428a      	cmp	r2, r1
 8004ed2:	d100      	bne.n	8004ed6 <memmove+0x2a>
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ede:	e7f7      	b.n	8004ed0 <memmove+0x24>

08004ee0 <_free_r>:
 8004ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ee2:	2900      	cmp	r1, #0
 8004ee4:	d044      	beq.n	8004f70 <_free_r+0x90>
 8004ee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eea:	9001      	str	r0, [sp, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f1a1 0404 	sub.w	r4, r1, #4
 8004ef2:	bfb8      	it	lt
 8004ef4:	18e4      	addlt	r4, r4, r3
 8004ef6:	f000 f913 	bl	8005120 <__malloc_lock>
 8004efa:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <_free_r+0x94>)
 8004efc:	9801      	ldr	r0, [sp, #4]
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	b933      	cbnz	r3, 8004f10 <_free_r+0x30>
 8004f02:	6063      	str	r3, [r4, #4]
 8004f04:	6014      	str	r4, [r2, #0]
 8004f06:	b003      	add	sp, #12
 8004f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f0c:	f000 b90e 	b.w	800512c <__malloc_unlock>
 8004f10:	42a3      	cmp	r3, r4
 8004f12:	d908      	bls.n	8004f26 <_free_r+0x46>
 8004f14:	6825      	ldr	r5, [r4, #0]
 8004f16:	1961      	adds	r1, r4, r5
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	bf01      	itttt	eq
 8004f1c:	6819      	ldreq	r1, [r3, #0]
 8004f1e:	685b      	ldreq	r3, [r3, #4]
 8004f20:	1949      	addeq	r1, r1, r5
 8004f22:	6021      	streq	r1, [r4, #0]
 8004f24:	e7ed      	b.n	8004f02 <_free_r+0x22>
 8004f26:	461a      	mov	r2, r3
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b10b      	cbz	r3, 8004f30 <_free_r+0x50>
 8004f2c:	42a3      	cmp	r3, r4
 8004f2e:	d9fa      	bls.n	8004f26 <_free_r+0x46>
 8004f30:	6811      	ldr	r1, [r2, #0]
 8004f32:	1855      	adds	r5, r2, r1
 8004f34:	42a5      	cmp	r5, r4
 8004f36:	d10b      	bne.n	8004f50 <_free_r+0x70>
 8004f38:	6824      	ldr	r4, [r4, #0]
 8004f3a:	4421      	add	r1, r4
 8004f3c:	1854      	adds	r4, r2, r1
 8004f3e:	42a3      	cmp	r3, r4
 8004f40:	6011      	str	r1, [r2, #0]
 8004f42:	d1e0      	bne.n	8004f06 <_free_r+0x26>
 8004f44:	681c      	ldr	r4, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	6053      	str	r3, [r2, #4]
 8004f4a:	4421      	add	r1, r4
 8004f4c:	6011      	str	r1, [r2, #0]
 8004f4e:	e7da      	b.n	8004f06 <_free_r+0x26>
 8004f50:	d902      	bls.n	8004f58 <_free_r+0x78>
 8004f52:	230c      	movs	r3, #12
 8004f54:	6003      	str	r3, [r0, #0]
 8004f56:	e7d6      	b.n	8004f06 <_free_r+0x26>
 8004f58:	6825      	ldr	r5, [r4, #0]
 8004f5a:	1961      	adds	r1, r4, r5
 8004f5c:	428b      	cmp	r3, r1
 8004f5e:	bf04      	itt	eq
 8004f60:	6819      	ldreq	r1, [r3, #0]
 8004f62:	685b      	ldreq	r3, [r3, #4]
 8004f64:	6063      	str	r3, [r4, #4]
 8004f66:	bf04      	itt	eq
 8004f68:	1949      	addeq	r1, r1, r5
 8004f6a:	6021      	streq	r1, [r4, #0]
 8004f6c:	6054      	str	r4, [r2, #4]
 8004f6e:	e7ca      	b.n	8004f06 <_free_r+0x26>
 8004f70:	b003      	add	sp, #12
 8004f72:	bd30      	pop	{r4, r5, pc}
 8004f74:	2000043c 	.word	0x2000043c

08004f78 <sbrk_aligned>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	4e0e      	ldr	r6, [pc, #56]	; (8004fb4 <sbrk_aligned+0x3c>)
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	6831      	ldr	r1, [r6, #0]
 8004f80:	4605      	mov	r5, r0
 8004f82:	b911      	cbnz	r1, 8004f8a <sbrk_aligned+0x12>
 8004f84:	f000 f8bc 	bl	8005100 <_sbrk_r>
 8004f88:	6030      	str	r0, [r6, #0]
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f000 f8b7 	bl	8005100 <_sbrk_r>
 8004f92:	1c43      	adds	r3, r0, #1
 8004f94:	d00a      	beq.n	8004fac <sbrk_aligned+0x34>
 8004f96:	1cc4      	adds	r4, r0, #3
 8004f98:	f024 0403 	bic.w	r4, r4, #3
 8004f9c:	42a0      	cmp	r0, r4
 8004f9e:	d007      	beq.n	8004fb0 <sbrk_aligned+0x38>
 8004fa0:	1a21      	subs	r1, r4, r0
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f000 f8ac 	bl	8005100 <_sbrk_r>
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d101      	bne.n	8004fb0 <sbrk_aligned+0x38>
 8004fac:	f04f 34ff 	mov.w	r4, #4294967295
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
 8004fb4:	20000440 	.word	0x20000440

08004fb8 <_malloc_r>:
 8004fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbc:	1ccd      	adds	r5, r1, #3
 8004fbe:	f025 0503 	bic.w	r5, r5, #3
 8004fc2:	3508      	adds	r5, #8
 8004fc4:	2d0c      	cmp	r5, #12
 8004fc6:	bf38      	it	cc
 8004fc8:	250c      	movcc	r5, #12
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	4607      	mov	r7, r0
 8004fce:	db01      	blt.n	8004fd4 <_malloc_r+0x1c>
 8004fd0:	42a9      	cmp	r1, r5
 8004fd2:	d905      	bls.n	8004fe0 <_malloc_r+0x28>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	2600      	movs	r6, #0
 8004fda:	4630      	mov	r0, r6
 8004fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe0:	4e2e      	ldr	r6, [pc, #184]	; (800509c <_malloc_r+0xe4>)
 8004fe2:	f000 f89d 	bl	8005120 <__malloc_lock>
 8004fe6:	6833      	ldr	r3, [r6, #0]
 8004fe8:	461c      	mov	r4, r3
 8004fea:	bb34      	cbnz	r4, 800503a <_malloc_r+0x82>
 8004fec:	4629      	mov	r1, r5
 8004fee:	4638      	mov	r0, r7
 8004ff0:	f7ff ffc2 	bl	8004f78 <sbrk_aligned>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	d14d      	bne.n	8005096 <_malloc_r+0xde>
 8004ffa:	6834      	ldr	r4, [r6, #0]
 8004ffc:	4626      	mov	r6, r4
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	d140      	bne.n	8005084 <_malloc_r+0xcc>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	4631      	mov	r1, r6
 8005006:	4638      	mov	r0, r7
 8005008:	eb04 0803 	add.w	r8, r4, r3
 800500c:	f000 f878 	bl	8005100 <_sbrk_r>
 8005010:	4580      	cmp	r8, r0
 8005012:	d13a      	bne.n	800508a <_malloc_r+0xd2>
 8005014:	6821      	ldr	r1, [r4, #0]
 8005016:	3503      	adds	r5, #3
 8005018:	1a6d      	subs	r5, r5, r1
 800501a:	f025 0503 	bic.w	r5, r5, #3
 800501e:	3508      	adds	r5, #8
 8005020:	2d0c      	cmp	r5, #12
 8005022:	bf38      	it	cc
 8005024:	250c      	movcc	r5, #12
 8005026:	4629      	mov	r1, r5
 8005028:	4638      	mov	r0, r7
 800502a:	f7ff ffa5 	bl	8004f78 <sbrk_aligned>
 800502e:	3001      	adds	r0, #1
 8005030:	d02b      	beq.n	800508a <_malloc_r+0xd2>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	442b      	add	r3, r5
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	e00e      	b.n	8005058 <_malloc_r+0xa0>
 800503a:	6822      	ldr	r2, [r4, #0]
 800503c:	1b52      	subs	r2, r2, r5
 800503e:	d41e      	bmi.n	800507e <_malloc_r+0xc6>
 8005040:	2a0b      	cmp	r2, #11
 8005042:	d916      	bls.n	8005072 <_malloc_r+0xba>
 8005044:	1961      	adds	r1, r4, r5
 8005046:	42a3      	cmp	r3, r4
 8005048:	6025      	str	r5, [r4, #0]
 800504a:	bf18      	it	ne
 800504c:	6059      	strne	r1, [r3, #4]
 800504e:	6863      	ldr	r3, [r4, #4]
 8005050:	bf08      	it	eq
 8005052:	6031      	streq	r1, [r6, #0]
 8005054:	5162      	str	r2, [r4, r5]
 8005056:	604b      	str	r3, [r1, #4]
 8005058:	4638      	mov	r0, r7
 800505a:	f104 060b 	add.w	r6, r4, #11
 800505e:	f000 f865 	bl	800512c <__malloc_unlock>
 8005062:	f026 0607 	bic.w	r6, r6, #7
 8005066:	1d23      	adds	r3, r4, #4
 8005068:	1af2      	subs	r2, r6, r3
 800506a:	d0b6      	beq.n	8004fda <_malloc_r+0x22>
 800506c:	1b9b      	subs	r3, r3, r6
 800506e:	50a3      	str	r3, [r4, r2]
 8005070:	e7b3      	b.n	8004fda <_malloc_r+0x22>
 8005072:	6862      	ldr	r2, [r4, #4]
 8005074:	42a3      	cmp	r3, r4
 8005076:	bf0c      	ite	eq
 8005078:	6032      	streq	r2, [r6, #0]
 800507a:	605a      	strne	r2, [r3, #4]
 800507c:	e7ec      	b.n	8005058 <_malloc_r+0xa0>
 800507e:	4623      	mov	r3, r4
 8005080:	6864      	ldr	r4, [r4, #4]
 8005082:	e7b2      	b.n	8004fea <_malloc_r+0x32>
 8005084:	4634      	mov	r4, r6
 8005086:	6876      	ldr	r6, [r6, #4]
 8005088:	e7b9      	b.n	8004ffe <_malloc_r+0x46>
 800508a:	230c      	movs	r3, #12
 800508c:	603b      	str	r3, [r7, #0]
 800508e:	4638      	mov	r0, r7
 8005090:	f000 f84c 	bl	800512c <__malloc_unlock>
 8005094:	e7a1      	b.n	8004fda <_malloc_r+0x22>
 8005096:	6025      	str	r5, [r4, #0]
 8005098:	e7de      	b.n	8005058 <_malloc_r+0xa0>
 800509a:	bf00      	nop
 800509c:	2000043c 	.word	0x2000043c

080050a0 <_realloc_r>:
 80050a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a4:	4680      	mov	r8, r0
 80050a6:	4614      	mov	r4, r2
 80050a8:	460e      	mov	r6, r1
 80050aa:	b921      	cbnz	r1, 80050b6 <_realloc_r+0x16>
 80050ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b0:	4611      	mov	r1, r2
 80050b2:	f7ff bf81 	b.w	8004fb8 <_malloc_r>
 80050b6:	b92a      	cbnz	r2, 80050c4 <_realloc_r+0x24>
 80050b8:	f7ff ff12 	bl	8004ee0 <_free_r>
 80050bc:	4625      	mov	r5, r4
 80050be:	4628      	mov	r0, r5
 80050c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c4:	f000 f838 	bl	8005138 <_malloc_usable_size_r>
 80050c8:	4284      	cmp	r4, r0
 80050ca:	4607      	mov	r7, r0
 80050cc:	d802      	bhi.n	80050d4 <_realloc_r+0x34>
 80050ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050d2:	d812      	bhi.n	80050fa <_realloc_r+0x5a>
 80050d4:	4621      	mov	r1, r4
 80050d6:	4640      	mov	r0, r8
 80050d8:	f7ff ff6e 	bl	8004fb8 <_malloc_r>
 80050dc:	4605      	mov	r5, r0
 80050de:	2800      	cmp	r0, #0
 80050e0:	d0ed      	beq.n	80050be <_realloc_r+0x1e>
 80050e2:	42bc      	cmp	r4, r7
 80050e4:	4622      	mov	r2, r4
 80050e6:	4631      	mov	r1, r6
 80050e8:	bf28      	it	cs
 80050ea:	463a      	movcs	r2, r7
 80050ec:	f7ff fed0 	bl	8004e90 <memcpy>
 80050f0:	4631      	mov	r1, r6
 80050f2:	4640      	mov	r0, r8
 80050f4:	f7ff fef4 	bl	8004ee0 <_free_r>
 80050f8:	e7e1      	b.n	80050be <_realloc_r+0x1e>
 80050fa:	4635      	mov	r5, r6
 80050fc:	e7df      	b.n	80050be <_realloc_r+0x1e>
	...

08005100 <_sbrk_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4d06      	ldr	r5, [pc, #24]	; (800511c <_sbrk_r+0x1c>)
 8005104:	2300      	movs	r3, #0
 8005106:	4604      	mov	r4, r0
 8005108:	4608      	mov	r0, r1
 800510a:	602b      	str	r3, [r5, #0]
 800510c:	f7fb ff12 	bl	8000f34 <_sbrk>
 8005110:	1c43      	adds	r3, r0, #1
 8005112:	d102      	bne.n	800511a <_sbrk_r+0x1a>
 8005114:	682b      	ldr	r3, [r5, #0]
 8005116:	b103      	cbz	r3, 800511a <_sbrk_r+0x1a>
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	bd38      	pop	{r3, r4, r5, pc}
 800511c:	20000444 	.word	0x20000444

08005120 <__malloc_lock>:
 8005120:	4801      	ldr	r0, [pc, #4]	; (8005128 <__malloc_lock+0x8>)
 8005122:	f000 b811 	b.w	8005148 <__retarget_lock_acquire_recursive>
 8005126:	bf00      	nop
 8005128:	20000448 	.word	0x20000448

0800512c <__malloc_unlock>:
 800512c:	4801      	ldr	r0, [pc, #4]	; (8005134 <__malloc_unlock+0x8>)
 800512e:	f000 b80c 	b.w	800514a <__retarget_lock_release_recursive>
 8005132:	bf00      	nop
 8005134:	20000448 	.word	0x20000448

08005138 <_malloc_usable_size_r>:
 8005138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800513c:	1f18      	subs	r0, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	bfbc      	itt	lt
 8005142:	580b      	ldrlt	r3, [r1, r0]
 8005144:	18c0      	addlt	r0, r0, r3
 8005146:	4770      	bx	lr

08005148 <__retarget_lock_acquire_recursive>:
 8005148:	4770      	bx	lr

0800514a <__retarget_lock_release_recursive>:
 800514a:	4770      	bx	lr

0800514c <_init>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	bf00      	nop
 8005150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005152:	bc08      	pop	{r3}
 8005154:	469e      	mov	lr, r3
 8005156:	4770      	bx	lr

08005158 <_fini>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	bf00      	nop
 800515c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800515e:	bc08      	pop	{r3}
 8005160:	469e      	mov	lr, r3
 8005162:	4770      	bx	lr
